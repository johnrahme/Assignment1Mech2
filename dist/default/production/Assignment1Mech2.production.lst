

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Apr 02 16:54:36 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0013                     	;# 
   114  0014                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  0081                     	;# 
   129  0085                     	;# 
   130  0086                     	;# 
   131  0087                     	;# 
   132  0088                     	;# 
   133  0089                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0088                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  009F                     	;# 
   267  010C                     	;# 
   268  010D                     	;# 
   269  010E                     	;# 
   270  010F                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273                           
   274                           	psect	idataBANK1
   275  06A5                     __pidataBANK1:	
   276                           
   277                           ;initializer for _halfSteps
   278  06A5  343C               	retlw	60
   279  06A6  3400               	retlw	0
   280  06A7  342E               	retlw	46
   281  06A8  3400               	retlw	0
   282  06A9  342B               	retlw	43
   283  06AA  3400               	retlw	0
   284  06AB  3427               	retlw	39
   285  06AC  3400               	retlw	0
   286  06AD  3435               	retlw	53
   287  06AE  3400               	retlw	0
   288  06AF  3417               	retlw	23
   289  06B0  3400               	retlw	0
   290  06B1  341B               	retlw	27
   291  06B2  3400               	retlw	0
   292  06B3  341E               	retlw	30
   293  06B4  3400               	retlw	0
   294                           
   295                           ;initializer for _wholeSteps
   296  06B5  343C               	retlw	60
   297  06B6  3400               	retlw	0
   298  06B7  342B               	retlw	43
   299  06B8  3400               	retlw	0
   300  06B9  3435               	retlw	53
   301  06BA  3400               	retlw	0
   302  06BB  341B               	retlw	27
   303  06BC  3400               	retlw	0
   304  001F                     _ADCON0	set	31
   305  001E                     _ADRESH	set	30
   306  0007                     _PORTC	set	7
   307  0001                     _TMR0	set	1
   308  0066                     _ADIF	set	102
   309  005F                     _GIE	set	95
   310  00FA                     _GO	set	250
   311  005E                     _PEIE	set	94
   312  0030                     _RB0	set	48
   313  0031                     _RB1	set	49
   314  0032                     _RB2	set	50
   315  0033                     _RB3	set	51
   316  0034                     _RB4	set	52
   317  005A                     _T0IF	set	90
   318  005D                     _TMR0IE	set	93
   319  009F                     _ADCON1	set	159
   320  009E                     _ADRESL	set	158
   321  0086                     _TRISB	set	134
   322  0087                     _TRISC	set	135
   323  0466                     _ADIE	set	1126
   324  0408                     _PS0	set	1032
   325  0409                     _PS1	set	1033
   326  040A                     _PS2	set	1034
   327  040B                     _PSA	set	1035
   328  040D                     _T0CS	set	1037
   329  040C                     _T0SE	set	1036
   330                           
   331                           ; #config settings
   332  0000                     
   333                           	psect	cinit
   334  0015                     start_initialization:	
   335  0015                     __initialization:	
   336                           
   337                           ; Clear objects allocated to BITCOMMON
   338  0015  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   339                           
   340                           ; Clear objects allocated to COMMON
   341  0016  01FA               	clrf	__pbssCOMMON& (0+127)
   342  0017  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   343  0018  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   344  0019  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   345                           
   346                           ; Clear objects allocated to BANK1
   347  001A  1683               	bsf	3,5	;RP0=1, select bank1
   348  001B  1303               	bcf	3,6	;RP1=0, select bank1
   349  001C  01C5               	clrf	__pbssBANK1& (0+127)
   350  001D  01C6               	clrf	(__pbssBANK1+1)& (0+127)
   351                           
   352                           ; Initialize objects allocated to BANK1
   353  001E  1383               	bcf	3,7	;select IRP bank0
   354  001F  30B8               	movlw	low (__pdataBANK1+24)
   355  0020  00FD               	movwf	btemp+-1
   356  0021  3006               	movlw	high __pidataBANK1
   357  0022  00FE               	movwf	btemp
   358  0023  30A5               	movlw	low __pidataBANK1
   359  0024  00FF               	movwf	btemp+1
   360  0025  30A0               	movlw	low __pdataBANK1
   361  0026  0084               	movwf	4
   362  0027  120A  118A  26D7   	fcall	init_ram0
   363  002A                     end_of_initialization:	
   364                           ;End of C runtime variable initialization code
   365                           
   366  002A                     __end_of__initialization:	
   367  002A  0183               	clrf	3
   368  002B  120A  118A  2D51   	ljmp	_main	;jump to C main() function
   369                           
   370                           	psect	bitbssCOMMON
   371  03C8                     __pbitbssCOMMON:	
   372  03C8                     _motorToggle:	
   373  03C8                     	ds	1
   374  03C9                     _pb0Pressed:	
   375  03C9                     	ds	1
   376  03CA                     _pb0Released:	
   377  03CA                     	ds	1
   378  03CB                     _pb1Pressed:	
   379  03CB                     	ds	1
   380  03CC                     _pb1Released:	
   381  03CC                     	ds	1
   382  03CD                     _pb2Pressed:	
   383  03CD                     	ds	1
   384  03CE                     _pb2Released:	
   385  03CE                     	ds	1
   386                           
   387                           	psect	bssCOMMON
   388  007A                     __pbssCOMMON:	
   389  007A                     _cstep:	
   390  007A                     	ds	1
   391  007B                     _rtcCounter:	
   392  007B                     	ds	1
   393  007C                     _rtcCounter2:	
   394  007C                     	ds	1
   395  007D                     _rtcCounter3:	
   396  007D                     	ds	1
   397                           
   398                           	psect	bssBANK1
   399  00C5                     __pbssBANK1:	
   400  00C5                     _errno:	
   401  00C5                     	ds	2
   402                           
   403                           	psect	dataBANK1
   404  00A0                     __pdataBANK1:	
   405  00A0                     _halfSteps:	
   406  00A0                     	ds	16
   407  00B0                     _wholeSteps:	
   408  00B0                     	ds	8
   409                           
   410                           	psect	inittext
   411  06D3                     init_fetch0:	
   412                           ;	Called with low address in FSR and high address in W
   413                           
   414  06D3  087E               	movf	126,w
   415  06D4  008A               	movwf	10
   416  06D5  087F               	movf	127,w
   417  06D6  0082               	movwf	2
   418  06D7                     init_ram0:	
   419                           ;Called with:
   420                           ;	high address of idata address in btemp 
   421                           ;	low address of idata address in btemp+1 
   422                           ;	low address of data in FSR
   423                           ;	high address + 1 of data in btemp-1
   424                           
   425  06D7  26D3  120A  118A   	fcall	init_fetch0
   426  06DA  0080               	movwf	0
   427  06DB  0A84               	incf	4,f
   428  06DC  0804               	movf	4,w
   429  06DD  067D               	xorwf	125,w
   430  06DE  1903               	btfsc	3,2
   431  06DF  3400               	retlw	0
   432  06E0  0AFF               	incf	127,f
   433  06E1  1903               	btfsc	3,2
   434  06E2  0AFE               	incf	126,f
   435  06E3  2ED7               	goto	init_ram0
   436                           
   437                           	psect	cstackBANK1
   438  00B8                     __pcstackBANK1:	
   439  00B8                     ??_moveDeg:	
   440                           
   441                           ; 1 bytes @ 0x0
   442  00B8                     	ds	1
   443  00B9                     _moveDeg$553:	
   444                           
   445                           ; 3 bytes @ 0x1
   446  00B9                     	ds	3
   447  00BC                     _moveDeg$554:	
   448                           
   449                           ; 3 bytes @ 0x4
   450  00BC                     	ds	3
   451  00BF                     _moveDeg$555:	
   452                           
   453                           ; 3 bytes @ 0x7
   454  00BF                     	ds	3
   455  00C2                     moveDeg@stepsToMove:	
   456                           
   457                           ; 1 bytes @ 0xA
   458  00C2                     	ds	1
   459  00C3                     ??_main:	
   460                           
   461                           ; 1 bytes @ 0xB
   462  00C3                     	ds	2
   463                           
   464                           	psect	cstackCOMMON
   465  0070                     __pcstackCOMMON:	
   466  0070                     ?_debounceButtons:	
   467  0070                     ??_debounceButtons:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_initializeADC:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_isr:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_initialise:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_main:	
   480                           ; 1 bytes @ 0x0
   481                           
   482                           
   483                           ; 1 bytes @ 0x0
   484  0070                     	ds	1
   485  0071                     ??_isr:	
   486                           
   487                           ; 1 bytes @ 0x1
   488  0071                     	ds	6
   489  0077                     isr@ADCResult:	
   490                           
   491                           ; 2 bytes @ 0x7
   492  0077                     	ds	2
   493                           
   494                           	psect	cstackBANK0
   495  0020                     __pcstackBANK0:	
   496  0020                     ?___ftge:	
   497  0020                     ??_initializeADC:	
   498                           ; 1 bit 
   499                           
   500  0020                     ?_move:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0020                     ??_initialise:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0020                     ?___ftpack:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0020                     ?_frexp:	
   510                           ; 3 bytes @ 0x0
   511                           
   512  0020                     move@direction:	
   513                           ; 3 bytes @ 0x0
   514                           
   515  0020                     ___ftpack@arg:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0020                     ___ftge@ff1:	
   519                           ; 3 bytes @ 0x0
   520                           
   521  0020                     frexp@value:	
   522                           ; 3 bytes @ 0x0
   523                           
   524                           
   525                           ; 3 bytes @ 0x0
   526  0020                     	ds	1
   527  0021                     ??_move:	
   528                           
   529                           ; 1 bytes @ 0x1
   530  0021                     	ds	2
   531  0023                     move@steps:	
   532  0023                     ___ftpack@exp:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0023                     frexp@eptr:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0023                     ___ftge@ff2:	
   539                           ; 1 bytes @ 0x3
   540                           
   541                           
   542                           ; 3 bytes @ 0x3
   543  0023                     	ds	1
   544  0024                     ??_frexp:	
   545  0024                     move@i:	
   546                           ; 1 bytes @ 0x4
   547                           
   548  0024                     ___ftpack@sign:	
   549                           ; 1 bytes @ 0x4
   550                           
   551                           
   552                           ; 1 bytes @ 0x4
   553  0024                     	ds	1
   554  0025                     ??___ftpack:	
   555                           
   556                           ; 1 bytes @ 0x5
   557  0025                     	ds	1
   558  0026                     ??___ftge:	
   559                           
   560                           ; 1 bytes @ 0x6
   561  0026                     	ds	2
   562  0028                     ?___altoft:	
   563  0028                     ___altoft@c:	
   564                           ; 3 bytes @ 0x8
   565                           
   566                           
   567                           ; 4 bytes @ 0x8
   568  0028                     	ds	4
   569  002C                     ??___altoft:	
   570                           
   571                           ; 1 bytes @ 0xC
   572  002C                     	ds	2
   573  002E                     ___altoft@exp:	
   574                           
   575                           ; 1 bytes @ 0xE
   576  002E                     	ds	1
   577  002F                     ___altoft@sign:	
   578                           
   579                           ; 1 bytes @ 0xF
   580  002F                     	ds	1
   581  0030                     ?___ftneg:	
   582  0030                     ___ftneg@f1:	
   583                           ; 3 bytes @ 0x10
   584                           
   585                           
   586                           ; 3 bytes @ 0x10
   587  0030                     	ds	3
   588  0033                     ??___ftneg:	
   589  0033                     ?___ftdiv:	
   590                           ; 1 bytes @ 0x13
   591                           
   592  0033                     ___ftdiv@f2:	
   593                           ; 3 bytes @ 0x13
   594                           
   595                           
   596                           ; 3 bytes @ 0x13
   597  0033                     	ds	3
   598  0036                     ___ftdiv@f1:	
   599                           
   600                           ; 3 bytes @ 0x16
   601  0036                     	ds	3
   602  0039                     ??___ftdiv:	
   603                           
   604                           ; 1 bytes @ 0x19
   605  0039                     	ds	4
   606  003D                     ___ftdiv@cntr:	
   607                           
   608                           ; 1 bytes @ 0x1D
   609  003D                     	ds	1
   610  003E                     ___ftdiv@f3:	
   611                           
   612                           ; 3 bytes @ 0x1E
   613  003E                     	ds	3
   614  0041                     ___ftdiv@exp:	
   615                           
   616                           ; 1 bytes @ 0x21
   617  0041                     	ds	1
   618  0042                     ___ftdiv@sign:	
   619                           
   620                           ; 1 bytes @ 0x22
   621  0042                     	ds	1
   622  0043                     ?___fttol:	
   623  0043                     ___fttol@f1:	
   624                           ; 4 bytes @ 0x23
   625                           
   626                           
   627                           ; 3 bytes @ 0x23
   628  0043                     	ds	4
   629  0047                     ??___fttol:	
   630                           
   631                           ; 1 bytes @ 0x27
   632  0047                     	ds	4
   633  004B                     ___fttol@sign1:	
   634                           
   635                           ; 1 bytes @ 0x2B
   636  004B                     	ds	1
   637  004C                     ___fttol@lval:	
   638                           
   639                           ; 4 bytes @ 0x2C
   640  004C                     	ds	4
   641  0050                     ___fttol@exp1:	
   642                           
   643                           ; 1 bytes @ 0x30
   644  0050                     	ds	1
   645  0051                     ?_trunc:	
   646  0051                     trunc@x:	
   647                           ; 3 bytes @ 0x31
   648                           
   649                           
   650                           ; 3 bytes @ 0x31
   651  0051                     	ds	3
   652  0054                     ??_trunc:	
   653                           
   654                           ; 1 bytes @ 0x34
   655  0054                     	ds	1
   656  0055                     trunc@i:	
   657                           
   658                           ; 3 bytes @ 0x35
   659  0055                     	ds	3
   660  0058                     trunc@expon:	
   661                           
   662                           ; 2 bytes @ 0x38
   663  0058                     	ds	2
   664  005A                     ?___ftadd:	
   665  005A                     ___ftadd@f1:	
   666                           ; 3 bytes @ 0x3A
   667                           
   668                           
   669                           ; 3 bytes @ 0x3A
   670  005A                     	ds	3
   671  005D                     ___ftadd@f2:	
   672                           
   673                           ; 3 bytes @ 0x3D
   674  005D                     	ds	3
   675  0060                     ??___ftadd:	
   676                           
   677                           ; 1 bytes @ 0x40
   678  0060                     	ds	4
   679  0064                     ___ftadd@sign:	
   680                           
   681                           ; 1 bytes @ 0x44
   682  0064                     	ds	1
   683  0065                     ___ftadd@exp2:	
   684                           
   685                           ; 1 bytes @ 0x45
   686  0065                     	ds	1
   687  0066                     ___ftadd@exp1:	
   688                           
   689                           ; 1 bytes @ 0x46
   690  0066                     	ds	1
   691  0067                     ?_round:	
   692  0067                     round@x:	
   693                           ; 3 bytes @ 0x47
   694                           
   695                           
   696                           ; 3 bytes @ 0x47
   697  0067                     	ds	3
   698  006A                     ??_round:	
   699  006A                     round@f:	
   700                           ; 1 bytes @ 0x4A
   701                           
   702                           
   703                           ; 3 bytes @ 0x4A
   704  006A                     	ds	3
   705  006D                     ?_moveDeg:	
   706  006D                     moveDeg@deg:	
   707                           ; 1 bytes @ 0x4D
   708                           
   709                           
   710                           ; 3 bytes @ 0x4D
   711  006D                     	ds	3
   712                           
   713                           	psect	maintext
   714  0551                     __pmaintext:	
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 66 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;		None
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : B00/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         0       0       0       0       0
   736 ;;      Temps:          0       0       2       0       0
   737 ;;      Totals:         0       0       2       0       0
   738 ;;Total ram usage:        2 bytes
   739 ;; Hardware stack levels required when called:    7
   740 ;; This function calls:
   741 ;;		_initialise
   742 ;;		_initializeADC
   743 ;;		_move
   744 ;;		_moveDeg
   745 ;; This function is called by:
   746 ;;		Startup code after reset
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           
   751                           ;psect for function _main
   752  0551                     _main:	
   753                           
   754                           ;main.c: 68: initialise();
   755                           
   756                           ;incstack = 0
   757                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   758  0551  120A  118A  26BD  120A  118A  	fcall	_initialise
   759                           
   760                           ;main.c: 69: initializeADC();
   761  0556  120A  118A  26E4  120A  118A  	fcall	_initializeADC
   762                           
   763                           ;main.c: 72: _delay((unsigned long)((1)*(20000000/4000.0)));
   764  055B  3007               	movlw	7
   765  055C  1683               	bsf	3,5	;RP0=1, select bank1
   766  055D  1303               	bcf	3,6	;RP1=0, select bank1
   767  055E  00C4               	movwf	(??_main^(0+128)+1)
   768  055F  307D               	movlw	125
   769  0560  00C3               	movwf	??_main^(0+128)
   770  0561                     u1757:	
   771  0561  0BC3               	decfsz	??_main^(0+128),f
   772  0562  2D61               	goto	u1757
   773  0563  0BC4               	decfsz	(??_main^(0+128)+1),f
   774  0564  2D61               	goto	u1757
   775                           
   776                           ;main.c: 74: GO = 1;
   777  0565  1283               	bcf	3,5	;RP0=0, select bank0
   778  0566  1303               	bcf	3,6	;RP1=0, select bank0
   779  0567  151F               	bsf	31,2	;volatile
   780  0568                     l1522:	
   781                           ;main.c: 77: while(1){
   782                           
   783                           
   784                           ;main.c: 81: if(pb0Pressed){
   785  0568  1CF9               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   786  0569  2D74               	goto	l1528
   787                           
   788                           ;main.c: 82: move(1,0);
   789  056A  1283               	bcf	3,5	;RP0=0, select bank0
   790  056B  1303               	bcf	3,6	;RP1=0, select bank0
   791  056C  01A0               	clrf	move@direction
   792  056D  3001               	movlw	1
   793  056E  120A  118A  243A  120A  118A  	fcall	_move
   794                           
   795                           ;main.c: 83: pb0Pressed = 0;
   796  0573  10F9               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   797  0574                     l1528:	
   798                           
   799                           ;main.c: 84: }
   800                           ;main.c: 85: if(pb1Pressed){
   801  0574  1DF9               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   802  0575  2D81               	goto	l1534
   803                           
   804                           ;main.c: 86: move(1,1);
   805  0576  1283               	bcf	3,5	;RP0=0, select bank0
   806  0577  1303               	bcf	3,6	;RP1=0, select bank0
   807  0578  01A0               	clrf	move@direction
   808  0579  0AA0               	incf	move@direction,f
   809  057A  3001               	movlw	1
   810  057B  120A  118A  243A  120A  118A  	fcall	_move
   811                           
   812                           ;main.c: 87: pb1Pressed = 0;
   813  0580  11F9               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   814  0581                     l1534:	
   815                           
   816                           ;main.c: 88: }
   817                           ;main.c: 89: if(pb2Pressed){
   818  0581  1EF9               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   819  0582  2D9D               	goto	l1546
   820                           
   821                           ;main.c: 90: if(motorToggle){
   822  0583  1C79               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
   823  0584  2D8D               	goto	l1540
   824                           
   825                           ;main.c: 91: moveDeg(-180);
   826  0585  3000               	movlw	0
   827  0586  1283               	bcf	3,5	;RP0=0, select bank0
   828  0587  1303               	bcf	3,6	;RP1=0, select bank0
   829  0588  00ED               	movwf	moveDeg@deg
   830  0589  3034               	movlw	52
   831  058A  00EE               	movwf	moveDeg@deg+1
   832  058B  30C3               	movlw	195
   833  058C  2D94               	goto	L1
   834  058D                     l1540:	
   835                           ;main.c: 92: }
   836                           
   837                           
   838                           ;main.c: 93: else{
   839                           ;main.c: 94: moveDeg(180);
   840  058D  3000               	movlw	0
   841  058E  1283               	bcf	3,5	;RP0=0, select bank0
   842  058F  1303               	bcf	3,6	;RP1=0, select bank0
   843  0590  00ED               	movwf	moveDeg@deg
   844  0591  3034               	movlw	52
   845  0592  00EE               	movwf	moveDeg@deg+1
   846  0593  3043               	movlw	67
   847  0594                     L1:	
   848  0594  00EF               	movwf	moveDeg@deg+2
   849  0595  120A  118A  2137  120A  118A  	fcall	_moveDeg
   850                           
   851                           ;main.c: 95: }
   852                           ;main.c: 96: motorToggle = !motorToggle;
   853  059A  3001               	movlw	(0+1) shl (_motorToggle& (0+7))
   854  059B  06F9               	xorwf	_motorToggle/(0+8),f
   855                           
   856                           ;main.c: 97: pb2Pressed = 0;
   857  059C  12F9               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   858  059D                     l1546:	
   859                           
   860                           ;main.c: 98: }
   861                           ;main.c: 99: _delay((unsigned long)((20)*(20000000/4000.0)));
   862  059D  3082               	movlw	130
   863  059E  1683               	bsf	3,5	;RP0=1, select bank1
   864  059F  1303               	bcf	3,6	;RP1=0, select bank1
   865  05A0  00C4               	movwf	(??_main^(0+128)+1)
   866  05A1  30DD               	movlw	221
   867  05A2  00C3               	movwf	??_main^(0+128)
   868  05A3                     u1767:	
   869  05A3  0BC3               	decfsz	??_main^(0+128),f
   870  05A4  2DA3               	goto	u1767
   871  05A5  0BC4               	decfsz	(??_main^(0+128)+1),f
   872  05A6  2DA3               	goto	u1767
   873  05A7  2DA8               	nop2
   874  05A8  2D68               	goto	l1522
   875  05A9                     __end_of_main:	
   876                           
   877                           	psect	text1
   878  0137                     __ptext1:	
   879 ;; *************** function _moveDeg *****************
   880 ;; Defined at:
   881 ;;		line 46 in file "motor.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  deg             3   77[BANK0 ] void 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   895 ;;      Params:         0       3       0       0       0
   896 ;;      Locals:         0       0      10       0       0
   897 ;;      Temps:          0       0       1       0       0
   898 ;;      Totals:         0       3      11       0       0
   899 ;;Total ram usage:       14 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    6
   902 ;; This function calls:
   903 ;;		___ftdiv
   904 ;;		___ftge
   905 ;;		___ftneg
   906 ;;		___fttol
   907 ;;		_move
   908 ;;		_round
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           
   915                           ;psect for function _moveDeg
   916  0137                     _moveDeg:	
   917                           
   918                           ;motor.c: 47: char stepsToMove;
   919                           ;motor.c: 48: if(deg<0){
   920                           
   921                           ;incstack = 0
   922                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   923  0137  1283               	bcf	3,5	;RP0=0, select bank0
   924  0138  1303               	bcf	3,6	;RP1=0, select bank0
   925  0139  086D               	movf	moveDeg@deg,w
   926  013A  00A0               	movwf	___ftge@ff1
   927  013B  086E               	movf	moveDeg@deg+1,w
   928  013C  00A1               	movwf	___ftge@ff1+1
   929  013D  086F               	movf	moveDeg@deg+2,w
   930  013E  00A2               	movwf	___ftge@ff1+2
   931  013F  3000               	movlw	0
   932  0140  00A3               	movwf	___ftge@ff2
   933  0141  3000               	movlw	0
   934  0142  00A4               	movwf	___ftge@ff2+1
   935  0143  3000               	movlw	0
   936  0144  00A5               	movwf	___ftge@ff2+2
   937  0145  120A  118A  2499  120A  118A  	fcall	___ftge
   938  014A  1803               	btfsc	3,0
   939  014B  29CC               	goto	l1510
   940                           
   941                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
   942  014C  1283               	bcf	3,5	;RP0=0, select bank0
   943  014D  1303               	bcf	3,6	;RP1=0, select bank0
   944  014E  086D               	movf	moveDeg@deg,w
   945  014F  00B0               	movwf	___ftneg@f1
   946  0150  086E               	movf	moveDeg@deg+1,w
   947  0151  00B1               	movwf	___ftneg@f1+1
   948  0152  086F               	movf	moveDeg@deg+2,w
   949  0153  00B2               	movwf	___ftneg@f1+2
   950  0154  120A  118A  26F3  120A  118A  	fcall	___ftneg
   951  0159  1283               	bcf	3,5	;RP0=0, select bank0
   952  015A  1303               	bcf	3,6	;RP1=0, select bank0
   953  015B  0830               	movf	?___ftneg,w
   954  015C  00B6               	movwf	___ftdiv@f1
   955  015D  0831               	movf	?___ftneg+1,w
   956  015E  00B7               	movwf	___ftdiv@f1+1
   957  015F  0832               	movf	?___ftneg+2,w
   958  0160  00B8               	movwf	___ftdiv@f1+2
   959  0161  3000               	movlw	0
   960  0162  00B3               	movwf	___ftdiv@f2
   961  0163  3070               	movlw	112
   962  0164  00B4               	movwf	___ftdiv@f2+1
   963  0165  3040               	movlw	64
   964  0166  00B5               	movwf	___ftdiv@f2+2
   965  0167  120A  118A  2226  120A  118A  	fcall	___ftdiv
   966  016C  1283               	bcf	3,5	;RP0=0, select bank0
   967  016D  1303               	bcf	3,6	;RP1=0, select bank0
   968  016E  0833               	movf	?___ftdiv,w
   969  016F  1683               	bsf	3,5	;RP0=1, select bank1
   970  0170  1303               	bcf	3,6	;RP1=0, select bank1
   971  0171  00B9               	movwf	_moveDeg$553^(0+128)
   972  0172  1283               	bcf	3,5	;RP0=0, select bank0
   973  0173  1303               	bcf	3,6	;RP1=0, select bank0
   974  0174  0834               	movf	?___ftdiv+1,w
   975  0175  1683               	bsf	3,5	;RP0=1, select bank1
   976  0176  1303               	bcf	3,6	;RP1=0, select bank1
   977  0177  00BA               	movwf	(_moveDeg$553+1)^(0+128)
   978  0178  1283               	bcf	3,5	;RP0=0, select bank0
   979  0179  1303               	bcf	3,6	;RP1=0, select bank0
   980  017A  0835               	movf	?___ftdiv+2,w
   981  017B  1683               	bsf	3,5	;RP0=1, select bank1
   982  017C  1303               	bcf	3,6	;RP1=0, select bank1
   983  017D  00BB               	movwf	(_moveDeg$553+2)^(0+128)
   984                           
   985                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
   986  017E  0839               	movf	_moveDeg$553^(0+128),w
   987  017F  1283               	bcf	3,5	;RP0=0, select bank0
   988  0180  1303               	bcf	3,6	;RP1=0, select bank0
   989  0181  00E7               	movwf	round@x
   990  0182  1683               	bsf	3,5	;RP0=1, select bank1
   991  0183  1303               	bcf	3,6	;RP1=0, select bank1
   992  0184  083A               	movf	(_moveDeg$553+1)^(0+128),w
   993  0185  1283               	bcf	3,5	;RP0=0, select bank0
   994  0186  1303               	bcf	3,6	;RP1=0, select bank0
   995  0187  00E8               	movwf	round@x+1
   996  0188  1683               	bsf	3,5	;RP0=1, select bank1
   997  0189  1303               	bcf	3,6	;RP1=0, select bank1
   998  018A  083B               	movf	(_moveDeg$553+2)^(0+128),w
   999  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1000  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1001  018D  00E9               	movwf	round@x+2
  1002  018E  120A  118A  23DA  120A  118A  	fcall	_round
  1003  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1004  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1005  0195  0867               	movf	?_round,w
  1006  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1007  0197  1303               	bcf	3,6	;RP1=0, select bank1
  1008  0198  00BC               	movwf	_moveDeg$554^(0+128)
  1009  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1010  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1011  019B  0868               	movf	?_round+1,w
  1012  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1013  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1014  019E  00BD               	movwf	(_moveDeg$554+1)^(0+128)
  1015  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1016  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1017  01A1  0869               	movf	?_round+2,w
  1018  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1019  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1020  01A4  00BE               	movwf	(_moveDeg$554+2)^(0+128)
  1021                           
  1022                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1023  01A5  083C               	movf	_moveDeg$554^(0+128),w
  1024  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1025  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1026  01A8  00C3               	movwf	___fttol@f1
  1027  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1028  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  1029  01AB  083D               	movf	(_moveDeg$554+1)^(0+128),w
  1030  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1031  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1032  01AE  00C4               	movwf	___fttol@f1+1
  1033  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1034  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1035  01B1  083E               	movf	(_moveDeg$554+2)^(0+128),w
  1036  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1037  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1038  01B4  00C5               	movwf	___fttol@f1+2
  1039  01B5  120A  118A  22DE  120A  118A  	fcall	___fttol
  1040  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1041  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1042  01BC  0843               	movf	?___fttol,w
  1043  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1044  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1045  01BF  00B8               	movwf	??_moveDeg^(0+128)
  1046  01C0  0838               	movf	??_moveDeg^(0+128),w
  1047  01C1  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1048                           
  1049                           ;motor.c: 50: move(stepsToMove,0);
  1050  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1051  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1052  01C4  01A0               	clrf	move@direction
  1053  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  1054  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  1055  01C7  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1056  01C8  120A  118A  243A   	fcall	_move
  1057                           
  1058                           ;motor.c: 51: }
  1059  01CB  0008               	return
  1060  01CC                     l1510:	
  1061                           
  1062                           ;motor.c: 52: else{
  1063                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1064  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1065  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1066  01CE  086D               	movf	moveDeg@deg,w
  1067  01CF  00B6               	movwf	___ftdiv@f1
  1068  01D0  086E               	movf	moveDeg@deg+1,w
  1069  01D1  00B7               	movwf	___ftdiv@f1+1
  1070  01D2  086F               	movf	moveDeg@deg+2,w
  1071  01D3  00B8               	movwf	___ftdiv@f1+2
  1072  01D4  3000               	movlw	0
  1073  01D5  00B3               	movwf	___ftdiv@f2
  1074  01D6  3070               	movlw	112
  1075  01D7  00B4               	movwf	___ftdiv@f2+1
  1076  01D8  3040               	movlw	64
  1077  01D9  00B5               	movwf	___ftdiv@f2+2
  1078  01DA  120A  118A  2226  120A  118A  	fcall	___ftdiv
  1079  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1080  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1081  01E1  0833               	movf	?___ftdiv,w
  1082  01E2  00E7               	movwf	round@x
  1083  01E3  0834               	movf	?___ftdiv+1,w
  1084  01E4  00E8               	movwf	round@x+1
  1085  01E5  0835               	movf	?___ftdiv+2,w
  1086  01E6  00E9               	movwf	round@x+2
  1087  01E7  120A  118A  23DA  120A  118A  	fcall	_round
  1088  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1089  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1090  01EE  0867               	movf	?_round,w
  1091  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  1092  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  1093  01F1  00BF               	movwf	_moveDeg$555^(0+128)
  1094  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1095  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1096  01F4  0868               	movf	?_round+1,w
  1097  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1098  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1099  01F7  00C0               	movwf	(_moveDeg$555+1)^(0+128)
  1100  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1101  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1102  01FA  0869               	movf	?_round+2,w
  1103  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1104  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1105  01FD  00C1               	movwf	(_moveDeg$555+2)^(0+128)
  1106                           
  1107                           ;motor.c: 52: else{
  1108                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1109  01FE  083F               	movf	_moveDeg$555^(0+128),w
  1110  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0201  00C3               	movwf	___fttol@f1
  1113  0202  1683               	bsf	3,5	;RP0=1, select bank1
  1114  0203  1303               	bcf	3,6	;RP1=0, select bank1
  1115  0204  0840               	movf	(_moveDeg$555+1)^(0+128),w
  1116  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0207  00C4               	movwf	___fttol@f1+1
  1119  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1120  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1121  020A  0841               	movf	(_moveDeg$555+2)^(0+128),w
  1122  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1123  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1124  020D  00C5               	movwf	___fttol@f1+2
  1125  020E  120A  118A  22DE  120A  118A  	fcall	___fttol
  1126  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0215  0843               	movf	?___fttol,w
  1129  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1130  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1131  0218  00B8               	movwf	??_moveDeg^(0+128)
  1132  0219  0838               	movf	??_moveDeg^(0+128),w
  1133  021A  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1134                           
  1135                           ;motor.c: 54: move(stepsToMove,1);
  1136  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1137  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1138  021D  01A0               	clrf	move@direction
  1139  021E  0AA0               	incf	move@direction,f
  1140  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1141  0220  1303               	bcf	3,6	;RP1=0, select bank1
  1142  0221  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1143  0222  120A  118A  243A   	fcall	_move
  1144  0225  0008               	return
  1145  0226                     __end_of_moveDeg:	
  1146                           
  1147                           	psect	text2
  1148  03DA                     __ptext2:	
  1149 ;; *************** function _round *****************
  1150 ;; Defined at:
  1151 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  x               3   71[BANK0 ] void 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  f               3   74[BANK0 ] void 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  3   71[BANK0 ] void 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       3       0       0       0
  1166 ;;      Locals:         0       3       0       0       0
  1167 ;;      Temps:          0       0       0       0       0
  1168 ;;      Totals:         0       6       0       0       0
  1169 ;;Total ram usage:        6 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    5
  1172 ;; This function calls:
  1173 ;;		___ftadd
  1174 ;;		___ftneg
  1175 ;;		_trunc
  1176 ;; This function is called by:
  1177 ;;		_moveDeg
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _round
  1183  03DA                     _round:	
  1184                           
  1185                           ;incstack = 0
  1186                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1187  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1188  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1189  03DC  0867               	movf	round@x,w
  1190  03DD  00DA               	movwf	___ftadd@f1
  1191  03DE  0868               	movf	round@x+1,w
  1192  03DF  00DB               	movwf	___ftadd@f1+1
  1193  03E0  0869               	movf	round@x+2,w
  1194  03E1  00DC               	movwf	___ftadd@f1+2
  1195  03E2  0867               	movf	round@x,w
  1196  03E3  00D1               	movwf	trunc@x
  1197  03E4  0868               	movf	round@x+1,w
  1198  03E5  00D2               	movwf	trunc@x+1
  1199  03E6  0869               	movf	round@x+2,w
  1200  03E7  00D3               	movwf	trunc@x+2
  1201  03E8  120A  118A  25A9  120A  118A  	fcall	_trunc
  1202  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  1203  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  1204  03EF  0851               	movf	?_trunc,w
  1205  03F0  00B0               	movwf	___ftneg@f1
  1206  03F1  0852               	movf	?_trunc+1,w
  1207  03F2  00B1               	movwf	___ftneg@f1+1
  1208  03F3  0853               	movf	?_trunc+2,w
  1209  03F4  00B2               	movwf	___ftneg@f1+2
  1210  03F5  120A  118A  26F3  120A  118A  	fcall	___ftneg
  1211  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1212  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1213  03FC  0830               	movf	?___ftneg,w
  1214  03FD  00DD               	movwf	___ftadd@f2
  1215  03FE  0831               	movf	?___ftneg+1,w
  1216  03FF  00DE               	movwf	___ftadd@f2+1
  1217  0400  0832               	movf	?___ftneg+2,w
  1218  0401  00DF               	movwf	___ftadd@f2+2
  1219  0402  120A  118A  202E  120A  118A  	fcall	___ftadd
  1220  0407  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0408  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0409  085A               	movf	?___ftadd,w
  1223  040A  00EA               	movwf	round@f
  1224  040B  085B               	movf	?___ftadd+1,w
  1225  040C  00EB               	movwf	round@f+1
  1226  040D  085C               	movf	?___ftadd+2,w
  1227  040E  00EC               	movwf	round@f+2
  1228  040F  086A               	movf	round@f,w
  1229  0410  00DA               	movwf	___ftadd@f1
  1230  0411  086B               	movf	round@f+1,w
  1231  0412  00DB               	movwf	___ftadd@f1+1
  1232  0413  086C               	movf	round@f+2,w
  1233  0414  00DC               	movwf	___ftadd@f1+2
  1234  0415  0867               	movf	round@x,w
  1235  0416  00DD               	movwf	___ftadd@f2
  1236  0417  0868               	movf	round@x+1,w
  1237  0418  00DE               	movwf	___ftadd@f2+1
  1238  0419  0869               	movf	round@x+2,w
  1239  041A  00DF               	movwf	___ftadd@f2+2
  1240  041B  120A  118A  202E  120A  118A  	fcall	___ftadd
  1241  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1242  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1243  0422  085A               	movf	?___ftadd,w
  1244  0423  00E7               	movwf	round@x
  1245  0424  085B               	movf	?___ftadd+1,w
  1246  0425  00E8               	movwf	round@x+1
  1247  0426  085C               	movf	?___ftadd+2,w
  1248  0427  00E9               	movwf	round@x+2
  1249  0428  0867               	movf	round@x,w
  1250  0429  00D1               	movwf	trunc@x
  1251  042A  0868               	movf	round@x+1,w
  1252  042B  00D2               	movwf	trunc@x+1
  1253  042C  0869               	movf	round@x+2,w
  1254  042D  00D3               	movwf	trunc@x+2
  1255  042E  120A  118A  25A9   	fcall	_trunc
  1256  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0433  0851               	movf	?_trunc,w
  1259  0434  00E7               	movwf	?_round
  1260  0435  0852               	movf	?_trunc+1,w
  1261  0436  00E8               	movwf	?_round+1
  1262  0437  0853               	movf	?_trunc+2,w
  1263  0438  00E9               	movwf	?_round+2
  1264  0439  0008               	return
  1265  043A                     __end_of_round:	
  1266                           
  1267                           	psect	text3
  1268  05A9                     __ptext3:	
  1269 ;; *************** function _trunc *****************
  1270 ;; Defined at:
  1271 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;  x               3   49[BANK0 ] void 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  i               3   53[BANK0 ] void 
  1276 ;;  expon           2   56[BANK0 ] int 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  3   49[BANK0 ] int 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         0       3       0       0       0
  1287 ;;      Locals:         0       5       0       0       0
  1288 ;;      Temps:          0       1       0       0       0
  1289 ;;      Totals:         0       9       0       0       0
  1290 ;;Total ram usage:        9 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    4
  1293 ;; This function calls:
  1294 ;;		___altoft
  1295 ;;		___fttol
  1296 ;;		_frexp
  1297 ;; This function is called by:
  1298 ;;		_round
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           
  1303                           ;psect for function _trunc
  1304  05A9                     _trunc:	
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1308  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  1309  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  1310  05AB  0851               	movf	trunc@x,w
  1311  05AC  00A0               	movwf	frexp@value
  1312  05AD  0852               	movf	trunc@x+1,w
  1313  05AE  00A1               	movwf	frexp@value+1
  1314  05AF  0853               	movf	trunc@x+2,w
  1315  05B0  00A2               	movwf	frexp@value+2
  1316  05B1  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1317  05B2  00D4               	movwf	??_trunc
  1318  05B3  0854               	movf	??_trunc,w
  1319  05B4  00A3               	movwf	frexp@eptr
  1320  05B5  120A  118A  2635  120A  118A  	fcall	_frexp
  1321  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1322  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1323  05BC  1FD9               	btfss	trunc@expon+1,7
  1324  05BD  2DC5               	goto	l1346
  1325  05BE  3000               	movlw	0
  1326  05BF  00D1               	movwf	?_trunc
  1327  05C0  3000               	movlw	0
  1328  05C1  00D2               	movwf	?_trunc+1
  1329  05C2  3000               	movlw	0
  1330  05C3  00D3               	movwf	?_trunc+2
  1331  05C4  0008               	return
  1332  05C5                     l1346:	
  1333  05C5  3000               	movlw	0
  1334  05C6  0259               	subwf	trunc@expon+1,w
  1335  05C7  3015               	movlw	21
  1336  05C8  1903               	skipnz
  1337  05C9  0258               	subwf	trunc@expon,w
  1338  05CA  1803               	btfsc	3,0
  1339  05CB  0008               	return
  1340  05CC  0851               	movf	trunc@x,w
  1341  05CD  00C3               	movwf	___fttol@f1
  1342  05CE  0852               	movf	trunc@x+1,w
  1343  05CF  00C4               	movwf	___fttol@f1+1
  1344  05D0  0853               	movf	trunc@x+2,w
  1345  05D1  00C5               	movwf	___fttol@f1+2
  1346  05D2  120A  118A  22DE  120A  118A  	fcall	___fttol
  1347  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1348  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1349  05D9  0846               	movf	?___fttol+3,w
  1350  05DA  00AB               	movwf	___altoft@c+3
  1351  05DB  0845               	movf	?___fttol+2,w
  1352  05DC  00AA               	movwf	___altoft@c+2
  1353  05DD  0844               	movf	?___fttol+1,w
  1354  05DE  00A9               	movwf	___altoft@c+1
  1355  05DF  0843               	movf	?___fttol,w
  1356  05E0  00A8               	movwf	___altoft@c
  1357  05E1  120A  118A  25F3   	fcall	___altoft
  1358  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  1359  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  1360  05E6  0828               	movf	?___altoft,w
  1361  05E7  00D5               	movwf	trunc@i
  1362  05E8  0829               	movf	?___altoft+1,w
  1363  05E9  00D6               	movwf	trunc@i+1
  1364  05EA  082A               	movf	?___altoft+2,w
  1365  05EB  00D7               	movwf	trunc@i+2
  1366  05EC  0855               	movf	trunc@i,w
  1367  05ED  00D1               	movwf	?_trunc
  1368  05EE  0856               	movf	trunc@i+1,w
  1369  05EF  00D2               	movwf	?_trunc+1
  1370  05F0  0857               	movf	trunc@i+2,w
  1371  05F1  00D3               	movwf	?_trunc+2
  1372  05F2  0008               	return
  1373  05F3                     __end_of_trunc:	
  1374                           
  1375                           	psect	text4
  1376  0635                     __ptext4:	
  1377 ;; *************** function _frexp *****************
  1378 ;; Defined at:
  1379 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  value           3    0[BANK0 ] int 
  1382 ;;  eptr            1    3[BANK0 ] PTR int 
  1383 ;;		 -> trunc@expon(2), 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;		None
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  3    0[BANK0 ] PTR int 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1395 ;;      Params:         0       4       0       0       0
  1396 ;;      Locals:         0       0       0       0       0
  1397 ;;      Temps:          0       2       0       0       0
  1398 ;;      Totals:         0       6       0       0       0
  1399 ;;Total ram usage:        6 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    2
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_trunc
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function _frexp
  1411  0635                     _frexp:	
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1415  0635  1283               	bcf	3,5	;RP0=0, select bank0
  1416  0636  1303               	bcf	3,6	;RP1=0, select bank0
  1417  0637  0822               	movf	frexp@value+2,w
  1418  0638  0421               	iorwf	frexp@value+1,w
  1419  0639  0420               	iorwf	frexp@value,w
  1420  063A  1D03               	skipz
  1421  063B  2E43               	goto	l1250
  1422  063C  0823               	movf	frexp@eptr,w
  1423  063D  0084               	movwf	4
  1424  063E  1383               	bcf	3,7	;select IRP bank0
  1425  063F  0180               	clrf	0
  1426  0640  0A84               	incf	4,f
  1427  0641  0180               	clrf	0
  1428                           
  1429                           ;	Return value of _frexp is never used
  1430  0642  0008               	return
  1431  0643                     l1250:	
  1432  0643  0822               	movf	frexp@value+2,w
  1433  0644  397F               	andlw	127
  1434  0645  00A4               	movwf	??_frexp
  1435  0646  01A5               	clrf	??_frexp+1
  1436  0647  1003               	clrc
  1437  0648  0DA4               	rlf	??_frexp,f
  1438  0649  0DA5               	rlf	??_frexp+1,f
  1439  064A  0823               	movf	frexp@eptr,w
  1440  064B  0084               	movwf	4
  1441  064C  0824               	movf	??_frexp,w
  1442  064D  1383               	bcf	3,7	;select IRP bank0
  1443  064E  0080               	movwf	0
  1444  064F  0A84               	incf	4,f
  1445  0650  0825               	movf	??_frexp+1,w
  1446  0651  0080               	movwf	0
  1447  0652  0D21               	rlf	frexp@value+1,w
  1448  0653  0D21               	rlf	frexp@value+1,w
  1449  0654  3901               	andlw	1
  1450  0655  00A4               	movwf	??_frexp
  1451  0656  01A5               	clrf	??_frexp+1
  1452  0657  0823               	movf	frexp@eptr,w
  1453  0658  0084               	movwf	4
  1454  0659  0824               	movf	??_frexp,w
  1455  065A  0480               	iorwf	0,f
  1456  065B  0A84               	incf	4,f
  1457  065C  0825               	movf	??_frexp+1,w
  1458  065D  0480               	iorwf	0,f
  1459  065E  0823               	movf	frexp@eptr,w
  1460  065F  0084               	movwf	4
  1461  0660  3082               	movlw	130
  1462  0661  0780               	addwf	0,f
  1463  0662  0F84               	incfsz	4,f
  1464  0663  0800               	movf	0,w
  1465  0664  1803               	skipnc
  1466  0665  0A00               	incf	0,w
  1467  0666  00FF               	movwf	127
  1468  0667  30FF               	movlw	255
  1469  0668  077F               	addwf	127,w
  1470  0669  0080               	movwf	0
  1471  066A  0384               	decf	4,f
  1472  066B  0822               	movf	frexp@value+2,w
  1473  066C  3980               	andlw	-128
  1474  066D  383F               	iorlw	63
  1475  066E  00A2               	movwf	frexp@value+2
  1476  066F  13A1               	bcf	frexp@value+1,7
  1477  0670  0008               	return
  1478  0671                     __end_of_frexp:	
  1479                           ;	Return value of _frexp is never used
  1480                           
  1481                           
  1482                           	psect	text5
  1483  02DE                     __ptext5:	
  1484 ;; *************** function ___fttol *****************
  1485 ;; Defined at:
  1486 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  f1              3   35[BANK0 ] float 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  lval            4   44[BANK0 ] unsigned long 
  1491 ;;  exp1            1   48[BANK0 ] unsigned char 
  1492 ;;  sign1           1   43[BANK0 ] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  4   35[BANK0 ] long 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1502 ;;      Params:         0       4       0       0       0
  1503 ;;      Locals:         0       6       0       0       0
  1504 ;;      Temps:          0       4       0       0       0
  1505 ;;      Totals:         0      14       0       0       0
  1506 ;;Total ram usage:       14 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    2
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_moveDeg
  1513 ;;		_trunc
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function ___fttol
  1519  02DE                     ___fttol:	
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1523  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1524  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1525  02E0  0843               	movf	___fttol@f1,w
  1526  02E1  00C7               	movwf	??___fttol
  1527  02E2  0844               	movf	___fttol@f1+1,w
  1528  02E3  00C8               	movwf	??___fttol+1
  1529  02E4  0845               	movf	___fttol@f1+2,w
  1530  02E5  00C9               	movwf	??___fttol+2
  1531  02E6  1003               	clrc
  1532  02E7  0D48               	rlf	??___fttol+1,w
  1533  02E8  0D49               	rlf	??___fttol+2,w
  1534  02E9  00CA               	movwf	??___fttol+3
  1535  02EA  084A               	movf	??___fttol+3,w
  1536  02EB  00D0               	movwf	___fttol@exp1
  1537  02EC  0850               	movf	___fttol@exp1,w
  1538  02ED  1D03               	btfss	3,2
  1539  02EE  2AF8               	goto	l1208
  1540  02EF  3000               	movlw	0
  1541  02F0  00C6               	movwf	?___fttol+3
  1542  02F1  3000               	movlw	0
  1543  02F2  00C5               	movwf	?___fttol+2
  1544  02F3  3000               	movlw	0
  1545  02F4  00C4               	movwf	?___fttol+1
  1546  02F5  3000               	movlw	0
  1547  02F6  00C3               	movwf	?___fttol
  1548  02F7  0008               	return
  1549  02F8                     l1208:	
  1550  02F8  0843               	movf	___fttol@f1,w
  1551  02F9  00C7               	movwf	??___fttol
  1552  02FA  0844               	movf	___fttol@f1+1,w
  1553  02FB  00C8               	movwf	??___fttol+1
  1554  02FC  0845               	movf	___fttol@f1+2,w
  1555  02FD  00C9               	movwf	??___fttol+2
  1556  02FE  3017               	movlw	23
  1557  02FF                     u1115:	
  1558  02FF  1003               	clrc
  1559  0300  0CC9               	rrf	??___fttol+2,f
  1560  0301  0CC8               	rrf	??___fttol+1,f
  1561  0302  0CC7               	rrf	??___fttol,f
  1562  0303  3EFF               	addlw	-1
  1563  0304  1D03               	skipz
  1564  0305  2AFF               	goto	u1115
  1565  0306  0847               	movf	??___fttol,w
  1566  0307  00CA               	movwf	??___fttol+3
  1567  0308  084A               	movf	??___fttol+3,w
  1568  0309  00CB               	movwf	___fttol@sign1
  1569  030A  17C4               	bsf	___fttol@f1+1,7
  1570  030B  30FF               	movlw	255
  1571  030C  05C3               	andwf	___fttol@f1,f
  1572  030D  30FF               	movlw	255
  1573  030E  05C4               	andwf	___fttol@f1+1,f
  1574  030F  3000               	movlw	0
  1575  0310  05C5               	andwf	___fttol@f1+2,f
  1576  0311  0843               	movf	___fttol@f1,w
  1577  0312  00CC               	movwf	___fttol@lval
  1578  0313  0844               	movf	___fttol@f1+1,w
  1579  0314  00CD               	movwf	___fttol@lval+1
  1580  0315  0845               	movf	___fttol@f1+2,w
  1581  0316  00CE               	movwf	___fttol@lval+2
  1582  0317  01CF               	clrf	___fttol@lval+3
  1583  0318  308E               	movlw	142
  1584  0319  02D0               	subwf	___fttol@exp1,f
  1585  031A  1FD0               	btfss	___fttol@exp1,7
  1586  031B  2B3A               	goto	l1228
  1587  031C  0850               	movf	___fttol@exp1,w
  1588  031D  3A80               	xorlw	128
  1589  031E  3E8F               	addlw	143
  1590  031F  1803               	skipnc
  1591  0320  2B2A               	goto	l1226
  1592  0321  3000               	movlw	0
  1593  0322  00C6               	movwf	?___fttol+3
  1594  0323  3000               	movlw	0
  1595  0324  00C5               	movwf	?___fttol+2
  1596  0325  3000               	movlw	0
  1597  0326  00C4               	movwf	?___fttol+1
  1598  0327  3000               	movlw	0
  1599  0328  00C3               	movwf	?___fttol
  1600  0329  0008               	return
  1601  032A                     l1226:	
  1602  032A  3001               	movlw	1
  1603  032B                     u1145:	
  1604  032B  1003               	clrc
  1605  032C  0CCF               	rrf	___fttol@lval+3,f
  1606  032D  0CCE               	rrf	___fttol@lval+2,f
  1607  032E  0CCD               	rrf	___fttol@lval+1,f
  1608  032F  0CCC               	rrf	___fttol@lval,f
  1609  0330  3EFF               	addlw	-1
  1610  0331  1D03               	skipz
  1611  0332  2B2B               	goto	u1145
  1612  0333  3001               	movlw	1
  1613  0334  00C7               	movwf	??___fttol
  1614  0335  0847               	movf	??___fttol,w
  1615  0336  07D0               	addwf	___fttol@exp1,f
  1616  0337  1903               	btfsc	3,2
  1617  0338  2B55               	goto	l1236
  1618  0339  2B2A               	goto	l1226
  1619  033A                     l1228:	
  1620  033A  3018               	movlw	24
  1621  033B  0250               	subwf	___fttol@exp1,w
  1622  033C  1C03               	skipc
  1623  033D  2B52               	goto	l514
  1624  033E  3000               	movlw	0
  1625  033F  00C6               	movwf	?___fttol+3
  1626  0340  3000               	movlw	0
  1627  0341  00C5               	movwf	?___fttol+2
  1628  0342  3000               	movlw	0
  1629  0343  00C4               	movwf	?___fttol+1
  1630  0344  3000               	movlw	0
  1631  0345  00C3               	movwf	?___fttol
  1632  0346  0008               	return
  1633  0347                     l1234:	
  1634  0347  3001               	movlw	1
  1635  0348  00C7               	movwf	??___fttol
  1636  0349                     u1175:	
  1637  0349  1003               	clrc
  1638  034A  0DCC               	rlf	___fttol@lval,f
  1639  034B  0DCD               	rlf	___fttol@lval+1,f
  1640  034C  0DCE               	rlf	___fttol@lval+2,f
  1641  034D  0DCF               	rlf	___fttol@lval+3,f
  1642  034E  0BC7               	decfsz	??___fttol,f
  1643  034F  2B49               	goto	u1175
  1644  0350  3001               	movlw	1
  1645  0351  02D0               	subwf	___fttol@exp1,f
  1646  0352                     l514:	
  1647  0352  0850               	movf	___fttol@exp1,w
  1648  0353  1D03               	btfss	3,2
  1649  0354  2B47               	goto	l1234
  1650  0355                     l1236:	
  1651  0355  084B               	movf	___fttol@sign1,w
  1652  0356  1903               	btfsc	3,2
  1653  0357  2B63               	goto	l1240
  1654  0358  09CC               	comf	___fttol@lval,f
  1655  0359  09CD               	comf	___fttol@lval+1,f
  1656  035A  09CE               	comf	___fttol@lval+2,f
  1657  035B  09CF               	comf	___fttol@lval+3,f
  1658  035C  0ACC               	incf	___fttol@lval,f
  1659  035D  1903               	skipnz
  1660  035E  0ACD               	incf	___fttol@lval+1,f
  1661  035F  1903               	skipnz
  1662  0360  0ACE               	incf	___fttol@lval+2,f
  1663  0361  1903               	skipnz
  1664  0362  0ACF               	incf	___fttol@lval+3,f
  1665  0363                     l1240:	
  1666  0363  084F               	movf	___fttol@lval+3,w
  1667  0364  00C6               	movwf	?___fttol+3
  1668  0365  084E               	movf	___fttol@lval+2,w
  1669  0366  00C5               	movwf	?___fttol+2
  1670  0367  084D               	movf	___fttol@lval+1,w
  1671  0368  00C4               	movwf	?___fttol+1
  1672  0369  084C               	movf	___fttol@lval,w
  1673  036A  00C3               	movwf	?___fttol
  1674  036B  0008               	return
  1675  036C                     __end_of___fttol:	
  1676                           
  1677                           	psect	text6
  1678  05F3                     __ptext6:	
  1679 ;; *************** function ___altoft *****************
  1680 ;; Defined at:
  1681 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  c               4    8[BANK0 ] long 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  sign            1   15[BANK0 ] unsigned char 
  1686 ;;  exp             1   14[BANK0 ] unsigned char 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  3    8[BANK0 ] float 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, pclath, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1696 ;;      Params:         0       4       0       0       0
  1697 ;;      Locals:         0       2       0       0       0
  1698 ;;      Temps:          0       2       0       0       0
  1699 ;;      Totals:         0       8       0       0       0
  1700 ;;Total ram usage:        8 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		___ftpack
  1705 ;; This function is called by:
  1706 ;;		_trunc
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function ___altoft
  1712  05F3                     ___altoft:	
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  1716  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1717  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1718  05F5  01AF               	clrf	___altoft@sign
  1719  05F6  308E               	movlw	142
  1720  05F7  00AC               	movwf	??___altoft
  1721  05F8  082C               	movf	??___altoft,w
  1722  05F9  00AE               	movwf	___altoft@exp
  1723  05FA  1FAB               	btfss	___altoft@c+3,7
  1724  05FB  2E09               	goto	l1196
  1725  05FC  09A8               	comf	___altoft@c,f
  1726  05FD  09A9               	comf	___altoft@c+1,f
  1727  05FE  09AA               	comf	___altoft@c+2,f
  1728  05FF  09AB               	comf	___altoft@c+3,f
  1729  0600  0AA8               	incf	___altoft@c,f
  1730  0601  1903               	skipnz
  1731  0602  0AA9               	incf	___altoft@c+1,f
  1732  0603  1903               	skipnz
  1733  0604  0AAA               	incf	___altoft@c+2,f
  1734  0605  1903               	skipnz
  1735  0606  0AAB               	incf	___altoft@c+3,f
  1736  0607  01AF               	clrf	___altoft@sign
  1737  0608  0AAF               	incf	___altoft@sign,f
  1738  0609                     l1196:	
  1739  0609  30FF               	movlw	255
  1740  060A  052B               	andwf	___altoft@c+3,w
  1741  060B  1903               	btfsc	3,2
  1742  060C  2E1B               	goto	l1198
  1743  060D  3001               	movlw	1
  1744  060E                     u1085:	
  1745  060E  1003               	clrc
  1746  060F  0CAB               	rrf	___altoft@c+3,f
  1747  0610  0CAA               	rrf	___altoft@c+2,f
  1748  0611  0CA9               	rrf	___altoft@c+1,f
  1749  0612  0CA8               	rrf	___altoft@c,f
  1750  0613  3EFF               	addlw	-1
  1751  0614  1D03               	skipz
  1752  0615  2E0E               	goto	u1085
  1753  0616  3001               	movlw	1
  1754  0617  00AC               	movwf	??___altoft
  1755  0618  082C               	movf	??___altoft,w
  1756  0619  07AE               	addwf	___altoft@exp,f
  1757  061A  2E09               	goto	l1196
  1758  061B                     l1198:	
  1759  061B  0828               	movf	___altoft@c,w
  1760  061C  00A0               	movwf	___ftpack@arg
  1761  061D  0829               	movf	___altoft@c+1,w
  1762  061E  00A1               	movwf	___ftpack@arg+1
  1763  061F  082A               	movf	___altoft@c+2,w
  1764  0620  00A2               	movwf	___ftpack@arg+2
  1765  0621  082E               	movf	___altoft@exp,w
  1766  0622  00AC               	movwf	??___altoft
  1767  0623  082C               	movf	??___altoft,w
  1768  0624  00A3               	movwf	___ftpack@exp
  1769  0625  082F               	movf	___altoft@sign,w
  1770  0626  00AD               	movwf	??___altoft+1
  1771  0627  082D               	movf	??___altoft+1,w
  1772  0628  00A4               	movwf	___ftpack@sign
  1773  0629  120A  118A  236C   	fcall	___ftpack
  1774  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1775  062D  1303               	bcf	3,6	;RP1=0, select bank0
  1776  062E  0820               	movf	?___ftpack,w
  1777  062F  00A8               	movwf	?___altoft
  1778  0630  0821               	movf	?___ftpack+1,w
  1779  0631  00A9               	movwf	?___altoft+1
  1780  0632  0822               	movf	?___ftpack+2,w
  1781  0633  00AA               	movwf	?___altoft+2
  1782  0634  0008               	return
  1783  0635                     __end_of___altoft:	
  1784                           
  1785                           	psect	text7
  1786  06F3                     __ptext7:	
  1787 ;; *************** function ___ftneg *****************
  1788 ;; Defined at:
  1789 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  f1              3   16[BANK0 ] float 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  3   16[BANK0 ] float 
  1796 ;; Registers used:
  1797 ;;		wreg
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1803 ;;      Params:         0       3       0       0       0
  1804 ;;      Locals:         0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0
  1806 ;;      Totals:         0       3       0       0       0
  1807 ;;Total ram usage:        3 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    2
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_moveDeg
  1814 ;;		_round
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function ___ftneg
  1820  06F3                     ___ftneg:	
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in ___ftneg: [wreg]
  1824  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  1825  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  1826  06F5  0832               	movf	___ftneg@f1+2,w
  1827  06F6  0431               	iorwf	___ftneg@f1+1,w
  1828  06F7  0430               	iorwf	___ftneg@f1,w
  1829  06F8  1903               	skipnz
  1830  06F9  0008               	return
  1831  06FA  3080               	movlw	128
  1832  06FB  06B2               	xorwf	___ftneg@f1+2,f
  1833  06FC  0008               	return
  1834  06FD                     __end_of___ftneg:	
  1835                           
  1836                           	psect	text8
  1837  002E                     __ptext8:	
  1838 ;; *************** function ___ftadd *****************
  1839 ;; Defined at:
  1840 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  f1              3   58[BANK0 ] float 
  1843 ;;  f2              3   61[BANK0 ] float 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  exp1            1   70[BANK0 ] unsigned char 
  1846 ;;  exp2            1   69[BANK0 ] unsigned char 
  1847 ;;  sign            1   68[BANK0 ] unsigned char 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  3   58[BANK0 ] float 
  1850 ;; Registers used:
  1851 ;;		wreg, status,2, status,0, pclath, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       6       0       0       0
  1858 ;;      Locals:         0       3       0       0       0
  1859 ;;      Temps:          0       4       0       0       0
  1860 ;;      Totals:         0      13       0       0       0
  1861 ;;Total ram usage:       13 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    3
  1864 ;; This function calls:
  1865 ;;		___ftpack
  1866 ;; This function is called by:
  1867 ;;		_round
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function ___ftadd
  1873  002E                     ___ftadd:	
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  1877  002E  1283               	bcf	3,5	;RP0=0, select bank0
  1878  002F  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0030  085A               	movf	___ftadd@f1,w
  1880  0031  00E0               	movwf	??___ftadd
  1881  0032  085B               	movf	___ftadd@f1+1,w
  1882  0033  00E1               	movwf	??___ftadd+1
  1883  0034  085C               	movf	___ftadd@f1+2,w
  1884  0035  00E2               	movwf	??___ftadd+2
  1885  0036  1003               	clrc
  1886  0037  0D61               	rlf	??___ftadd+1,w
  1887  0038  0D62               	rlf	??___ftadd+2,w
  1888  0039  00E3               	movwf	??___ftadd+3
  1889  003A  0863               	movf	??___ftadd+3,w
  1890  003B  00E6               	movwf	___ftadd@exp1
  1891  003C  085D               	movf	___ftadd@f2,w
  1892  003D  00E0               	movwf	??___ftadd
  1893  003E  085E               	movf	___ftadd@f2+1,w
  1894  003F  00E1               	movwf	??___ftadd+1
  1895  0040  085F               	movf	___ftadd@f2+2,w
  1896  0041  00E2               	movwf	??___ftadd+2
  1897  0042  1003               	clrc
  1898  0043  0D61               	rlf	??___ftadd+1,w
  1899  0044  0D62               	rlf	??___ftadd+2,w
  1900  0045  00E3               	movwf	??___ftadd+3
  1901  0046  0863               	movf	??___ftadd+3,w
  1902  0047  00E5               	movwf	___ftadd@exp2
  1903  0048  0866               	movf	___ftadd@exp1,w
  1904  0049  1903               	btfsc	3,2
  1905  004A  2857               	goto	l1266
  1906  004B  0865               	movf	___ftadd@exp2,w
  1907  004C  0266               	subwf	___ftadd@exp1,w
  1908  004D  1803               	skipnc
  1909  004E  285E               	goto	l1270
  1910  004F  0366               	decf	___ftadd@exp1,w
  1911  0050  3AFF               	xorlw	255
  1912  0051  0765               	addwf	___ftadd@exp2,w
  1913  0052  00E0               	movwf	??___ftadd
  1914  0053  3019               	movlw	25
  1915  0054  0260               	subwf	??___ftadd,w
  1916  0055  1C03               	skipc
  1917  0056  285E               	goto	l1270
  1918  0057                     l1266:	
  1919  0057  085D               	movf	___ftadd@f2,w
  1920  0058  00DA               	movwf	?___ftadd
  1921  0059  085E               	movf	___ftadd@f2+1,w
  1922  005A  00DB               	movwf	?___ftadd+1
  1923  005B  085F               	movf	___ftadd@f2+2,w
  1924  005C  00DC               	movwf	?___ftadd+2
  1925  005D  0008               	return
  1926  005E                     l1270:	
  1927  005E  0865               	movf	___ftadd@exp2,w
  1928  005F  1903               	btfsc	3,2
  1929  0060  0008               	return
  1930  0061  0866               	movf	___ftadd@exp1,w
  1931  0062  0265               	subwf	___ftadd@exp2,w
  1932  0063  1803               	skipnc
  1933  0064  286D               	goto	l1276
  1934  0065  0365               	decf	___ftadd@exp2,w
  1935  0066  3AFF               	xorlw	255
  1936  0067  0766               	addwf	___ftadd@exp1,w
  1937  0068  00E0               	movwf	??___ftadd
  1938  0069  3019               	movlw	25
  1939  006A  0260               	subwf	??___ftadd,w
  1940  006B  1803               	btfsc	3,0
  1941  006C  0008               	return
  1942  006D                     l1276:	
  1943  006D  3006               	movlw	6
  1944  006E  00E0               	movwf	??___ftadd
  1945  006F  0860               	movf	??___ftadd,w
  1946  0070  00E4               	movwf	___ftadd@sign
  1947  0071  1BDC               	btfsc	___ftadd@f1+2,7
  1948  0072  17E4               	bsf	___ftadd@sign,7
  1949  0073  1BDF               	btfsc	___ftadd@f2+2,7
  1950  0074  1764               	bsf	___ftadd@sign,6
  1951  0075  17DB               	bsf	___ftadd@f1+1,7
  1952  0076  30FF               	movlw	255
  1953  0077  05DA               	andwf	___ftadd@f1,f
  1954  0078  30FF               	movlw	255
  1955  0079  05DB               	andwf	___ftadd@f1+1,f
  1956  007A  3000               	movlw	0
  1957  007B  05DC               	andwf	___ftadd@f1+2,f
  1958  007C  17DE               	bsf	___ftadd@f2+1,7
  1959  007D  30FF               	movlw	255
  1960  007E  05DD               	andwf	___ftadd@f2,f
  1961  007F  30FF               	movlw	255
  1962  0080  05DE               	andwf	___ftadd@f2+1,f
  1963  0081  3000               	movlw	0
  1964  0082  05DF               	andwf	___ftadd@f2+2,f
  1965  0083  0865               	movf	___ftadd@exp2,w
  1966  0084  0266               	subwf	___ftadd@exp1,w
  1967  0085  1803               	skipnc
  1968  0086  28AD               	goto	l1298
  1969  0087                     l1288:	
  1970  0087  3001               	movlw	1
  1971  0088                     u1305:	
  1972  0088  1003               	clrc
  1973  0089  0DDD               	rlf	___ftadd@f2,f
  1974  008A  0DDE               	rlf	___ftadd@f2+1,f
  1975  008B  0DDF               	rlf	___ftadd@f2+2,f
  1976  008C  3EFF               	addlw	-1
  1977  008D  1D03               	skipz
  1978  008E  2888               	goto	u1305
  1979  008F  3001               	movlw	1
  1980  0090  02E5               	subwf	___ftadd@exp2,f
  1981  0091  0865               	movf	___ftadd@exp2,w
  1982  0092  0666               	xorwf	___ftadd@exp1,w
  1983  0093  1903               	skipnz
  1984  0094  28A8               	goto	l1296
  1985  0095  3001               	movlw	1
  1986  0096  02E4               	subwf	___ftadd@sign,f
  1987  0097  0864               	movf	___ftadd@sign,w
  1988  0098  3907               	andlw	7
  1989  0099  1903               	btfsc	3,2
  1990  009A  28A8               	goto	l1296
  1991  009B  2887               	goto	l1288
  1992  009C                     l1294:	
  1993  009C  3001               	movlw	1
  1994  009D                     u1335:	
  1995  009D  1003               	clrc
  1996  009E  0CDC               	rrf	___ftadd@f1+2,f
  1997  009F  0CDB               	rrf	___ftadd@f1+1,f
  1998  00A0  0CDA               	rrf	___ftadd@f1,f
  1999  00A1  3EFF               	addlw	-1
  2000  00A2  1D03               	skipz
  2001  00A3  289D               	goto	u1335
  2002  00A4  3001               	movlw	1
  2003  00A5  00E0               	movwf	??___ftadd
  2004  00A6  0860               	movf	??___ftadd,w
  2005  00A7  07E6               	addwf	___ftadd@exp1,f
  2006  00A8                     l1296:	
  2007  00A8  0866               	movf	___ftadd@exp1,w
  2008  00A9  0665               	xorwf	___ftadd@exp2,w
  2009  00AA  1903               	btfsc	3,2
  2010  00AB  28D6               	goto	l454
  2011  00AC  289C               	goto	l1294
  2012  00AD                     l1298:	
  2013  00AD  0866               	movf	___ftadd@exp1,w
  2014  00AE  0265               	subwf	___ftadd@exp2,w
  2015  00AF  1803               	skipnc
  2016  00B0  28D6               	goto	l454
  2017  00B1                     l1300:	
  2018  00B1  3001               	movlw	1
  2019  00B2                     u1365:	
  2020  00B2  1003               	clrc
  2021  00B3  0DDA               	rlf	___ftadd@f1,f
  2022  00B4  0DDB               	rlf	___ftadd@f1+1,f
  2023  00B5  0DDC               	rlf	___ftadd@f1+2,f
  2024  00B6  3EFF               	addlw	-1
  2025  00B7  1D03               	skipz
  2026  00B8  28B2               	goto	u1365
  2027  00B9  3001               	movlw	1
  2028  00BA  02E6               	subwf	___ftadd@exp1,f
  2029  00BB  0865               	movf	___ftadd@exp2,w
  2030  00BC  0666               	xorwf	___ftadd@exp1,w
  2031  00BD  1903               	skipnz
  2032  00BE  28D2               	goto	l1308
  2033  00BF  3001               	movlw	1
  2034  00C0  02E4               	subwf	___ftadd@sign,f
  2035  00C1  0864               	movf	___ftadd@sign,w
  2036  00C2  3907               	andlw	7
  2037  00C3  1903               	btfsc	3,2
  2038  00C4  28D2               	goto	l1308
  2039  00C5  28B1               	goto	l1300
  2040  00C6                     l1306:	
  2041  00C6  3001               	movlw	1
  2042  00C7                     u1395:	
  2043  00C7  1003               	clrc
  2044  00C8  0CDF               	rrf	___ftadd@f2+2,f
  2045  00C9  0CDE               	rrf	___ftadd@f2+1,f
  2046  00CA  0CDD               	rrf	___ftadd@f2,f
  2047  00CB  3EFF               	addlw	-1
  2048  00CC  1D03               	skipz
  2049  00CD  28C7               	goto	u1395
  2050  00CE  3001               	movlw	1
  2051  00CF  00E0               	movwf	??___ftadd
  2052  00D0  0860               	movf	??___ftadd,w
  2053  00D1  07E5               	addwf	___ftadd@exp2,f
  2054  00D2                     l1308:	
  2055  00D2  0866               	movf	___ftadd@exp1,w
  2056  00D3  0665               	xorwf	___ftadd@exp2,w
  2057  00D4  1D03               	skipz
  2058  00D5  28C6               	goto	l1306
  2059  00D6                     l454:	
  2060  00D6  1FE4               	btfss	___ftadd@sign,7
  2061  00D7  28E8               	goto	l1312
  2062  00D8  30FF               	movlw	255
  2063  00D9  06DA               	xorwf	___ftadd@f1,f
  2064  00DA  30FF               	movlw	255
  2065  00DB  06DB               	xorwf	___ftadd@f1+1,f
  2066  00DC  30FF               	movlw	255
  2067  00DD  06DC               	xorwf	___ftadd@f1+2,f
  2068  00DE  3001               	movlw	1
  2069  00DF  07DA               	addwf	___ftadd@f1,f
  2070  00E0  3000               	movlw	0
  2071  00E1  1803               	skipnc
  2072  00E2  3001               	movlw	1
  2073  00E3  07DB               	addwf	___ftadd@f1+1,f
  2074  00E4  3000               	movlw	0
  2075  00E5  1803               	skipnc
  2076  00E6  3001               	movlw	1
  2077  00E7  07DC               	addwf	___ftadd@f1+2,f
  2078  00E8                     l1312:	
  2079  00E8  1F64               	btfss	___ftadd@sign,6
  2080  00E9  28FA               	goto	l1316
  2081  00EA  30FF               	movlw	255
  2082  00EB  06DD               	xorwf	___ftadd@f2,f
  2083  00EC  30FF               	movlw	255
  2084  00ED  06DE               	xorwf	___ftadd@f2+1,f
  2085  00EE  30FF               	movlw	255
  2086  00EF  06DF               	xorwf	___ftadd@f2+2,f
  2087  00F0  3001               	movlw	1
  2088  00F1  07DD               	addwf	___ftadd@f2,f
  2089  00F2  3000               	movlw	0
  2090  00F3  1803               	skipnc
  2091  00F4  3001               	movlw	1
  2092  00F5  07DE               	addwf	___ftadd@f2+1,f
  2093  00F6  3000               	movlw	0
  2094  00F7  1803               	skipnc
  2095  00F8  3001               	movlw	1
  2096  00F9  07DF               	addwf	___ftadd@f2+2,f
  2097  00FA                     l1316:	
  2098  00FA  01E4               	clrf	___ftadd@sign
  2099  00FB  085A               	movf	___ftadd@f1,w
  2100  00FC  07DD               	addwf	___ftadd@f2,f
  2101  00FD  085B               	movf	___ftadd@f1+1,w
  2102  00FE  1103               	clrz
  2103  00FF  1803               	skipnc
  2104  0100  0A5B               	incf	___ftadd@f1+1,w
  2105  0101  1D03               	btfss	3,2
  2106  0102  07DE               	addwf	___ftadd@f2+1,f
  2107  0103  085C               	movf	___ftadd@f1+2,w
  2108  0104  1103               	clrz
  2109  0105  1803               	skipnc
  2110  0106  0A5C               	incf	___ftadd@f1+2,w
  2111  0107  1D03               	btfss	3,2
  2112  0108  07DF               	addwf	___ftadd@f2+2,f
  2113  0109  1FDF               	btfss	___ftadd@f2+2,7
  2114  010A  291D               	goto	l1326
  2115  010B  30FF               	movlw	255
  2116  010C  06DD               	xorwf	___ftadd@f2,f
  2117  010D  30FF               	movlw	255
  2118  010E  06DE               	xorwf	___ftadd@f2+1,f
  2119  010F  30FF               	movlw	255
  2120  0110  06DF               	xorwf	___ftadd@f2+2,f
  2121  0111  3001               	movlw	1
  2122  0112  07DD               	addwf	___ftadd@f2,f
  2123  0113  3000               	movlw	0
  2124  0114  1803               	skipnc
  2125  0115  3001               	movlw	1
  2126  0116  07DE               	addwf	___ftadd@f2+1,f
  2127  0117  3000               	movlw	0
  2128  0118  1803               	skipnc
  2129  0119  3001               	movlw	1
  2130  011A  07DF               	addwf	___ftadd@f2+2,f
  2131  011B  01E4               	clrf	___ftadd@sign
  2132  011C  0AE4               	incf	___ftadd@sign,f
  2133  011D                     l1326:	
  2134  011D  085D               	movf	___ftadd@f2,w
  2135  011E  00A0               	movwf	___ftpack@arg
  2136  011F  085E               	movf	___ftadd@f2+1,w
  2137  0120  00A1               	movwf	___ftpack@arg+1
  2138  0121  085F               	movf	___ftadd@f2+2,w
  2139  0122  00A2               	movwf	___ftpack@arg+2
  2140  0123  0866               	movf	___ftadd@exp1,w
  2141  0124  00E0               	movwf	??___ftadd
  2142  0125  0860               	movf	??___ftadd,w
  2143  0126  00A3               	movwf	___ftpack@exp
  2144  0127  0864               	movf	___ftadd@sign,w
  2145  0128  00E1               	movwf	??___ftadd+1
  2146  0129  0861               	movf	??___ftadd+1,w
  2147  012A  00A4               	movwf	___ftpack@sign
  2148  012B  120A  118A  236C   	fcall	___ftpack
  2149  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2150  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2151  0130  0820               	movf	?___ftpack,w
  2152  0131  00DA               	movwf	?___ftadd
  2153  0132  0821               	movf	?___ftpack+1,w
  2154  0133  00DB               	movwf	?___ftadd+1
  2155  0134  0822               	movf	?___ftpack+2,w
  2156  0135  00DC               	movwf	?___ftadd+2
  2157  0136  0008               	return
  2158  0137                     __end_of___ftadd:	
  2159                           
  2160                           	psect	text9
  2161  043A                     __ptext9:	
  2162 ;; *************** function _move *****************
  2163 ;; Defined at:
  2164 ;;		line 18 in file "motor.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  steps           1    wreg     unsigned char 
  2167 ;;  direction       1    0[BANK0 ] unsigned char 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  steps           1    3[BANK0 ] unsigned char 
  2170 ;;  i               1    4[BANK0 ] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         0       1       0       0       0
  2181 ;;      Locals:         0       2       0       0       0
  2182 ;;      Temps:          0       2       0       0       0
  2183 ;;      Totals:         0       5       0       0       0
  2184 ;;Total ram usage:        5 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    2
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;;		_moveDeg
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _move
  2197  043A                     _move:	
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0]
  2201                           ;move@steps stored from wreg
  2202  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2203  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2204  043C  00A3               	movwf	move@steps
  2205                           
  2206                           ;motor.c: 19: for(char i = 0; i<steps; i++){
  2207  043D  01A4               	clrf	move@i
  2208  043E                     l1392:	
  2209  043E  0823               	movf	move@steps,w
  2210  043F  0224               	subwf	move@i,w
  2211  0440  1803               	btfsc	3,0
  2212  0441  0008               	return
  2213                           
  2214                           ;motor.c: 20: if(cstep == 7 && direction == 1){
  2215  0442  3007               	movlw	7
  2216  0443  067A               	xorwf	_cstep,w
  2217  0444  1D03               	btfss	3,2
  2218  0445  2C51               	goto	l1366
  2219  0446  0320               	decf	move@direction,w
  2220  0447  1D03               	btfss	3,2
  2221  0448  2C51               	goto	l1366
  2222                           
  2223                           ;motor.c: 21: PORTC = halfSteps[0];
  2224  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2225  044A  1303               	bcf	3,6	;RP1=0, select bank1
  2226  044B  0820               	movf	_halfSteps^(0+128),w
  2227  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2228  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2229  044E  0087               	movwf	7	;volatile
  2230                           
  2231                           ;motor.c: 22: cstep = 0;
  2232  044F  01FA               	clrf	_cstep
  2233                           
  2234                           ;motor.c: 23: }
  2235  0450  2C89               	goto	l1388
  2236  0451                     l1366:	
  2237                           
  2238                           ;motor.c: 24: else if(cstep == 0 && direction == 0){
  2239  0451  087A               	movf	_cstep,w
  2240  0452  1D03               	btfss	3,2
  2241  0453  2C62               	goto	l114
  2242  0454  0820               	movf	move@direction,w
  2243  0455  1D03               	btfss	3,2
  2244  0456  2C62               	goto	l114
  2245                           
  2246                           ;motor.c: 25: PORTC = halfSteps[7];
  2247  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2248  0458  1303               	bcf	3,6	;RP1=0, select bank1
  2249  0459  082E               	movf	(_halfSteps^(0+128)+14),w
  2250  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2251  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2252  045C  0087               	movwf	7	;volatile
  2253                           
  2254                           ;motor.c: 26: cstep = 7;
  2255  045D  3007               	movlw	7
  2256  045E  00A1               	movwf	??_move
  2257  045F  0821               	movf	??_move,w
  2258  0460  00FA               	movwf	_cstep
  2259                           
  2260                           ;motor.c: 27: }
  2261  0461  2C89               	goto	l1388
  2262  0462                     l114:	
  2263                           
  2264                           ;motor.c: 28: else if (cstep >= 0 && cstep <= 7){
  2265  0462  1BFA               	btfsc	_cstep,7
  2266  0463  2C88               	goto	l1386
  2267  0464  087A               	movf	_cstep,w
  2268  0465  3A80               	xorlw	128
  2269  0466  3E78               	addlw	-136
  2270  0467  1803               	skipnc
  2271  0468  2C88               	goto	l1386
  2272                           
  2273                           ;motor.c: 29: if(direction == 1){
  2274  0469  0320               	decf	move@direction,w
  2275  046A  1D03               	btfss	3,2
  2276  046B  2C77               	goto	l1380
  2277                           
  2278                           ;motor.c: 30: PORTC = halfSteps[cstep+1];
  2279  046C  087A               	movf	_cstep,w
  2280  046D  00A1               	movwf	??_move
  2281  046E  0721               	addwf	??_move,w
  2282  046F  3E02               	addlw	2
  2283  0470  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2284  0471  0084               	movwf	4
  2285  0472  1383               	bcf	3,7	;select IRP bank1
  2286  0473  0800               	movf	0,w
  2287  0474  0087               	movwf	7	;volatile
  2288                           
  2289                           ;motor.c: 31: cstep++;
  2290  0475  3001               	movlw	1
  2291  0476  2C84               	goto	L2
  2292  0477                     l1380:	
  2293                           ;motor.c: 32: }
  2294                           
  2295                           
  2296                           ;motor.c: 33: else if(direction == 0){
  2297  0477  0820               	movf	move@direction,w
  2298  0478  1D03               	btfss	3,2
  2299  0479  2C89               	goto	l1388
  2300                           
  2301                           ;motor.c: 34: PORTC = halfSteps[cstep-1];
  2302  047A  087A               	movf	_cstep,w
  2303  047B  00A1               	movwf	??_move
  2304  047C  0721               	addwf	??_move,w
  2305  047D  3EFE               	addlw	254
  2306  047E  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2307  047F  0084               	movwf	4
  2308  0480  1383               	bcf	3,7	;select IRP bank1
  2309  0481  0800               	movf	0,w
  2310  0482  0087               	movwf	7	;volatile
  2311                           
  2312                           ;motor.c: 35: cstep--;
  2313  0483  30FF               	movlw	255
  2314  0484                     L2:	
  2315  0484  00A1               	movwf	??_move
  2316  0485  0821               	movf	??_move,w
  2317  0486  07FA               	addwf	_cstep,f
  2318                           
  2319                           ;motor.c: 36: }
  2320                           ;motor.c: 38: }
  2321  0487  2C89               	goto	l1388
  2322  0488                     l1386:	
  2323                           
  2324                           ;motor.c: 39: else{
  2325                           ;motor.c: 40: PORTC = 0x00;
  2326  0488  0187               	clrf	7	;volatile
  2327  0489                     l1388:	
  2328                           
  2329                           ;motor.c: 41: }
  2330                           ;motor.c: 42: _delay((unsigned long)((20)*(20000000/4000.0)));
  2331  0489  3082               	movlw	130
  2332  048A  00A2               	movwf	??_move+1
  2333  048B  30DD               	movlw	221
  2334  048C  00A1               	movwf	??_move
  2335  048D                     u1777:	
  2336  048D  0BA1               	decfsz	??_move,f
  2337  048E  2C8D               	goto	u1777
  2338  048F  0BA2               	decfsz	??_move+1,f
  2339  0490  2C8D               	goto	u1777
  2340  0491  2C92               	nop2
  2341  0492  3001               	movlw	1
  2342  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0495  00A1               	movwf	??_move
  2345  0496  0821               	movf	??_move,w
  2346  0497  07A4               	addwf	move@i,f
  2347  0498  2C3E               	goto	l1392
  2348  0499                     __end_of_move:	
  2349                           
  2350                           	psect	text10
  2351  0499                     __ptext10:	
  2352 ;; *************** function ___ftge *****************
  2353 ;; Defined at:
  2354 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  ff1             3    0[BANK0 ] float 
  2357 ;;  ff2             3    3[BANK0 ] float 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;		None
  2360 ;; Return value:  Size  Location     Type
  2361 ;;		None               void
  2362 ;; Registers used:
  2363 ;;		wreg, status,2, status,0
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2369 ;;      Params:         0       6       0       0       0
  2370 ;;      Locals:         0       0       0       0       0
  2371 ;;      Temps:          0       6       0       0       0
  2372 ;;      Totals:         0      12       0       0       0
  2373 ;;Total ram usage:       12 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    2
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_moveDeg
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           
  2384                           ;psect for function ___ftge
  2385  0499                     ___ftge:	
  2386                           
  2387                           ;incstack = 0
  2388                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2389  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2390  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2391  049B  1FA2               	btfss	___ftge@ff1+2,7
  2392  049C  2CC2               	goto	l1448
  2393  049D  3000               	movlw	0
  2394  049E  00A6               	movwf	??___ftge
  2395  049F  3000               	movlw	0
  2396  04A0  00A7               	movwf	??___ftge+1
  2397  04A1  3080               	movlw	128
  2398  04A2  00A8               	movwf	??___ftge+2
  2399  04A3  0920               	comf	___ftge@ff1,w
  2400  04A4  00A9               	movwf	??___ftge+3
  2401  04A5  0921               	comf	___ftge@ff1+1,w
  2402  04A6  00AA               	movwf	??___ftge+4
  2403  04A7  0922               	comf	___ftge@ff1+2,w
  2404  04A8  00AB               	movwf	??___ftge+5
  2405  04A9  0AA9               	incf	??___ftge+3,f
  2406  04AA  1903               	skipnz
  2407  04AB  0AAA               	incf	??___ftge+4,f
  2408  04AC  1903               	skipnz
  2409  04AD  0AAB               	incf	??___ftge+5,f
  2410  04AE  0829               	movf	??___ftge+3,w
  2411  04AF  07A6               	addwf	??___ftge,f
  2412  04B0  082A               	movf	??___ftge+4,w
  2413  04B1  1803               	skipnc
  2414  04B2  0F2A               	incfsz	??___ftge+4,w
  2415  04B3  2CB5               	goto	u1661
  2416  04B4  2CB6               	goto	u1662
  2417  04B5                     u1661:	
  2418  04B5  07A7               	addwf	??___ftge+1,f
  2419  04B6                     u1662:	
  2420  04B6  082B               	movf	??___ftge+5,w
  2421  04B7  1803               	skipnc
  2422  04B8  0F2B               	incfsz	??___ftge+5,w
  2423  04B9  2CBB               	goto	u1663
  2424  04BA  2CBC               	goto	u1664
  2425  04BB                     u1663:	
  2426  04BB  07A8               	addwf	??___ftge+2,f
  2427  04BC                     u1664:	
  2428  04BC  0826               	movf	??___ftge,w
  2429  04BD  00A0               	movwf	___ftge@ff1
  2430  04BE  0827               	movf	??___ftge+1,w
  2431  04BF  00A1               	movwf	___ftge@ff1+1
  2432  04C0  0828               	movf	??___ftge+2,w
  2433  04C1  00A2               	movwf	___ftge@ff1+2
  2434  04C2                     l1448:	
  2435  04C2  1FA5               	btfss	___ftge@ff2+2,7
  2436  04C3  2CE9               	goto	l1452
  2437  04C4  3000               	movlw	0
  2438  04C5  00A6               	movwf	??___ftge
  2439  04C6  3000               	movlw	0
  2440  04C7  00A7               	movwf	??___ftge+1
  2441  04C8  3080               	movlw	128
  2442  04C9  00A8               	movwf	??___ftge+2
  2443  04CA  0923               	comf	___ftge@ff2,w
  2444  04CB  00A9               	movwf	??___ftge+3
  2445  04CC  0924               	comf	___ftge@ff2+1,w
  2446  04CD  00AA               	movwf	??___ftge+4
  2447  04CE  0925               	comf	___ftge@ff2+2,w
  2448  04CF  00AB               	movwf	??___ftge+5
  2449  04D0  0AA9               	incf	??___ftge+3,f
  2450  04D1  1903               	skipnz
  2451  04D2  0AAA               	incf	??___ftge+4,f
  2452  04D3  1903               	skipnz
  2453  04D4  0AAB               	incf	??___ftge+5,f
  2454  04D5  0829               	movf	??___ftge+3,w
  2455  04D6  07A6               	addwf	??___ftge,f
  2456  04D7  082A               	movf	??___ftge+4,w
  2457  04D8  1803               	skipnc
  2458  04D9  0F2A               	incfsz	??___ftge+4,w
  2459  04DA  2CDC               	goto	u1681
  2460  04DB  2CDD               	goto	u1682
  2461  04DC                     u1681:	
  2462  04DC  07A7               	addwf	??___ftge+1,f
  2463  04DD                     u1682:	
  2464  04DD  082B               	movf	??___ftge+5,w
  2465  04DE  1803               	skipnc
  2466  04DF  0F2B               	incfsz	??___ftge+5,w
  2467  04E0  2CE2               	goto	u1683
  2468  04E1  2CE3               	goto	u1684
  2469  04E2                     u1683:	
  2470  04E2  07A8               	addwf	??___ftge+2,f
  2471  04E3                     u1684:	
  2472  04E3  0826               	movf	??___ftge,w
  2473  04E4  00A3               	movwf	___ftge@ff2
  2474  04E5  0827               	movf	??___ftge+1,w
  2475  04E6  00A4               	movwf	___ftge@ff2+1
  2476  04E7  0828               	movf	??___ftge+2,w
  2477  04E8  00A5               	movwf	___ftge@ff2+2
  2478  04E9                     l1452:	
  2479  04E9  3080               	movlw	128
  2480  04EA  06A2               	xorwf	___ftge@ff1+2,f
  2481  04EB  3080               	movlw	128
  2482  04EC  06A5               	xorwf	___ftge@ff2+2,f
  2483  04ED  0825               	movf	___ftge@ff2+2,w
  2484  04EE  0222               	subwf	___ftge@ff1+2,w
  2485  04EF  1D03               	skipz
  2486  04F0  0008               	return
  2487  04F1  0824               	movf	___ftge@ff2+1,w
  2488  04F2  0221               	subwf	___ftge@ff1+1,w
  2489  04F3  1D03               	skipz
  2490  04F4  0008               	return
  2491  04F5  0823               	movf	___ftge@ff2,w
  2492  04F6  0220               	subwf	___ftge@ff1,w
  2493  04F7  0008               	return
  2494  04F8                     __end_of___ftge:	
  2495                           
  2496                           	psect	text11
  2497  0226                     __ptext11:	
  2498 ;; *************** function ___ftdiv *****************
  2499 ;; Defined at:
  2500 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  f2              3   19[BANK0 ] float 
  2503 ;;  f1              3   22[BANK0 ] float 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  f3              3   30[BANK0 ] float 
  2506 ;;  sign            1   34[BANK0 ] unsigned char 
  2507 ;;  exp             1   33[BANK0 ] unsigned char 
  2508 ;;  cntr            1   29[BANK0 ] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  3   19[BANK0 ] float 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2518 ;;      Params:         0       6       0       0       0
  2519 ;;      Locals:         0       6       0       0       0
  2520 ;;      Temps:          0       4       0       0       0
  2521 ;;      Totals:         0      16       0       0       0
  2522 ;;Total ram usage:       16 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		___ftpack
  2527 ;; This function is called by:
  2528 ;;		_moveDeg
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           
  2533                           ;psect for function ___ftdiv
  2534  0226                     ___ftdiv:	
  2535                           
  2536                           ;incstack = 0
  2537                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2538  0226  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0227  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0228  0836               	movf	___ftdiv@f1,w
  2541  0229  00B9               	movwf	??___ftdiv
  2542  022A  0837               	movf	___ftdiv@f1+1,w
  2543  022B  00BA               	movwf	??___ftdiv+1
  2544  022C  0838               	movf	___ftdiv@f1+2,w
  2545  022D  00BB               	movwf	??___ftdiv+2
  2546  022E  1003               	clrc
  2547  022F  0D3A               	rlf	??___ftdiv+1,w
  2548  0230  0D3B               	rlf	??___ftdiv+2,w
  2549  0231  00BC               	movwf	??___ftdiv+3
  2550  0232  083C               	movf	??___ftdiv+3,w
  2551  0233  00C1               	movwf	___ftdiv@exp
  2552  0234  0841               	movf	___ftdiv@exp,w
  2553  0235  1D03               	btfss	3,2
  2554  0236  2A3E               	goto	l1408
  2555  0237  3000               	movlw	0
  2556  0238  00B3               	movwf	?___ftdiv
  2557  0239  3000               	movlw	0
  2558  023A  00B4               	movwf	?___ftdiv+1
  2559  023B  3000               	movlw	0
  2560  023C  00B5               	movwf	?___ftdiv+2
  2561  023D  0008               	return
  2562  023E                     l1408:	
  2563  023E  0833               	movf	___ftdiv@f2,w
  2564  023F  00B9               	movwf	??___ftdiv
  2565  0240  0834               	movf	___ftdiv@f2+1,w
  2566  0241  00BA               	movwf	??___ftdiv+1
  2567  0242  0835               	movf	___ftdiv@f2+2,w
  2568  0243  00BB               	movwf	??___ftdiv+2
  2569  0244  1003               	clrc
  2570  0245  0D3A               	rlf	??___ftdiv+1,w
  2571  0246  0D3B               	rlf	??___ftdiv+2,w
  2572  0247  00BC               	movwf	??___ftdiv+3
  2573  0248  083C               	movf	??___ftdiv+3,w
  2574  0249  00C2               	movwf	___ftdiv@sign
  2575  024A  0842               	movf	___ftdiv@sign,w
  2576  024B  1D03               	btfss	3,2
  2577  024C  2A54               	goto	l1414
  2578  024D  3000               	movlw	0
  2579  024E  00B3               	movwf	?___ftdiv
  2580  024F  3000               	movlw	0
  2581  0250  00B4               	movwf	?___ftdiv+1
  2582  0251  3000               	movlw	0
  2583  0252  00B5               	movwf	?___ftdiv+2
  2584  0253  0008               	return
  2585  0254                     l1414:	
  2586  0254  3000               	movlw	0
  2587  0255  00BE               	movwf	___ftdiv@f3
  2588  0256  3000               	movlw	0
  2589  0257  00BF               	movwf	___ftdiv@f3+1
  2590  0258  3000               	movlw	0
  2591  0259  00C0               	movwf	___ftdiv@f3+2
  2592  025A  3089               	movlw	137
  2593  025B  0742               	addwf	___ftdiv@sign,w
  2594  025C  00B9               	movwf	??___ftdiv
  2595  025D  0839               	movf	??___ftdiv,w
  2596  025E  02C1               	subwf	___ftdiv@exp,f
  2597  025F  0836               	movf	___ftdiv@f1,w
  2598  0260  00B9               	movwf	??___ftdiv
  2599  0261  0837               	movf	___ftdiv@f1+1,w
  2600  0262  00BA               	movwf	??___ftdiv+1
  2601  0263  0838               	movf	___ftdiv@f1+2,w
  2602  0264  00BB               	movwf	??___ftdiv+2
  2603  0265  3010               	movlw	16
  2604  0266                     u1595:	
  2605  0266  1003               	clrc
  2606  0267  0CBB               	rrf	??___ftdiv+2,f
  2607  0268  0CBA               	rrf	??___ftdiv+1,f
  2608  0269  0CB9               	rrf	??___ftdiv,f
  2609  026A  3EFF               	addlw	-1
  2610  026B  1D03               	skipz
  2611  026C  2A66               	goto	u1595
  2612  026D  0839               	movf	??___ftdiv,w
  2613  026E  00BC               	movwf	??___ftdiv+3
  2614  026F  083C               	movf	??___ftdiv+3,w
  2615  0270  00C2               	movwf	___ftdiv@sign
  2616  0271  0833               	movf	___ftdiv@f2,w
  2617  0272  00B9               	movwf	??___ftdiv
  2618  0273  0834               	movf	___ftdiv@f2+1,w
  2619  0274  00BA               	movwf	??___ftdiv+1
  2620  0275  0835               	movf	___ftdiv@f2+2,w
  2621  0276  00BB               	movwf	??___ftdiv+2
  2622  0277  3010               	movlw	16
  2623  0278                     u1605:	
  2624  0278  1003               	clrc
  2625  0279  0CBB               	rrf	??___ftdiv+2,f
  2626  027A  0CBA               	rrf	??___ftdiv+1,f
  2627  027B  0CB9               	rrf	??___ftdiv,f
  2628  027C  3EFF               	addlw	-1
  2629  027D  1D03               	skipz
  2630  027E  2A78               	goto	u1605
  2631  027F  0839               	movf	??___ftdiv,w
  2632  0280  00BC               	movwf	??___ftdiv+3
  2633  0281  083C               	movf	??___ftdiv+3,w
  2634  0282  06C2               	xorwf	___ftdiv@sign,f
  2635  0283  3080               	movlw	128
  2636  0284  00B9               	movwf	??___ftdiv
  2637  0285  0839               	movf	??___ftdiv,w
  2638  0286  05C2               	andwf	___ftdiv@sign,f
  2639  0287  17B7               	bsf	___ftdiv@f1+1,7
  2640  0288  30FF               	movlw	255
  2641  0289  05B6               	andwf	___ftdiv@f1,f
  2642  028A  30FF               	movlw	255
  2643  028B  05B7               	andwf	___ftdiv@f1+1,f
  2644  028C  3000               	movlw	0
  2645  028D  05B8               	andwf	___ftdiv@f1+2,f
  2646  028E  17B4               	bsf	___ftdiv@f2+1,7
  2647  028F  30FF               	movlw	255
  2648  0290  05B3               	andwf	___ftdiv@f2,f
  2649  0291  30FF               	movlw	255
  2650  0292  05B4               	andwf	___ftdiv@f2+1,f
  2651  0293  3000               	movlw	0
  2652  0294  05B5               	andwf	___ftdiv@f2+2,f
  2653  0295  3018               	movlw	24
  2654  0296  00B9               	movwf	??___ftdiv
  2655  0297  0839               	movf	??___ftdiv,w
  2656  0298  00BD               	movwf	___ftdiv@cntr
  2657  0299                     l1428:	
  2658  0299  3001               	movlw	1
  2659  029A                     u1615:	
  2660  029A  1003               	clrc
  2661  029B  0DBE               	rlf	___ftdiv@f3,f
  2662  029C  0DBF               	rlf	___ftdiv@f3+1,f
  2663  029D  0DC0               	rlf	___ftdiv@f3+2,f
  2664  029E  3EFF               	addlw	-1
  2665  029F  1D03               	skipz
  2666  02A0  2A9A               	goto	u1615
  2667  02A1  0835               	movf	___ftdiv@f2+2,w
  2668  02A2  0238               	subwf	___ftdiv@f1+2,w
  2669  02A3  1D03               	skipz
  2670  02A4  2AAB               	goto	u1625
  2671  02A5  0834               	movf	___ftdiv@f2+1,w
  2672  02A6  0237               	subwf	___ftdiv@f1+1,w
  2673  02A7  1D03               	skipz
  2674  02A8  2AAB               	goto	u1625
  2675  02A9  0833               	movf	___ftdiv@f2,w
  2676  02AA  0236               	subwf	___ftdiv@f1,w
  2677  02AB                     u1625:	
  2678  02AB  1C03               	skipc
  2679  02AC  2AB8               	goto	l1436
  2680  02AD  0833               	movf	___ftdiv@f2,w
  2681  02AE  02B6               	subwf	___ftdiv@f1,f
  2682  02AF  0834               	movf	___ftdiv@f2+1,w
  2683  02B0  1C03               	skipc
  2684  02B1  0F34               	incfsz	___ftdiv@f2+1,w
  2685  02B2  02B7               	subwf	___ftdiv@f1+1,f
  2686  02B3  0835               	movf	___ftdiv@f2+2,w
  2687  02B4  1C03               	skipc
  2688  02B5  0A35               	incf	___ftdiv@f2+2,w
  2689  02B6  02B8               	subwf	___ftdiv@f1+2,f
  2690  02B7  143E               	bsf	___ftdiv@f3,0
  2691  02B8                     l1436:	
  2692  02B8  3001               	movlw	1
  2693  02B9                     u1635:	
  2694  02B9  1003               	clrc
  2695  02BA  0DB6               	rlf	___ftdiv@f1,f
  2696  02BB  0DB7               	rlf	___ftdiv@f1+1,f
  2697  02BC  0DB8               	rlf	___ftdiv@f1+2,f
  2698  02BD  3EFF               	addlw	-1
  2699  02BE  1D03               	skipz
  2700  02BF  2AB9               	goto	u1635
  2701  02C0  3001               	movlw	1
  2702  02C1  02BD               	subwf	___ftdiv@cntr,f
  2703  02C2  1D03               	btfss	3,2
  2704  02C3  2A99               	goto	l1428
  2705  02C4  083E               	movf	___ftdiv@f3,w
  2706  02C5  00A0               	movwf	___ftpack@arg
  2707  02C6  083F               	movf	___ftdiv@f3+1,w
  2708  02C7  00A1               	movwf	___ftpack@arg+1
  2709  02C8  0840               	movf	___ftdiv@f3+2,w
  2710  02C9  00A2               	movwf	___ftpack@arg+2
  2711  02CA  0841               	movf	___ftdiv@exp,w
  2712  02CB  00B9               	movwf	??___ftdiv
  2713  02CC  0839               	movf	??___ftdiv,w
  2714  02CD  00A3               	movwf	___ftpack@exp
  2715  02CE  0842               	movf	___ftdiv@sign,w
  2716  02CF  00BA               	movwf	??___ftdiv+1
  2717  02D0  083A               	movf	??___ftdiv+1,w
  2718  02D1  00A4               	movwf	___ftpack@sign
  2719  02D2  120A  118A  236C   	fcall	___ftpack
  2720  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2721  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2722  02D7  0820               	movf	?___ftpack,w
  2723  02D8  00B3               	movwf	?___ftdiv
  2724  02D9  0821               	movf	?___ftpack+1,w
  2725  02DA  00B4               	movwf	?___ftdiv+1
  2726  02DB  0822               	movf	?___ftpack+2,w
  2727  02DC  00B5               	movwf	?___ftdiv+2
  2728  02DD  0008               	return
  2729  02DE                     __end_of___ftdiv:	
  2730                           
  2731                           	psect	text12
  2732  036C                     __ptext12:	
  2733 ;; *************** function ___ftpack *****************
  2734 ;; Defined at:
  2735 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  arg             3    0[BANK0 ] unsigned um
  2738 ;;  exp             1    3[BANK0 ] unsigned char 
  2739 ;;  sign            1    4[BANK0 ] unsigned char 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;		None
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  3    0[BANK0 ] float 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2751 ;;      Params:         0       5       0       0       0
  2752 ;;      Locals:         0       0       0       0       0
  2753 ;;      Temps:          0       3       0       0       0
  2754 ;;      Totals:         0       8       0       0       0
  2755 ;;Total ram usage:        8 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    2
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		___altoft
  2762 ;;		___ftadd
  2763 ;;		___ftdiv
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function ___ftpack
  2769  036C                     ___ftpack:	
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2773  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2774  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2775  036E  0823               	movf	___ftpack@exp,w
  2776  036F  1903               	btfsc	3,2
  2777  0370  2B76               	goto	l1158
  2778  0371  0822               	movf	___ftpack@arg+2,w
  2779  0372  0421               	iorwf	___ftpack@arg+1,w
  2780  0373  0420               	iorwf	___ftpack@arg,w
  2781  0374  1D03               	skipz
  2782  0375  2B89               	goto	l1164
  2783  0376                     l1158:	
  2784  0376  3000               	movlw	0
  2785  0377  00A0               	movwf	?___ftpack
  2786  0378  3000               	movlw	0
  2787  0379  00A1               	movwf	?___ftpack+1
  2788  037A  3000               	movlw	0
  2789  037B  00A2               	movwf	?___ftpack+2
  2790  037C  0008               	return
  2791  037D                     l1162:	
  2792  037D  3001               	movlw	1
  2793  037E  00A5               	movwf	??___ftpack
  2794  037F  0825               	movf	??___ftpack,w
  2795  0380  07A3               	addwf	___ftpack@exp,f
  2796  0381  3001               	movlw	1
  2797  0382                     u975:	
  2798  0382  1003               	clrc
  2799  0383  0CA2               	rrf	___ftpack@arg+2,f
  2800  0384  0CA1               	rrf	___ftpack@arg+1,f
  2801  0385  0CA0               	rrf	___ftpack@arg,f
  2802  0386  3EFF               	addlw	-1
  2803  0387  1D03               	skipz
  2804  0388  2B82               	goto	u975
  2805  0389                     l1164:	
  2806  0389  30FE               	movlw	254
  2807  038A  0522               	andwf	___ftpack@arg+2,w
  2808  038B  1903               	btfsc	3,2
  2809  038C  2BA4               	goto	l423
  2810  038D  2B7D               	goto	l1162
  2811  038E                     l1166:	
  2812  038E  3001               	movlw	1
  2813  038F  00A5               	movwf	??___ftpack
  2814  0390  0825               	movf	??___ftpack,w
  2815  0391  07A3               	addwf	___ftpack@exp,f
  2816  0392  3001               	movlw	1
  2817  0393  07A0               	addwf	___ftpack@arg,f
  2818  0394  3000               	movlw	0
  2819  0395  1803               	skipnc
  2820  0396  3001               	movlw	1
  2821  0397  07A1               	addwf	___ftpack@arg+1,f
  2822  0398  3000               	movlw	0
  2823  0399  1803               	skipnc
  2824  039A  3001               	movlw	1
  2825  039B  07A2               	addwf	___ftpack@arg+2,f
  2826  039C  3001               	movlw	1
  2827  039D                     u995:	
  2828  039D  1003               	clrc
  2829  039E  0CA2               	rrf	___ftpack@arg+2,f
  2830  039F  0CA1               	rrf	___ftpack@arg+1,f
  2831  03A0  0CA0               	rrf	___ftpack@arg,f
  2832  03A1  3EFF               	addlw	-1
  2833  03A2  1D03               	skipz
  2834  03A3  2B9D               	goto	u995
  2835  03A4                     l423:	
  2836  03A4  30FF               	movlw	255
  2837  03A5  0522               	andwf	___ftpack@arg+2,w
  2838  03A6  1903               	btfsc	3,2
  2839  03A7  2BB3               	goto	l1174
  2840  03A8  2B8E               	goto	l1166
  2841  03A9                     l1172:	
  2842  03A9  3001               	movlw	1
  2843  03AA  02A3               	subwf	___ftpack@exp,f
  2844  03AB  3001               	movlw	1
  2845  03AC                     u1015:	
  2846  03AC  1003               	clrc
  2847  03AD  0DA0               	rlf	___ftpack@arg,f
  2848  03AE  0DA1               	rlf	___ftpack@arg+1,f
  2849  03AF  0DA2               	rlf	___ftpack@arg+2,f
  2850  03B0  3EFF               	addlw	-1
  2851  03B1  1D03               	skipz
  2852  03B2  2BAC               	goto	u1015
  2853  03B3                     l1174:	
  2854  03B3  1BA1               	btfsc	___ftpack@arg+1,7
  2855  03B4  2BB9               	goto	l430
  2856  03B5  3002               	movlw	2
  2857  03B6  0223               	subwf	___ftpack@exp,w
  2858  03B7  1803               	skipnc
  2859  03B8  2BA9               	goto	l1172
  2860  03B9                     l430:	
  2861  03B9  1823               	btfsc	___ftpack@exp,0
  2862  03BA  2BC1               	goto	l431
  2863  03BB  30FF               	movlw	255
  2864  03BC  05A0               	andwf	___ftpack@arg,f
  2865  03BD  307F               	movlw	127
  2866  03BE  05A1               	andwf	___ftpack@arg+1,f
  2867  03BF  30FF               	movlw	255
  2868  03C0  05A2               	andwf	___ftpack@arg+2,f
  2869  03C1                     l431:	
  2870  03C1  1003               	clrc
  2871  03C2  0CA3               	rrf	___ftpack@exp,f
  2872  03C3  0823               	movf	___ftpack@exp,w
  2873  03C4  00A5               	movwf	??___ftpack
  2874  03C5  01A6               	clrf	??___ftpack+1
  2875  03C6  01A7               	clrf	??___ftpack+2
  2876  03C7  3010               	movlw	16
  2877  03C8                     u1055:	
  2878  03C8  1003               	clrc
  2879  03C9  0DA5               	rlf	??___ftpack,f
  2880  03CA  0DA6               	rlf	??___ftpack+1,f
  2881  03CB  0DA7               	rlf	??___ftpack+2,f
  2882  03CC  3EFF               	addlw	-1
  2883  03CD  1D03               	skipz
  2884  03CE  2BC8               	goto	u1055
  2885  03CF  0825               	movf	??___ftpack,w
  2886  03D0  04A0               	iorwf	___ftpack@arg,f
  2887  03D1  0826               	movf	??___ftpack+1,w
  2888  03D2  04A1               	iorwf	___ftpack@arg+1,f
  2889  03D3  0827               	movf	??___ftpack+2,w
  2890  03D4  04A2               	iorwf	___ftpack@arg+2,f
  2891  03D5  0824               	movf	___ftpack@sign,w
  2892  03D6  1903               	btfsc	3,2
  2893  03D7  0008               	return
  2894  03D8  17A2               	bsf	___ftpack@arg+2,7
  2895  03D9  0008               	return
  2896  03DA                     __end_of___ftpack:	
  2897                           
  2898                           	psect	text13
  2899  06E4                     __ptext13:	
  2900 ;; *************** function _initializeADC *****************
  2901 ;; Defined at:
  2902 ;;		line 4 in file "adConv.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2916 ;;      Params:         0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    2
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _initializeADC
  2932  06E4                     _initializeADC:	
  2933                           
  2934                           ;adConv.c: 7: ADCON1 = 0b10000000;
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in _initializeADC: [wreg]
  2938  06E4  3080               	movlw	128
  2939  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  2940  06E6  1303               	bcf	3,6	;RP1=0, select bank1
  2941  06E7  009F               	movwf	31	;volatile
  2942                           
  2943                           ;adConv.c: 9: ADCON0 = 0b100000001;
  2944  06E8  3001               	movlw	1
  2945  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2946  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  2947  06EB  009F               	movwf	31	;volatile
  2948                           
  2949                           ;adConv.c: 13: ADIF = 0;
  2950  06EC  130C               	bcf	12,6	;volatile
  2951                           
  2952                           ;adConv.c: 14: ADIE = 1;
  2953  06ED  1683               	bsf	3,5	;RP0=1, select bank1
  2954  06EE  1303               	bcf	3,6	;RP1=0, select bank1
  2955  06EF  170C               	bsf	12,6	;volatile
  2956                           
  2957                           ;adConv.c: 15: PEIE = 1;
  2958  06F0  170B               	bsf	11,6	;volatile
  2959                           
  2960                           ;adConv.c: 16: GIE = 1;
  2961  06F1  178B               	bsf	11,7	;volatile
  2962  06F2  0008               	return
  2963  06F3                     __end_of_initializeADC:	
  2964                           
  2965                           	psect	text14
  2966  06BD                     __ptext14:	
  2967 ;; *************** function _initialise *****************
  2968 ;; Defined at:
  2969 ;;		line 44 in file "main.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0
  2986 ;;      Totals:         0       0       0       0       0
  2987 ;;Total ram usage:        0 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    2
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           
  2998                           ;psect for function _initialise
  2999  06BD                     _initialise:	
  3000                           
  3001                           ;main.c: 47: TRISB = 0b00000111;
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _initialise: [wreg+status,2]
  3005  06BD  3007               	movlw	7
  3006  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  3007  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  3008  06C0  0086               	movwf	6	;volatile
  3009                           
  3010                           ;main.c: 48: TRISC = 0;
  3011  06C1  0187               	clrf	7	;volatile
  3012                           
  3013                           ;main.c: 50: RB3 = 1;
  3014  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  3015  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  3016  06C4  1586               	bsf	6,3	;volatile
  3017                           
  3018                           ;main.c: 51: RB4 = 1;
  3019  06C5  1606               	bsf	6,4	;volatile
  3020                           
  3021                           ;main.c: 54: TMR0 = 100;
  3022  06C6  3064               	movlw	100
  3023  06C7  0081               	movwf	1	;volatile
  3024                           
  3025                           ;main.c: 55: T0CS = 0;
  3026  06C8  1683               	bsf	3,5	;RP0=1, select bank1
  3027  06C9  1303               	bcf	3,6	;RP1=0, select bank1
  3028  06CA  1281               	bcf	1,5	;volatile
  3029                           
  3030                           ;main.c: 56: T0SE = 0;
  3031  06CB  1201               	bcf	1,4	;volatile
  3032                           
  3033                           ;main.c: 57: PSA = 0;
  3034  06CC  1181               	bcf	1,3	;volatile
  3035                           
  3036                           ;main.c: 58: PS0 = 0;
  3037  06CD  1001               	bcf	1,0	;volatile
  3038                           
  3039                           ;main.c: 59: PS1 = 0;
  3040  06CE  1081               	bcf	1,1	;volatile
  3041                           
  3042                           ;main.c: 60: PS2 = 1;
  3043  06CF  1501               	bsf	1,2	;volatile
  3044                           
  3045                           ;main.c: 62: TMR0IE = 1;
  3046  06D0  168B               	bsf	11,5	;volatile
  3047                           
  3048                           ;main.c: 63: (GIE = 1);
  3049  06D1  178B               	bsf	11,7	;volatile
  3050  06D2  0008               	return
  3051  06D3                     __end_of_initialise:	
  3052                           
  3053                           	psect	text15
  3054  04F8                     __ptext15:	
  3055 ;; *************** function _isr *****************
  3056 ;; Defined at:
  3057 ;;		line 13 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  ADCResult       2    7[COMMON] int 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3071 ;;      Params:         0       0       0       0       0
  3072 ;;      Locals:         2       0       0       0       0
  3073 ;;      Temps:          6       0       0       0       0
  3074 ;;      Totals:         8       0       0       0       0
  3075 ;;Total ram usage:        8 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    1
  3078 ;; This function calls:
  3079 ;;		_debounceButtons
  3080 ;; This function is called by:
  3081 ;;		Interrupt level 1
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _isr
  3087  04F8                     _isr:	
  3088                           
  3089                           ;main.c: 14: if (T0IF){
  3090  04F8  1D0B               	btfss	11,2	;volatile
  3091  04F9  2D02               	goto	i1l1100
  3092                           
  3093                           ;main.c: 15: T0IF = 0;
  3094  04FA  110B               	bcf	11,2	;volatile
  3095                           
  3096                           ;main.c: 16: TMR0 = 100;
  3097  04FB  3064               	movlw	100
  3098  04FC  0081               	movwf	1	;volatile
  3099                           
  3100                           ;main.c: 17: debounceButtons();
  3101  04FD  120A  118A  2671  120A  118A  	fcall	_debounceButtons
  3102  0502                     i1l1100:	
  3103                           
  3104                           ;main.c: 18: }
  3105                           ;main.c: 19: if(ADIF){
  3106  0502  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0503  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0504  1F0C               	btfss	12,6	;volatile
  3109  0505  2D46               	goto	i1l81
  3110                           
  3111                           ;main.c: 20: int ADCResult = (ADRESH<<8) + ADRESL ;
  3112  0506  081E               	movf	30,w	;volatile
  3113  0507  00F8               	movwf	isr@ADCResult+1
  3114  0508  1683               	bsf	3,5	;RP0=1, select bank1
  3115  0509  1303               	bcf	3,6	;RP1=0, select bank1
  3116  050A  081E               	movf	30,w	;volatile
  3117  050B  00F7               	movwf	isr@ADCResult
  3118                           
  3119                           ;main.c: 22: if(ADCResult>1000){
  3120  050C  0878               	movf	isr@ADCResult+1,w
  3121  050D  3A80               	xorlw	128
  3122  050E  00FF               	movwf	127
  3123  050F  3083               	movlw	131
  3124  0510  027F               	subwf	127,w
  3125  0511  1D03               	skipz
  3126  0512  2D15               	goto	u88_25
  3127  0513  30E9               	movlw	233
  3128  0514  0277               	subwf	isr@ADCResult,w
  3129  0515                     u88_25:	
  3130  0515  1C03               	skipc
  3131  0516  2D1B               	goto	i1l1108
  3132                           
  3133                           ;main.c: 23: RB3 = 0;
  3134  0517  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0518  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0519  1186               	bcf	6,3	;volatile
  3137  051A  2D39               	goto	L4
  3138  051B                     i1l1108:	
  3139                           ;main.c: 25: }
  3140                           
  3141                           ;main.c: 24: RB4 = 1;
  3142                           
  3143                           
  3144                           ;main.c: 26: else if (ADCResult<1000&&ADCResult>400){
  3145  051B  0878               	movf	isr@ADCResult+1,w
  3146  051C  3A80               	xorlw	128
  3147  051D  00FF               	movwf	127
  3148  051E  3083               	movlw	131
  3149  051F  027F               	subwf	127,w
  3150  0520  1D03               	skipz
  3151  0521  2D24               	goto	u89_25
  3152  0522  30E8               	movlw	232
  3153  0523  0277               	subwf	isr@ADCResult,w
  3154  0524                     u89_25:	
  3155  0524  1803               	skipnc
  3156  0525  2D36               	goto	i1l79
  3157  0526  0878               	movf	isr@ADCResult+1,w
  3158  0527  3A80               	xorlw	128
  3159  0528  00FF               	movwf	127
  3160  0529  3081               	movlw	129
  3161  052A  027F               	subwf	127,w
  3162  052B  1D03               	skipz
  3163  052C  2D2F               	goto	u90_25
  3164  052D  3091               	movlw	145
  3165  052E  0277               	subwf	isr@ADCResult,w
  3166  052F                     u90_25:	
  3167  052F  1C03               	skipc
  3168  0530  2D36               	goto	i1l79
  3169                           
  3170                           ;main.c: 27: RB3 = 1;
  3171  0531  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0532  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0533  1586               	bsf	6,3	;volatile
  3174                           
  3175                           ;main.c: 28: RB4 = 0;
  3176  0534  1206               	bcf	6,4	;volatile
  3177                           
  3178                           ;main.c: 29: }
  3179  0535  2D3A               	goto	i1l78
  3180  0536                     i1l79:	
  3181                           
  3182                           ;main.c: 31: else{
  3183                           ;main.c: 32: RB3 = 1;
  3184  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3185  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3186  0538  1586               	bsf	6,3	;volatile
  3187  0539                     L4:	
  3188                           
  3189                           ;main.c: 33: RB4 = 1;
  3190  0539  1606               	bsf	6,4	;volatile
  3191  053A                     i1l78:	
  3192                           
  3193                           ;main.c: 34: }
  3194                           ;main.c: 37: ADIF = 0;
  3195  053A  130C               	bcf	12,6	;volatile
  3196                           
  3197                           ;main.c: 39: _delay((unsigned long)((1)*(20000000/4000.0)));
  3198  053B  3007               	movlw	7
  3199  053C  00F2               	movwf	??_isr+1
  3200  053D  307D               	movlw	125
  3201  053E  00F1               	movwf	??_isr
  3202  053F                     u178_27:	
  3203  053F  0BF1               	decfsz	??_isr,f
  3204  0540  2D3F               	goto	u178_27
  3205  0541  0BF2               	decfsz	??_isr+1,f
  3206  0542  2D3F               	goto	u178_27
  3207                           
  3208                           ;main.c: 41: GO = 1;
  3209  0543  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0544  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0545  151F               	bsf	31,2	;volatile
  3212  0546                     i1l81:	
  3213  0546  0876               	movf	??_isr+5,w
  3214  0547  00FF               	movwf	127
  3215  0548  0875               	movf	??_isr+4,w
  3216  0549  008A               	movwf	10
  3217  054A  0874               	movf	??_isr+3,w
  3218  054B  0084               	movwf	4
  3219  054C  0E73               	swapf	(??_isr+2)^(0+-128),w
  3220  054D  0083               	movwf	3
  3221  054E  0EFE               	swapf	126,f
  3222  054F  0E7E               	swapf	126,w
  3223  0550  0009               	retfie
  3224  0551                     __end_of_isr:	
  3225                           
  3226                           	psect	intentry
  3227  0004                     __pintentry:	
  3228                           ;incstack = 0
  3229                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3230                           
  3231  0004                     interrupt_function:	
  3232  007E                     saved_w	set	btemp
  3233  0004  00FE               	movwf	btemp
  3234  0005  0E03               	swapf	3,w
  3235  0006  00F3               	movwf	??_isr+2
  3236  0007  0804               	movf	4,w
  3237  0008  00F4               	movwf	??_isr+3
  3238  0009  080A               	movf	10,w
  3239  000A  00F5               	movwf	??_isr+4
  3240  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3241  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3242  000D  087F               	movf	btemp+1,w
  3243  000E  00F6               	movwf	??_isr+5
  3244  000F  120A  118A  2CF8   	ljmp	_isr
  3245                           
  3246                           	psect	text16
  3247  0671                     __ptext16:	
  3248 ;; *************** function _debounceButtons *****************
  3249 ;; Defined at:
  3250 ;;		line 7 in file "timer0.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;		None
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3264 ;;      Params:         0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0
  3266 ;;      Temps:          1       0       0       0       0
  3267 ;;      Totals:         1       0       0       0       0
  3268 ;;Total ram usage:        1 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_isr
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function _debounceButtons
  3279  0671                     _debounceButtons:	
  3280                           
  3281                           ;timer0.c: 9: if(!RB0) {
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  3285  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0672  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0673  1806               	btfsc	6,0	;volatile
  3288  0674  2E81               	goto	i1l1008
  3289                           
  3290                           ;timer0.c: 10: rtcCounter++;
  3291  0675  3001               	movlw	1
  3292  0676  00F0               	movwf	??_debounceButtons
  3293  0677  0870               	movf	??_debounceButtons,w
  3294  0678  07FB               	addwf	_rtcCounter,f	;volatile
  3295                           
  3296                           ;timer0.c: 11: if(rtcCounter >10 &&pb0Released){
  3297  0679  300B               	movlw	11
  3298  067A  027B               	subwf	_rtcCounter,w	;volatile
  3299  067B  1803               	btfsc	3,0
  3300  067C  1D79               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3301  067D  2E83               	goto	i1l1012
  3302                           
  3303                           ;timer0.c: 12: pb0Pressed = 1;
  3304  067E  14F9               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  3305                           
  3306                           ;timer0.c: 13: pb0Released = 0;
  3307  067F  1179               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3308                           
  3309                           ;timer0.c: 14: }
  3310                           ;timer0.c: 15: }
  3311  0680  2E83               	goto	i1l1012
  3312  0681                     i1l1008:	
  3313                           
  3314                           ;timer0.c: 16: else{
  3315                           ;timer0.c: 17: rtcCounter = 0;
  3316  0681  01FB               	clrf	_rtcCounter	;volatile
  3317                           
  3318                           ;timer0.c: 18: pb0Released = 1;
  3319  0682  1579               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3320  0683                     i1l1012:	
  3321                           
  3322                           ;timer0.c: 19: }
  3323                           ;timer0.c: 21: if(!RB1) {
  3324  0683  1886               	btfsc	6,1	;volatile
  3325  0684  2E91               	goto	i1l1022
  3326                           
  3327                           ;timer0.c: 22: rtcCounter2++;
  3328  0685  3001               	movlw	1
  3329  0686  00F0               	movwf	??_debounceButtons
  3330  0687  0870               	movf	??_debounceButtons,w
  3331  0688  07FC               	addwf	_rtcCounter2,f	;volatile
  3332                           
  3333                           ;timer0.c: 23: if(rtcCounter2 >10 &&pb1Released){
  3334  0689  300B               	movlw	11
  3335  068A  027C               	subwf	_rtcCounter2,w	;volatile
  3336  068B  1803               	btfsc	3,0
  3337  068C  1E79               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3338  068D  2E93               	goto	i1l1026
  3339                           
  3340                           ;timer0.c: 24: pb1Pressed = 1;
  3341  068E  15F9               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  3342                           
  3343                           ;timer0.c: 25: pb1Released = 0;
  3344  068F  1279               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3345                           
  3346                           ;timer0.c: 26: }
  3347                           ;timer0.c: 27: }
  3348  0690  2E93               	goto	i1l1026
  3349  0691                     i1l1022:	
  3350                           
  3351                           ;timer0.c: 28: else{
  3352                           ;timer0.c: 29: rtcCounter2 = 0;
  3353  0691  01FC               	clrf	_rtcCounter2	;volatile
  3354                           
  3355                           ;timer0.c: 30: pb1Released = 1;
  3356  0692  1679               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3357  0693                     i1l1026:	
  3358                           
  3359                           ;timer0.c: 31: }
  3360                           ;timer0.c: 32: if(!RB2) {
  3361  0693  1906               	btfsc	6,2	;volatile
  3362  0694  2EA2               	goto	i1l1036
  3363                           
  3364                           ;timer0.c: 33: rtcCounter3++;
  3365  0695  3001               	movlw	1
  3366  0696  00F0               	movwf	??_debounceButtons
  3367  0697  0870               	movf	??_debounceButtons,w
  3368  0698  07FD               	addwf	_rtcCounter3,f	;volatile
  3369                           
  3370                           ;timer0.c: 34: if(rtcCounter3 >10 &&pb2Released){
  3371  0699  300B               	movlw	11
  3372  069A  027D               	subwf	_rtcCounter3,w	;volatile
  3373  069B  1C03               	skipc
  3374  069C  0008               	return
  3375  069D  1F79               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3376  069E  0008               	return
  3377                           
  3378                           ;timer0.c: 35: pb2Pressed = 1;
  3379  069F  16F9               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  3380                           
  3381                           ;timer0.c: 36: pb2Released = 0;
  3382  06A0  1379               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3383                           
  3384                           ;timer0.c: 37: }
  3385                           ;timer0.c: 38: }
  3386  06A1  0008               	return
  3387  06A2                     i1l1036:	
  3388                           
  3389                           ;timer0.c: 39: else{
  3390                           ;timer0.c: 40: rtcCounter3 = 0;
  3391  06A2  01FD               	clrf	_rtcCounter3	;volatile
  3392                           
  3393                           ;timer0.c: 41: pb2Released = 1;
  3394  06A3  1779               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3395  06A4  0008               	return
  3396  06A5                     __end_of_debounceButtons:	
  3397  007E                     btemp	set	126	;btemp
  3398  007E                     wtemp	set	126
  3399  007E                     wtemp0	set	126
  3400  0080                     wtemp1	set	128
  3401  0082                     wtemp2	set	130
  3402  0084                     wtemp3	set	132
  3403  0086                     wtemp4	set	134
  3404  0088                     wtemp5	set	136
  3405  007F                     wtemp6	set	127
  3406  007E                     ttemp	set	126
  3407  007E                     ttemp0	set	126
  3408  0081                     ttemp1	set	129
  3409  0084                     ttemp2	set	132
  3410  0087                     ttemp3	set	135
  3411  007F                     ttemp4	set	127
  3412  007E                     ltemp	set	126
  3413  007E                     ltemp0	set	126
  3414  0082                     ltemp1	set	130
  3415  0086                     ltemp2	set	134
  3416  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     80      80
    BANK1            80     13      39
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    ___ftdiv->___ftneg

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10125
                                             11 BANK1      2     2      0
                         _initialise
                      _initializeADC
                               _move
                            _moveDeg
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3    9779
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    6062
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    2853
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    1859
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     191
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2800
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1     346
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2160
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1668
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  8     8      0      45
                                              1 COMMON     8     8      0
                    _debounceButtons
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _initializeADC
   _move
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)

 _isr (ROOT)
   _debounceButtons

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      D      27       7       48.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      85      12        0.0%
ABS                  0      0      85       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Apr 02 16:54:36 2016

            ___altoft@exp 002E                         pc 0002               __CFG_CP$OFF 0000  
           ___altoft@sign 002F                        _GO 00FA                        fsr 0004  
            ___ftadd@exp1 0066              ___ftadd@exp2 0065              ___ftadd@sign 0064  
                     l114 0462                       l430 03B9                       l431 03C1  
                     l423 03A4                       l514 0352                       l454 00D6  
                     _GIE 005F                       _RB0 0030                       _RB1 0031  
                     _RB2 0032                       _RB3 0033                       _RB4 0034  
                     _PS0 0408                       _PS1 0409                       _PS2 040A  
            __CFG_CPD$OFF 0000                       _PSA 040B                       u975 0382  
                     u995 039D                       _isr 04F8                       fsr0 0004  
                     indf 0000              __CFG_FOSC$HS 0000              __CFG_LVP$OFF 0000  
            ___ftdiv@cntr 003D              ___ftdiv@sign 0042                      l1300 00B1  
                    l1312 00E8                      l1240 0363                      l1208 02F8  
                    l1162 037D                      l1306 00C6                      l1234 0347  
                    l1226 032A                      l1250 0643                      l1172 03A9  
                    l1164 0389                      l1316 00FA                      l1308 00D2  
                    l1236 0355                      l1228 033A                      l1174 03B3  
                    l1166 038E                      l1158 0376                      l1414 0254  
                    l1326 011D                      l1270 005E                      l1510 01CC  
                    l1408 023E                      l1266 0057                      l1346 05C5  
                    l1522 0568                      l1436 02B8                      l1428 0299  
                    l1452 04E9                      l1380 0477                      l1276 006D  
                    l1196 0609                      l1540 058D                      l1366 0451  
                    l1294 009C                      l1198 061B                      l1534 0581  
                    l1448 04C2                      l1392 043E                      l1296 00A8  
                    l1288 0087                      l1528 0574                      l1386 0488  
                    l1298 00AD                      l1546 059D                      l1388 0489  
                    _ADIE 0466                      _ADIF 0066                      ?_isr 0070  
                    _T0IF 005A                      _T0CS 040D                      u1015 03AC  
                    u1115 02FF                      u1055 03C8                      u1305 0088  
                    u1145 032B                      _T0SE 040C                      u1085 060E  
                    u1335 009D                      u1175 0349                      u1605 0278  
                    u1365 00B2                      u1615 029A                      u1625 02AB  
                    u1635 02B9                      u1395 00C7                      u1661 04B5  
                    u1662 04B6                      u1663 04BB                      u1664 04BC  
                    u1681 04DC                      u1682 04DD                      u1595 0266  
                    u1683 04E2                      u1684 04E3                      u1757 0561  
                    u1767 05A3                      u1777 048D                      _PEIE 005E  
                    i1l81 0546                      i1l78 053A                      i1l79 0536  
                    _TMR0 0001              __CFG_WRT$OFF 0000                      _main 0551  
            ___ftpack@arg 0020              ___ftpack@exp 0023                      _move 043A  
                    btemp 007E                      ltemp 007E                      start 0012  
                    ttemp 007E                      wtemp 007E              isr@ADCResult 0077  
            ___fttol@exp1 0050              ___fttol@lval 004C                     ??_isr 0071  
                   ?_main 0070           __end_of___ftadd 0137                     ?_move 0020  
           __CFG_WDTE$OFF 0000           __end_of___ftdiv 02DE           __end_of___ftneg 06FD  
         __end_of___fttol 036C                     _PORTC 0007                     _TRISB 0086  
                   _TRISC 0087                     u90_25 052F                     u88_25 0515  
                   u89_25 0524                     _cstep 007A                     _frexp 0635  
                   _errno 00C5         ??_debounceButtons 0070             ___ftpack@sign 0024  
                   _round 03DA                     _trunc 05A9           __end_of_moveDeg 0226  
          __pbitbssCOMMON 03C8            __CFG_BOREN$OFF 0000                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                     move@i 0024                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __initialization 0015              __end_of_main 05A9              __end_of_move 0499  
                  ??_main 00C3             ___fttol@sign1 004B                    ??_move 0021  
                  _ADCON0 001F                    _ADCON1 009F                    ?_frexp 0020  
        __end_of___altoft 0635                    _ADRESH 001E                    _ADRESL 009E  
        __end_of___ftpack 03DA                    ?_round 0067                    ?_trunc 0051  
                  i1l1012 0683                    i1l1100 0502                    i1l1022 0691  
                  i1l1008 0681                    i1l1026 0693                    i1l1036 06A2  
                  i1l1108 051B                    u178_27 053F                    _TMR0IE 005D  
          __CFG_PWRTE$OFF 0000                    ___ftge 0499                 ??___ftadd 0060  
               ??___ftdiv 0039                 ??___ftneg 0033                 ??___fttol 0047  
               ??_moveDeg 00B8                    saved_w 007E    __size_of_initializeADC 000F  
                  round@f 006A                    round@x 0067                    trunc@i 0055  
                  trunc@x 0051   __end_of__initialization 002A                ___altoft@c 0028  
              ___ftadd@f1 005A                ___ftadd@f2 005D                ___ftge@ff1 0020  
              ___ftge@ff2 0023                ___ftdiv@f1 0036                ___ftdiv@f2 0033  
              ___ftdiv@f3 003E                ___ftneg@f1 0030                ___fttol@f1 0043  
          __pcstackCOMMON 0070              __pidataBANK1 06A5                _pb0Pressed 03C9  
              _pb1Pressed 03CB             __end_of_frexp 0671                _pb2Pressed 03CD  
           __end_of_round 043A             __end_of_trunc 05F3                   ??_frexp 0024  
                 ??_round 006A                   ??_trunc 0054                __pbssBANK1 00C5  
           _initializeADC 06E4                __pmaintext 0551                   ?___ftge 0020  
              __pintentry 0004                 ?___altoft 0028                 ?___ftpack 0020  
         _debounceButtons 0671            ?_initializeADC 0070             move@direction 0020  
         __size_of___ftge 005F                   ___ftadd 002E                   ___ftdiv 0226  
                 ___ftneg 06F3                   ___fttol 02DE                ??___altoft 002C  
              ??___ftpack 0025                _initialise 06BD                   __ptext1 0137  
                 __ptext2 03DA                   __ptext3 05A9                   __ptext4 0635  
                 __ptext5 02DE                   __ptext6 05F3                   __ptext7 06F3  
                 __ptext8 002E                   __ptext9 043A              __size_of_isr 0059  
                 _moveDeg 0137      end_of_initialization 002A        moveDeg@stepsToMove 00C2  
              _rtcCounter 007B   __end_of_debounceButtons 06A5                _wholeSteps 00B0  
             ___ftdiv@exp 0041           ??_initializeADC 0020               _pb0Released 03CA  
             _pb1Released 03CC            __end_of___ftge 04F8               _pb2Released 03CE  
             ?_initialise 0070       start_initialization 0015               __end_of_isr 0551  
              frexp@value 0020          ?_debounceButtons 0070                  ??___ftge 0026  
              init_fetch0 06D3               __pdataBANK1 00A0         __size_of___altoft 0042  
       __size_of___ftpack 006E               __pbssCOMMON 007A                 ___latbits 0002  
           __pcstackBANK0 0020             __pcstackBANK1 00B8       __size_of_initialise 0016  
               _halfSteps 00A0                moveDeg@deg 006D                  ?___ftadd 005A  
                ?___ftdiv 0033                  ?___ftneg 0030                  ?___fttol 0043  
                ?_moveDeg 006D            __size_of_frexp 003C            __size_of_round 0060  
          __size_of_trunc 004A         interrupt_function 0004                 frexp@eptr 0023  
        __size_of___ftadd 0109          __size_of___ftdiv 00B8          __size_of___ftneg 000A  
                ___altoft 05F3          __size_of___fttol 008E              ??_initialise 0020  
                ___ftpack 036C          __size_of_moveDeg 00EF                  __ptext10 0499  
                __ptext11 0226                  __ptext12 036C                  __ptext13 06E4  
                __ptext14 06BD                  __ptext15 04F8                  __ptext16 0671  
               move@steps 0023                trunc@expon 0058             __size_of_main 0058  
           __size_of_move 005F        __end_of_initialise 06D3     __end_of_initializeADC 06F3  
             _moveDeg$553 00B9               _moveDeg$554 00BC               _moveDeg$555 00BF  
                init_ram0 06D7                  intlevel1 0000               _rtcCounter2 007C  
             _rtcCounter3 007D               _motorToggle 03C8  __size_of_debounceButtons 0034  
