

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Apr 05 14:54:22 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  000E                     	;# 
    51  000F                     	;# 
    52  0010                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0014                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001D                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  0087                     	;# 
    74  0088                     	;# 
    75  0089                     	;# 
    76  008C                     	;# 
    77  008D                     	;# 
    78  008E                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0094                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  0087                     	;# 
   134  0088                     	;# 
   135  0089                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010E                     	;# 
   272  010F                     	;# 
   273  018C                     	;# 
   274  018D                     	;# 
   275                           
   276                           	psect	idataBANK1
   277  06B9                     __pidataBANK1:	
   278                           
   279                           ;initializer for _halfSteps
   280  06B9  343C               	retlw	60
   281  06BA  3400               	retlw	0
   282  06BB  342E               	retlw	46
   283  06BC  3400               	retlw	0
   284  06BD  342B               	retlw	43
   285  06BE  3400               	retlw	0
   286  06BF  3427               	retlw	39
   287  06C0  3400               	retlw	0
   288  06C1  3435               	retlw	53
   289  06C2  3400               	retlw	0
   290  06C3  3417               	retlw	23
   291  06C4  3400               	retlw	0
   292  06C5  341B               	retlw	27
   293  06C6  3400               	retlw	0
   294  06C7  341E               	retlw	30
   295  06C8  3400               	retlw	0
   296                           
   297                           ;initializer for _wholeSteps
   298  06C9  343C               	retlw	60
   299  06CA  3400               	retlw	0
   300  06CB  342B               	retlw	43
   301  06CC  3400               	retlw	0
   302  06CD  3435               	retlw	53
   303  06CE  3400               	retlw	0
   304  06CF  341B               	retlw	27
   305  06D0  3400               	retlw	0
   306  001F                     _ADCON0	set	31
   307  001E                     _ADRESH	set	30
   308  0007                     _PORTC	set	7
   309  0001                     _TMR0	set	1
   310  0066                     _ADIF	set	102
   311  005F                     _GIE	set	95
   312  00FA                     _GO	set	250
   313  005E                     _PEIE	set	94
   314  0030                     _RB0	set	48
   315  0031                     _RB1	set	49
   316  0032                     _RB2	set	50
   317  0033                     _RB3	set	51
   318  0034                     _RB4	set	52
   319  005A                     _T0IF	set	90
   320  005D                     _TMR0IE	set	93
   321  009E                     _ADRESL	set	158
   322  0085                     _TRISA	set	133
   323  0086                     _TRISB	set	134
   324  0087                     _TRISC	set	135
   325  04FE                     _ADCS2	set	1278
   326  04FF                     _ADFM	set	1279
   327  0466                     _ADIE	set	1126
   328  04F8                     _PCFG0	set	1272
   329  04F9                     _PCFG1	set	1273
   330  04FA                     _PCFG2	set	1274
   331  04FB                     _PCFG3	set	1275
   332  0408                     _PS0	set	1032
   333  0409                     _PS1	set	1033
   334  040A                     _PS2	set	1034
   335  040B                     _PSA	set	1035
   336  040D                     _T0CS	set	1037
   337  040C                     _T0SE	set	1036
   338                           
   339                           ; #config settings
   340  0000                     
   341                           	psect	cinit
   342  0015                     start_initialization:	
   343  0015                     __initialization:	
   344                           
   345                           ; Clear objects allocated to BITCOMMON
   346  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   347                           
   348                           ; Clear objects allocated to COMMON
   349  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   350  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   351  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   352  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   353                           
   354                           ; Clear objects allocated to BANK1
   355  001A  1683               	bsf	3,5	;RP0=1, select bank1
   356  001B  1303               	bcf	3,6	;RP1=0, select bank1
   357  001C  01C7               	clrf	__pbssBANK1& (0+127)
   358  001D  01C8               	clrf	(__pbssBANK1+1)& (0+127)
   359                           
   360                           ; Initialize objects allocated to BANK1
   361  001E  1383               	bcf	3,7	;select IRP bank0
   362  001F  30B8               	movlw	low (__pdataBANK1+24)
   363  0020  00FD               	movwf	btemp+-1
   364  0021  3006               	movlw	high __pidataBANK1
   365  0022  00FE               	movwf	btemp
   366  0023  30B9               	movlw	low __pidataBANK1
   367  0024  00FF               	movwf	btemp+1
   368  0025  30A0               	movlw	low __pdataBANK1
   369  0026  0084               	movwf	4
   370  0027  120A  118A  2700   	fcall	init_ram0
   371  002A                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374  002A                     __end_of__initialization:	
   375  002A  0183               	clrf	3
   376  002B  120A  118A  2BDA   	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	bitbssCOMMON
   379  0380                     __pbitbssCOMMON:	
   380  0380                     _conversionDone:	
   381  0380                     	ds	1
   382  0381                     _motorToggle:	
   383  0381                     	ds	1
   384  0382                     _pb0Pressed:	
   385  0382                     	ds	1
   386  0383                     _pb0Released:	
   387  0383                     	ds	1
   388  0384                     _pb1Pressed:	
   389  0384                     	ds	1
   390  0385                     _pb1Released:	
   391  0385                     	ds	1
   392  0386                     _pb2Pressed:	
   393  0386                     	ds	1
   394  0387                     _pb2Released:	
   395  0387                     	ds	1
   396                           
   397                           	psect	bssCOMMON
   398  0076                     __pbssCOMMON:	
   399  0076                     _cstep:	
   400  0076                     	ds	1
   401  0077                     _rtcCounter:	
   402  0077                     	ds	1
   403  0078                     _rtcCounter2:	
   404  0078                     	ds	1
   405  0079                     _rtcCounter3:	
   406  0079                     	ds	1
   407                           
   408                           	psect	bssBANK1
   409  00C7                     __pbssBANK1:	
   410  00C7                     _errno:	
   411  00C7                     	ds	2
   412                           
   413                           	psect	dataBANK1
   414  00A0                     __pdataBANK1:	
   415  00A0                     _halfSteps:	
   416  00A0                     	ds	16
   417  00B0                     _wholeSteps:	
   418  00B0                     	ds	8
   419                           
   420                           	psect	inittext
   421  06FC                     init_fetch0:	
   422                           ;	Called with low address in FSR and high address in W
   423                           
   424  06FC  087E               	movf	126,w
   425  06FD  008A               	movwf	10
   426  06FE  087F               	movf	127,w
   427  06FF  0082               	movwf	2
   428  0700                     init_ram0:	
   429                           ;Called with:
   430                           ;	high address of idata address in btemp 
   431                           ;	low address of idata address in btemp+1 
   432                           ;	low address of data in FSR
   433                           ;	high address + 1 of data in btemp-1
   434                           
   435  0700  26FC  120A  118A   	fcall	init_fetch0
   436  0703  0080               	movwf	0
   437  0704  0A84               	incf	4,f
   438  0705  0804               	movf	4,w
   439  0706  067D               	xorwf	125,w
   440  0707  1903               	btfsc	3,2
   441  0708  3400               	retlw	0
   442  0709  0AFF               	incf	127,f
   443  070A  1903               	btfsc	3,2
   444  070B  0AFE               	incf	126,f
   445  070C  2F00               	goto	init_ram0
   446                           
   447                           	psect	cstackBANK1
   448  00B8                     __pcstackBANK1:	
   449  00B8                     ??_moveDeg:	
   450                           
   451                           ; 1 bytes @ 0x0
   452  00B8                     	ds	1
   453  00B9                     _moveDeg$576:	
   454                           
   455                           ; 3 bytes @ 0x1
   456  00B9                     	ds	3
   457  00BC                     _moveDeg$577:	
   458                           
   459                           ; 3 bytes @ 0x4
   460  00BC                     	ds	3
   461  00BF                     _moveDeg$578:	
   462                           
   463                           ; 3 bytes @ 0x7
   464  00BF                     	ds	3
   465  00C2                     moveDeg@stepsToMove:	
   466                           
   467                           ; 1 bytes @ 0xA
   468  00C2                     	ds	1
   469  00C3                     ??_main:	
   470                           
   471                           ; 1 bytes @ 0xB
   472  00C3                     	ds	2
   473  00C5                     main@result:	
   474                           
   475                           ; 2 bytes @ 0xD
   476  00C5                     	ds	2
   477                           
   478                           	psect	cstackCOMMON
   479  0071                     __pcstackCOMMON:	
   480  0071                     ?_debounceButtons:	
   481  0071                     ??_debounceButtons:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0071                     ?_initializeADC:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0071                     ?_startADCConversion:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0071                     ?_isr:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0071                     ?_initialise:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0071                     ?_main:	
   497                           ; 1 bytes @ 0x0
   498                           
   499                           
   500                           ; 1 bytes @ 0x0
   501  0071                     	ds	1
   502  0072                     ??_isr:	
   503                           
   504                           ; 1 bytes @ 0x1
   505  0072                     	ds	4
   506                           
   507                           	psect	cstackBANK0
   508  0020                     __pcstackBANK0:	
   509  0020                     ?___ftge:	
   510  0020                     ??_initializeADC:	
   511                           ; 1 bit 
   512                           
   513  0020                     ??_startADCConversion:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0020                     ?_move:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0020                     ??_initialise:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0020                     ?_readADCData:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0020                     ?___ftpack:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0020                     ?_frexp:	
   529                           ; 3 bytes @ 0x0
   530                           
   531  0020                     move@direction:	
   532                           ; 3 bytes @ 0x0
   533                           
   534  0020                     ___ftpack@arg:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0020                     ___ftge@ff1:	
   538                           ; 3 bytes @ 0x0
   539                           
   540  0020                     frexp@value:	
   541                           ; 3 bytes @ 0x0
   542                           
   543                           
   544                           ; 3 bytes @ 0x0
   545  0020                     	ds	1
   546  0021                     ??_move:	
   547                           
   548                           ; 1 bytes @ 0x1
   549  0021                     	ds	1
   550  0022                     ??_readADCData:	
   551  0022                     readADCData@ADCResult:	
   552                           ; 1 bytes @ 0x2
   553                           
   554                           
   555                           ; 2 bytes @ 0x2
   556  0022                     	ds	1
   557  0023                     move@steps:	
   558  0023                     ___ftpack@exp:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0023                     frexp@eptr:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0023                     ___ftge@ff2:	
   565                           ; 1 bytes @ 0x3
   566                           
   567                           
   568                           ; 3 bytes @ 0x3
   569  0023                     	ds	1
   570  0024                     ??_frexp:	
   571  0024                     move@i:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0024                     ___ftpack@sign:	
   575                           ; 1 bytes @ 0x4
   576                           
   577                           
   578                           ; 1 bytes @ 0x4
   579  0024                     	ds	1
   580  0025                     ??___ftpack:	
   581                           
   582                           ; 1 bytes @ 0x5
   583  0025                     	ds	1
   584  0026                     ??___ftge:	
   585                           
   586                           ; 1 bytes @ 0x6
   587  0026                     	ds	2
   588  0028                     ?___altoft:	
   589  0028                     ___altoft@c:	
   590                           ; 3 bytes @ 0x8
   591                           
   592                           
   593                           ; 4 bytes @ 0x8
   594  0028                     	ds	4
   595  002C                     ??___altoft:	
   596                           
   597                           ; 1 bytes @ 0xC
   598  002C                     	ds	2
   599  002E                     ___altoft@exp:	
   600                           
   601                           ; 1 bytes @ 0xE
   602  002E                     	ds	1
   603  002F                     ___altoft@sign:	
   604                           
   605                           ; 1 bytes @ 0xF
   606  002F                     	ds	1
   607  0030                     ?___ftneg:	
   608  0030                     ___ftneg@f1:	
   609                           ; 3 bytes @ 0x10
   610                           
   611                           
   612                           ; 3 bytes @ 0x10
   613  0030                     	ds	3
   614  0033                     ??___ftneg:	
   615  0033                     ?___ftdiv:	
   616                           ; 1 bytes @ 0x13
   617                           
   618  0033                     ___ftdiv@f2:	
   619                           ; 3 bytes @ 0x13
   620                           
   621                           
   622                           ; 3 bytes @ 0x13
   623  0033                     	ds	3
   624  0036                     ___ftdiv@f1:	
   625                           
   626                           ; 3 bytes @ 0x16
   627  0036                     	ds	3
   628  0039                     ??___ftdiv:	
   629                           
   630                           ; 1 bytes @ 0x19
   631  0039                     	ds	4
   632  003D                     ___ftdiv@cntr:	
   633                           
   634                           ; 1 bytes @ 0x1D
   635  003D                     	ds	1
   636  003E                     ___ftdiv@f3:	
   637                           
   638                           ; 3 bytes @ 0x1E
   639  003E                     	ds	3
   640  0041                     ___ftdiv@exp:	
   641                           
   642                           ; 1 bytes @ 0x21
   643  0041                     	ds	1
   644  0042                     ___ftdiv@sign:	
   645                           
   646                           ; 1 bytes @ 0x22
   647  0042                     	ds	1
   648  0043                     ?___fttol:	
   649  0043                     ___fttol@f1:	
   650                           ; 4 bytes @ 0x23
   651                           
   652                           
   653                           ; 3 bytes @ 0x23
   654  0043                     	ds	4
   655  0047                     ??___fttol:	
   656                           
   657                           ; 1 bytes @ 0x27
   658  0047                     	ds	4
   659  004B                     ___fttol@sign1:	
   660                           
   661                           ; 1 bytes @ 0x2B
   662  004B                     	ds	1
   663  004C                     ___fttol@lval:	
   664                           
   665                           ; 4 bytes @ 0x2C
   666  004C                     	ds	4
   667  0050                     ___fttol@exp1:	
   668                           
   669                           ; 1 bytes @ 0x30
   670  0050                     	ds	1
   671  0051                     ?_trunc:	
   672  0051                     trunc@x:	
   673                           ; 3 bytes @ 0x31
   674                           
   675                           
   676                           ; 3 bytes @ 0x31
   677  0051                     	ds	3
   678  0054                     ??_trunc:	
   679                           
   680                           ; 1 bytes @ 0x34
   681  0054                     	ds	1
   682  0055                     trunc@i:	
   683                           
   684                           ; 3 bytes @ 0x35
   685  0055                     	ds	3
   686  0058                     trunc@expon:	
   687                           
   688                           ; 2 bytes @ 0x38
   689  0058                     	ds	2
   690  005A                     ?___ftadd:	
   691  005A                     ___ftadd@f1:	
   692                           ; 3 bytes @ 0x3A
   693                           
   694                           
   695                           ; 3 bytes @ 0x3A
   696  005A                     	ds	3
   697  005D                     ___ftadd@f2:	
   698                           
   699                           ; 3 bytes @ 0x3D
   700  005D                     	ds	3
   701  0060                     ??___ftadd:	
   702                           
   703                           ; 1 bytes @ 0x40
   704  0060                     	ds	4
   705  0064                     ___ftadd@sign:	
   706                           
   707                           ; 1 bytes @ 0x44
   708  0064                     	ds	1
   709  0065                     ___ftadd@exp2:	
   710                           
   711                           ; 1 bytes @ 0x45
   712  0065                     	ds	1
   713  0066                     ___ftadd@exp1:	
   714                           
   715                           ; 1 bytes @ 0x46
   716  0066                     	ds	1
   717  0067                     ?_round:	
   718  0067                     round@x:	
   719                           ; 3 bytes @ 0x47
   720                           
   721                           
   722                           ; 3 bytes @ 0x47
   723  0067                     	ds	3
   724  006A                     ??_round:	
   725  006A                     round@f:	
   726                           ; 1 bytes @ 0x4A
   727                           
   728                           
   729                           ; 3 bytes @ 0x4A
   730  006A                     	ds	3
   731  006D                     ?_moveDeg:	
   732  006D                     moveDeg@deg:	
   733                           ; 1 bytes @ 0x4D
   734                           
   735                           
   736                           ; 3 bytes @ 0x4D
   737  006D                     	ds	3
   738                           
   739                           	psect	maintext
   740  03DA                     __pmaintext:	
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   743 ;;
   744 ;; *************** function _main *****************
   745 ;; Defined at:
   746 ;;		line 45 in file "main.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  result          2   13[BANK1 ] int 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : B00/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         0       0       0       0       0
   761 ;;      Locals:         0       0       2       0       0
   762 ;;      Temps:          0       0       2       0       0
   763 ;;      Totals:         0       0       4       0       0
   764 ;;Total ram usage:        4 bytes
   765 ;; Hardware stack levels required when called:    7
   766 ;; This function calls:
   767 ;;		_initialise
   768 ;;		_initializeADC
   769 ;;		_move
   770 ;;		_moveDeg
   771 ;;		_readADCData
   772 ;;		_startADCConversion
   773 ;; This function is called by:
   774 ;;		Startup code after reset
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           
   779                           ;psect for function _main
   780  03DA                     _main:	
   781                           
   782                           ;main.c: 47: initialise();
   783                           
   784                           ;incstack = 0
   785                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   786  03DA  120A  118A  26D1  120A  118A  	fcall	_initialise
   787                           
   788                           ;main.c: 48: initializeADC();
   789  03DF  120A  118A  26E7  120A  118A  	fcall	_initializeADC
   790                           
   791                           ;main.c: 49: startADCConversion();
   792  03E4  120A  118A  270D  120A  118A  	fcall	_startADCConversion
   793  03E9                     l1973:	
   794                           ;main.c: 52: while(1){
   795                           
   796                           
   797                           ;main.c: 55: if(conversionDone){
   798  03E9  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   799  03EA  2C02               	goto	l1981
   800                           
   801                           ;main.c: 56: conversionDone = 0;
   802  03EB  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   803                           
   804                           ;main.c: 57: int result = readADCData();
   805  03EC  120A  118A  25ED  120A  118A  	fcall	_readADCData
   806  03F1  1283               	bcf	3,5	;RP0=0, select bank0
   807  03F2  1303               	bcf	3,6	;RP1=0, select bank0
   808  03F3  0821               	movf	?_readADCData+1,w
   809  03F4  1683               	bsf	3,5	;RP0=1, select bank1
   810  03F5  1303               	bcf	3,6	;RP1=0, select bank1
   811  03F6  00C6               	movwf	(main@result+1)^(0+128)
   812  03F7  1283               	bcf	3,5	;RP0=0, select bank0
   813  03F8  1303               	bcf	3,6	;RP1=0, select bank0
   814  03F9  0820               	movf	?_readADCData,w
   815  03FA  1683               	bsf	3,5	;RP0=1, select bank1
   816  03FB  1303               	bcf	3,6	;RP1=0, select bank1
   817  03FC  00C5               	movwf	main@result^(0+128)
   818                           
   819                           ;main.c: 58: startADCConversion();
   820  03FD  120A  118A  270D  120A  118A  	fcall	_startADCConversion
   821  0402                     l1981:	
   822                           
   823                           ;main.c: 60: }
   824                           ;main.c: 61: if(pb0Pressed){
   825  0402  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   826  0403  2C0E               	goto	l1987
   827                           
   828                           ;main.c: 62: move(1,0);
   829  0404  1283               	bcf	3,5	;RP0=0, select bank0
   830  0405  1303               	bcf	3,6	;RP1=0, select bank0
   831  0406  01A0               	clrf	move@direction
   832  0407  3001               	movlw	1
   833  0408  120A  118A  24A3  120A  118A  	fcall	_move
   834                           
   835                           ;main.c: 63: pb0Pressed = 0;
   836  040D  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   837  040E                     l1987:	
   838                           
   839                           ;main.c: 64: }
   840                           ;main.c: 65: if(pb1Pressed){
   841  040E  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   842  040F  2C1B               	goto	l1993
   843                           
   844                           ;main.c: 66: move(1,1);
   845  0410  1283               	bcf	3,5	;RP0=0, select bank0
   846  0411  1303               	bcf	3,6	;RP1=0, select bank0
   847  0412  01A0               	clrf	move@direction
   848  0413  0AA0               	incf	move@direction,f
   849  0414  3001               	movlw	1
   850  0415  120A  118A  24A3  120A  118A  	fcall	_move
   851                           
   852                           ;main.c: 67: pb1Pressed = 0;
   853  041A  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   854  041B                     l1993:	
   855                           
   856                           ;main.c: 68: }
   857                           ;main.c: 69: if(pb2Pressed){
   858  041B  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   859  041C  2C37               	goto	l2005
   860                           
   861                           ;main.c: 70: if(motorToggle){
   862  041D  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
   863  041E  2C27               	goto	l1999
   864                           
   865                           ;main.c: 71: moveDeg(-180);
   866  041F  3000               	movlw	0
   867  0420  1283               	bcf	3,5	;RP0=0, select bank0
   868  0421  1303               	bcf	3,6	;RP1=0, select bank0
   869  0422  00ED               	movwf	moveDeg@deg
   870  0423  3034               	movlw	52
   871  0424  00EE               	movwf	moveDeg@deg+1
   872  0425  30C3               	movlw	195
   873  0426  2C2E               	goto	L1
   874  0427                     l1999:	
   875                           ;main.c: 72: }
   876                           
   877                           
   878                           ;main.c: 73: else{
   879                           ;main.c: 74: moveDeg(180);
   880  0427  3000               	movlw	0
   881  0428  1283               	bcf	3,5	;RP0=0, select bank0
   882  0429  1303               	bcf	3,6	;RP1=0, select bank0
   883  042A  00ED               	movwf	moveDeg@deg
   884  042B  3034               	movlw	52
   885  042C  00EE               	movwf	moveDeg@deg+1
   886  042D  3043               	movlw	67
   887  042E                     L1:	
   888  042E  00EF               	movwf	moveDeg@deg+2
   889  042F  120A  118A  2137  120A  118A  	fcall	_moveDeg
   890                           
   891                           ;main.c: 75: }
   892                           ;main.c: 76: motorToggle = !motorToggle;
   893  0434  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
   894  0435  06F0               	xorwf	_motorToggle/(0+8),f
   895                           
   896                           ;main.c: 77: pb2Pressed = 0;
   897  0436  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   898  0437                     l2005:	
   899                           
   900                           ;main.c: 78: }
   901                           ;main.c: 79: _delay((unsigned long)((20)*(20000000/4000.0)));
   902  0437  3082               	movlw	130
   903  0438  1683               	bsf	3,5	;RP0=1, select bank1
   904  0439  1303               	bcf	3,6	;RP1=0, select bank1
   905  043A  00C4               	movwf	(??_main^(0+128)+1)
   906  043B  30DD               	movlw	221
   907  043C  00C3               	movwf	??_main^(0+128)
   908  043D                     u2497:	
   909  043D  0BC3               	decfsz	??_main^(0+128),f
   910  043E  2C3D               	goto	u2497
   911  043F  0BC4               	decfsz	(??_main^(0+128)+1),f
   912  0440  2C3D               	goto	u2497
   913  0441  2C42               	nop2
   914  0442  2BE9               	goto	l1973
   915  0443                     __end_of_main:	
   916                           
   917                           	psect	text1
   918  070D                     __ptext1:	
   919 ;; *************** function _startADCConversion *****************
   920 ;; Defined at:
   921 ;;		line 48 in file "adConv.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          0       2       0       0       0
   938 ;;      Totals:         0       2       0       0       0
   939 ;;Total ram usage:        2 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _startADCConversion
   951  070D                     _startADCConversion:	
   952                           
   953                           ;adConv.c: 50: _delay((unsigned long)((1)*(20000000/4000.0)));
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _startADCConversion: [wreg]
   957  070D  3007               	movlw	7
   958  070E  1283               	bcf	3,5	;RP0=0, select bank0
   959  070F  1303               	bcf	3,6	;RP1=0, select bank0
   960  0710  00A1               	movwf	??_startADCConversion+1
   961  0711  307D               	movlw	125
   962  0712  00A0               	movwf	??_startADCConversion
   963  0713                     u2507:	
   964  0713  0BA0               	decfsz	??_startADCConversion,f
   965  0714  2F13               	goto	u2507
   966  0715  0BA1               	decfsz	??_startADCConversion+1,f
   967  0716  2F13               	goto	u2507
   968                           
   969                           ;adConv.c: 52: GO = 1;
   970  0717  1283               	bcf	3,5	;RP0=0, select bank0
   971  0718  1303               	bcf	3,6	;RP1=0, select bank0
   972  0719  151F               	bsf	31,2	;volatile
   973  071A  0008               	return
   974  071B                     __end_of_startADCConversion:	
   975                           
   976                           	psect	text2
   977  05ED                     __ptext2:	
   978 ;; *************** function _readADCData *****************
   979 ;; Defined at:
   980 ;;		line 28 in file "adConv.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  ADCResult       2    2[BANK0 ] int 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  2    0[BANK0 ] int 
   987 ;; Registers used:
   988 ;;		wreg, btemp+1
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         0       2       0       0       0
   995 ;;      Locals:         0       2       0       0       0
   996 ;;      Temps:          0       0       0       0       0
   997 ;;      Totals:         0       4       0       0       0
   998 ;;Total ram usage:        4 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _readADCData
  1010  05ED                     _readADCData:	
  1011                           
  1012                           ;adConv.c: 30: int ADCResult = (ADRESH<<8) + ADRESL ;
  1013                           
  1014                           ;incstack = 0
  1015                           ; Regs used in _readADCData: [wreg+btemp+1]
  1016  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1017  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1018  05EF  081E               	movf	30,w	;volatile
  1019  05F0  00A3               	movwf	readADCData@ADCResult+1
  1020  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  1021  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  1022  05F3  081E               	movf	30,w	;volatile
  1023  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1024  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1025  05F6  00A2               	movwf	readADCData@ADCResult
  1026                           
  1027                           ;adConv.c: 32: if(ADCResult>1000){
  1028  05F7  0823               	movf	readADCData@ADCResult+1,w
  1029  05F8  3A80               	xorlw	128
  1030  05F9  00FF               	movwf	127
  1031  05FA  3083               	movlw	131
  1032  05FB  027F               	subwf	127,w
  1033  05FC  1D03               	skipz
  1034  05FD  2E00               	goto	u2405
  1035  05FE  30E9               	movlw	233
  1036  05FF  0222               	subwf	readADCData@ADCResult,w
  1037  0600                     u2405:	
  1038  0600  1C03               	skipc
  1039  0601  2E06               	goto	l1945
  1040                           
  1041                           ;adConv.c: 33: RB3 = 0;
  1042  0602  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0603  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0604  1186               	bcf	6,3	;volatile
  1045  0605  2E28               	goto	L2
  1046  0606                     l1945:	
  1047                           ;adConv.c: 35: }
  1048                           
  1049                           ;adConv.c: 34: RB4 = 1;
  1050                           
  1051                           
  1052                           ;adConv.c: 36: else if (ADCResult<1000&&ADCResult>400){
  1053  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0608  0823               	movf	readADCData@ADCResult+1,w
  1056  0609  3A80               	xorlw	128
  1057  060A  00FF               	movwf	127
  1058  060B  3083               	movlw	131
  1059  060C  027F               	subwf	127,w
  1060  060D  1D03               	skipz
  1061  060E  2E11               	goto	u2415
  1062  060F  30E8               	movlw	232
  1063  0610  0222               	subwf	readADCData@ADCResult,w
  1064  0611                     u2415:	
  1065  0611  1803               	skipnc
  1066  0612  2E25               	goto	l206
  1067  0613  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0614  1303               	bcf	3,6	;RP1=0, select bank0
  1069  0615  0823               	movf	readADCData@ADCResult+1,w
  1070  0616  3A80               	xorlw	128
  1071  0617  00FF               	movwf	127
  1072  0618  3081               	movlw	129
  1073  0619  027F               	subwf	127,w
  1074  061A  1D03               	skipz
  1075  061B  2E1E               	goto	u2425
  1076  061C  3091               	movlw	145
  1077  061D  0222               	subwf	readADCData@ADCResult,w
  1078  061E                     u2425:	
  1079  061E  1C03               	skipc
  1080  061F  2E25               	goto	l206
  1081                           
  1082                           ;adConv.c: 37: RB3 = 1;
  1083  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1084  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1085  0622  1586               	bsf	6,3	;volatile
  1086                           
  1087                           ;adConv.c: 38: RB4 = 0;
  1088  0623  1206               	bcf	6,4	;volatile
  1089                           
  1090                           ;adConv.c: 39: }
  1091  0624  2E29               	goto	l1951
  1092  0625                     l206:	
  1093                           
  1094                           ;adConv.c: 41: else{
  1095                           ;adConv.c: 42: RB3 = 1;
  1096  0625  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0626  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0627  1586               	bsf	6,3	;volatile
  1099  0628                     L2:	
  1100                           
  1101                           ;adConv.c: 43: RB4 = 1;
  1102  0628  1606               	bsf	6,4	;volatile
  1103  0629                     l1951:	
  1104                           
  1105                           ;adConv.c: 44: }
  1106                           ;adConv.c: 45: return ADCResult;
  1107  0629  0823               	movf	readADCData@ADCResult+1,w
  1108  062A  00A1               	movwf	?_readADCData+1
  1109  062B  0822               	movf	readADCData@ADCResult,w
  1110  062C  00A0               	movwf	?_readADCData
  1111  062D  0008               	return
  1112  062E                     __end_of_readADCData:	
  1113                           
  1114                           	psect	text3
  1115  0137                     __ptext3:	
  1116 ;; *************** function _moveDeg *****************
  1117 ;; Defined at:
  1118 ;;		line 46 in file "motor.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  deg             3   77[BANK0 ] int 
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1132 ;;      Params:         0       3       0       0       0
  1133 ;;      Locals:         0       0      10       0       0
  1134 ;;      Temps:          0       0       1       0       0
  1135 ;;      Totals:         0       3      11       0       0
  1136 ;;Total ram usage:       14 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    6
  1139 ;; This function calls:
  1140 ;;		___ftdiv
  1141 ;;		___ftge
  1142 ;;		___ftneg
  1143 ;;		___fttol
  1144 ;;		_move
  1145 ;;		_round
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           
  1152                           ;psect for function _moveDeg
  1153  0137                     _moveDeg:	
  1154                           
  1155                           ;motor.c: 47: char stepsToMove;
  1156                           ;motor.c: 48: if(deg<0){
  1157                           
  1158                           ;incstack = 0
  1159                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1160  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1162  0139  086D               	movf	moveDeg@deg,w
  1163  013A  00A0               	movwf	___ftge@ff1
  1164  013B  086E               	movf	moveDeg@deg+1,w
  1165  013C  00A1               	movwf	___ftge@ff1+1
  1166  013D  086F               	movf	moveDeg@deg+2,w
  1167  013E  00A2               	movwf	___ftge@ff1+2
  1168  013F  3000               	movlw	0
  1169  0140  00A3               	movwf	___ftge@ff2
  1170  0141  3000               	movlw	0
  1171  0142  00A4               	movwf	___ftge@ff2+1
  1172  0143  3000               	movlw	0
  1173  0144  00A5               	movwf	___ftge@ff2+2
  1174  0145  120A  118A  2502  120A  118A  	fcall	___ftge
  1175  014A  1803               	btfsc	3,0
  1176  014B  29CC               	goto	l1965
  1177                           
  1178                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1179  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1180  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1181  014E  086D               	movf	moveDeg@deg,w
  1182  014F  00B0               	movwf	___ftneg@f1
  1183  0150  086E               	movf	moveDeg@deg+1,w
  1184  0151  00B1               	movwf	___ftneg@f1+1
  1185  0152  086F               	movf	moveDeg@deg+2,w
  1186  0153  00B2               	movwf	___ftneg@f1+2
  1187  0154  120A  118A  271B  120A  118A  	fcall	___ftneg
  1188  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1189  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1190  015B  0830               	movf	?___ftneg,w
  1191  015C  00B6               	movwf	___ftdiv@f1
  1192  015D  0831               	movf	?___ftneg+1,w
  1193  015E  00B7               	movwf	___ftdiv@f1+1
  1194  015F  0832               	movf	?___ftneg+2,w
  1195  0160  00B8               	movwf	___ftdiv@f1+2
  1196  0161  3000               	movlw	0
  1197  0162  00B3               	movwf	___ftdiv@f2
  1198  0163  3070               	movlw	112
  1199  0164  00B4               	movwf	___ftdiv@f2+1
  1200  0165  3040               	movlw	64
  1201  0166  00B5               	movwf	___ftdiv@f2+2
  1202  0167  120A  118A  2226  120A  118A  	fcall	___ftdiv
  1203  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1204  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1205  016E  0833               	movf	?___ftdiv,w
  1206  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0171  00B9               	movwf	_moveDeg$576^(0+128)
  1209  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0174  0834               	movf	?___ftdiv+1,w
  1212  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1213  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1214  0177  00BA               	movwf	(_moveDeg$576+1)^(0+128)
  1215  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1216  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1217  017A  0835               	movf	?___ftdiv+2,w
  1218  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1219  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1220  017D  00BB               	movwf	(_moveDeg$576+2)^(0+128)
  1221                           
  1222                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1223  017E  0839               	movf	_moveDeg$576^(0+128),w
  1224  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0181  00E7               	movwf	round@x
  1227  0182  1683               	bsf	3,5	;RP0=1, select bank1
  1228  0183  1303               	bcf	3,6	;RP1=0, select bank1
  1229  0184  083A               	movf	(_moveDeg$576+1)^(0+128),w
  1230  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0187  00E8               	movwf	round@x+1
  1233  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1234  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1235  018A  083B               	movf	(_moveDeg$576+2)^(0+128),w
  1236  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1237  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1238  018D  00E9               	movwf	round@x+2
  1239  018E  120A  118A  2443  120A  118A  	fcall	_round
  1240  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0195  0867               	movf	?_round,w
  1243  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1244  0197  1303               	bcf	3,6	;RP1=0, select bank1
  1245  0198  00BC               	movwf	_moveDeg$577^(0+128)
  1246  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1247  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1248  019B  0868               	movf	?_round+1,w
  1249  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1250  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1251  019E  00BD               	movwf	(_moveDeg$577+1)^(0+128)
  1252  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1253  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1254  01A1  0869               	movf	?_round+2,w
  1255  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1256  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1257  01A4  00BE               	movwf	(_moveDeg$577+2)^(0+128)
  1258                           
  1259                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1260  01A5  083C               	movf	_moveDeg$577^(0+128),w
  1261  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1262  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1263  01A8  00C3               	movwf	___fttol@f1
  1264  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1265  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  1266  01AB  083D               	movf	(_moveDeg$577+1)^(0+128),w
  1267  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1268  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1269  01AE  00C4               	movwf	___fttol@f1+1
  1270  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1271  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1272  01B1  083E               	movf	(_moveDeg$577+2)^(0+128),w
  1273  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1274  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1275  01B4  00C5               	movwf	___fttol@f1+2
  1276  01B5  120A  118A  22DE  120A  118A  	fcall	___fttol
  1277  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1278  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1279  01BC  0843               	movf	?___fttol,w
  1280  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1281  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1282  01BF  00B8               	movwf	??_moveDeg^(0+128)
  1283  01C0  0838               	movf	??_moveDeg^(0+128),w
  1284  01C1  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1285                           
  1286                           ;motor.c: 50: move(stepsToMove,0);
  1287  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1288  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1289  01C4  01A0               	clrf	move@direction
  1290  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  1291  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  1292  01C7  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1293  01C8  120A  118A  24A3   	fcall	_move
  1294                           
  1295                           ;motor.c: 51: }
  1296  01CB  0008               	return
  1297  01CC                     l1965:	
  1298                           
  1299                           ;motor.c: 52: else{
  1300                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1301  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1302  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1303  01CE  086D               	movf	moveDeg@deg,w
  1304  01CF  00B6               	movwf	___ftdiv@f1
  1305  01D0  086E               	movf	moveDeg@deg+1,w
  1306  01D1  00B7               	movwf	___ftdiv@f1+1
  1307  01D2  086F               	movf	moveDeg@deg+2,w
  1308  01D3  00B8               	movwf	___ftdiv@f1+2
  1309  01D4  3000               	movlw	0
  1310  01D5  00B3               	movwf	___ftdiv@f2
  1311  01D6  3070               	movlw	112
  1312  01D7  00B4               	movwf	___ftdiv@f2+1
  1313  01D8  3040               	movlw	64
  1314  01D9  00B5               	movwf	___ftdiv@f2+2
  1315  01DA  120A  118A  2226  120A  118A  	fcall	___ftdiv
  1316  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1317  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1318  01E1  0833               	movf	?___ftdiv,w
  1319  01E2  00E7               	movwf	round@x
  1320  01E3  0834               	movf	?___ftdiv+1,w
  1321  01E4  00E8               	movwf	round@x+1
  1322  01E5  0835               	movf	?___ftdiv+2,w
  1323  01E6  00E9               	movwf	round@x+2
  1324  01E7  120A  118A  2443  120A  118A  	fcall	_round
  1325  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1326  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1327  01EE  0867               	movf	?_round,w
  1328  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  1329  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  1330  01F1  00BF               	movwf	_moveDeg$578^(0+128)
  1331  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1332  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1333  01F4  0868               	movf	?_round+1,w
  1334  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1335  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1336  01F7  00C0               	movwf	(_moveDeg$578+1)^(0+128)
  1337  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1338  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1339  01FA  0869               	movf	?_round+2,w
  1340  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1341  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1342  01FD  00C1               	movwf	(_moveDeg$578+2)^(0+128)
  1343                           
  1344                           ;motor.c: 52: else{
  1345                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1346  01FE  083F               	movf	_moveDeg$578^(0+128),w
  1347  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0201  00C3               	movwf	___fttol@f1
  1350  0202  1683               	bsf	3,5	;RP0=1, select bank1
  1351  0203  1303               	bcf	3,6	;RP1=0, select bank1
  1352  0204  0840               	movf	(_moveDeg$578+1)^(0+128),w
  1353  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0207  00C4               	movwf	___fttol@f1+1
  1356  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1357  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1358  020A  0841               	movf	(_moveDeg$578+2)^(0+128),w
  1359  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1360  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1361  020D  00C5               	movwf	___fttol@f1+2
  1362  020E  120A  118A  22DE  120A  118A  	fcall	___fttol
  1363  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1365  0215  0843               	movf	?___fttol,w
  1366  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1367  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1368  0218  00B8               	movwf	??_moveDeg^(0+128)
  1369  0219  0838               	movf	??_moveDeg^(0+128),w
  1370  021A  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1371                           
  1372                           ;motor.c: 54: move(stepsToMove,1);
  1373  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1374  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1375  021D  01A0               	clrf	move@direction
  1376  021E  0AA0               	incf	move@direction,f
  1377  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1378  0220  1303               	bcf	3,6	;RP1=0, select bank1
  1379  0221  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1380  0222  120A  118A  24A3   	fcall	_move
  1381  0225  0008               	return
  1382  0226                     __end_of_moveDeg:	
  1383                           
  1384                           	psect	text4
  1385  0443                     __ptext4:	
  1386 ;; *************** function _round *****************
  1387 ;; Defined at:
  1388 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  x               3   71[BANK0 ] void 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  f               3   74[BANK0 ] void 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  3   71[BANK0 ] void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1402 ;;      Params:         0       3       0       0       0
  1403 ;;      Locals:         0       3       0       0       0
  1404 ;;      Temps:          0       0       0       0       0
  1405 ;;      Totals:         0       6       0       0       0
  1406 ;;Total ram usage:        6 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    5
  1409 ;; This function calls:
  1410 ;;		___ftadd
  1411 ;;		___ftneg
  1412 ;;		_trunc
  1413 ;; This function is called by:
  1414 ;;		_moveDeg
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           
  1419                           ;psect for function _round
  1420  0443                     _round:	
  1421                           
  1422                           ;incstack = 0
  1423                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1424  0443  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0444  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0445  0867               	movf	round@x,w
  1427  0446  00DA               	movwf	___ftadd@f1
  1428  0447  0868               	movf	round@x+1,w
  1429  0448  00DB               	movwf	___ftadd@f1+1
  1430  0449  0869               	movf	round@x+2,w
  1431  044A  00DC               	movwf	___ftadd@f1+2
  1432  044B  0867               	movf	round@x,w
  1433  044C  00D1               	movwf	trunc@x
  1434  044D  0868               	movf	round@x+1,w
  1435  044E  00D2               	movwf	trunc@x+1
  1436  044F  0869               	movf	round@x+2,w
  1437  0450  00D3               	movwf	trunc@x+2
  1438  0451  120A  118A  2561  120A  118A  	fcall	_trunc
  1439  0456  1283               	bcf	3,5	;RP0=0, select bank0
  1440  0457  1303               	bcf	3,6	;RP1=0, select bank0
  1441  0458  0851               	movf	?_trunc,w
  1442  0459  00B0               	movwf	___ftneg@f1
  1443  045A  0852               	movf	?_trunc+1,w
  1444  045B  00B1               	movwf	___ftneg@f1+1
  1445  045C  0853               	movf	?_trunc+2,w
  1446  045D  00B2               	movwf	___ftneg@f1+2
  1447  045E  120A  118A  271B  120A  118A  	fcall	___ftneg
  1448  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1449  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1450  0465  0830               	movf	?___ftneg,w
  1451  0466  00DD               	movwf	___ftadd@f2
  1452  0467  0831               	movf	?___ftneg+1,w
  1453  0468  00DE               	movwf	___ftadd@f2+1
  1454  0469  0832               	movf	?___ftneg+2,w
  1455  046A  00DF               	movwf	___ftadd@f2+2
  1456  046B  120A  118A  202E  120A  118A  	fcall	___ftadd
  1457  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0472  085A               	movf	?___ftadd,w
  1460  0473  00EA               	movwf	round@f
  1461  0474  085B               	movf	?___ftadd+1,w
  1462  0475  00EB               	movwf	round@f+1
  1463  0476  085C               	movf	?___ftadd+2,w
  1464  0477  00EC               	movwf	round@f+2
  1465  0478  086A               	movf	round@f,w
  1466  0479  00DA               	movwf	___ftadd@f1
  1467  047A  086B               	movf	round@f+1,w
  1468  047B  00DB               	movwf	___ftadd@f1+1
  1469  047C  086C               	movf	round@f+2,w
  1470  047D  00DC               	movwf	___ftadd@f1+2
  1471  047E  0867               	movf	round@x,w
  1472  047F  00DD               	movwf	___ftadd@f2
  1473  0480  0868               	movf	round@x+1,w
  1474  0481  00DE               	movwf	___ftadd@f2+1
  1475  0482  0869               	movf	round@x+2,w
  1476  0483  00DF               	movwf	___ftadd@f2+2
  1477  0484  120A  118A  202E  120A  118A  	fcall	___ftadd
  1478  0489  1283               	bcf	3,5	;RP0=0, select bank0
  1479  048A  1303               	bcf	3,6	;RP1=0, select bank0
  1480  048B  085A               	movf	?___ftadd,w
  1481  048C  00E7               	movwf	round@x
  1482  048D  085B               	movf	?___ftadd+1,w
  1483  048E  00E8               	movwf	round@x+1
  1484  048F  085C               	movf	?___ftadd+2,w
  1485  0490  00E9               	movwf	round@x+2
  1486  0491  0867               	movf	round@x,w
  1487  0492  00D1               	movwf	trunc@x
  1488  0493  0868               	movf	round@x+1,w
  1489  0494  00D2               	movwf	trunc@x+1
  1490  0495  0869               	movf	round@x+2,w
  1491  0496  00D3               	movwf	trunc@x+2
  1492  0497  120A  118A  2561   	fcall	_trunc
  1493  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1494  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1495  049C  0851               	movf	?_trunc,w
  1496  049D  00E7               	movwf	?_round
  1497  049E  0852               	movf	?_trunc+1,w
  1498  049F  00E8               	movwf	?_round+1
  1499  04A0  0853               	movf	?_trunc+2,w
  1500  04A1  00E9               	movwf	?_round+2
  1501  04A2  0008               	return
  1502  04A3                     __end_of_round:	
  1503                           
  1504                           	psect	text5
  1505  0561                     __ptext5:	
  1506 ;; *************** function _trunc *****************
  1507 ;; Defined at:
  1508 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  x               3   49[BANK0 ] void 
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  i               3   53[BANK0 ] void 
  1513 ;;  expon           2   56[BANK0 ] int 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  3   49[BANK0 ] int 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1523 ;;      Params:         0       3       0       0       0
  1524 ;;      Locals:         0       5       0       0       0
  1525 ;;      Temps:          0       1       0       0       0
  1526 ;;      Totals:         0       9       0       0       0
  1527 ;;Total ram usage:        9 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    4
  1530 ;; This function calls:
  1531 ;;		___altoft
  1532 ;;		___fttol
  1533 ;;		_frexp
  1534 ;; This function is called by:
  1535 ;;		_round
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           
  1540                           ;psect for function _trunc
  1541  0561                     _trunc:	
  1542                           
  1543                           ;incstack = 0
  1544                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1545  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0563  0851               	movf	trunc@x,w
  1548  0564  00A0               	movwf	frexp@value
  1549  0565  0852               	movf	trunc@x+1,w
  1550  0566  00A1               	movwf	frexp@value+1
  1551  0567  0853               	movf	trunc@x+2,w
  1552  0568  00A2               	movwf	frexp@value+2
  1553  0569  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1554  056A  00D4               	movwf	??_trunc
  1555  056B  0854               	movf	??_trunc,w
  1556  056C  00A3               	movwf	frexp@eptr
  1557  056D  120A  118A  262E  120A  118A  	fcall	_frexp
  1558  0572  1283               	bcf	3,5	;RP0=0, select bank0
  1559  0573  1303               	bcf	3,6	;RP1=0, select bank0
  1560  0574  1FD9               	btfss	trunc@expon+1,7
  1561  0575  2D7D               	goto	l1789
  1562  0576  3000               	movlw	0
  1563  0577  00D1               	movwf	?_trunc
  1564  0578  3000               	movlw	0
  1565  0579  00D2               	movwf	?_trunc+1
  1566  057A  3000               	movlw	0
  1567  057B  00D3               	movwf	?_trunc+2
  1568  057C  0008               	return
  1569  057D                     l1789:	
  1570  057D  3000               	movlw	0
  1571  057E  0259               	subwf	trunc@expon+1,w
  1572  057F  3015               	movlw	21
  1573  0580  1903               	skipnz
  1574  0581  0258               	subwf	trunc@expon,w
  1575  0582  1803               	btfsc	3,0
  1576  0583  0008               	return
  1577  0584  0851               	movf	trunc@x,w
  1578  0585  00C3               	movwf	___fttol@f1
  1579  0586  0852               	movf	trunc@x+1,w
  1580  0587  00C4               	movwf	___fttol@f1+1
  1581  0588  0853               	movf	trunc@x+2,w
  1582  0589  00C5               	movwf	___fttol@f1+2
  1583  058A  120A  118A  22DE  120A  118A  	fcall	___fttol
  1584  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0591  0846               	movf	?___fttol+3,w
  1587  0592  00AB               	movwf	___altoft@c+3
  1588  0593  0845               	movf	?___fttol+2,w
  1589  0594  00AA               	movwf	___altoft@c+2
  1590  0595  0844               	movf	?___fttol+1,w
  1591  0596  00A9               	movwf	___altoft@c+1
  1592  0597  0843               	movf	?___fttol,w
  1593  0598  00A8               	movwf	___altoft@c
  1594  0599  120A  118A  25AB   	fcall	___altoft
  1595  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1596  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1597  059E  0828               	movf	?___altoft,w
  1598  059F  00D5               	movwf	trunc@i
  1599  05A0  0829               	movf	?___altoft+1,w
  1600  05A1  00D6               	movwf	trunc@i+1
  1601  05A2  082A               	movf	?___altoft+2,w
  1602  05A3  00D7               	movwf	trunc@i+2
  1603  05A4  0855               	movf	trunc@i,w
  1604  05A5  00D1               	movwf	?_trunc
  1605  05A6  0856               	movf	trunc@i+1,w
  1606  05A7  00D2               	movwf	?_trunc+1
  1607  05A8  0857               	movf	trunc@i+2,w
  1608  05A9  00D3               	movwf	?_trunc+2
  1609  05AA  0008               	return
  1610  05AB                     __end_of_trunc:	
  1611                           
  1612                           	psect	text6
  1613  062E                     __ptext6:	
  1614 ;; *************** function _frexp *****************
  1615 ;; Defined at:
  1616 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  value           3    0[BANK0 ] int 
  1619 ;;  eptr            1    3[BANK0 ] PTR int 
  1620 ;;		 -> trunc@expon(2), 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  3    0[BANK0 ] PTR int 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       4       0       0       0
  1633 ;;      Locals:         0       0       0       0       0
  1634 ;;      Temps:          0       2       0       0       0
  1635 ;;      Totals:         0       6       0       0       0
  1636 ;;Total ram usage:        6 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_trunc
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _frexp
  1648  062E                     _frexp:	
  1649                           
  1650                           ;incstack = 0
  1651                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1652  062E  1283               	bcf	3,5	;RP0=0, select bank0
  1653  062F  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0630  0822               	movf	frexp@value+2,w
  1655  0631  0421               	iorwf	frexp@value+1,w
  1656  0632  0420               	iorwf	frexp@value,w
  1657  0633  1D03               	skipz
  1658  0634  2E3C               	goto	l1693
  1659  0635  0823               	movf	frexp@eptr,w
  1660  0636  0084               	movwf	4
  1661  0637  1383               	bcf	3,7	;select IRP bank0
  1662  0638  0180               	clrf	0
  1663  0639  0A84               	incf	4,f
  1664  063A  0180               	clrf	0
  1665                           
  1666                           ;	Return value of _frexp is never used
  1667  063B  0008               	return
  1668  063C                     l1693:	
  1669  063C  0822               	movf	frexp@value+2,w
  1670  063D  397F               	andlw	127
  1671  063E  00A4               	movwf	??_frexp
  1672  063F  01A5               	clrf	??_frexp+1
  1673  0640  1003               	clrc
  1674  0641  0DA4               	rlf	??_frexp,f
  1675  0642  0DA5               	rlf	??_frexp+1,f
  1676  0643  0823               	movf	frexp@eptr,w
  1677  0644  0084               	movwf	4
  1678  0645  0824               	movf	??_frexp,w
  1679  0646  1383               	bcf	3,7	;select IRP bank0
  1680  0647  0080               	movwf	0
  1681  0648  0A84               	incf	4,f
  1682  0649  0825               	movf	??_frexp+1,w
  1683  064A  0080               	movwf	0
  1684  064B  0D21               	rlf	frexp@value+1,w
  1685  064C  0D21               	rlf	frexp@value+1,w
  1686  064D  3901               	andlw	1
  1687  064E  00A4               	movwf	??_frexp
  1688  064F  01A5               	clrf	??_frexp+1
  1689  0650  0823               	movf	frexp@eptr,w
  1690  0651  0084               	movwf	4
  1691  0652  0824               	movf	??_frexp,w
  1692  0653  0480               	iorwf	0,f
  1693  0654  0A84               	incf	4,f
  1694  0655  0825               	movf	??_frexp+1,w
  1695  0656  0480               	iorwf	0,f
  1696  0657  0823               	movf	frexp@eptr,w
  1697  0658  0084               	movwf	4
  1698  0659  3082               	movlw	130
  1699  065A  0780               	addwf	0,f
  1700  065B  0F84               	incfsz	4,f
  1701  065C  0800               	movf	0,w
  1702  065D  1803               	skipnc
  1703  065E  0A00               	incf	0,w
  1704  065F  00FF               	movwf	127
  1705  0660  30FF               	movlw	255
  1706  0661  077F               	addwf	127,w
  1707  0662  0080               	movwf	0
  1708  0663  0384               	decf	4,f
  1709  0664  0822               	movf	frexp@value+2,w
  1710  0665  3980               	andlw	-128
  1711  0666  383F               	iorlw	63
  1712  0667  00A2               	movwf	frexp@value+2
  1713  0668  13A1               	bcf	frexp@value+1,7
  1714  0669  0008               	return
  1715  066A                     __end_of_frexp:	
  1716                           ;	Return value of _frexp is never used
  1717                           
  1718                           
  1719                           	psect	text7
  1720  02DE                     __ptext7:	
  1721 ;; *************** function ___fttol *****************
  1722 ;; Defined at:
  1723 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  f1              3   35[BANK0 ] float 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  lval            4   44[BANK0 ] unsigned long 
  1728 ;;  exp1            1   48[BANK0 ] unsigned char 
  1729 ;;  sign1           1   43[BANK0 ] unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  4   35[BANK0 ] long 
  1732 ;; Registers used:
  1733 ;;		wreg, status,2, status,0
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       4       0       0       0
  1740 ;;      Locals:         0       6       0       0       0
  1741 ;;      Temps:          0       4       0       0       0
  1742 ;;      Totals:         0      14       0       0       0
  1743 ;;Total ram usage:       14 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    2
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_moveDeg
  1750 ;;		_trunc
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           
  1755                           ;psect for function ___fttol
  1756  02DE                     ___fttol:	
  1757                           
  1758                           ;incstack = 0
  1759                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1760  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1761  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1762  02E0  0843               	movf	___fttol@f1,w
  1763  02E1  00C7               	movwf	??___fttol
  1764  02E2  0844               	movf	___fttol@f1+1,w
  1765  02E3  00C8               	movwf	??___fttol+1
  1766  02E4  0845               	movf	___fttol@f1+2,w
  1767  02E5  00C9               	movwf	??___fttol+2
  1768  02E6  1003               	clrc
  1769  02E7  0D48               	rlf	??___fttol+1,w
  1770  02E8  0D49               	rlf	??___fttol+2,w
  1771  02E9  00CA               	movwf	??___fttol+3
  1772  02EA  084A               	movf	??___fttol+3,w
  1773  02EB  00D0               	movwf	___fttol@exp1
  1774  02EC  0850               	movf	___fttol@exp1,w
  1775  02ED  1D03               	btfss	3,2
  1776  02EE  2AF8               	goto	l1263
  1777  02EF  3000               	movlw	0
  1778  02F0  00C6               	movwf	?___fttol+3
  1779  02F1  3000               	movlw	0
  1780  02F2  00C5               	movwf	?___fttol+2
  1781  02F3  3000               	movlw	0
  1782  02F4  00C4               	movwf	?___fttol+1
  1783  02F5  3000               	movlw	0
  1784  02F6  00C3               	movwf	?___fttol
  1785  02F7  0008               	return
  1786  02F8                     l1263:	
  1787  02F8  0843               	movf	___fttol@f1,w
  1788  02F9  00C7               	movwf	??___fttol
  1789  02FA  0844               	movf	___fttol@f1+1,w
  1790  02FB  00C8               	movwf	??___fttol+1
  1791  02FC  0845               	movf	___fttol@f1+2,w
  1792  02FD  00C9               	movwf	??___fttol+2
  1793  02FE  3017               	movlw	23
  1794  02FF                     u1125:	
  1795  02FF  1003               	clrc
  1796  0300  0CC9               	rrf	??___fttol+2,f
  1797  0301  0CC8               	rrf	??___fttol+1,f
  1798  0302  0CC7               	rrf	??___fttol,f
  1799  0303  3EFF               	addlw	-1
  1800  0304  1D03               	skipz
  1801  0305  2AFF               	goto	u1125
  1802  0306  0847               	movf	??___fttol,w
  1803  0307  00CA               	movwf	??___fttol+3
  1804  0308  084A               	movf	??___fttol+3,w
  1805  0309  00CB               	movwf	___fttol@sign1
  1806  030A  17C4               	bsf	___fttol@f1+1,7
  1807  030B  30FF               	movlw	255
  1808  030C  05C3               	andwf	___fttol@f1,f
  1809  030D  30FF               	movlw	255
  1810  030E  05C4               	andwf	___fttol@f1+1,f
  1811  030F  3000               	movlw	0
  1812  0310  05C5               	andwf	___fttol@f1+2,f
  1813  0311  0843               	movf	___fttol@f1,w
  1814  0312  00CC               	movwf	___fttol@lval
  1815  0313  0844               	movf	___fttol@f1+1,w
  1816  0314  00CD               	movwf	___fttol@lval+1
  1817  0315  0845               	movf	___fttol@f1+2,w
  1818  0316  00CE               	movwf	___fttol@lval+2
  1819  0317  01CF               	clrf	___fttol@lval+3
  1820  0318  308E               	movlw	142
  1821  0319  02D0               	subwf	___fttol@exp1,f
  1822  031A  1FD0               	btfss	___fttol@exp1,7
  1823  031B  2B3A               	goto	l1283
  1824  031C  0850               	movf	___fttol@exp1,w
  1825  031D  3A80               	xorlw	128
  1826  031E  3E8F               	addlw	143
  1827  031F  1803               	skipnc
  1828  0320  2B2A               	goto	l1281
  1829  0321  3000               	movlw	0
  1830  0322  00C6               	movwf	?___fttol+3
  1831  0323  3000               	movlw	0
  1832  0324  00C5               	movwf	?___fttol+2
  1833  0325  3000               	movlw	0
  1834  0326  00C4               	movwf	?___fttol+1
  1835  0327  3000               	movlw	0
  1836  0328  00C3               	movwf	?___fttol
  1837  0329  0008               	return
  1838  032A                     l1281:	
  1839  032A  3001               	movlw	1
  1840  032B                     u1155:	
  1841  032B  1003               	clrc
  1842  032C  0CCF               	rrf	___fttol@lval+3,f
  1843  032D  0CCE               	rrf	___fttol@lval+2,f
  1844  032E  0CCD               	rrf	___fttol@lval+1,f
  1845  032F  0CCC               	rrf	___fttol@lval,f
  1846  0330  3EFF               	addlw	-1
  1847  0331  1D03               	skipz
  1848  0332  2B2B               	goto	u1155
  1849  0333  3001               	movlw	1
  1850  0334  00C7               	movwf	??___fttol
  1851  0335  0847               	movf	??___fttol,w
  1852  0336  07D0               	addwf	___fttol@exp1,f
  1853  0337  1903               	btfsc	3,2
  1854  0338  2B55               	goto	l1291
  1855  0339  2B2A               	goto	l1281
  1856  033A                     l1283:	
  1857  033A  3018               	movlw	24
  1858  033B  0250               	subwf	___fttol@exp1,w
  1859  033C  1C03               	skipc
  1860  033D  2B52               	goto	l547
  1861  033E  3000               	movlw	0
  1862  033F  00C6               	movwf	?___fttol+3
  1863  0340  3000               	movlw	0
  1864  0341  00C5               	movwf	?___fttol+2
  1865  0342  3000               	movlw	0
  1866  0343  00C4               	movwf	?___fttol+1
  1867  0344  3000               	movlw	0
  1868  0345  00C3               	movwf	?___fttol
  1869  0346  0008               	return
  1870  0347                     l1289:	
  1871  0347  3001               	movlw	1
  1872  0348  00C7               	movwf	??___fttol
  1873  0349                     u1185:	
  1874  0349  1003               	clrc
  1875  034A  0DCC               	rlf	___fttol@lval,f
  1876  034B  0DCD               	rlf	___fttol@lval+1,f
  1877  034C  0DCE               	rlf	___fttol@lval+2,f
  1878  034D  0DCF               	rlf	___fttol@lval+3,f
  1879  034E  0BC7               	decfsz	??___fttol,f
  1880  034F  2B49               	goto	u1185
  1881  0350  3001               	movlw	1
  1882  0351  02D0               	subwf	___fttol@exp1,f
  1883  0352                     l547:	
  1884  0352  0850               	movf	___fttol@exp1,w
  1885  0353  1D03               	btfss	3,2
  1886  0354  2B47               	goto	l1289
  1887  0355                     l1291:	
  1888  0355  084B               	movf	___fttol@sign1,w
  1889  0356  1903               	btfsc	3,2
  1890  0357  2B63               	goto	l1295
  1891  0358  09CC               	comf	___fttol@lval,f
  1892  0359  09CD               	comf	___fttol@lval+1,f
  1893  035A  09CE               	comf	___fttol@lval+2,f
  1894  035B  09CF               	comf	___fttol@lval+3,f
  1895  035C  0ACC               	incf	___fttol@lval,f
  1896  035D  1903               	skipnz
  1897  035E  0ACD               	incf	___fttol@lval+1,f
  1898  035F  1903               	skipnz
  1899  0360  0ACE               	incf	___fttol@lval+2,f
  1900  0361  1903               	skipnz
  1901  0362  0ACF               	incf	___fttol@lval+3,f
  1902  0363                     l1295:	
  1903  0363  084F               	movf	___fttol@lval+3,w
  1904  0364  00C6               	movwf	?___fttol+3
  1905  0365  084E               	movf	___fttol@lval+2,w
  1906  0366  00C5               	movwf	?___fttol+2
  1907  0367  084D               	movf	___fttol@lval+1,w
  1908  0368  00C4               	movwf	?___fttol+1
  1909  0369  084C               	movf	___fttol@lval,w
  1910  036A  00C3               	movwf	?___fttol
  1911  036B  0008               	return
  1912  036C                     __end_of___fttol:	
  1913                           
  1914                           	psect	text8
  1915  05AB                     __ptext8:	
  1916 ;; *************** function ___altoft *****************
  1917 ;; Defined at:
  1918 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  c               4    8[BANK0 ] long 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  sign            1   15[BANK0 ] unsigned char 
  1923 ;;  exp             1   14[BANK0 ] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  3    8[BANK0 ] float 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, status,0, pclath, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1933 ;;      Params:         0       4       0       0       0
  1934 ;;      Locals:         0       2       0       0       0
  1935 ;;      Temps:          0       2       0       0       0
  1936 ;;      Totals:         0       8       0       0       0
  1937 ;;Total ram usage:        8 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    3
  1940 ;; This function calls:
  1941 ;;		___ftpack
  1942 ;; This function is called by:
  1943 ;;		_trunc
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function ___altoft
  1949  05AB                     ___altoft:	
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  1953  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  1954  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  1955  05AD  01AF               	clrf	___altoft@sign
  1956  05AE  308E               	movlw	142
  1957  05AF  00AC               	movwf	??___altoft
  1958  05B0  082C               	movf	??___altoft,w
  1959  05B1  00AE               	movwf	___altoft@exp
  1960  05B2  1FAB               	btfss	___altoft@c+3,7
  1961  05B3  2DC1               	goto	l1681
  1962  05B4  09A8               	comf	___altoft@c,f
  1963  05B5  09A9               	comf	___altoft@c+1,f
  1964  05B6  09AA               	comf	___altoft@c+2,f
  1965  05B7  09AB               	comf	___altoft@c+3,f
  1966  05B8  0AA8               	incf	___altoft@c,f
  1967  05B9  1903               	skipnz
  1968  05BA  0AA9               	incf	___altoft@c+1,f
  1969  05BB  1903               	skipnz
  1970  05BC  0AAA               	incf	___altoft@c+2,f
  1971  05BD  1903               	skipnz
  1972  05BE  0AAB               	incf	___altoft@c+3,f
  1973  05BF  01AF               	clrf	___altoft@sign
  1974  05C0  0AAF               	incf	___altoft@sign,f
  1975  05C1                     l1681:	
  1976  05C1  30FF               	movlw	255
  1977  05C2  052B               	andwf	___altoft@c+3,w
  1978  05C3  1903               	btfsc	3,2
  1979  05C4  2DD3               	goto	l1683
  1980  05C5  3001               	movlw	1
  1981  05C6                     u1935:	
  1982  05C6  1003               	clrc
  1983  05C7  0CAB               	rrf	___altoft@c+3,f
  1984  05C8  0CAA               	rrf	___altoft@c+2,f
  1985  05C9  0CA9               	rrf	___altoft@c+1,f
  1986  05CA  0CA8               	rrf	___altoft@c,f
  1987  05CB  3EFF               	addlw	-1
  1988  05CC  1D03               	skipz
  1989  05CD  2DC6               	goto	u1935
  1990  05CE  3001               	movlw	1
  1991  05CF  00AC               	movwf	??___altoft
  1992  05D0  082C               	movf	??___altoft,w
  1993  05D1  07AE               	addwf	___altoft@exp,f
  1994  05D2  2DC1               	goto	l1681
  1995  05D3                     l1683:	
  1996  05D3  0828               	movf	___altoft@c,w
  1997  05D4  00A0               	movwf	___ftpack@arg
  1998  05D5  0829               	movf	___altoft@c+1,w
  1999  05D6  00A1               	movwf	___ftpack@arg+1
  2000  05D7  082A               	movf	___altoft@c+2,w
  2001  05D8  00A2               	movwf	___ftpack@arg+2
  2002  05D9  082E               	movf	___altoft@exp,w
  2003  05DA  00AC               	movwf	??___altoft
  2004  05DB  082C               	movf	??___altoft,w
  2005  05DC  00A3               	movwf	___ftpack@exp
  2006  05DD  082F               	movf	___altoft@sign,w
  2007  05DE  00AD               	movwf	??___altoft+1
  2008  05DF  082D               	movf	??___altoft+1,w
  2009  05E0  00A4               	movwf	___ftpack@sign
  2010  05E1  120A  118A  236C   	fcall	___ftpack
  2011  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2012  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2013  05E6  0820               	movf	?___ftpack,w
  2014  05E7  00A8               	movwf	?___altoft
  2015  05E8  0821               	movf	?___ftpack+1,w
  2016  05E9  00A9               	movwf	?___altoft+1
  2017  05EA  0822               	movf	?___ftpack+2,w
  2018  05EB  00AA               	movwf	?___altoft+2
  2019  05EC  0008               	return
  2020  05ED                     __end_of___altoft:	
  2021                           
  2022                           	psect	text9
  2023  071B                     __ptext9:	
  2024 ;; *************** function ___ftneg *****************
  2025 ;; Defined at:
  2026 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  f1              3   16[BANK0 ] float 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  3   16[BANK0 ] float 
  2033 ;; Registers used:
  2034 ;;		wreg
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       3       0       0       0
  2041 ;;      Locals:         0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0
  2043 ;;      Totals:         0       3       0       0       0
  2044 ;;Total ram usage:        3 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    2
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_moveDeg
  2051 ;;		_round
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function ___ftneg
  2057  071B                     ___ftneg:	
  2058                           
  2059                           ;incstack = 0
  2060                           ; Regs used in ___ftneg: [wreg]
  2061  071B  1283               	bcf	3,5	;RP0=0, select bank0
  2062  071C  1303               	bcf	3,6	;RP1=0, select bank0
  2063  071D  0832               	movf	___ftneg@f1+2,w
  2064  071E  0431               	iorwf	___ftneg@f1+1,w
  2065  071F  0430               	iorwf	___ftneg@f1,w
  2066  0720  1903               	skipnz
  2067  0721  0008               	return
  2068  0722  3080               	movlw	128
  2069  0723  06B2               	xorwf	___ftneg@f1+2,f
  2070  0724  0008               	return
  2071  0725                     __end_of___ftneg:	
  2072                           
  2073                           	psect	text10
  2074  002E                     __ptext10:	
  2075 ;; *************** function ___ftadd *****************
  2076 ;; Defined at:
  2077 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  f1              3   58[BANK0 ] float 
  2080 ;;  f2              3   61[BANK0 ] float 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;  exp1            1   70[BANK0 ] unsigned char 
  2083 ;;  exp2            1   69[BANK0 ] unsigned char 
  2084 ;;  sign            1   68[BANK0 ] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  3   58[BANK0 ] float 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0, pclath, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2094 ;;      Params:         0       6       0       0       0
  2095 ;;      Locals:         0       3       0       0       0
  2096 ;;      Temps:          0       4       0       0       0
  2097 ;;      Totals:         0      13       0       0       0
  2098 ;;Total ram usage:       13 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    3
  2101 ;; This function calls:
  2102 ;;		___ftpack
  2103 ;; This function is called by:
  2104 ;;		_round
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           
  2109                           ;psect for function ___ftadd
  2110  002E                     ___ftadd:	
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2114  002E  1283               	bcf	3,5	;RP0=0, select bank0
  2115  002F  1303               	bcf	3,6	;RP1=0, select bank0
  2116  0030  085A               	movf	___ftadd@f1,w
  2117  0031  00E0               	movwf	??___ftadd
  2118  0032  085B               	movf	___ftadd@f1+1,w
  2119  0033  00E1               	movwf	??___ftadd+1
  2120  0034  085C               	movf	___ftadd@f1+2,w
  2121  0035  00E2               	movwf	??___ftadd+2
  2122  0036  1003               	clrc
  2123  0037  0D61               	rlf	??___ftadd+1,w
  2124  0038  0D62               	rlf	??___ftadd+2,w
  2125  0039  00E3               	movwf	??___ftadd+3
  2126  003A  0863               	movf	??___ftadd+3,w
  2127  003B  00E6               	movwf	___ftadd@exp1
  2128  003C  085D               	movf	___ftadd@f2,w
  2129  003D  00E0               	movwf	??___ftadd
  2130  003E  085E               	movf	___ftadd@f2+1,w
  2131  003F  00E1               	movwf	??___ftadd+1
  2132  0040  085F               	movf	___ftadd@f2+2,w
  2133  0041  00E2               	movwf	??___ftadd+2
  2134  0042  1003               	clrc
  2135  0043  0D61               	rlf	??___ftadd+1,w
  2136  0044  0D62               	rlf	??___ftadd+2,w
  2137  0045  00E3               	movwf	??___ftadd+3
  2138  0046  0863               	movf	??___ftadd+3,w
  2139  0047  00E5               	movwf	___ftadd@exp2
  2140  0048  0866               	movf	___ftadd@exp1,w
  2141  0049  1903               	btfsc	3,2
  2142  004A  2857               	goto	l1709
  2143  004B  0865               	movf	___ftadd@exp2,w
  2144  004C  0266               	subwf	___ftadd@exp1,w
  2145  004D  1803               	skipnc
  2146  004E  285E               	goto	l1713
  2147  004F  0366               	decf	___ftadd@exp1,w
  2148  0050  3AFF               	xorlw	255
  2149  0051  0765               	addwf	___ftadd@exp2,w
  2150  0052  00E0               	movwf	??___ftadd
  2151  0053  3019               	movlw	25
  2152  0054  0260               	subwf	??___ftadd,w
  2153  0055  1C03               	skipc
  2154  0056  285E               	goto	l1713
  2155  0057                     l1709:	
  2156  0057  085D               	movf	___ftadd@f2,w
  2157  0058  00DA               	movwf	?___ftadd
  2158  0059  085E               	movf	___ftadd@f2+1,w
  2159  005A  00DB               	movwf	?___ftadd+1
  2160  005B  085F               	movf	___ftadd@f2+2,w
  2161  005C  00DC               	movwf	?___ftadd+2
  2162  005D  0008               	return
  2163  005E                     l1713:	
  2164  005E  0865               	movf	___ftadd@exp2,w
  2165  005F  1903               	btfsc	3,2
  2166  0060  0008               	return
  2167  0061  0866               	movf	___ftadd@exp1,w
  2168  0062  0265               	subwf	___ftadd@exp2,w
  2169  0063  1803               	skipnc
  2170  0064  286D               	goto	l1719
  2171  0065  0365               	decf	___ftadd@exp2,w
  2172  0066  3AFF               	xorlw	255
  2173  0067  0766               	addwf	___ftadd@exp1,w
  2174  0068  00E0               	movwf	??___ftadd
  2175  0069  3019               	movlw	25
  2176  006A  0260               	subwf	??___ftadd,w
  2177  006B  1803               	btfsc	3,0
  2178  006C  0008               	return
  2179  006D                     l1719:	
  2180  006D  3006               	movlw	6
  2181  006E  00E0               	movwf	??___ftadd
  2182  006F  0860               	movf	??___ftadd,w
  2183  0070  00E4               	movwf	___ftadd@sign
  2184  0071  1BDC               	btfsc	___ftadd@f1+2,7
  2185  0072  17E4               	bsf	___ftadd@sign,7
  2186  0073  1BDF               	btfsc	___ftadd@f2+2,7
  2187  0074  1764               	bsf	___ftadd@sign,6
  2188  0075  17DB               	bsf	___ftadd@f1+1,7
  2189  0076  30FF               	movlw	255
  2190  0077  05DA               	andwf	___ftadd@f1,f
  2191  0078  30FF               	movlw	255
  2192  0079  05DB               	andwf	___ftadd@f1+1,f
  2193  007A  3000               	movlw	0
  2194  007B  05DC               	andwf	___ftadd@f1+2,f
  2195  007C  17DE               	bsf	___ftadd@f2+1,7
  2196  007D  30FF               	movlw	255
  2197  007E  05DD               	andwf	___ftadd@f2,f
  2198  007F  30FF               	movlw	255
  2199  0080  05DE               	andwf	___ftadd@f2+1,f
  2200  0081  3000               	movlw	0
  2201  0082  05DF               	andwf	___ftadd@f2+2,f
  2202  0083  0865               	movf	___ftadd@exp2,w
  2203  0084  0266               	subwf	___ftadd@exp1,w
  2204  0085  1803               	skipnc
  2205  0086  28AD               	goto	l1741
  2206  0087                     l1731:	
  2207  0087  3001               	movlw	1
  2208  0088                     u2055:	
  2209  0088  1003               	clrc
  2210  0089  0DDD               	rlf	___ftadd@f2,f
  2211  008A  0DDE               	rlf	___ftadd@f2+1,f
  2212  008B  0DDF               	rlf	___ftadd@f2+2,f
  2213  008C  3EFF               	addlw	-1
  2214  008D  1D03               	skipz
  2215  008E  2888               	goto	u2055
  2216  008F  3001               	movlw	1
  2217  0090  02E5               	subwf	___ftadd@exp2,f
  2218  0091  0865               	movf	___ftadd@exp2,w
  2219  0092  0666               	xorwf	___ftadd@exp1,w
  2220  0093  1903               	skipnz
  2221  0094  28A8               	goto	l1739
  2222  0095  3001               	movlw	1
  2223  0096  02E4               	subwf	___ftadd@sign,f
  2224  0097  0864               	movf	___ftadd@sign,w
  2225  0098  3907               	andlw	7
  2226  0099  1903               	btfsc	3,2
  2227  009A  28A8               	goto	l1739
  2228  009B  2887               	goto	l1731
  2229  009C                     l1737:	
  2230  009C  3001               	movlw	1
  2231  009D                     u2085:	
  2232  009D  1003               	clrc
  2233  009E  0CDC               	rrf	___ftadd@f1+2,f
  2234  009F  0CDB               	rrf	___ftadd@f1+1,f
  2235  00A0  0CDA               	rrf	___ftadd@f1,f
  2236  00A1  3EFF               	addlw	-1
  2237  00A2  1D03               	skipz
  2238  00A3  289D               	goto	u2085
  2239  00A4  3001               	movlw	1
  2240  00A5  00E0               	movwf	??___ftadd
  2241  00A6  0860               	movf	??___ftadd,w
  2242  00A7  07E6               	addwf	___ftadd@exp1,f
  2243  00A8                     l1739:	
  2244  00A8  0866               	movf	___ftadd@exp1,w
  2245  00A9  0665               	xorwf	___ftadd@exp2,w
  2246  00AA  1903               	btfsc	3,2
  2247  00AB  28D6               	goto	l487
  2248  00AC  289C               	goto	l1737
  2249  00AD                     l1741:	
  2250  00AD  0866               	movf	___ftadd@exp1,w
  2251  00AE  0265               	subwf	___ftadd@exp2,w
  2252  00AF  1803               	skipnc
  2253  00B0  28D6               	goto	l487
  2254  00B1                     l1743:	
  2255  00B1  3001               	movlw	1
  2256  00B2                     u2115:	
  2257  00B2  1003               	clrc
  2258  00B3  0DDA               	rlf	___ftadd@f1,f
  2259  00B4  0DDB               	rlf	___ftadd@f1+1,f
  2260  00B5  0DDC               	rlf	___ftadd@f1+2,f
  2261  00B6  3EFF               	addlw	-1
  2262  00B7  1D03               	skipz
  2263  00B8  28B2               	goto	u2115
  2264  00B9  3001               	movlw	1
  2265  00BA  02E6               	subwf	___ftadd@exp1,f
  2266  00BB  0865               	movf	___ftadd@exp2,w
  2267  00BC  0666               	xorwf	___ftadd@exp1,w
  2268  00BD  1903               	skipnz
  2269  00BE  28D2               	goto	l1751
  2270  00BF  3001               	movlw	1
  2271  00C0  02E4               	subwf	___ftadd@sign,f
  2272  00C1  0864               	movf	___ftadd@sign,w
  2273  00C2  3907               	andlw	7
  2274  00C3  1903               	btfsc	3,2
  2275  00C4  28D2               	goto	l1751
  2276  00C5  28B1               	goto	l1743
  2277  00C6                     l1749:	
  2278  00C6  3001               	movlw	1
  2279  00C7                     u2145:	
  2280  00C7  1003               	clrc
  2281  00C8  0CDF               	rrf	___ftadd@f2+2,f
  2282  00C9  0CDE               	rrf	___ftadd@f2+1,f
  2283  00CA  0CDD               	rrf	___ftadd@f2,f
  2284  00CB  3EFF               	addlw	-1
  2285  00CC  1D03               	skipz
  2286  00CD  28C7               	goto	u2145
  2287  00CE  3001               	movlw	1
  2288  00CF  00E0               	movwf	??___ftadd
  2289  00D0  0860               	movf	??___ftadd,w
  2290  00D1  07E5               	addwf	___ftadd@exp2,f
  2291  00D2                     l1751:	
  2292  00D2  0866               	movf	___ftadd@exp1,w
  2293  00D3  0665               	xorwf	___ftadd@exp2,w
  2294  00D4  1D03               	skipz
  2295  00D5  28C6               	goto	l1749
  2296  00D6                     l487:	
  2297  00D6  1FE4               	btfss	___ftadd@sign,7
  2298  00D7  28E8               	goto	l1755
  2299  00D8  30FF               	movlw	255
  2300  00D9  06DA               	xorwf	___ftadd@f1,f
  2301  00DA  30FF               	movlw	255
  2302  00DB  06DB               	xorwf	___ftadd@f1+1,f
  2303  00DC  30FF               	movlw	255
  2304  00DD  06DC               	xorwf	___ftadd@f1+2,f
  2305  00DE  3001               	movlw	1
  2306  00DF  07DA               	addwf	___ftadd@f1,f
  2307  00E0  3000               	movlw	0
  2308  00E1  1803               	skipnc
  2309  00E2  3001               	movlw	1
  2310  00E3  07DB               	addwf	___ftadd@f1+1,f
  2311  00E4  3000               	movlw	0
  2312  00E5  1803               	skipnc
  2313  00E6  3001               	movlw	1
  2314  00E7  07DC               	addwf	___ftadd@f1+2,f
  2315  00E8                     l1755:	
  2316  00E8  1F64               	btfss	___ftadd@sign,6
  2317  00E9  28FA               	goto	l1759
  2318  00EA  30FF               	movlw	255
  2319  00EB  06DD               	xorwf	___ftadd@f2,f
  2320  00EC  30FF               	movlw	255
  2321  00ED  06DE               	xorwf	___ftadd@f2+1,f
  2322  00EE  30FF               	movlw	255
  2323  00EF  06DF               	xorwf	___ftadd@f2+2,f
  2324  00F0  3001               	movlw	1
  2325  00F1  07DD               	addwf	___ftadd@f2,f
  2326  00F2  3000               	movlw	0
  2327  00F3  1803               	skipnc
  2328  00F4  3001               	movlw	1
  2329  00F5  07DE               	addwf	___ftadd@f2+1,f
  2330  00F6  3000               	movlw	0
  2331  00F7  1803               	skipnc
  2332  00F8  3001               	movlw	1
  2333  00F9  07DF               	addwf	___ftadd@f2+2,f
  2334  00FA                     l1759:	
  2335  00FA  01E4               	clrf	___ftadd@sign
  2336  00FB  085A               	movf	___ftadd@f1,w
  2337  00FC  07DD               	addwf	___ftadd@f2,f
  2338  00FD  085B               	movf	___ftadd@f1+1,w
  2339  00FE  1103               	clrz
  2340  00FF  1803               	skipnc
  2341  0100  0A5B               	incf	___ftadd@f1+1,w
  2342  0101  1D03               	btfss	3,2
  2343  0102  07DE               	addwf	___ftadd@f2+1,f
  2344  0103  085C               	movf	___ftadd@f1+2,w
  2345  0104  1103               	clrz
  2346  0105  1803               	skipnc
  2347  0106  0A5C               	incf	___ftadd@f1+2,w
  2348  0107  1D03               	btfss	3,2
  2349  0108  07DF               	addwf	___ftadd@f2+2,f
  2350  0109  1FDF               	btfss	___ftadd@f2+2,7
  2351  010A  291D               	goto	l1769
  2352  010B  30FF               	movlw	255
  2353  010C  06DD               	xorwf	___ftadd@f2,f
  2354  010D  30FF               	movlw	255
  2355  010E  06DE               	xorwf	___ftadd@f2+1,f
  2356  010F  30FF               	movlw	255
  2357  0110  06DF               	xorwf	___ftadd@f2+2,f
  2358  0111  3001               	movlw	1
  2359  0112  07DD               	addwf	___ftadd@f2,f
  2360  0113  3000               	movlw	0
  2361  0114  1803               	skipnc
  2362  0115  3001               	movlw	1
  2363  0116  07DE               	addwf	___ftadd@f2+1,f
  2364  0117  3000               	movlw	0
  2365  0118  1803               	skipnc
  2366  0119  3001               	movlw	1
  2367  011A  07DF               	addwf	___ftadd@f2+2,f
  2368  011B  01E4               	clrf	___ftadd@sign
  2369  011C  0AE4               	incf	___ftadd@sign,f
  2370  011D                     l1769:	
  2371  011D  085D               	movf	___ftadd@f2,w
  2372  011E  00A0               	movwf	___ftpack@arg
  2373  011F  085E               	movf	___ftadd@f2+1,w
  2374  0120  00A1               	movwf	___ftpack@arg+1
  2375  0121  085F               	movf	___ftadd@f2+2,w
  2376  0122  00A2               	movwf	___ftpack@arg+2
  2377  0123  0866               	movf	___ftadd@exp1,w
  2378  0124  00E0               	movwf	??___ftadd
  2379  0125  0860               	movf	??___ftadd,w
  2380  0126  00A3               	movwf	___ftpack@exp
  2381  0127  0864               	movf	___ftadd@sign,w
  2382  0128  00E1               	movwf	??___ftadd+1
  2383  0129  0861               	movf	??___ftadd+1,w
  2384  012A  00A4               	movwf	___ftpack@sign
  2385  012B  120A  118A  236C   	fcall	___ftpack
  2386  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2387  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2388  0130  0820               	movf	?___ftpack,w
  2389  0131  00DA               	movwf	?___ftadd
  2390  0132  0821               	movf	?___ftpack+1,w
  2391  0133  00DB               	movwf	?___ftadd+1
  2392  0134  0822               	movf	?___ftpack+2,w
  2393  0135  00DC               	movwf	?___ftadd+2
  2394  0136  0008               	return
  2395  0137                     __end_of___ftadd:	
  2396                           
  2397                           	psect	text11
  2398  04A3                     __ptext11:	
  2399 ;; *************** function _move *****************
  2400 ;; Defined at:
  2401 ;;		line 18 in file "motor.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  steps           1    wreg     unsigned char 
  2404 ;;  direction       1    0[BANK0 ] unsigned char 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  steps           1    3[BANK0 ] unsigned char 
  2407 ;;  i               1    4[BANK0 ] unsigned char 
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2417 ;;      Params:         0       1       0       0       0
  2418 ;;      Locals:         0       2       0       0       0
  2419 ;;      Temps:          0       2       0       0       0
  2420 ;;      Totals:         0       5       0       0       0
  2421 ;;Total ram usage:        5 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; Hardware stack levels required when called:    2
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;;		_moveDeg
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           
  2433                           ;psect for function _move
  2434  04A3                     _move:	
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0]
  2438                           ;move@steps stored from wreg
  2439  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2440  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2441  04A5  00A3               	movwf	move@steps
  2442                           
  2443                           ;motor.c: 19: for(char i = 0; i<steps; i++){
  2444  04A6  01A4               	clrf	move@i
  2445  04A7                     l1835:	
  2446  04A7  0823               	movf	move@steps,w
  2447  04A8  0224               	subwf	move@i,w
  2448  04A9  1803               	btfsc	3,0
  2449  04AA  0008               	return
  2450                           
  2451                           ;motor.c: 20: if(cstep == 7 && direction == 1){
  2452  04AB  3007               	movlw	7
  2453  04AC  0676               	xorwf	_cstep,w
  2454  04AD  1D03               	btfss	3,2
  2455  04AE  2CBA               	goto	l1809
  2456  04AF  0320               	decf	move@direction,w
  2457  04B0  1D03               	btfss	3,2
  2458  04B1  2CBA               	goto	l1809
  2459                           
  2460                           ;motor.c: 21: PORTC = halfSteps[0];
  2461  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  2462  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  2463  04B4  0820               	movf	_halfSteps^(0+128),w
  2464  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2465  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2466  04B7  0087               	movwf	7	;volatile
  2467                           
  2468                           ;motor.c: 22: cstep = 0;
  2469  04B8  01F6               	clrf	_cstep
  2470                           
  2471                           ;motor.c: 23: }
  2472  04B9  2CF2               	goto	l1831
  2473  04BA                     l1809:	
  2474                           
  2475                           ;motor.c: 24: else if(cstep == 0 && direction == 0){
  2476  04BA  0876               	movf	_cstep,w
  2477  04BB  1D03               	btfss	3,2
  2478  04BC  2CCB               	goto	l111
  2479  04BD  0820               	movf	move@direction,w
  2480  04BE  1D03               	btfss	3,2
  2481  04BF  2CCB               	goto	l111
  2482                           
  2483                           ;motor.c: 25: PORTC = halfSteps[7];
  2484  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  2485  04C1  1303               	bcf	3,6	;RP1=0, select bank1
  2486  04C2  082E               	movf	(_halfSteps^(0+128)+14),w
  2487  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2488  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2489  04C5  0087               	movwf	7	;volatile
  2490                           
  2491                           ;motor.c: 26: cstep = 7;
  2492  04C6  3007               	movlw	7
  2493  04C7  00A1               	movwf	??_move
  2494  04C8  0821               	movf	??_move,w
  2495  04C9  00F6               	movwf	_cstep
  2496                           
  2497                           ;motor.c: 27: }
  2498  04CA  2CF2               	goto	l1831
  2499  04CB                     l111:	
  2500                           
  2501                           ;motor.c: 28: else if (cstep >= 0 && cstep <= 7){
  2502  04CB  1BF6               	btfsc	_cstep,7
  2503  04CC  2CF1               	goto	l1829
  2504  04CD  0876               	movf	_cstep,w
  2505  04CE  3A80               	xorlw	128
  2506  04CF  3E78               	addlw	-136
  2507  04D0  1803               	skipnc
  2508  04D1  2CF1               	goto	l1829
  2509                           
  2510                           ;motor.c: 29: if(direction == 1){
  2511  04D2  0320               	decf	move@direction,w
  2512  04D3  1D03               	btfss	3,2
  2513  04D4  2CE0               	goto	l1823
  2514                           
  2515                           ;motor.c: 30: PORTC = halfSteps[cstep+1];
  2516  04D5  0876               	movf	_cstep,w
  2517  04D6  00A1               	movwf	??_move
  2518  04D7  0721               	addwf	??_move,w
  2519  04D8  3E02               	addlw	2
  2520  04D9  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2521  04DA  0084               	movwf	4
  2522  04DB  1383               	bcf	3,7	;select IRP bank1
  2523  04DC  0800               	movf	0,w
  2524  04DD  0087               	movwf	7	;volatile
  2525                           
  2526                           ;motor.c: 31: cstep++;
  2527  04DE  3001               	movlw	1
  2528  04DF  2CED               	goto	L3
  2529  04E0                     l1823:	
  2530                           ;motor.c: 32: }
  2531                           
  2532                           
  2533                           ;motor.c: 33: else if(direction == 0){
  2534  04E0  0820               	movf	move@direction,w
  2535  04E1  1D03               	btfss	3,2
  2536  04E2  2CF2               	goto	l1831
  2537                           
  2538                           ;motor.c: 34: PORTC = halfSteps[cstep-1];
  2539  04E3  0876               	movf	_cstep,w
  2540  04E4  00A1               	movwf	??_move
  2541  04E5  0721               	addwf	??_move,w
  2542  04E6  3EFE               	addlw	254
  2543  04E7  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2544  04E8  0084               	movwf	4
  2545  04E9  1383               	bcf	3,7	;select IRP bank1
  2546  04EA  0800               	movf	0,w
  2547  04EB  0087               	movwf	7	;volatile
  2548                           
  2549                           ;motor.c: 35: cstep--;
  2550  04EC  30FF               	movlw	255
  2551  04ED                     L3:	
  2552  04ED  00A1               	movwf	??_move
  2553  04EE  0821               	movf	??_move,w
  2554  04EF  07F6               	addwf	_cstep,f
  2555                           
  2556                           ;motor.c: 36: }
  2557                           ;motor.c: 38: }
  2558  04F0  2CF2               	goto	l1831
  2559  04F1                     l1829:	
  2560                           
  2561                           ;motor.c: 39: else{
  2562                           ;motor.c: 40: PORTC = 0x00;
  2563  04F1  0187               	clrf	7	;volatile
  2564  04F2                     l1831:	
  2565                           
  2566                           ;motor.c: 41: }
  2567                           ;motor.c: 42: _delay((unsigned long)((20)*(20000000/4000.0)));
  2568  04F2  3082               	movlw	130
  2569  04F3  00A2               	movwf	??_move+1
  2570  04F4  30DD               	movlw	221
  2571  04F5  00A1               	movwf	??_move
  2572  04F6                     u2517:	
  2573  04F6  0BA1               	decfsz	??_move,f
  2574  04F7  2CF6               	goto	u2517
  2575  04F8  0BA2               	decfsz	??_move+1,f
  2576  04F9  2CF6               	goto	u2517
  2577  04FA  2CFB               	nop2
  2578  04FB  3001               	movlw	1
  2579  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2580  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2581  04FE  00A1               	movwf	??_move
  2582  04FF  0821               	movf	??_move,w
  2583  0500  07A4               	addwf	move@i,f
  2584  0501  2CA7               	goto	l1835
  2585  0502                     __end_of_move:	
  2586                           
  2587                           	psect	text12
  2588  0502                     __ptext12:	
  2589 ;; *************** function ___ftge *****************
  2590 ;; Defined at:
  2591 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  ff1             3    0[BANK0 ] float 
  2594 ;;  ff2             3    3[BANK0 ] float 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2606 ;;      Params:         0       6       0       0       0
  2607 ;;      Locals:         0       0       0       0       0
  2608 ;;      Temps:          0       6       0       0       0
  2609 ;;      Totals:         0      12       0       0       0
  2610 ;;Total ram usage:       12 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_moveDeg
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function ___ftge
  2622  0502                     ___ftge:	
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2626  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0504  1FA2               	btfss	___ftge@ff1+2,7
  2629  0505  2D2B               	goto	l1503
  2630  0506  3000               	movlw	0
  2631  0507  00A6               	movwf	??___ftge
  2632  0508  3000               	movlw	0
  2633  0509  00A7               	movwf	??___ftge+1
  2634  050A  3080               	movlw	128
  2635  050B  00A8               	movwf	??___ftge+2
  2636  050C  0920               	comf	___ftge@ff1,w
  2637  050D  00A9               	movwf	??___ftge+3
  2638  050E  0921               	comf	___ftge@ff1+1,w
  2639  050F  00AA               	movwf	??___ftge+4
  2640  0510  0922               	comf	___ftge@ff1+2,w
  2641  0511  00AB               	movwf	??___ftge+5
  2642  0512  0AA9               	incf	??___ftge+3,f
  2643  0513  1903               	skipnz
  2644  0514  0AAA               	incf	??___ftge+4,f
  2645  0515  1903               	skipnz
  2646  0516  0AAB               	incf	??___ftge+5,f
  2647  0517  0829               	movf	??___ftge+3,w
  2648  0518  07A6               	addwf	??___ftge,f
  2649  0519  082A               	movf	??___ftge+4,w
  2650  051A  1803               	skipnc
  2651  051B  0F2A               	incfsz	??___ftge+4,w
  2652  051C  2D1E               	goto	u1671
  2653  051D  2D1F               	goto	u1672
  2654  051E                     u1671:	
  2655  051E  07A7               	addwf	??___ftge+1,f
  2656  051F                     u1672:	
  2657  051F  082B               	movf	??___ftge+5,w
  2658  0520  1803               	skipnc
  2659  0521  0F2B               	incfsz	??___ftge+5,w
  2660  0522  2D24               	goto	u1673
  2661  0523  2D25               	goto	u1674
  2662  0524                     u1673:	
  2663  0524  07A8               	addwf	??___ftge+2,f
  2664  0525                     u1674:	
  2665  0525  0826               	movf	??___ftge,w
  2666  0526  00A0               	movwf	___ftge@ff1
  2667  0527  0827               	movf	??___ftge+1,w
  2668  0528  00A1               	movwf	___ftge@ff1+1
  2669  0529  0828               	movf	??___ftge+2,w
  2670  052A  00A2               	movwf	___ftge@ff1+2
  2671  052B                     l1503:	
  2672  052B  1FA5               	btfss	___ftge@ff2+2,7
  2673  052C  2D52               	goto	l1507
  2674  052D  3000               	movlw	0
  2675  052E  00A6               	movwf	??___ftge
  2676  052F  3000               	movlw	0
  2677  0530  00A7               	movwf	??___ftge+1
  2678  0531  3080               	movlw	128
  2679  0532  00A8               	movwf	??___ftge+2
  2680  0533  0923               	comf	___ftge@ff2,w
  2681  0534  00A9               	movwf	??___ftge+3
  2682  0535  0924               	comf	___ftge@ff2+1,w
  2683  0536  00AA               	movwf	??___ftge+4
  2684  0537  0925               	comf	___ftge@ff2+2,w
  2685  0538  00AB               	movwf	??___ftge+5
  2686  0539  0AA9               	incf	??___ftge+3,f
  2687  053A  1903               	skipnz
  2688  053B  0AAA               	incf	??___ftge+4,f
  2689  053C  1903               	skipnz
  2690  053D  0AAB               	incf	??___ftge+5,f
  2691  053E  0829               	movf	??___ftge+3,w
  2692  053F  07A6               	addwf	??___ftge,f
  2693  0540  082A               	movf	??___ftge+4,w
  2694  0541  1803               	skipnc
  2695  0542  0F2A               	incfsz	??___ftge+4,w
  2696  0543  2D45               	goto	u1691
  2697  0544  2D46               	goto	u1692
  2698  0545                     u1691:	
  2699  0545  07A7               	addwf	??___ftge+1,f
  2700  0546                     u1692:	
  2701  0546  082B               	movf	??___ftge+5,w
  2702  0547  1803               	skipnc
  2703  0548  0F2B               	incfsz	??___ftge+5,w
  2704  0549  2D4B               	goto	u1693
  2705  054A  2D4C               	goto	u1694
  2706  054B                     u1693:	
  2707  054B  07A8               	addwf	??___ftge+2,f
  2708  054C                     u1694:	
  2709  054C  0826               	movf	??___ftge,w
  2710  054D  00A3               	movwf	___ftge@ff2
  2711  054E  0827               	movf	??___ftge+1,w
  2712  054F  00A4               	movwf	___ftge@ff2+1
  2713  0550  0828               	movf	??___ftge+2,w
  2714  0551  00A5               	movwf	___ftge@ff2+2
  2715  0552                     l1507:	
  2716  0552  3080               	movlw	128
  2717  0553  06A2               	xorwf	___ftge@ff1+2,f
  2718  0554  3080               	movlw	128
  2719  0555  06A5               	xorwf	___ftge@ff2+2,f
  2720  0556  0825               	movf	___ftge@ff2+2,w
  2721  0557  0222               	subwf	___ftge@ff1+2,w
  2722  0558  1D03               	skipz
  2723  0559  0008               	return
  2724  055A  0824               	movf	___ftge@ff2+1,w
  2725  055B  0221               	subwf	___ftge@ff1+1,w
  2726  055C  1D03               	skipz
  2727  055D  0008               	return
  2728  055E  0823               	movf	___ftge@ff2,w
  2729  055F  0220               	subwf	___ftge@ff1,w
  2730  0560  0008               	return
  2731  0561                     __end_of___ftge:	
  2732                           
  2733                           	psect	text13
  2734  0226                     __ptext13:	
  2735 ;; *************** function ___ftdiv *****************
  2736 ;; Defined at:
  2737 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  f2              3   19[BANK0 ] float 
  2740 ;;  f1              3   22[BANK0 ] float 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  f3              3   30[BANK0 ] float 
  2743 ;;  sign            1   34[BANK0 ] unsigned char 
  2744 ;;  exp             1   33[BANK0 ] unsigned char 
  2745 ;;  cntr            1   29[BANK0 ] unsigned char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  3   19[BANK0 ] float 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0, pclath, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2755 ;;      Params:         0       6       0       0       0
  2756 ;;      Locals:         0       6       0       0       0
  2757 ;;      Temps:          0       4       0       0       0
  2758 ;;      Totals:         0      16       0       0       0
  2759 ;;Total ram usage:       16 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    3
  2762 ;; This function calls:
  2763 ;;		___ftpack
  2764 ;; This function is called by:
  2765 ;;		_moveDeg
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           
  2770                           ;psect for function ___ftdiv
  2771  0226                     ___ftdiv:	
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2775  0226  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0227  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0228  0836               	movf	___ftdiv@f1,w
  2778  0229  00B9               	movwf	??___ftdiv
  2779  022A  0837               	movf	___ftdiv@f1+1,w
  2780  022B  00BA               	movwf	??___ftdiv+1
  2781  022C  0838               	movf	___ftdiv@f1+2,w
  2782  022D  00BB               	movwf	??___ftdiv+2
  2783  022E  1003               	clrc
  2784  022F  0D3A               	rlf	??___ftdiv+1,w
  2785  0230  0D3B               	rlf	??___ftdiv+2,w
  2786  0231  00BC               	movwf	??___ftdiv+3
  2787  0232  083C               	movf	??___ftdiv+3,w
  2788  0233  00C1               	movwf	___ftdiv@exp
  2789  0234  0841               	movf	___ftdiv@exp,w
  2790  0235  1D03               	btfss	3,2
  2791  0236  2A3E               	goto	l1851
  2792  0237  3000               	movlw	0
  2793  0238  00B3               	movwf	?___ftdiv
  2794  0239  3000               	movlw	0
  2795  023A  00B4               	movwf	?___ftdiv+1
  2796  023B  3000               	movlw	0
  2797  023C  00B5               	movwf	?___ftdiv+2
  2798  023D  0008               	return
  2799  023E                     l1851:	
  2800  023E  0833               	movf	___ftdiv@f2,w
  2801  023F  00B9               	movwf	??___ftdiv
  2802  0240  0834               	movf	___ftdiv@f2+1,w
  2803  0241  00BA               	movwf	??___ftdiv+1
  2804  0242  0835               	movf	___ftdiv@f2+2,w
  2805  0243  00BB               	movwf	??___ftdiv+2
  2806  0244  1003               	clrc
  2807  0245  0D3A               	rlf	??___ftdiv+1,w
  2808  0246  0D3B               	rlf	??___ftdiv+2,w
  2809  0247  00BC               	movwf	??___ftdiv+3
  2810  0248  083C               	movf	??___ftdiv+3,w
  2811  0249  00C2               	movwf	___ftdiv@sign
  2812  024A  0842               	movf	___ftdiv@sign,w
  2813  024B  1D03               	btfss	3,2
  2814  024C  2A54               	goto	l1857
  2815  024D  3000               	movlw	0
  2816  024E  00B3               	movwf	?___ftdiv
  2817  024F  3000               	movlw	0
  2818  0250  00B4               	movwf	?___ftdiv+1
  2819  0251  3000               	movlw	0
  2820  0252  00B5               	movwf	?___ftdiv+2
  2821  0253  0008               	return
  2822  0254                     l1857:	
  2823  0254  3000               	movlw	0
  2824  0255  00BE               	movwf	___ftdiv@f3
  2825  0256  3000               	movlw	0
  2826  0257  00BF               	movwf	___ftdiv@f3+1
  2827  0258  3000               	movlw	0
  2828  0259  00C0               	movwf	___ftdiv@f3+2
  2829  025A  3089               	movlw	137
  2830  025B  0742               	addwf	___ftdiv@sign,w
  2831  025C  00B9               	movwf	??___ftdiv
  2832  025D  0839               	movf	??___ftdiv,w
  2833  025E  02C1               	subwf	___ftdiv@exp,f
  2834  025F  0836               	movf	___ftdiv@f1,w
  2835  0260  00B9               	movwf	??___ftdiv
  2836  0261  0837               	movf	___ftdiv@f1+1,w
  2837  0262  00BA               	movwf	??___ftdiv+1
  2838  0263  0838               	movf	___ftdiv@f1+2,w
  2839  0264  00BB               	movwf	??___ftdiv+2
  2840  0265  3010               	movlw	16
  2841  0266                     u2345:	
  2842  0266  1003               	clrc
  2843  0267  0CBB               	rrf	??___ftdiv+2,f
  2844  0268  0CBA               	rrf	??___ftdiv+1,f
  2845  0269  0CB9               	rrf	??___ftdiv,f
  2846  026A  3EFF               	addlw	-1
  2847  026B  1D03               	skipz
  2848  026C  2A66               	goto	u2345
  2849  026D  0839               	movf	??___ftdiv,w
  2850  026E  00BC               	movwf	??___ftdiv+3
  2851  026F  083C               	movf	??___ftdiv+3,w
  2852  0270  00C2               	movwf	___ftdiv@sign
  2853  0271  0833               	movf	___ftdiv@f2,w
  2854  0272  00B9               	movwf	??___ftdiv
  2855  0273  0834               	movf	___ftdiv@f2+1,w
  2856  0274  00BA               	movwf	??___ftdiv+1
  2857  0275  0835               	movf	___ftdiv@f2+2,w
  2858  0276  00BB               	movwf	??___ftdiv+2
  2859  0277  3010               	movlw	16
  2860  0278                     u2355:	
  2861  0278  1003               	clrc
  2862  0279  0CBB               	rrf	??___ftdiv+2,f
  2863  027A  0CBA               	rrf	??___ftdiv+1,f
  2864  027B  0CB9               	rrf	??___ftdiv,f
  2865  027C  3EFF               	addlw	-1
  2866  027D  1D03               	skipz
  2867  027E  2A78               	goto	u2355
  2868  027F  0839               	movf	??___ftdiv,w
  2869  0280  00BC               	movwf	??___ftdiv+3
  2870  0281  083C               	movf	??___ftdiv+3,w
  2871  0282  06C2               	xorwf	___ftdiv@sign,f
  2872  0283  3080               	movlw	128
  2873  0284  00B9               	movwf	??___ftdiv
  2874  0285  0839               	movf	??___ftdiv,w
  2875  0286  05C2               	andwf	___ftdiv@sign,f
  2876  0287  17B7               	bsf	___ftdiv@f1+1,7
  2877  0288  30FF               	movlw	255
  2878  0289  05B6               	andwf	___ftdiv@f1,f
  2879  028A  30FF               	movlw	255
  2880  028B  05B7               	andwf	___ftdiv@f1+1,f
  2881  028C  3000               	movlw	0
  2882  028D  05B8               	andwf	___ftdiv@f1+2,f
  2883  028E  17B4               	bsf	___ftdiv@f2+1,7
  2884  028F  30FF               	movlw	255
  2885  0290  05B3               	andwf	___ftdiv@f2,f
  2886  0291  30FF               	movlw	255
  2887  0292  05B4               	andwf	___ftdiv@f2+1,f
  2888  0293  3000               	movlw	0
  2889  0294  05B5               	andwf	___ftdiv@f2+2,f
  2890  0295  3018               	movlw	24
  2891  0296  00B9               	movwf	??___ftdiv
  2892  0297  0839               	movf	??___ftdiv,w
  2893  0298  00BD               	movwf	___ftdiv@cntr
  2894  0299                     l1871:	
  2895  0299  3001               	movlw	1
  2896  029A                     u2365:	
  2897  029A  1003               	clrc
  2898  029B  0DBE               	rlf	___ftdiv@f3,f
  2899  029C  0DBF               	rlf	___ftdiv@f3+1,f
  2900  029D  0DC0               	rlf	___ftdiv@f3+2,f
  2901  029E  3EFF               	addlw	-1
  2902  029F  1D03               	skipz
  2903  02A0  2A9A               	goto	u2365
  2904  02A1  0835               	movf	___ftdiv@f2+2,w
  2905  02A2  0238               	subwf	___ftdiv@f1+2,w
  2906  02A3  1D03               	skipz
  2907  02A4  2AAB               	goto	u2375
  2908  02A5  0834               	movf	___ftdiv@f2+1,w
  2909  02A6  0237               	subwf	___ftdiv@f1+1,w
  2910  02A7  1D03               	skipz
  2911  02A8  2AAB               	goto	u2375
  2912  02A9  0833               	movf	___ftdiv@f2,w
  2913  02AA  0236               	subwf	___ftdiv@f1,w
  2914  02AB                     u2375:	
  2915  02AB  1C03               	skipc
  2916  02AC  2AB8               	goto	l1879
  2917  02AD  0833               	movf	___ftdiv@f2,w
  2918  02AE  02B6               	subwf	___ftdiv@f1,f
  2919  02AF  0834               	movf	___ftdiv@f2+1,w
  2920  02B0  1C03               	skipc
  2921  02B1  0F34               	incfsz	___ftdiv@f2+1,w
  2922  02B2  02B7               	subwf	___ftdiv@f1+1,f
  2923  02B3  0835               	movf	___ftdiv@f2+2,w
  2924  02B4  1C03               	skipc
  2925  02B5  0A35               	incf	___ftdiv@f2+2,w
  2926  02B6  02B8               	subwf	___ftdiv@f1+2,f
  2927  02B7  143E               	bsf	___ftdiv@f3,0
  2928  02B8                     l1879:	
  2929  02B8  3001               	movlw	1
  2930  02B9                     u2385:	
  2931  02B9  1003               	clrc
  2932  02BA  0DB6               	rlf	___ftdiv@f1,f
  2933  02BB  0DB7               	rlf	___ftdiv@f1+1,f
  2934  02BC  0DB8               	rlf	___ftdiv@f1+2,f
  2935  02BD  3EFF               	addlw	-1
  2936  02BE  1D03               	skipz
  2937  02BF  2AB9               	goto	u2385
  2938  02C0  3001               	movlw	1
  2939  02C1  02BD               	subwf	___ftdiv@cntr,f
  2940  02C2  1D03               	btfss	3,2
  2941  02C3  2A99               	goto	l1871
  2942  02C4  083E               	movf	___ftdiv@f3,w
  2943  02C5  00A0               	movwf	___ftpack@arg
  2944  02C6  083F               	movf	___ftdiv@f3+1,w
  2945  02C7  00A1               	movwf	___ftpack@arg+1
  2946  02C8  0840               	movf	___ftdiv@f3+2,w
  2947  02C9  00A2               	movwf	___ftpack@arg+2
  2948  02CA  0841               	movf	___ftdiv@exp,w
  2949  02CB  00B9               	movwf	??___ftdiv
  2950  02CC  0839               	movf	??___ftdiv,w
  2951  02CD  00A3               	movwf	___ftpack@exp
  2952  02CE  0842               	movf	___ftdiv@sign,w
  2953  02CF  00BA               	movwf	??___ftdiv+1
  2954  02D0  083A               	movf	??___ftdiv+1,w
  2955  02D1  00A4               	movwf	___ftpack@sign
  2956  02D2  120A  118A  236C   	fcall	___ftpack
  2957  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2958  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2959  02D7  0820               	movf	?___ftpack,w
  2960  02D8  00B3               	movwf	?___ftdiv
  2961  02D9  0821               	movf	?___ftpack+1,w
  2962  02DA  00B4               	movwf	?___ftdiv+1
  2963  02DB  0822               	movf	?___ftpack+2,w
  2964  02DC  00B5               	movwf	?___ftdiv+2
  2965  02DD  0008               	return
  2966  02DE                     __end_of___ftdiv:	
  2967                           
  2968                           	psect	text14
  2969  036C                     __ptext14:	
  2970 ;; *************** function ___ftpack *****************
  2971 ;; Defined at:
  2972 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  arg             3    0[BANK0 ] unsigned um
  2975 ;;  exp             1    3[BANK0 ] unsigned char 
  2976 ;;  sign            1    4[BANK0 ] unsigned char 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  3    0[BANK0 ] float 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2988 ;;      Params:         0       5       0       0       0
  2989 ;;      Locals:         0       0       0       0       0
  2990 ;;      Temps:          0       3       0       0       0
  2991 ;;      Totals:         0       8       0       0       0
  2992 ;;Total ram usage:        8 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    2
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		___altoft
  2999 ;;		___ftadd
  3000 ;;		___ftdiv
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function ___ftpack
  3006  036C                     ___ftpack:	
  3007                           
  3008                           ;incstack = 0
  3009                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3010  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3011  036D  1303               	bcf	3,6	;RP1=0, select bank0
  3012  036E  0823               	movf	___ftpack@exp,w
  3013  036F  1903               	btfsc	3,2
  3014  0370  2B76               	goto	l1643
  3015  0371  0822               	movf	___ftpack@arg+2,w
  3016  0372  0421               	iorwf	___ftpack@arg+1,w
  3017  0373  0420               	iorwf	___ftpack@arg,w
  3018  0374  1D03               	skipz
  3019  0375  2B89               	goto	l1649
  3020  0376                     l1643:	
  3021  0376  3000               	movlw	0
  3022  0377  00A0               	movwf	?___ftpack
  3023  0378  3000               	movlw	0
  3024  0379  00A1               	movwf	?___ftpack+1
  3025  037A  3000               	movlw	0
  3026  037B  00A2               	movwf	?___ftpack+2
  3027  037C  0008               	return
  3028  037D                     l1647:	
  3029  037D  3001               	movlw	1
  3030  037E  00A5               	movwf	??___ftpack
  3031  037F  0825               	movf	??___ftpack,w
  3032  0380  07A3               	addwf	___ftpack@exp,f
  3033  0381  3001               	movlw	1
  3034  0382                     u1825:	
  3035  0382  1003               	clrc
  3036  0383  0CA2               	rrf	___ftpack@arg+2,f
  3037  0384  0CA1               	rrf	___ftpack@arg+1,f
  3038  0385  0CA0               	rrf	___ftpack@arg,f
  3039  0386  3EFF               	addlw	-1
  3040  0387  1D03               	skipz
  3041  0388  2B82               	goto	u1825
  3042  0389                     l1649:	
  3043  0389  30FE               	movlw	254
  3044  038A  0522               	andwf	___ftpack@arg+2,w
  3045  038B  1903               	btfsc	3,2
  3046  038C  2BA4               	goto	l456
  3047  038D  2B7D               	goto	l1647
  3048  038E                     l1651:	
  3049  038E  3001               	movlw	1
  3050  038F  00A5               	movwf	??___ftpack
  3051  0390  0825               	movf	??___ftpack,w
  3052  0391  07A3               	addwf	___ftpack@exp,f
  3053  0392  3001               	movlw	1
  3054  0393  07A0               	addwf	___ftpack@arg,f
  3055  0394  3000               	movlw	0
  3056  0395  1803               	skipnc
  3057  0396  3001               	movlw	1
  3058  0397  07A1               	addwf	___ftpack@arg+1,f
  3059  0398  3000               	movlw	0
  3060  0399  1803               	skipnc
  3061  039A  3001               	movlw	1
  3062  039B  07A2               	addwf	___ftpack@arg+2,f
  3063  039C  3001               	movlw	1
  3064  039D                     u1845:	
  3065  039D  1003               	clrc
  3066  039E  0CA2               	rrf	___ftpack@arg+2,f
  3067  039F  0CA1               	rrf	___ftpack@arg+1,f
  3068  03A0  0CA0               	rrf	___ftpack@arg,f
  3069  03A1  3EFF               	addlw	-1
  3070  03A2  1D03               	skipz
  3071  03A3  2B9D               	goto	u1845
  3072  03A4                     l456:	
  3073  03A4  30FF               	movlw	255
  3074  03A5  0522               	andwf	___ftpack@arg+2,w
  3075  03A6  1903               	btfsc	3,2
  3076  03A7  2BB3               	goto	l1659
  3077  03A8  2B8E               	goto	l1651
  3078  03A9                     l1657:	
  3079  03A9  3001               	movlw	1
  3080  03AA  02A3               	subwf	___ftpack@exp,f
  3081  03AB  3001               	movlw	1
  3082  03AC                     u1865:	
  3083  03AC  1003               	clrc
  3084  03AD  0DA0               	rlf	___ftpack@arg,f
  3085  03AE  0DA1               	rlf	___ftpack@arg+1,f
  3086  03AF  0DA2               	rlf	___ftpack@arg+2,f
  3087  03B0  3EFF               	addlw	-1
  3088  03B1  1D03               	skipz
  3089  03B2  2BAC               	goto	u1865
  3090  03B3                     l1659:	
  3091  03B3  1BA1               	btfsc	___ftpack@arg+1,7
  3092  03B4  2BB9               	goto	l463
  3093  03B5  3002               	movlw	2
  3094  03B6  0223               	subwf	___ftpack@exp,w
  3095  03B7  1803               	skipnc
  3096  03B8  2BA9               	goto	l1657
  3097  03B9                     l463:	
  3098  03B9  1823               	btfsc	___ftpack@exp,0
  3099  03BA  2BC1               	goto	l464
  3100  03BB  30FF               	movlw	255
  3101  03BC  05A0               	andwf	___ftpack@arg,f
  3102  03BD  307F               	movlw	127
  3103  03BE  05A1               	andwf	___ftpack@arg+1,f
  3104  03BF  30FF               	movlw	255
  3105  03C0  05A2               	andwf	___ftpack@arg+2,f
  3106  03C1                     l464:	
  3107  03C1  1003               	clrc
  3108  03C2  0CA3               	rrf	___ftpack@exp,f
  3109  03C3  0823               	movf	___ftpack@exp,w
  3110  03C4  00A5               	movwf	??___ftpack
  3111  03C5  01A6               	clrf	??___ftpack+1
  3112  03C6  01A7               	clrf	??___ftpack+2
  3113  03C7  3010               	movlw	16
  3114  03C8                     u1905:	
  3115  03C8  1003               	clrc
  3116  03C9  0DA5               	rlf	??___ftpack,f
  3117  03CA  0DA6               	rlf	??___ftpack+1,f
  3118  03CB  0DA7               	rlf	??___ftpack+2,f
  3119  03CC  3EFF               	addlw	-1
  3120  03CD  1D03               	skipz
  3121  03CE  2BC8               	goto	u1905
  3122  03CF  0825               	movf	??___ftpack,w
  3123  03D0  04A0               	iorwf	___ftpack@arg,f
  3124  03D1  0826               	movf	??___ftpack+1,w
  3125  03D2  04A1               	iorwf	___ftpack@arg+1,f
  3126  03D3  0827               	movf	??___ftpack+2,w
  3127  03D4  04A2               	iorwf	___ftpack@arg+2,f
  3128  03D5  0824               	movf	___ftpack@sign,w
  3129  03D6  1903               	btfsc	3,2
  3130  03D7  0008               	return
  3131  03D8  17A2               	bsf	___ftpack@arg+2,7
  3132  03D9  0008               	return
  3133  03DA                     __end_of___ftpack:	
  3134                           
  3135                           	psect	text15
  3136  06E7                     __ptext15:	
  3137 ;; *************** function _initializeADC *****************
  3138 ;; Defined at:
  3139 ;;		line 5 in file "adConv.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         0       0       0       0       0
  3154 ;;      Locals:         0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         0       0       0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    2
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_main
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _initializeADC
  3169  06E7                     _initializeADC:	
  3170                           
  3171                           ;adConv.c: 6: TRISA = 0b11111111;
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _initializeADC: [wreg]
  3175  06E7  30FF               	movlw	255
  3176  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  3177  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  3178  06EA  0085               	movwf	5	;volatile
  3179                           
  3180                           ;adConv.c: 8: ADFM = 1;
  3181  06EB  179F               	bsf	31,7	;volatile
  3182                           
  3183                           ;adConv.c: 10: ADCS2 = 0;
  3184  06EC  131F               	bcf	31,6	;volatile
  3185                           
  3186                           ;adConv.c: 12: PCFG3 = 0;
  3187  06ED  119F               	bcf	31,3	;volatile
  3188                           
  3189                           ;adConv.c: 13: PCFG2 = 0;
  3190  06EE  111F               	bcf	31,2	;volatile
  3191                           
  3192                           ;adConv.c: 14: PCFG1 = 1;
  3193  06EF  149F               	bsf	31,1	;volatile
  3194                           
  3195                           ;adConv.c: 15: PCFG0 = 0;
  3196  06F0  101F               	bcf	31,0	;volatile
  3197                           
  3198                           ;adConv.c: 19: ADCON0 = 0b10000001;
  3199  06F1  3081               	movlw	129
  3200  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  3201  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  3202  06F4  009F               	movwf	31	;volatile
  3203                           
  3204                           ;adConv.c: 23: ADIF = 0;
  3205  06F5  130C               	bcf	12,6	;volatile
  3206                           
  3207                           ;adConv.c: 24: ADIE = 1;
  3208  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  3209  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  3210  06F8  170C               	bsf	12,6	;volatile
  3211                           
  3212                           ;adConv.c: 25: PEIE = 1;
  3213  06F9  170B               	bsf	11,6	;volatile
  3214                           
  3215                           ;adConv.c: 26: GIE = 1;
  3216  06FA  178B               	bsf	11,7	;volatile
  3217  06FB  0008               	return
  3218  06FC                     __end_of_initializeADC:	
  3219                           
  3220                           	psect	text16
  3221  06D1                     __ptext16:	
  3222 ;; *************** function _initialise *****************
  3223 ;; Defined at:
  3224 ;;		line 22 in file "main.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;		None
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3238 ;;      Params:         0       0       0       0       0
  3239 ;;      Locals:         0       0       0       0       0
  3240 ;;      Temps:          0       0       0       0       0
  3241 ;;      Totals:         0       0       0       0       0
  3242 ;;Total ram usage:        0 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    2
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           
  3253                           ;psect for function _initialise
  3254  06D1                     _initialise:	
  3255                           
  3256                           ;main.c: 25: TRISB = 0b00000111;
  3257                           
  3258                           ;incstack = 0
  3259                           ; Regs used in _initialise: [wreg+status,2]
  3260  06D1  3007               	movlw	7
  3261  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  3262  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  3263  06D4  0086               	movwf	6	;volatile
  3264                           
  3265                           ;main.c: 26: TRISC = 0;
  3266  06D5  0187               	clrf	7	;volatile
  3267                           
  3268                           ;main.c: 28: RB3 = 1;
  3269  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3270  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3271  06D8  1586               	bsf	6,3	;volatile
  3272                           
  3273                           ;main.c: 29: RB4 = 1;
  3274  06D9  1606               	bsf	6,4	;volatile
  3275                           
  3276                           ;main.c: 32: TMR0 = 100;
  3277  06DA  3064               	movlw	100
  3278  06DB  0081               	movwf	1	;volatile
  3279                           
  3280                           ;main.c: 33: T0CS = 0;
  3281  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  3282  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  3283  06DE  1281               	bcf	1,5	;volatile
  3284                           
  3285                           ;main.c: 34: T0SE = 0;
  3286  06DF  1201               	bcf	1,4	;volatile
  3287                           
  3288                           ;main.c: 35: PSA = 0;
  3289  06E0  1181               	bcf	1,3	;volatile
  3290                           
  3291                           ;main.c: 36: PS0 = 0;
  3292  06E1  1001               	bcf	1,0	;volatile
  3293                           
  3294                           ;main.c: 37: PS1 = 0;
  3295  06E2  1081               	bcf	1,1	;volatile
  3296                           
  3297                           ;main.c: 38: PS2 = 1;
  3298  06E3  1501               	bsf	1,2	;volatile
  3299                           
  3300                           ;main.c: 40: TMR0IE = 1;
  3301  06E4  168B               	bsf	11,5	;volatile
  3302                           
  3303                           ;main.c: 41: (GIE = 1);
  3304  06E5  178B               	bsf	11,7	;volatile
  3305  06E6  0008               	return
  3306  06E7                     __end_of_initialise:	
  3307                           
  3308                           	psect	text17
  3309  069E                     __ptext17:	
  3310 ;; *************** function _isr *****************
  3311 ;; Defined at:
  3312 ;;		line 11 in file "main.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, pclath, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0
  3328 ;;      Temps:          4       0       0       0       0
  3329 ;;      Totals:         4       0       0       0       0
  3330 ;;Total ram usage:        4 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    1
  3333 ;; This function calls:
  3334 ;;		_debounceButtons
  3335 ;; This function is called by:
  3336 ;;		Interrupt level 1
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _isr
  3342  069E                     _isr:	
  3343                           
  3344                           ;main.c: 12: if (T0IF){
  3345  069E  1D0B               	btfss	11,2	;volatile
  3346  069F  2EA8               	goto	i1l1165
  3347                           
  3348                           ;main.c: 13: T0IF = 0;
  3349  06A0  110B               	bcf	11,2	;volatile
  3350                           
  3351                           ;main.c: 14: TMR0 = 100;
  3352  06A1  3064               	movlw	100
  3353  06A2  0081               	movwf	1	;volatile
  3354                           
  3355                           ;main.c: 15: debounceButtons();
  3356  06A3  120A  118A  266A  120A  118A  	fcall	_debounceButtons
  3357  06A8                     i1l1165:	
  3358                           
  3359                           ;main.c: 16: }
  3360                           ;main.c: 17: if(ADIF){
  3361  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  3362  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  3363  06AA  1F0C               	btfss	12,6	;volatile
  3364  06AB  2EAE               	goto	i1l77
  3365                           
  3366                           ;main.c: 18: conversionDone = 1;
  3367  06AC  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  3368                           
  3369                           ;main.c: 19: ADIF = 0;
  3370  06AD  130C               	bcf	12,6	;volatile
  3371  06AE                     i1l77:	
  3372  06AE  0875               	movf	??_isr+3,w
  3373  06AF  00FF               	movwf	127
  3374  06B0  0874               	movf	??_isr+2,w
  3375  06B1  008A               	movwf	10
  3376  06B2  0873               	movf	??_isr+1,w
  3377  06B3  0084               	movwf	4
  3378  06B4  0E72               	swapf	??_isr^(0+-128),w
  3379  06B5  0083               	movwf	3
  3380  06B6  0EFE               	swapf	126,f
  3381  06B7  0E7E               	swapf	126,w
  3382  06B8  0009               	retfie
  3383  06B9                     __end_of_isr:	
  3384                           
  3385                           	psect	intentry
  3386  0004                     __pintentry:	
  3387                           ;incstack = 0
  3388                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3389                           
  3390  0004                     interrupt_function:	
  3391  007E                     saved_w	set	btemp
  3392  0004  00FE               	movwf	btemp
  3393  0005  0E03               	swapf	3,w
  3394  0006  00F2               	movwf	??_isr
  3395  0007  0804               	movf	4,w
  3396  0008  00F3               	movwf	??_isr+1
  3397  0009  080A               	movf	10,w
  3398  000A  00F4               	movwf	??_isr+2
  3399  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3400  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3401  000D  087F               	movf	btemp+1,w
  3402  000E  00F5               	movwf	??_isr+3
  3403  000F  120A  118A  2E9E   	ljmp	_isr
  3404                           
  3405                           	psect	text18
  3406  066A                     __ptext18:	
  3407 ;; *************** function _debounceButtons *****************
  3408 ;; Defined at:
  3409 ;;		line 7 in file "timer0.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;		None
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3423 ;;      Params:         0       0       0       0       0
  3424 ;;      Locals:         0       0       0       0       0
  3425 ;;      Temps:          1       0       0       0       0
  3426 ;;      Totals:         1       0       0       0       0
  3427 ;;Total ram usage:        1 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_isr
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _debounceButtons
  3438  066A                     _debounceButtons:	
  3439                           
  3440                           ;timer0.c: 9: if(!RB0) {
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  3444  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3445  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3446  066C  1806               	btfsc	6,0	;volatile
  3447  066D  2E7A               	goto	i1l1041
  3448                           
  3449                           ;timer0.c: 10: rtcCounter++;
  3450  066E  3001               	movlw	1
  3451  066F  00F1               	movwf	??_debounceButtons
  3452  0670  0871               	movf	??_debounceButtons,w
  3453  0671  07F7               	addwf	_rtcCounter,f	;volatile
  3454                           
  3455                           ;timer0.c: 11: if(rtcCounter >10 &&pb0Released){
  3456  0672  300B               	movlw	11
  3457  0673  0277               	subwf	_rtcCounter,w	;volatile
  3458  0674  1803               	btfsc	3,0
  3459  0675  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3460  0676  2E7C               	goto	i1l1045
  3461                           
  3462                           ;timer0.c: 12: pb0Pressed = 1;
  3463  0677  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  3464                           
  3465                           ;timer0.c: 13: pb0Released = 0;
  3466  0678  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3467                           
  3468                           ;timer0.c: 14: }
  3469                           ;timer0.c: 15: }
  3470  0679  2E7C               	goto	i1l1045
  3471  067A                     i1l1041:	
  3472                           
  3473                           ;timer0.c: 16: else{
  3474                           ;timer0.c: 17: rtcCounter = 0;
  3475  067A  01F7               	clrf	_rtcCounter	;volatile
  3476                           
  3477                           ;timer0.c: 18: pb0Released = 1;
  3478  067B  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3479  067C                     i1l1045:	
  3480                           
  3481                           ;timer0.c: 19: }
  3482                           ;timer0.c: 21: if(!RB1) {
  3483  067C  1886               	btfsc	6,1	;volatile
  3484  067D  2E8A               	goto	i1l1055
  3485                           
  3486                           ;timer0.c: 22: rtcCounter2++;
  3487  067E  3001               	movlw	1
  3488  067F  00F1               	movwf	??_debounceButtons
  3489  0680  0871               	movf	??_debounceButtons,w
  3490  0681  07F8               	addwf	_rtcCounter2,f	;volatile
  3491                           
  3492                           ;timer0.c: 23: if(rtcCounter2 >10 &&pb1Released){
  3493  0682  300B               	movlw	11
  3494  0683  0278               	subwf	_rtcCounter2,w	;volatile
  3495  0684  1803               	btfsc	3,0
  3496  0685  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3497  0686  2E8C               	goto	i1l1059
  3498                           
  3499                           ;timer0.c: 24: pb1Pressed = 1;
  3500  0687  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  3501                           
  3502                           ;timer0.c: 25: pb1Released = 0;
  3503  0688  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3504                           
  3505                           ;timer0.c: 26: }
  3506                           ;timer0.c: 27: }
  3507  0689  2E8C               	goto	i1l1059
  3508  068A                     i1l1055:	
  3509                           
  3510                           ;timer0.c: 28: else{
  3511                           ;timer0.c: 29: rtcCounter2 = 0;
  3512  068A  01F8               	clrf	_rtcCounter2	;volatile
  3513                           
  3514                           ;timer0.c: 30: pb1Released = 1;
  3515  068B  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3516  068C                     i1l1059:	
  3517                           
  3518                           ;timer0.c: 31: }
  3519                           ;timer0.c: 32: if(!RB2) {
  3520  068C  1906               	btfsc	6,2	;volatile
  3521  068D  2E9B               	goto	i1l1069
  3522                           
  3523                           ;timer0.c: 33: rtcCounter3++;
  3524  068E  3001               	movlw	1
  3525  068F  00F1               	movwf	??_debounceButtons
  3526  0690  0871               	movf	??_debounceButtons,w
  3527  0691  07F9               	addwf	_rtcCounter3,f	;volatile
  3528                           
  3529                           ;timer0.c: 34: if(rtcCounter3 >10 &&pb2Released){
  3530  0692  300B               	movlw	11
  3531  0693  0279               	subwf	_rtcCounter3,w	;volatile
  3532  0694  1C03               	skipc
  3533  0695  0008               	return
  3534  0696  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3535  0697  0008               	return
  3536                           
  3537                           ;timer0.c: 35: pb2Pressed = 1;
  3538  0698  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  3539                           
  3540                           ;timer0.c: 36: pb2Released = 0;
  3541  0699  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3542                           
  3543                           ;timer0.c: 37: }
  3544                           ;timer0.c: 38: }
  3545  069A  0008               	return
  3546  069B                     i1l1069:	
  3547                           
  3548                           ;timer0.c: 39: else{
  3549                           ;timer0.c: 40: rtcCounter3 = 0;
  3550  069B  01F9               	clrf	_rtcCounter3	;volatile
  3551                           
  3552                           ;timer0.c: 41: pb2Released = 1;
  3553  069C  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3554  069D  0008               	return
  3555  069E                     __end_of_debounceButtons:	
  3556  007E                     btemp	set	126	;btemp
  3557  007E                     wtemp	set	126
  3558  007E                     wtemp0	set	126
  3559  0080                     wtemp1	set	128
  3560  0082                     wtemp2	set	130
  3561  0084                     wtemp3	set	132
  3562  0086                     wtemp4	set	134
  3563  0088                     wtemp5	set	136
  3564  007F                     wtemp6	set	127
  3565  007E                     ttemp	set	126
  3566  007E                     ttemp0	set	126
  3567  0081                     ttemp1	set	129
  3568  0084                     ttemp2	set	132
  3569  0087                     ttemp3	set	135
  3570  007F                     ttemp4	set	127
  3571  007E                     ltemp	set	126
  3572  007E                     ltemp0	set	126
  3573  0082                     ltemp1	set	130
  3574  0086                     ltemp2	set	134
  3575  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     15      41
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    ___ftdiv->___ftneg

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   12692
                                             11 BANK1      4     4      0
                         _initialise
                      _initializeADC
                               _move
                            _moveDeg
                        _readADCData
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCData                                          4     2      2     127
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   12110
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7604
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1     452
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _initializeADC
   _move
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _startADCConversion

 _isr (ROOT)
   _debounceButtons

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      F      29       7       51.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      83      12        0.0%
ABS                  0      0      83       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Apr 05 14:54:22 2016

               ___altoft@exp 002E                            pc 0002                  __CFG_CP$OFF 0000  
              ___altoft@sign 002F                           _GO 00FA          ?_startADCConversion 0071  
                         fsr 0004                 ___ftadd@exp1 0066                 ___ftadd@exp2 0065  
               ___ftadd@sign 0064                          l111 04CB                          l206 0625  
                        l463 03B9                          l464 03C1                          l456 03A4  
                        l547 0352                          l487 00D6                          _GIE 005F  
                        _RB0 0030                          _RB1 0031                          _RB2 0032  
                        _RB3 0033                          _RB4 0034                          _PS0 0408  
                        _PS1 0409                          _PS2 040A                 __CFG_CPD$OFF 0000  
                        _PSA 040B                          _isr 069E                          fsr0 0004  
                        indf 0000                 __CFG_FOSC$HS 0000                 ?_readADCData 0020  
               __CFG_LVP$OFF 0000                 ___ftdiv@cntr 003D                 ___ftdiv@sign 0042  
                       l2005 0437                         l1503 052B                         l1263 02F8  
                       l1281 032A                         l1507 0552                         l1291 0355  
                       l1283 033A                         l1295 0363                         l1713 005E  
                       l1289 0347                         l1651 038E                         l1643 0376  
                       l1731 0087                         l1741 00AD                         l1709 0057  
                       l1647 037D                         l1823 04E0                         l1831 04F2  
                       l1751 00D2                         l1743 00B1                         l1719 006D  
                       l1657 03A9                         l1649 0389                         l1809 04BA  
                       l1737 009C                         l1681 05C1                         l1659 03B3  
                       l1851 023E                         l1835 04A7                         l1755 00E8  
                       l1739 00A8                         l1683 05D3                         l1829 04F1  
                       l1749 00C6                         l1693 063C                         l1871 0299  
                       l1759 00FA                         l1951 0629                         l1857 0254  
                       l1769 011D                         l1945 0606                         l1789 057D  
                       l1965 01CC                         l1981 0402                         l1973 03E9  
                       l1879 02B8                         l1993 041B                         l1987 040E  
                       l1999 0427                         _ADIE 0466                         _ADIF 0066  
                       _ADFM 04FF                         ?_isr 0071         ??_startADCConversion 0020  
                       _T0IF 005A                         _T0CS 040D                         u1125 02FF  
                       u2115 00B2                         u1155 032B                         _T0SE 040C  
                       u2055 0088                         u2145 00C7                         u1185 0349  
                       u2085 009D                         u2405 0600                         u2415 0611  
                       u2345 0266                         u2425 061E                         u2355 0278  
                       u2507 0713                         u2365 029A                         u2517 04F6  
                       u2375 02AB                         u1671 051E                         u1672 051F  
                       u1905 03C8                         u1825 0382                         u2385 02B9  
                       u1673 0524                         u1674 0525                         u1691 0545  
                       u1692 0546                         u1845 039D                         u1693 054B  
                       u1694 054C                         u1935 05C6                         u1865 03AC  
                       u2497 043D                         _PEIE 005E                         i1l77 06AE  
                       _TMR0 0001                 __CFG_WRT$OFF 0000                         _main 03DA  
               ___ftpack@arg 0020                 ___ftpack@exp 0023                         _move 04A3  
                       btemp 007E                         ltemp 007E                         start 0012  
                       ttemp 007E                         wtemp 007E                 ___fttol@exp1 0050  
               ___fttol@lval 004C                        ??_isr 0072                        _ADCS2 04FE  
                      ?_main 0071              __end_of___ftadd 0137                        ?_move 0020  
              __CFG_WDTE$OFF 0000              __end_of___ftdiv 02DE              __end_of___ftneg 0725  
            __end_of___fttol 036C                        _PCFG0 04F8                        _PCFG1 04F9  
                      _PCFG2 04FA                        _PCFG3 04FB                        _PORTC 0007  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _cstep 0076                        _frexp 062E                        _errno 00C7  
          ??_debounceButtons 0071                ___ftpack@sign 0024                        _round 0443  
                      _trunc 0561              __end_of_moveDeg 0226               __pbitbssCOMMON 0380  
             __CFG_BOREN$OFF 0000                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
                      move@i 0024                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F              __initialization 0015  
               __end_of_main 0443                 __end_of_move 0502                       ??_main 00C3  
              ___fttol@sign1 004B                       ??_move 0021                       _ADCON0 001F  
                     ?_frexp 0020             __end_of___altoft 05ED                       _ADRESH 001E  
                     _ADRESL 009E             __end_of___ftpack 03DA                       ?_round 0067  
             _conversionDone 0380                       ?_trunc 0051                       i1l1041 067A  
                     i1l1045 067C                       i1l1055 068A                       i1l1059 068C  
                     i1l1069 069B                       i1l1165 06A8                       _TMR0IE 005D  
             __CFG_PWRTE$OFF 0000                       ___ftge 0502                    ??___ftadd 0060  
                  ??___ftdiv 0039                    ??___ftneg 0033                    ??___fttol 0047  
                  ??_moveDeg 00B8                       saved_w 007E       __size_of_initializeADC 0015  
                     round@f 006A                       round@x 0067                       trunc@i 0055  
                     trunc@x 0051         __size_of_readADCData 0041      __end_of__initialization 002A  
                 ___altoft@c 0028                   ___ftadd@f1 005A                   ___ftadd@f2 005D  
                 ___ftge@ff1 0020                   ___ftge@ff2 0023                   ___ftdiv@f1 0036  
                 ___ftdiv@f2 0033                   ___ftdiv@f3 003E                   ___ftneg@f1 0030  
                 ___fttol@f1 0043               __pcstackCOMMON 0071                 __pidataBANK1 06B9  
                 _pb0Pressed 0382                   _pb1Pressed 0384                __end_of_frexp 066A  
                 _pb2Pressed 0386                __end_of_round 04A3                __end_of_trunc 05AB  
                    ??_frexp 0024                      ??_round 006A                      ??_trunc 0054  
                 __pbssBANK1 00C7         readADCData@ADCResult 0022                _initializeADC 06E7  
                 __pmaintext 03DA                      ?___ftge 0020                   __pintentry 0004  
                  ?___altoft 0028                    ?___ftpack 0020              _debounceButtons 066A  
__size_of_startADCConversion 000E               ?_initializeADC 0071                move@direction 0020  
            __size_of___ftge 005F                      ___ftadd 002E                      ___ftdiv 0226  
                    ___ftneg 071B                      ___fttol 02DE                   ??___altoft 002C  
                 ??___ftpack 0025                   _initialise 06D1                      __ptext1 070D  
                    __ptext2 05ED                      __ptext3 0137                      __ptext4 0443  
                    __ptext5 0561                      __ptext6 062E                      __ptext7 02DE  
                    __ptext8 05AB                      __ptext9 071B                 __size_of_isr 001B  
                    _moveDeg 0137         end_of_initialization 002A           moveDeg@stepsToMove 00C2  
                 _rtcCounter 0077      __end_of_debounceButtons 069E                   _wholeSteps 00B0  
                ___ftdiv@exp 0041              ??_initializeADC 0020                   main@result 00C5  
                _pb0Released 0383                  _pb1Released 0385               __end_of___ftge 0561  
                _pb2Released 0387                  ?_initialise 0071          start_initialization 0015  
              ??_readADCData 0022                  __end_of_isr 06B9                   frexp@value 0020  
           ?_debounceButtons 0071                     ??___ftge 0026                   init_fetch0 06FC  
                __pdataBANK1 00A0            __size_of___altoft 0042            __size_of___ftpack 006E  
                __pbssCOMMON 0076                    ___latbits 0002                __pcstackBANK0 0020  
              __pcstackBANK1 00B8          __end_of_readADCData 062E          __size_of_initialise 0016  
                  _halfSteps 00A0                   moveDeg@deg 006D                     ?___ftadd 005A  
                   ?___ftdiv 0033                     ?___ftneg 0030                     ?___fttol 0043  
                   ?_moveDeg 006D   __end_of_startADCConversion 071B               __size_of_frexp 003C  
             __size_of_round 0060               __size_of_trunc 004A            interrupt_function 0004  
                _readADCData 05ED                    frexp@eptr 0023             __size_of___ftadd 0109  
           __size_of___ftdiv 00B8             __size_of___ftneg 000A                     ___altoft 05AB  
           __size_of___fttol 008E                 ??_initialise 0020                     ___ftpack 036C  
           __size_of_moveDeg 00EF                     __ptext10 002E                     __ptext11 04A3  
                   __ptext12 0502                     __ptext13 0226                     __ptext14 036C  
                   __ptext15 06E7                     __ptext16 06D1                     __ptext17 069E  
                   __ptext18 066A                    move@steps 0023                   trunc@expon 0058  
              __size_of_main 0069                __size_of_move 005F           __end_of_initialise 06E7  
      __end_of_initializeADC 06FC                  _moveDeg$576 00B9                  _moveDeg$577 00BC  
                _moveDeg$578 00BF                     init_ram0 0700                     intlevel1 0000  
                _rtcCounter2 0078                  _rtcCounter3 0079                  _motorToggle 0381  
   __size_of_debounceButtons 0034           _startADCConversion 070D  
