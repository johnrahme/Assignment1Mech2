

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Apr 06 21:41:33 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  0088                     	;# 
    82  0089                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0094                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010D                     	;# 
    98  010E                     	;# 
    99  010F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0088                     	;# 
   322  0089                     	;# 
   323  008C                     	;# 
   324  008D                     	;# 
   325  008E                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0093                     	;# 
   329  0094                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  009F                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  010F                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342                           
   343                           	psect	idataBANK1
   344  0FE8                     __pidataBANK1:	
   345                           
   346                           ;initializer for _halfSteps
   347  0FE8  343C               	retlw	60
   348  0FE9  3400               	retlw	0
   349  0FEA  342E               	retlw	46
   350  0FEB  3400               	retlw	0
   351  0FEC  342B               	retlw	43
   352  0FED  3400               	retlw	0
   353  0FEE  3427               	retlw	39
   354  0FEF  3400               	retlw	0
   355  0FF0  3435               	retlw	53
   356  0FF1  3400               	retlw	0
   357  0FF2  3417               	retlw	23
   358  0FF3  3400               	retlw	0
   359  0FF4  341B               	retlw	27
   360  0FF5  3400               	retlw	0
   361  0FF6  341E               	retlw	30
   362  0FF7  3400               	retlw	0
   363                           
   364                           ;initializer for _wholeSteps
   365  0FF8  343C               	retlw	60
   366  0FF9  3400               	retlw	0
   367  0FFA  342B               	retlw	43
   368  0FFB  3400               	retlw	0
   369  0FFC  3435               	retlw	53
   370  0FFD  3400               	retlw	0
   371  0FFE  341B               	retlw	27
   372  0FFF  3400               	retlw	0
   373  001F                     _ADCON0	set	31
   374  001E                     _ADRESH	set	30
   375  0007                     _PORTC	set	7
   376  0008                     _PORTD	set	8
   377  0009                     _PORTE	set	9
   378  0001                     _TMR0	set	1
   379  0066                     _ADIF	set	102
   380  005F                     _GIE	set	95
   381  00FA                     _GO	set	250
   382  005E                     _PEIE	set	94
   383  0030                     _RB0	set	48
   384  0031                     _RB1	set	49
   385  0032                     _RB2	set	50
   386  0033                     _RB3	set	51
   387  0034                     _RB4	set	52
   388  0048                     _RE0	set	72
   389  0049                     _RE1	set	73
   390  004A                     _RE2	set	74
   391  005A                     _T0IF	set	90
   392  005D                     _TMR0IE	set	93
   393  009E                     _ADRESL	set	158
   394  0085                     _TRISA	set	133
   395  0086                     _TRISB	set	134
   396  0087                     _TRISC	set	135
   397  0088                     _TRISD	set	136
   398  0089                     _TRISE	set	137
   399  04FE                     _ADCS2	set	1278
   400  04FF                     _ADFM	set	1279
   401  0466                     _ADIE	set	1126
   402  04F8                     _PCFG0	set	1272
   403  04F9                     _PCFG1	set	1273
   404  04FA                     _PCFG2	set	1274
   405  04FB                     _PCFG3	set	1275
   406  0408                     _PS0	set	1032
   407  0409                     _PS1	set	1033
   408  040A                     _PS2	set	1034
   409  040B                     _PSA	set	1035
   410  040D                     _T0CS	set	1037
   411  040C                     _T0SE	set	1036
   412                           
   413                           ; #config settings
   414  0000                     
   415                           	psect	cinit
   416  0015                     start_initialization:	
   417  0015                     __initialization:	
   418                           
   419                           ; Clear objects allocated to BITCOMMON
   420  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   421  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   422                           
   423                           ; Clear objects allocated to COMMON
   424  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   425  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   426  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   427                           
   428                           ; Clear objects allocated to BANK1
   429  001A  1683               	bsf	3,5	;RP0=1, select bank1
   430  001B  1303               	bcf	3,6	;RP1=0, select bank1
   431  001C  01C7               	clrf	__pbssBANK1& (0+127)
   432  001D  01C8               	clrf	(__pbssBANK1+1)& (0+127)
   433  001E  01C9               	clrf	(__pbssBANK1+2)& (0+127)
   434  001F  01CA               	clrf	(__pbssBANK1+3)& (0+127)
   435  0020  01CB               	clrf	(__pbssBANK1+4)& (0+127)
   436  0021  01CC               	clrf	(__pbssBANK1+5)& (0+127)
   437                           
   438                           ; Initialize objects allocated to BANK1
   439  0022  1383               	bcf	3,7	;select IRP bank0
   440  0023  30B8               	movlw	low (__pdataBANK1+24)
   441  0024  00FD               	movwf	btemp+-1
   442  0025  300F               	movlw	high __pidataBANK1
   443  0026  00FE               	movwf	btemp
   444  0027  30E8               	movlw	low __pidataBANK1
   445  0028  00FF               	movwf	btemp+1
   446  0029  30A0               	movlw	low __pdataBANK1
   447  002A  0084               	movwf	4
   448  002B  120A  158A  2789   	fcall	init_ram0
   449  002E                     end_of_initialization:	
   450                           ;End of C runtime variable initialization code
   451                           
   452  002E                     __end_of__initialization:	
   453  002E  0183               	clrf	3
   454  002F  120A  118A  2BFB   	ljmp	_main	;jump to C main() function
   455                           
   456                           	psect	bitbssCOMMON
   457  0380                     __pbitbssCOMMON:	
   458  0380                     _conversionDone:	
   459  0380                     	ds	1
   460  0381                     _motorToggle:	
   461  0381                     	ds	1
   462  0382                     _pb0Pressed:	
   463  0382                     	ds	1
   464  0383                     _pb0Released:	
   465  0383                     	ds	1
   466  0384                     _pb1Pressed:	
   467  0384                     	ds	1
   468  0385                     _pb1Released:	
   469  0385                     	ds	1
   470  0386                     _pb2Pressed:	
   471  0386                     	ds	1
   472  0387                     _pb2Released:	
   473  0387                     	ds	1
   474  0388                     _pb3Pressed:	
   475  0388                     	ds	1
   476  0389                     _pb3Released:	
   477  0389                     	ds	1
   478                           
   479                           	psect	bssCOMMON
   480  0077                     __pbssCOMMON:	
   481  0077                     _cstep:	
   482  0077                     	ds	1
   483  0078                     _rtcCounter:	
   484  0078                     	ds	1
   485  0079                     _rtcCounter2:	
   486  0079                     	ds	1
   487                           
   488                           	psect	bssBANK1
   489  00C7                     __pbssBANK1:	
   490  00C7                     _errno:	
   491  00C7                     	ds	2
   492  00C9                     _nrOfSteps:	
   493  00C9                     	ds	2
   494  00CB                     _rtcCounter3:	
   495  00CB                     	ds	1
   496  00CC                     _rtcCounter4:	
   497  00CC                     	ds	1
   498                           
   499                           	psect	dataBANK1
   500  00A0                     __pdataBANK1:	
   501  00A0                     _halfSteps:	
   502  00A0                     	ds	16
   503  00B0                     _wholeSteps:	
   504  00B0                     	ds	8
   505                           
   506                           	psect	inittext
   507  0F85                     init_fetch0:	
   508                           ;	Called with low address in FSR and high address in W
   509                           
   510  0F85  087E               	movf	126,w
   511  0F86  008A               	movwf	10
   512  0F87  087F               	movf	127,w
   513  0F88  0082               	movwf	2
   514  0F89                     init_ram0:	
   515                           ;Called with:
   516                           ;	high address of idata address in btemp 
   517                           ;	low address of idata address in btemp+1 
   518                           ;	low address of data in FSR
   519                           ;	high address + 1 of data in btemp-1
   520                           
   521  0F89  2785  120A  158A   	fcall	init_fetch0
   522  0F8C  0080               	movwf	0
   523  0F8D  0A84               	incf	4,f
   524  0F8E  0804               	movf	4,w
   525  0F8F  067D               	xorwf	125,w
   526  0F90  1903               	btfsc	3,2
   527  0F91  3400               	retlw	0
   528  0F92  0AFF               	incf	127,f
   529  0F93  1903               	btfsc	3,2
   530  0F94  0AFE               	incf	126,f
   531  0F95  2F89               	goto	init_ram0
   532                           
   533                           	psect	cstackBANK1
   534  00B8                     __pcstackBANK1:	
   535  00B8                     ??_moveDeg:	
   536                           
   537                           ; 1 bytes @ 0x0
   538  00B8                     	ds	1
   539  00B9                     _moveDeg$639:	
   540                           
   541                           ; 3 bytes @ 0x1
   542  00B9                     	ds	3
   543  00BC                     _moveDeg$640:	
   544                           
   545                           ; 3 bytes @ 0x4
   546  00BC                     	ds	3
   547  00BF                     _moveDeg$641:	
   548                           
   549                           ; 3 bytes @ 0x7
   550  00BF                     	ds	3
   551  00C2                     moveDeg@stepsToMove:	
   552                           
   553                           ; 1 bytes @ 0xA
   554  00C2                     	ds	1
   555  00C3                     ??_main:	
   556                           
   557                           ; 1 bytes @ 0xB
   558  00C3                     	ds	2
   559  00C5                     main@result:	
   560                           
   561                           ; 2 bytes @ 0xD
   562  00C5                     	ds	2
   563                           
   564                           	psect	cstackCOMMON
   565  0072                     __pcstackCOMMON:	
   566  0072                     ?_debounceButtons:	
   567  0072                     ??_debounceButtons:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0072                     ?_initializeADC:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0072                     ?_startADCConversion:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0072                     ?_setupLCD:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0072                     ?_lcdSetCursor:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0072                     ?_isr:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0072                     ?_initialise:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0072                     ?_main:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0072                     ?_lcdWriteControl:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0072                     ?_lcdWriteData:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0072                     ?_initializeMotor:	
   598                           ; 1 bytes @ 0x0
   599                           
   600                           
   601                           ; 2 bytes @ 0x0
   602  0072                     	ds	1
   603  0073                     ??_isr:	
   604                           
   605                           ; 1 bytes @ 0x1
   606  0073                     	ds	4
   607                           
   608                           	psect	cstackBANK0
   609  0020                     __pcstackBANK0:	
   610  0020                     ?___ftge:	
   611  0020                     ??_initializeADC:	
   612                           ; 1 bit 
   613                           
   614  0020                     ??_startADCConversion:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0020                     ??_initialise:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0020                     ??_lcdWriteControl:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0020                     ??_lcdWriteData:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0020                     ?_readADCData:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0020                     ?___wmul:	
   630                           ; 2 bytes @ 0x0
   631                           
   632  0020                     ?___ftpack:	
   633                           ; 2 bytes @ 0x0
   634                           
   635  0020                     ?_frexp:	
   636                           ; 3 bytes @ 0x0
   637                           
   638  0020                     ___wmul@multiplier:	
   639                           ; 3 bytes @ 0x0
   640                           
   641  0020                     ___ftpack@arg:	
   642                           ; 2 bytes @ 0x0
   643                           
   644  0020                     ___ftge@ff1:	
   645                           ; 3 bytes @ 0x0
   646                           
   647  0020                     frexp@value:	
   648                           ; 3 bytes @ 0x0
   649                           
   650                           
   651                           ; 3 bytes @ 0x0
   652  0020                     	ds	2
   653  0022                     ??_readADCData:	
   654  0022                     lcdWriteControl@databyte:	
   655                           ; 1 bytes @ 0x2
   656                           
   657  0022                     lcdWriteData@databyte:	
   658                           ; 1 bytes @ 0x2
   659                           
   660  0022                     readADCData@ADCResult:	
   661                           ; 1 bytes @ 0x2
   662                           
   663  0022                     ___wmul@multiplicand:	
   664                           ; 2 bytes @ 0x2
   665                           
   666                           
   667                           ; 2 bytes @ 0x2
   668  0022                     	ds	1
   669  0023                     ??_setupLCD:	
   670  0023                     ??_lcdSetCursor:	
   671                           ; 1 bytes @ 0x3
   672                           
   673  0023                     lcdSetCursor@address:	
   674                           ; 1 bytes @ 0x3
   675                           
   676  0023                     ___ftpack@exp:	
   677                           ; 1 bytes @ 0x3
   678                           
   679  0023                     frexp@eptr:	
   680                           ; 1 bytes @ 0x3
   681                           
   682  0023                     ___ftge@ff2:	
   683                           ; 1 bytes @ 0x3
   684                           
   685                           
   686                           ; 3 bytes @ 0x3
   687  0023                     	ds	1
   688  0024                     ??_frexp:	
   689  0024                     ??___wmul:	
   690                           ; 1 bytes @ 0x4
   691                           
   692  0024                     ___ftpack@sign:	
   693                           ; 1 bytes @ 0x4
   694                           
   695  0024                     ___wmul@product:	
   696                           ; 1 bytes @ 0x4
   697                           
   698                           
   699                           ; 2 bytes @ 0x4
   700  0024                     	ds	1
   701  0025                     ??___ftpack:	
   702                           
   703                           ; 1 bytes @ 0x5
   704  0025                     	ds	1
   705  0026                     ?_lcdWriteToDigitBCD:	
   706  0026                     ??___ftge:	
   707                           ; 1 bytes @ 0x6
   708                           
   709  0026                     lcdWriteToDigitBCD@data:	
   710                           ; 1 bytes @ 0x6
   711                           
   712                           
   713                           ; 2 bytes @ 0x6
   714  0026                     	ds	2
   715  0028                     ??_lcdWriteToDigitBCD:	
   716  0028                     ?___altoft:	
   717                           ; 1 bytes @ 0x8
   718                           
   719  0028                     ___altoft@c:	
   720                           ; 3 bytes @ 0x8
   721                           
   722                           
   723                           ; 4 bytes @ 0x8
   724  0028                     	ds	1
   725  0029                     lcdWriteToDigitBCD@TensDigit:	
   726                           
   727                           ; 1 bytes @ 0x9
   728  0029                     	ds	1
   729  002A                     lcdWriteToDigitBCD@HundredDigit:	
   730                           
   731                           ; 1 bytes @ 0xA
   732  002A                     	ds	1
   733  002B                     lcdWriteToDigitBCD@ThousandDigit:	
   734                           
   735                           ; 1 bytes @ 0xB
   736  002B                     	ds	1
   737  002C                     ??___altoft:	
   738  002C                     lcdWriteToDigitBCD@sign:	
   739                           ; 1 bytes @ 0xC
   740                           
   741                           
   742                           ; 1 bytes @ 0xC
   743  002C                     	ds	1
   744  002D                     lcdWriteToDigitBCD@OnesDigit:	
   745                           
   746                           ; 2 bytes @ 0xD
   747  002D                     	ds	1
   748  002E                     ___altoft@exp:	
   749                           
   750                           ; 1 bytes @ 0xE
   751  002E                     	ds	1
   752  002F                     ??_initializeMotor:	
   753  002F                     ?_move:	
   754                           ; 1 bytes @ 0xF
   755                           
   756  002F                     move@direction:	
   757                           ; 1 bytes @ 0xF
   758                           
   759  002F                     ___altoft@sign:	
   760                           ; 1 bytes @ 0xF
   761                           
   762                           
   763                           ; 1 bytes @ 0xF
   764  002F                     	ds	1
   765  0030                     ??_move:	
   766  0030                     ?___ftneg:	
   767                           ; 1 bytes @ 0x10
   768                           
   769  0030                     ___ftneg@f1:	
   770                           ; 3 bytes @ 0x10
   771                           
   772                           
   773                           ; 3 bytes @ 0x10
   774  0030                     	ds	2
   775  0032                     move@steps:	
   776                           
   777                           ; 1 bytes @ 0x12
   778  0032                     	ds	1
   779  0033                     ??___ftneg:	
   780  0033                     ?___ftdiv:	
   781                           ; 1 bytes @ 0x13
   782                           
   783  0033                     move@i:	
   784                           ; 3 bytes @ 0x13
   785                           
   786  0033                     ___ftdiv@f2:	
   787                           ; 1 bytes @ 0x13
   788                           
   789                           
   790                           ; 3 bytes @ 0x13
   791  0033                     	ds	3
   792  0036                     ___ftdiv@f1:	
   793                           
   794                           ; 3 bytes @ 0x16
   795  0036                     	ds	3
   796  0039                     ??___ftdiv:	
   797                           
   798                           ; 1 bytes @ 0x19
   799  0039                     	ds	4
   800  003D                     ___ftdiv@cntr:	
   801                           
   802                           ; 1 bytes @ 0x1D
   803  003D                     	ds	1
   804  003E                     ___ftdiv@f3:	
   805                           
   806                           ; 3 bytes @ 0x1E
   807  003E                     	ds	3
   808  0041                     ___ftdiv@exp:	
   809                           
   810                           ; 1 bytes @ 0x21
   811  0041                     	ds	1
   812  0042                     ___ftdiv@sign:	
   813                           
   814                           ; 1 bytes @ 0x22
   815  0042                     	ds	1
   816  0043                     ?___fttol:	
   817  0043                     ___fttol@f1:	
   818                           ; 4 bytes @ 0x23
   819                           
   820                           
   821                           ; 3 bytes @ 0x23
   822  0043                     	ds	4
   823  0047                     ??___fttol:	
   824                           
   825                           ; 1 bytes @ 0x27
   826  0047                     	ds	4
   827  004B                     ___fttol@sign1:	
   828                           
   829                           ; 1 bytes @ 0x2B
   830  004B                     	ds	1
   831  004C                     ___fttol@lval:	
   832                           
   833                           ; 4 bytes @ 0x2C
   834  004C                     	ds	4
   835  0050                     ___fttol@exp1:	
   836                           
   837                           ; 1 bytes @ 0x30
   838  0050                     	ds	1
   839  0051                     ?_trunc:	
   840  0051                     trunc@x:	
   841                           ; 3 bytes @ 0x31
   842                           
   843                           
   844                           ; 3 bytes @ 0x31
   845  0051                     	ds	3
   846  0054                     ??_trunc:	
   847                           
   848                           ; 1 bytes @ 0x34
   849  0054                     	ds	1
   850  0055                     trunc@i:	
   851                           
   852                           ; 3 bytes @ 0x35
   853  0055                     	ds	3
   854  0058                     trunc@expon:	
   855                           
   856                           ; 2 bytes @ 0x38
   857  0058                     	ds	2
   858  005A                     ?___ftadd:	
   859  005A                     ___ftadd@f1:	
   860                           ; 3 bytes @ 0x3A
   861                           
   862                           
   863                           ; 3 bytes @ 0x3A
   864  005A                     	ds	3
   865  005D                     ___ftadd@f2:	
   866                           
   867                           ; 3 bytes @ 0x3D
   868  005D                     	ds	3
   869  0060                     ??___ftadd:	
   870                           
   871                           ; 1 bytes @ 0x40
   872  0060                     	ds	4
   873  0064                     ___ftadd@sign:	
   874                           
   875                           ; 1 bytes @ 0x44
   876  0064                     	ds	1
   877  0065                     ___ftadd@exp2:	
   878                           
   879                           ; 1 bytes @ 0x45
   880  0065                     	ds	1
   881  0066                     ___ftadd@exp1:	
   882                           
   883                           ; 1 bytes @ 0x46
   884  0066                     	ds	1
   885  0067                     ?_round:	
   886  0067                     round@x:	
   887                           ; 3 bytes @ 0x47
   888                           
   889                           
   890                           ; 3 bytes @ 0x47
   891  0067                     	ds	3
   892  006A                     ??_round:	
   893  006A                     round@f:	
   894                           ; 1 bytes @ 0x4A
   895                           
   896                           
   897                           ; 3 bytes @ 0x4A
   898  006A                     	ds	3
   899  006D                     ?_moveDeg:	
   900  006D                     moveDeg@deg:	
   901                           ; 1 bytes @ 0x4D
   902                           
   903                           
   904                           ; 3 bytes @ 0x4D
   905  006D                     	ds	3
   906                           
   907                           	psect	maintext
   908  03FB                     __pmaintext:	
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 47 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  result          2   13[BANK1 ] int 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : B00/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   928 ;;      Params:         0       0       0       0       0
   929 ;;      Locals:         0       0       2       0       0
   930 ;;      Temps:          0       0       2       0       0
   931 ;;      Totals:         0       0       4       0       0
   932 ;;Total ram usage:        4 bytes
   933 ;; Hardware stack levels required when called:    7
   934 ;; This function calls:
   935 ;;		_initialise
   936 ;;		_initializeADC
   937 ;;		_initializeMotor
   938 ;;		_lcdSetCursor
   939 ;;		_lcdWriteToDigitBCD
   940 ;;		_move
   941 ;;		_moveDeg
   942 ;;		_readADCData
   943 ;;		_setupLCD
   944 ;;		_startADCConversion
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           
   951                           ;psect for function _main
   952  03FB                     _main:	
   953                           
   954                           ;main.c: 49: initialise();
   955                           
   956                           ;incstack = 0
   957                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   958  03FB  120A  158A  27D2  120A  118A  	fcall	_initialise
   959                           
   960                           ;main.c: 50: initializeADC();
   961  0400  120A  158A  27BD  120A  118A  	fcall	_initializeADC
   962                           
   963                           ;main.c: 51: startADCConversion();
   964  0405  120A  158A  2777  120A  118A  	fcall	_startADCConversion
   965                           
   966                           ;main.c: 52: setupLCD();
   967  040A  120A  118A  277B  120A  118A  	fcall	_setupLCD
   968                           
   969                           ;main.c: 53: initializeMotor();
   970  040F  120A  118A  27C9  120A  118A  	fcall	_initializeMotor
   971  0414                     l2421:	
   972                           ;main.c: 56: while(1){
   973                           
   974                           
   975                           ;main.c: 59: if(conversionDone){
   976  0414  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   977  0415  2C44               	goto	l2433
   978                           
   979                           ;main.c: 60: conversionDone = 0;
   980  0416  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   981                           
   982                           ;main.c: 61: int result = readADCData();
   983  0417  120A  118A  26C6  120A  118A  	fcall	_readADCData
   984  041C  1283               	bcf	3,5	;RP0=0, select bank0
   985  041D  1303               	bcf	3,6	;RP1=0, select bank0
   986  041E  0821               	movf	?_readADCData+1,w
   987  041F  1683               	bsf	3,5	;RP0=1, select bank1
   988  0420  1303               	bcf	3,6	;RP1=0, select bank1
   989  0421  00C6               	movwf	(main@result+1)^(0+128)
   990  0422  1283               	bcf	3,5	;RP0=0, select bank0
   991  0423  1303               	bcf	3,6	;RP1=0, select bank0
   992  0424  0820               	movf	?_readADCData,w
   993  0425  1683               	bsf	3,5	;RP0=1, select bank1
   994  0426  1303               	bcf	3,6	;RP1=0, select bank1
   995  0427  00C5               	movwf	main@result^(0+128)
   996                           
   997                           ;main.c: 62: lcdSetCursor(0x00);
   998  0428  3000               	movlw	0
   999  0429  120A  158A  2764  120A  118A  	fcall	_lcdSetCursor
  1000                           
  1001                           ;main.c: 63: lcdWriteToDigitBCD(result);
  1002  042E  1683               	bsf	3,5	;RP0=1, select bank1
  1003  042F  1303               	bcf	3,6	;RP1=0, select bank1
  1004  0430  0846               	movf	(main@result+1)^(0+128),w
  1005  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0433  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1008  0434  1683               	bsf	3,5	;RP0=1, select bank1
  1009  0435  1303               	bcf	3,6	;RP1=0, select bank1
  1010  0436  0845               	movf	main@result^(0+128),w
  1011  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0439  00A6               	movwf	lcdWriteToDigitBCD@data
  1014  043A  120A  118A  2485  120A  118A  	fcall	_lcdWriteToDigitBCD
  1015                           
  1016                           ;main.c: 65: startADCConversion();
  1017  043F  120A  158A  2777  120A  118A  	fcall	_startADCConversion
  1018  0444                     l2433:	
  1019                           
  1020                           ;main.c: 67: }
  1021                           ;main.c: 68: if(pb0Pressed){
  1022  0444  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1023  0445  2C50               	goto	l2439
  1024                           
  1025                           ;main.c: 69: move(1,0);
  1026  0446  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0447  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0448  01AF               	clrf	move@direction
  1029  0449  3001               	movlw	1
  1030  044A  120A  118A  2370  120A  118A  	fcall	_move
  1031                           
  1032                           ;main.c: 70: pb0Pressed = 0;
  1033  044F  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1034  0450                     l2439:	
  1035                           
  1036                           ;main.c: 71: }
  1037                           ;main.c: 72: if(pb1Pressed){
  1038  0450  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1039  0451  2C5D               	goto	l2445
  1040                           
  1041                           ;main.c: 73: move(1,1);
  1042  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0454  01AF               	clrf	move@direction
  1045  0455  0AAF               	incf	move@direction,f
  1046  0456  3001               	movlw	1
  1047  0457  120A  118A  2370  120A  118A  	fcall	_move
  1048                           
  1049                           ;main.c: 74: pb1Pressed = 0;
  1050  045C  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1051  045D                     l2445:	
  1052                           
  1053                           ;main.c: 75: }
  1054                           ;main.c: 76: if(pb2Pressed){
  1055  045D  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1056  045E  2C79               	goto	l2457
  1057                           
  1058                           ;main.c: 77: if(motorToggle){
  1059  045F  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1060  0460  2C69               	goto	l2451
  1061                           
  1062                           ;main.c: 78: moveDeg(-180);
  1063  0461  3000               	movlw	0
  1064  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0464  00ED               	movwf	moveDeg@deg
  1067  0465  3034               	movlw	52
  1068  0466  00EE               	movwf	moveDeg@deg+1
  1069  0467  30C3               	movlw	195
  1070  0468  2C70               	goto	L1
  1071  0469                     l2451:	
  1072                           ;main.c: 79: }
  1073                           
  1074                           
  1075                           ;main.c: 80: else{
  1076                           ;main.c: 81: moveDeg(180);
  1077  0469  3000               	movlw	0
  1078  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1079  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1080  046C  00ED               	movwf	moveDeg@deg
  1081  046D  3034               	movlw	52
  1082  046E  00EE               	movwf	moveDeg@deg+1
  1083  046F  3043               	movlw	67
  1084  0470                     L1:	
  1085  0470  00EF               	movwf	moveDeg@deg+2
  1086  0471  120A  118A  213B  120A  118A  	fcall	_moveDeg
  1087                           
  1088                           ;main.c: 82: }
  1089                           ;main.c: 83: motorToggle = !motorToggle;
  1090  0476  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1091  0477  06F0               	xorwf	_motorToggle/(0+8),f
  1092                           
  1093                           ;main.c: 84: pb2Pressed = 0;
  1094  0478  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1095  0479                     l2457:	
  1096                           
  1097                           ;main.c: 85: }
  1098                           ;main.c: 86: _delay((unsigned long)((20)*(20000000/4000.0)));
  1099  0479  3082               	movlw	130
  1100  047A  1683               	bsf	3,5	;RP0=1, select bank1
  1101  047B  1303               	bcf	3,6	;RP1=0, select bank1
  1102  047C  00C4               	movwf	(??_main^(0+128)+1)
  1103  047D  30DD               	movlw	221
  1104  047E  00C3               	movwf	??_main^(0+128)
  1105  047F                     u2937:	
  1106  047F  0BC3               	decfsz	??_main^(0+128),f
  1107  0480  2C7F               	goto	u2937
  1108  0481  0BC4               	decfsz	(??_main^(0+128)+1),f
  1109  0482  2C7F               	goto	u2937
  1110  0483  2C84               	nop2
  1111  0484  2C14               	goto	l2421
  1112  0485                     __end_of_main:	
  1113                           
  1114                           	psect	text1
  1115  0F77                     __ptext1:	
  1116 ;; *************** function _startADCConversion *****************
  1117 ;; Defined at:
  1118 ;;		line 48 in file "adConv.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;		None
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1132 ;;      Params:         0       0       0       0       0
  1133 ;;      Locals:         0       0       0       0       0
  1134 ;;      Temps:          0       2       0       0       0
  1135 ;;      Totals:         0       2       0       0       0
  1136 ;;Total ram usage:        2 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    2
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _startADCConversion
  1148  0F77                     _startADCConversion:	
  1149                           
  1150                           ;adConv.c: 50: _delay((unsigned long)((1)*(20000000/4000.0)));
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _startADCConversion: [wreg]
  1154  0F77  3007               	movlw	7
  1155  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0F7A  00A1               	movwf	??_startADCConversion+1
  1158  0F7B  307D               	movlw	125
  1159  0F7C  00A0               	movwf	??_startADCConversion
  1160  0F7D                     u2947:	
  1161  0F7D  0BA0               	decfsz	??_startADCConversion,f
  1162  0F7E  2F7D               	goto	u2947
  1163  0F7F  0BA1               	decfsz	??_startADCConversion+1,f
  1164  0F80  2F7D               	goto	u2947
  1165                           
  1166                           ;adConv.c: 52: GO = 1;
  1167  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0F83  151F               	bsf	31,2	;volatile
  1170  0F84  0008               	return
  1171  0F85                     __end_of_startADCConversion:	
  1172                           
  1173                           	psect	text2
  1174  077B                     __ptext2:	
  1175 ;; *************** function _setupLCD *****************
  1176 ;; Defined at:
  1177 ;;		line 78 in file "lcd.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;		None
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, status,2, status,0, pclath, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1191 ;;      Params:         0       0       0       0       0
  1192 ;;      Locals:         0       0       0       0       0
  1193 ;;      Temps:          0       0       0       0       0
  1194 ;;      Totals:         0       0       0       0       0
  1195 ;;Total ram usage:        0 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    3
  1198 ;; This function calls:
  1199 ;;		_lcdWriteControl
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           
  1206                           ;psect for function _setupLCD
  1207  077B                     _setupLCD:	
  1208                           
  1209                           ;lcd.c: 81: PORTD = 0;
  1210                           
  1211                           ;incstack = 0
  1212                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1213  077B  1283               	bcf	3,5	;RP0=0, select bank0
  1214  077C  1303               	bcf	3,6	;RP1=0, select bank0
  1215  077D  0188               	clrf	8	;volatile
  1216                           
  1217                           ;lcd.c: 82: PORTE = 0;
  1218  077E  0189               	clrf	9	;volatile
  1219                           
  1220                           ;lcd.c: 84: TRISD = 0b00000000;
  1221  077F  1683               	bsf	3,5	;RP0=1, select bank1
  1222  0780  1303               	bcf	3,6	;RP1=0, select bank1
  1223  0781  0188               	clrf	8	;volatile
  1224                           
  1225                           ;lcd.c: 85: TRISE = 0b00000000;
  1226  0782  0189               	clrf	9	;volatile
  1227                           
  1228                           ;lcd.c: 88: lcdWriteControl(0b00000001);
  1229  0783  3001               	movlw	1
  1230  0784  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1231                           
  1232                           ;lcd.c: 89: lcdWriteControl(0b00111000);
  1233  0789  3038               	movlw	56
  1234  078A  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1235                           
  1236                           ;lcd.c: 90: lcdWriteControl(0b00001100);
  1237  078F  300C               	movlw	12
  1238  0790  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1239                           
  1240                           ;lcd.c: 91: lcdWriteControl(0b00000110);
  1241  0795  3006               	movlw	6
  1242  0796  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1243                           
  1244                           ;lcd.c: 92: lcdWriteControl(0b00000010);
  1245  079B  3002               	movlw	2
  1246  079C  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1247                           
  1248                           ;lcd.c: 96: lcdWriteControl(0b00000001);
  1249  07A1  3001               	movlw	1
  1250  07A2  120A  158A  27A9   	fcall	_lcdWriteControl
  1251  07A5  0008               	return
  1252  07A6                     __end_of_setupLCD:	
  1253                           
  1254                           	psect	text3
  1255  06C6                     __ptext3:	
  1256 ;; *************** function _readADCData *****************
  1257 ;; Defined at:
  1258 ;;		line 28 in file "adConv.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  ADCResult       2    2[BANK0 ] int 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  2    0[BANK0 ] int 
  1265 ;; Registers used:
  1266 ;;		wreg, btemp+1
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1272 ;;      Params:         0       2       0       0       0
  1273 ;;      Locals:         0       2       0       0       0
  1274 ;;      Temps:          0       0       0       0       0
  1275 ;;      Totals:         0       4       0       0       0
  1276 ;;Total ram usage:        4 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    2
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           
  1287                           ;psect for function _readADCData
  1288  06C6                     _readADCData:	
  1289                           
  1290                           ;adConv.c: 30: int ADCResult = (ADRESH<<8) + ADRESL ;
  1291                           
  1292                           ;incstack = 0
  1293                           ; Regs used in _readADCData: [wreg+btemp+1]
  1294  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1295  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1296  06C8  081E               	movf	30,w	;volatile
  1297  06C9  00A3               	movwf	readADCData@ADCResult+1
  1298  06CA  1683               	bsf	3,5	;RP0=1, select bank1
  1299  06CB  1303               	bcf	3,6	;RP1=0, select bank1
  1300  06CC  081E               	movf	30,w	;volatile
  1301  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1302  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1303  06CF  00A2               	movwf	readADCData@ADCResult
  1304                           
  1305                           ;adConv.c: 32: if(ADCResult>1000){
  1306  06D0  0823               	movf	readADCData@ADCResult+1,w
  1307  06D1  3A80               	xorlw	128
  1308  06D2  00FF               	movwf	127
  1309  06D3  3083               	movlw	131
  1310  06D4  027F               	subwf	127,w
  1311  06D5  1D03               	skipz
  1312  06D6  2ED9               	goto	u2835
  1313  06D7  30E9               	movlw	233
  1314  06D8  0222               	subwf	readADCData@ADCResult,w
  1315  06D9                     u2835:	
  1316  06D9  1C03               	skipc
  1317  06DA  2EDF               	goto	l2393
  1318                           
  1319                           ;adConv.c: 33: RB3 = 0;
  1320  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  1321  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  1322  06DD  1186               	bcf	6,3	;volatile
  1323  06DE  2F01               	goto	L2
  1324  06DF                     l2393:	
  1325                           ;adConv.c: 35: }
  1326                           
  1327                           ;adConv.c: 34: RB4 = 1;
  1328                           
  1329                           
  1330                           ;adConv.c: 36: else if (ADCResult<1000&&ADCResult>400){
  1331  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  1332  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  1333  06E1  0823               	movf	readADCData@ADCResult+1,w
  1334  06E2  3A80               	xorlw	128
  1335  06E3  00FF               	movwf	127
  1336  06E4  3083               	movlw	131
  1337  06E5  027F               	subwf	127,w
  1338  06E6  1D03               	skipz
  1339  06E7  2EEA               	goto	u2845
  1340  06E8  30E8               	movlw	232
  1341  06E9  0222               	subwf	readADCData@ADCResult,w
  1342  06EA                     u2845:	
  1343  06EA  1803               	skipnc
  1344  06EB  2EFE               	goto	l239
  1345  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  1346  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  1347  06EE  0823               	movf	readADCData@ADCResult+1,w
  1348  06EF  3A80               	xorlw	128
  1349  06F0  00FF               	movwf	127
  1350  06F1  3081               	movlw	129
  1351  06F2  027F               	subwf	127,w
  1352  06F3  1D03               	skipz
  1353  06F4  2EF7               	goto	u2855
  1354  06F5  3091               	movlw	145
  1355  06F6  0222               	subwf	readADCData@ADCResult,w
  1356  06F7                     u2855:	
  1357  06F7  1C03               	skipc
  1358  06F8  2EFE               	goto	l239
  1359                           
  1360                           ;adConv.c: 37: RB3 = 1;
  1361  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  1362  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  1363  06FB  1586               	bsf	6,3	;volatile
  1364                           
  1365                           ;adConv.c: 38: RB4 = 0;
  1366  06FC  1206               	bcf	6,4	;volatile
  1367                           
  1368                           ;adConv.c: 39: }
  1369  06FD  2F02               	goto	l2399
  1370  06FE                     l239:	
  1371                           
  1372                           ;adConv.c: 41: else{
  1373                           ;adConv.c: 42: RB3 = 1;
  1374  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  1375  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0700  1586               	bsf	6,3	;volatile
  1377  0701                     L2:	
  1378                           
  1379                           ;adConv.c: 43: RB4 = 1;
  1380  0701  1606               	bsf	6,4	;volatile
  1381  0702                     l2399:	
  1382                           
  1383                           ;adConv.c: 44: }
  1384                           ;adConv.c: 45: return ADCResult;
  1385  0702  0823               	movf	readADCData@ADCResult+1,w
  1386  0703  00A1               	movwf	?_readADCData+1
  1387  0704  0822               	movf	readADCData@ADCResult,w
  1388  0705  00A0               	movwf	?_readADCData
  1389  0706  0008               	return
  1390  0707                     __end_of_readADCData:	
  1391                           
  1392                           	psect	text4
  1393  013B                     __ptext4:	
  1394 ;; *************** function _moveDeg *****************
  1395 ;; Defined at:
  1396 ;;		line 63 in file "motor.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  deg             3   77[BANK0 ] int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1410 ;;      Params:         0       3       0       0       0
  1411 ;;      Locals:         0       0      10       0       0
  1412 ;;      Temps:          0       0       1       0       0
  1413 ;;      Totals:         0       3      11       0       0
  1414 ;;Total ram usage:       14 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    6
  1417 ;; This function calls:
  1418 ;;		___ftdiv
  1419 ;;		___ftge
  1420 ;;		___ftneg
  1421 ;;		___fttol
  1422 ;;		_move
  1423 ;;		_round
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function _moveDeg
  1431  013B                     _moveDeg:	
  1432                           
  1433                           ;motor.c: 64: char stepsToMove;
  1434                           ;motor.c: 65: if(deg<0){
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1438  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1439  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1440  013D  086D               	movf	moveDeg@deg,w
  1441  013E  00A0               	movwf	___ftge@ff1
  1442  013F  086E               	movf	moveDeg@deg+1,w
  1443  0140  00A1               	movwf	___ftge@ff1+1
  1444  0141  086F               	movf	moveDeg@deg+2,w
  1445  0142  00A2               	movwf	___ftge@ff1+2
  1446  0143  3000               	movlw	0
  1447  0144  00A3               	movwf	___ftge@ff2
  1448  0145  3000               	movlw	0
  1449  0146  00A4               	movwf	___ftge@ff2+1
  1450  0147  3000               	movlw	0
  1451  0148  00A5               	movwf	___ftge@ff2+2
  1452  0149  120A  118A  25DB  120A  118A  	fcall	___ftge
  1453  014E  1803               	btfsc	3,0
  1454  014F  29D0               	goto	l2413
  1455                           
  1456                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1457  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1458  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0152  086D               	movf	moveDeg@deg,w
  1460  0153  00B0               	movwf	___ftneg@f1
  1461  0154  086E               	movf	moveDeg@deg+1,w
  1462  0155  00B1               	movwf	___ftneg@f1+1
  1463  0156  086F               	movf	moveDeg@deg+2,w
  1464  0157  00B2               	movwf	___ftneg@f1+2
  1465  0158  120A  158A  276D  120A  118A  	fcall	___ftneg
  1466  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1467  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1468  015F  0830               	movf	?___ftneg,w
  1469  0160  00B6               	movwf	___ftdiv@f1
  1470  0161  0831               	movf	?___ftneg+1,w
  1471  0162  00B7               	movwf	___ftdiv@f1+1
  1472  0163  0832               	movf	?___ftneg+2,w
  1473  0164  00B8               	movwf	___ftdiv@f1+2
  1474  0165  3000               	movlw	0
  1475  0166  00B3               	movwf	___ftdiv@f2
  1476  0167  3070               	movlw	112
  1477  0168  00B4               	movwf	___ftdiv@f2+1
  1478  0169  3040               	movlw	64
  1479  016A  00B5               	movwf	___ftdiv@f2+2
  1480  016B  120A  118A  222A  120A  118A  	fcall	___ftdiv
  1481  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0172  0833               	movf	?___ftdiv,w
  1484  0173  1683               	bsf	3,5	;RP0=1, select bank1
  1485  0174  1303               	bcf	3,6	;RP1=0, select bank1
  1486  0175  00B9               	movwf	_moveDeg$639^(0+128)
  1487  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0178  0834               	movf	?___ftdiv+1,w
  1490  0179  1683               	bsf	3,5	;RP0=1, select bank1
  1491  017A  1303               	bcf	3,6	;RP1=0, select bank1
  1492  017B  00BA               	movwf	(_moveDeg$639+1)^(0+128)
  1493  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1494  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1495  017E  0835               	movf	?___ftdiv+2,w
  1496  017F  1683               	bsf	3,5	;RP0=1, select bank1
  1497  0180  1303               	bcf	3,6	;RP1=0, select bank1
  1498  0181  00BB               	movwf	(_moveDeg$639+2)^(0+128)
  1499                           
  1500                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1501  0182  0839               	movf	_moveDeg$639^(0+128),w
  1502  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0185  00E7               	movwf	round@x
  1505  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1506  0187  1303               	bcf	3,6	;RP1=0, select bank1
  1507  0188  083A               	movf	(_moveDeg$639+1)^(0+128),w
  1508  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1509  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1510  018B  00E8               	movwf	round@x+1
  1511  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1512  018D  1303               	bcf	3,6	;RP1=0, select bank1
  1513  018E  083B               	movf	(_moveDeg$639+2)^(0+128),w
  1514  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0191  00E9               	movwf	round@x+2
  1517  0192  120A  118A  257B  120A  118A  	fcall	_round
  1518  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1520  0199  0867               	movf	?_round,w
  1521  019A  1683               	bsf	3,5	;RP0=1, select bank1
  1522  019B  1303               	bcf	3,6	;RP1=0, select bank1
  1523  019C  00BC               	movwf	_moveDeg$640^(0+128)
  1524  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1525  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1526  019F  0868               	movf	?_round+1,w
  1527  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1528  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  1529  01A2  00BD               	movwf	(_moveDeg$640+1)^(0+128)
  1530  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1531  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1532  01A5  0869               	movf	?_round+2,w
  1533  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1534  01A7  1303               	bcf	3,6	;RP1=0, select bank1
  1535  01A8  00BE               	movwf	(_moveDeg$640+2)^(0+128)
  1536                           
  1537                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1538  01A9  083C               	movf	_moveDeg$640^(0+128),w
  1539  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1540  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1541  01AC  00C3               	movwf	___fttol@f1
  1542  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  1543  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  1544  01AF  083D               	movf	(_moveDeg$640+1)^(0+128),w
  1545  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1546  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  1547  01B2  00C4               	movwf	___fttol@f1+1
  1548  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  1549  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  1550  01B5  083E               	movf	(_moveDeg$640+2)^(0+128),w
  1551  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1552  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1553  01B8  00C5               	movwf	___fttol@f1+2
  1554  01B9  120A  118A  22E2  120A  118A  	fcall	___fttol
  1555  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1556  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1557  01C0  0843               	movf	?___fttol,w
  1558  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  1559  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  1560  01C3  00B8               	movwf	??_moveDeg^(0+128)
  1561  01C4  0838               	movf	??_moveDeg^(0+128),w
  1562  01C5  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1563                           
  1564                           ;motor.c: 67: move(stepsToMove,0);
  1565  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1566  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1567  01C8  01AF               	clrf	move@direction
  1568  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1569  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  1570  01CB  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1571  01CC  120A  118A  2370   	fcall	_move
  1572                           
  1573                           ;motor.c: 68: }
  1574  01CF  0008               	return
  1575  01D0                     l2413:	
  1576                           
  1577                           ;motor.c: 69: else{
  1578                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1579  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1580  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1581  01D2  086D               	movf	moveDeg@deg,w
  1582  01D3  00B6               	movwf	___ftdiv@f1
  1583  01D4  086E               	movf	moveDeg@deg+1,w
  1584  01D5  00B7               	movwf	___ftdiv@f1+1
  1585  01D6  086F               	movf	moveDeg@deg+2,w
  1586  01D7  00B8               	movwf	___ftdiv@f1+2
  1587  01D8  3000               	movlw	0
  1588  01D9  00B3               	movwf	___ftdiv@f2
  1589  01DA  3070               	movlw	112
  1590  01DB  00B4               	movwf	___ftdiv@f2+1
  1591  01DC  3040               	movlw	64
  1592  01DD  00B5               	movwf	___ftdiv@f2+2
  1593  01DE  120A  118A  222A  120A  118A  	fcall	___ftdiv
  1594  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1595  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  1596  01E5  0833               	movf	?___ftdiv,w
  1597  01E6  00E7               	movwf	round@x
  1598  01E7  0834               	movf	?___ftdiv+1,w
  1599  01E8  00E8               	movwf	round@x+1
  1600  01E9  0835               	movf	?___ftdiv+2,w
  1601  01EA  00E9               	movwf	round@x+2
  1602  01EB  120A  118A  257B  120A  118A  	fcall	_round
  1603  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1604  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1605  01F2  0867               	movf	?_round,w
  1606  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  1607  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  1608  01F5  00BF               	movwf	_moveDeg$641^(0+128)
  1609  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1610  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1611  01F8  0868               	movf	?_round+1,w
  1612  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  1613  01FA  1303               	bcf	3,6	;RP1=0, select bank1
  1614  01FB  00C0               	movwf	(_moveDeg$641+1)^(0+128)
  1615  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1616  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1617  01FE  0869               	movf	?_round+2,w
  1618  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1619  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1620  0201  00C1               	movwf	(_moveDeg$641+2)^(0+128)
  1621                           
  1622                           ;motor.c: 69: else{
  1623                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1624  0202  083F               	movf	_moveDeg$641^(0+128),w
  1625  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1627  0205  00C3               	movwf	___fttol@f1
  1628  0206  1683               	bsf	3,5	;RP0=1, select bank1
  1629  0207  1303               	bcf	3,6	;RP1=0, select bank1
  1630  0208  0840               	movf	(_moveDeg$641+1)^(0+128),w
  1631  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1632  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1633  020B  00C4               	movwf	___fttol@f1+1
  1634  020C  1683               	bsf	3,5	;RP0=1, select bank1
  1635  020D  1303               	bcf	3,6	;RP1=0, select bank1
  1636  020E  0841               	movf	(_moveDeg$641+2)^(0+128),w
  1637  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0211  00C5               	movwf	___fttol@f1+2
  1640  0212  120A  118A  22E2  120A  118A  	fcall	___fttol
  1641  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1642  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1643  0219  0843               	movf	?___fttol,w
  1644  021A  1683               	bsf	3,5	;RP0=1, select bank1
  1645  021B  1303               	bcf	3,6	;RP1=0, select bank1
  1646  021C  00B8               	movwf	??_moveDeg^(0+128)
  1647  021D  0838               	movf	??_moveDeg^(0+128),w
  1648  021E  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1649                           
  1650                           ;motor.c: 71: move(stepsToMove,1);
  1651  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0221  01AF               	clrf	move@direction
  1654  0222  0AAF               	incf	move@direction,f
  1655  0223  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0224  1303               	bcf	3,6	;RP1=0, select bank1
  1657  0225  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1658  0226  120A  118A  2370   	fcall	_move
  1659  0229  0008               	return
  1660  022A                     __end_of_moveDeg:	
  1661                           
  1662                           	psect	text5
  1663  057B                     __ptext5:	
  1664 ;; *************** function _round *****************
  1665 ;; Defined at:
  1666 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  x               3   71[BANK0 ] void 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  f               3   74[BANK0 ] void 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  3   71[BANK0 ] void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         0       3       0       0       0
  1681 ;;      Locals:         0       3       0       0       0
  1682 ;;      Temps:          0       0       0       0       0
  1683 ;;      Totals:         0       6       0       0       0
  1684 ;;Total ram usage:        6 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    5
  1687 ;; This function calls:
  1688 ;;		___ftadd
  1689 ;;		___ftneg
  1690 ;;		_trunc
  1691 ;; This function is called by:
  1692 ;;		_moveDeg
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function _round
  1698  057B                     _round:	
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1702  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1703  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1704  057D  0867               	movf	round@x,w
  1705  057E  00DA               	movwf	___ftadd@f1
  1706  057F  0868               	movf	round@x+1,w
  1707  0580  00DB               	movwf	___ftadd@f1+1
  1708  0581  0869               	movf	round@x+2,w
  1709  0582  00DC               	movwf	___ftadd@f1+2
  1710  0583  0867               	movf	round@x,w
  1711  0584  00D1               	movwf	trunc@x
  1712  0585  0868               	movf	round@x+1,w
  1713  0586  00D2               	movwf	trunc@x+1
  1714  0587  0869               	movf	round@x+2,w
  1715  0588  00D3               	movwf	trunc@x+2
  1716  0589  120A  118A  263A  120A  118A  	fcall	_trunc
  1717  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1718  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0590  0851               	movf	?_trunc,w
  1720  0591  00B0               	movwf	___ftneg@f1
  1721  0592  0852               	movf	?_trunc+1,w
  1722  0593  00B1               	movwf	___ftneg@f1+1
  1723  0594  0853               	movf	?_trunc+2,w
  1724  0595  00B2               	movwf	___ftneg@f1+2
  1725  0596  120A  158A  276D  120A  118A  	fcall	___ftneg
  1726  059B  1283               	bcf	3,5	;RP0=0, select bank0
  1727  059C  1303               	bcf	3,6	;RP1=0, select bank0
  1728  059D  0830               	movf	?___ftneg,w
  1729  059E  00DD               	movwf	___ftadd@f2
  1730  059F  0831               	movf	?___ftneg+1,w
  1731  05A0  00DE               	movwf	___ftadd@f2+1
  1732  05A1  0832               	movf	?___ftneg+2,w
  1733  05A2  00DF               	movwf	___ftadd@f2+2
  1734  05A3  120A  118A  2032  120A  118A  	fcall	___ftadd
  1735  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  1736  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  1737  05AA  085A               	movf	?___ftadd,w
  1738  05AB  00EA               	movwf	round@f
  1739  05AC  085B               	movf	?___ftadd+1,w
  1740  05AD  00EB               	movwf	round@f+1
  1741  05AE  085C               	movf	?___ftadd+2,w
  1742  05AF  00EC               	movwf	round@f+2
  1743  05B0  086A               	movf	round@f,w
  1744  05B1  00DA               	movwf	___ftadd@f1
  1745  05B2  086B               	movf	round@f+1,w
  1746  05B3  00DB               	movwf	___ftadd@f1+1
  1747  05B4  086C               	movf	round@f+2,w
  1748  05B5  00DC               	movwf	___ftadd@f1+2
  1749  05B6  0867               	movf	round@x,w
  1750  05B7  00DD               	movwf	___ftadd@f2
  1751  05B8  0868               	movf	round@x+1,w
  1752  05B9  00DE               	movwf	___ftadd@f2+1
  1753  05BA  0869               	movf	round@x+2,w
  1754  05BB  00DF               	movwf	___ftadd@f2+2
  1755  05BC  120A  118A  2032  120A  118A  	fcall	___ftadd
  1756  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1757  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1758  05C3  085A               	movf	?___ftadd,w
  1759  05C4  00E7               	movwf	round@x
  1760  05C5  085B               	movf	?___ftadd+1,w
  1761  05C6  00E8               	movwf	round@x+1
  1762  05C7  085C               	movf	?___ftadd+2,w
  1763  05C8  00E9               	movwf	round@x+2
  1764  05C9  0867               	movf	round@x,w
  1765  05CA  00D1               	movwf	trunc@x
  1766  05CB  0868               	movf	round@x+1,w
  1767  05CC  00D2               	movwf	trunc@x+1
  1768  05CD  0869               	movf	round@x+2,w
  1769  05CE  00D3               	movwf	trunc@x+2
  1770  05CF  120A  118A  263A   	fcall	_trunc
  1771  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  1772  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  1773  05D4  0851               	movf	?_trunc,w
  1774  05D5  00E7               	movwf	?_round
  1775  05D6  0852               	movf	?_trunc+1,w
  1776  05D7  00E8               	movwf	?_round+1
  1777  05D8  0853               	movf	?_trunc+2,w
  1778  05D9  00E9               	movwf	?_round+2
  1779  05DA  0008               	return
  1780  05DB                     __end_of_round:	
  1781                           
  1782                           	psect	text6
  1783  063A                     __ptext6:	
  1784 ;; *************** function _trunc *****************
  1785 ;; Defined at:
  1786 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  x               3   49[BANK0 ] void 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  i               3   53[BANK0 ] void 
  1791 ;;  expon           2   56[BANK0 ] int 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  3   49[BANK0 ] int 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         0       3       0       0       0
  1802 ;;      Locals:         0       5       0       0       0
  1803 ;;      Temps:          0       1       0       0       0
  1804 ;;      Totals:         0       9       0       0       0
  1805 ;;Total ram usage:        9 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    4
  1808 ;; This function calls:
  1809 ;;		___altoft
  1810 ;;		___fttol
  1811 ;;		_frexp
  1812 ;; This function is called by:
  1813 ;;		_round
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _trunc
  1819  063A                     _trunc:	
  1820                           
  1821                           ;incstack = 0
  1822                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1823  063A  1283               	bcf	3,5	;RP0=0, select bank0
  1824  063B  1303               	bcf	3,6	;RP1=0, select bank0
  1825  063C  0851               	movf	trunc@x,w
  1826  063D  00A0               	movwf	frexp@value
  1827  063E  0852               	movf	trunc@x+1,w
  1828  063F  00A1               	movwf	frexp@value+1
  1829  0640  0853               	movf	trunc@x+2,w
  1830  0641  00A2               	movwf	frexp@value+2
  1831  0642  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1832  0643  00D4               	movwf	??_trunc
  1833  0644  0854               	movf	??_trunc,w
  1834  0645  00A3               	movwf	frexp@eptr
  1835  0646  120A  118A  2707  120A  118A  	fcall	_frexp
  1836  064B  1283               	bcf	3,5	;RP0=0, select bank0
  1837  064C  1303               	bcf	3,6	;RP1=0, select bank0
  1838  064D  1FD9               	btfss	trunc@expon+1,7
  1839  064E  2E56               	goto	l2205
  1840  064F  3000               	movlw	0
  1841  0650  00D1               	movwf	?_trunc
  1842  0651  3000               	movlw	0
  1843  0652  00D2               	movwf	?_trunc+1
  1844  0653  3000               	movlw	0
  1845  0654  00D3               	movwf	?_trunc+2
  1846  0655  0008               	return
  1847  0656                     l2205:	
  1848  0656  3000               	movlw	0
  1849  0657  0259               	subwf	trunc@expon+1,w
  1850  0658  3015               	movlw	21
  1851  0659  1903               	skipnz
  1852  065A  0258               	subwf	trunc@expon,w
  1853  065B  1803               	btfsc	3,0
  1854  065C  0008               	return
  1855  065D  0851               	movf	trunc@x,w
  1856  065E  00C3               	movwf	___fttol@f1
  1857  065F  0852               	movf	trunc@x+1,w
  1858  0660  00C4               	movwf	___fttol@f1+1
  1859  0661  0853               	movf	trunc@x+2,w
  1860  0662  00C5               	movwf	___fttol@f1+2
  1861  0663  120A  118A  22E2  120A  118A  	fcall	___fttol
  1862  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1864  066A  0846               	movf	?___fttol+3,w
  1865  066B  00AB               	movwf	___altoft@c+3
  1866  066C  0845               	movf	?___fttol+2,w
  1867  066D  00AA               	movwf	___altoft@c+2
  1868  066E  0844               	movf	?___fttol+1,w
  1869  066F  00A9               	movwf	___altoft@c+1
  1870  0670  0843               	movf	?___fttol,w
  1871  0671  00A8               	movwf	___altoft@c
  1872  0672  120A  118A  2684   	fcall	___altoft
  1873  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0677  0828               	movf	?___altoft,w
  1876  0678  00D5               	movwf	trunc@i
  1877  0679  0829               	movf	?___altoft+1,w
  1878  067A  00D6               	movwf	trunc@i+1
  1879  067B  082A               	movf	?___altoft+2,w
  1880  067C  00D7               	movwf	trunc@i+2
  1881  067D  0855               	movf	trunc@i,w
  1882  067E  00D1               	movwf	?_trunc
  1883  067F  0856               	movf	trunc@i+1,w
  1884  0680  00D2               	movwf	?_trunc+1
  1885  0681  0857               	movf	trunc@i+2,w
  1886  0682  00D3               	movwf	?_trunc+2
  1887  0683  0008               	return
  1888  0684                     __end_of_trunc:	
  1889                           
  1890                           	psect	text7
  1891  0707                     __ptext7:	
  1892 ;; *************** function _frexp *****************
  1893 ;; Defined at:
  1894 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  value           3    0[BANK0 ] int 
  1897 ;;  eptr            1    3[BANK0 ] PTR int 
  1898 ;;		 -> trunc@expon(2), 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  3    0[BANK0 ] PTR int 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1910 ;;      Params:         0       4       0       0       0
  1911 ;;      Locals:         0       0       0       0       0
  1912 ;;      Temps:          0       2       0       0       0
  1913 ;;      Totals:         0       6       0       0       0
  1914 ;;Total ram usage:        6 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_trunc
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _frexp
  1926  0707                     _frexp:	
  1927                           
  1928                           ;incstack = 0
  1929                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1930  0707  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0708  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0709  0822               	movf	frexp@value+2,w
  1933  070A  0421               	iorwf	frexp@value+1,w
  1934  070B  0420               	iorwf	frexp@value,w
  1935  070C  1D03               	skipz
  1936  070D  2F15               	goto	l2075
  1937  070E  0823               	movf	frexp@eptr,w
  1938  070F  0084               	movwf	4
  1939  0710  1383               	bcf	3,7	;select IRP bank0
  1940  0711  0180               	clrf	0
  1941  0712  0A84               	incf	4,f
  1942  0713  0180               	clrf	0
  1943                           
  1944                           ;	Return value of _frexp is never used
  1945  0714  0008               	return
  1946  0715                     l2075:	
  1947  0715  0822               	movf	frexp@value+2,w
  1948  0716  397F               	andlw	127
  1949  0717  00A4               	movwf	??_frexp
  1950  0718  01A5               	clrf	??_frexp+1
  1951  0719  1003               	clrc
  1952  071A  0DA4               	rlf	??_frexp,f
  1953  071B  0DA5               	rlf	??_frexp+1,f
  1954  071C  0823               	movf	frexp@eptr,w
  1955  071D  0084               	movwf	4
  1956  071E  0824               	movf	??_frexp,w
  1957  071F  1383               	bcf	3,7	;select IRP bank0
  1958  0720  0080               	movwf	0
  1959  0721  0A84               	incf	4,f
  1960  0722  0825               	movf	??_frexp+1,w
  1961  0723  0080               	movwf	0
  1962  0724  0D21               	rlf	frexp@value+1,w
  1963  0725  0D21               	rlf	frexp@value+1,w
  1964  0726  3901               	andlw	1
  1965  0727  00A4               	movwf	??_frexp
  1966  0728  01A5               	clrf	??_frexp+1
  1967  0729  0823               	movf	frexp@eptr,w
  1968  072A  0084               	movwf	4
  1969  072B  0824               	movf	??_frexp,w
  1970  072C  0480               	iorwf	0,f
  1971  072D  0A84               	incf	4,f
  1972  072E  0825               	movf	??_frexp+1,w
  1973  072F  0480               	iorwf	0,f
  1974  0730  0823               	movf	frexp@eptr,w
  1975  0731  0084               	movwf	4
  1976  0732  3082               	movlw	130
  1977  0733  0780               	addwf	0,f
  1978  0734  0F84               	incfsz	4,f
  1979  0735  0800               	movf	0,w
  1980  0736  1803               	skipnc
  1981  0737  0A00               	incf	0,w
  1982  0738  00FF               	movwf	127
  1983  0739  30FF               	movlw	255
  1984  073A  077F               	addwf	127,w
  1985  073B  0080               	movwf	0
  1986  073C  0384               	decf	4,f
  1987  073D  0822               	movf	frexp@value+2,w
  1988  073E  3980               	andlw	-128
  1989  073F  383F               	iorlw	63
  1990  0740  00A2               	movwf	frexp@value+2
  1991  0741  13A1               	bcf	frexp@value+1,7
  1992  0742  0008               	return
  1993  0743                     __end_of_frexp:	
  1994                           ;	Return value of _frexp is never used
  1995                           
  1996                           
  1997                           	psect	text8
  1998  02E2                     __ptext8:	
  1999 ;; *************** function ___fttol *****************
  2000 ;; Defined at:
  2001 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  f1              3   35[BANK0 ] float 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  lval            4   44[BANK0 ] unsigned long 
  2006 ;;  exp1            1   48[BANK0 ] unsigned char 
  2007 ;;  sign1           1   43[BANK0 ] unsigned char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  4   35[BANK0 ] long 
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2017 ;;      Params:         0       4       0       0       0
  2018 ;;      Locals:         0       6       0       0       0
  2019 ;;      Temps:          0       4       0       0       0
  2020 ;;      Totals:         0      14       0       0       0
  2021 ;;Total ram usage:       14 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:    2
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_moveDeg
  2028 ;;		_trunc
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function ___fttol
  2034  02E2                     ___fttol:	
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2038  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2039  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2040  02E4  0843               	movf	___fttol@f1,w
  2041  02E5  00C7               	movwf	??___fttol
  2042  02E6  0844               	movf	___fttol@f1+1,w
  2043  02E7  00C8               	movwf	??___fttol+1
  2044  02E8  0845               	movf	___fttol@f1+2,w
  2045  02E9  00C9               	movwf	??___fttol+2
  2046  02EA  1003               	clrc
  2047  02EB  0D48               	rlf	??___fttol+1,w
  2048  02EC  0D49               	rlf	??___fttol+2,w
  2049  02ED  00CA               	movwf	??___fttol+3
  2050  02EE  084A               	movf	??___fttol+3,w
  2051  02EF  00D0               	movwf	___fttol@exp1
  2052  02F0  0850               	movf	___fttol@exp1,w
  2053  02F1  1D03               	btfss	3,2
  2054  02F2  2AFC               	goto	l1483
  2055  02F3  3000               	movlw	0
  2056  02F4  00C6               	movwf	?___fttol+3
  2057  02F5  3000               	movlw	0
  2058  02F6  00C5               	movwf	?___fttol+2
  2059  02F7  3000               	movlw	0
  2060  02F8  00C4               	movwf	?___fttol+1
  2061  02F9  3000               	movlw	0
  2062  02FA  00C3               	movwf	?___fttol
  2063  02FB  0008               	return
  2064  02FC                     l1483:	
  2065  02FC  0843               	movf	___fttol@f1,w
  2066  02FD  00C7               	movwf	??___fttol
  2067  02FE  0844               	movf	___fttol@f1+1,w
  2068  02FF  00C8               	movwf	??___fttol+1
  2069  0300  0845               	movf	___fttol@f1+2,w
  2070  0301  00C9               	movwf	??___fttol+2
  2071  0302  3017               	movlw	23
  2072  0303                     u1275:	
  2073  0303  1003               	clrc
  2074  0304  0CC9               	rrf	??___fttol+2,f
  2075  0305  0CC8               	rrf	??___fttol+1,f
  2076  0306  0CC7               	rrf	??___fttol,f
  2077  0307  3EFF               	addlw	-1
  2078  0308  1D03               	skipz
  2079  0309  2B03               	goto	u1275
  2080  030A  0847               	movf	??___fttol,w
  2081  030B  00CA               	movwf	??___fttol+3
  2082  030C  084A               	movf	??___fttol+3,w
  2083  030D  00CB               	movwf	___fttol@sign1
  2084  030E  17C4               	bsf	___fttol@f1+1,7
  2085  030F  30FF               	movlw	255
  2086  0310  05C3               	andwf	___fttol@f1,f
  2087  0311  30FF               	movlw	255
  2088  0312  05C4               	andwf	___fttol@f1+1,f
  2089  0313  3000               	movlw	0
  2090  0314  05C5               	andwf	___fttol@f1+2,f
  2091  0315  0843               	movf	___fttol@f1,w
  2092  0316  00CC               	movwf	___fttol@lval
  2093  0317  0844               	movf	___fttol@f1+1,w
  2094  0318  00CD               	movwf	___fttol@lval+1
  2095  0319  0845               	movf	___fttol@f1+2,w
  2096  031A  00CE               	movwf	___fttol@lval+2
  2097  031B  01CF               	clrf	___fttol@lval+3
  2098  031C  308E               	movlw	142
  2099  031D  02D0               	subwf	___fttol@exp1,f
  2100  031E  1FD0               	btfss	___fttol@exp1,7
  2101  031F  2B3E               	goto	l1503
  2102  0320  0850               	movf	___fttol@exp1,w
  2103  0321  3A80               	xorlw	128
  2104  0322  3E8F               	addlw	143
  2105  0323  1803               	skipnc
  2106  0324  2B2E               	goto	l1501
  2107  0325  3000               	movlw	0
  2108  0326  00C6               	movwf	?___fttol+3
  2109  0327  3000               	movlw	0
  2110  0328  00C5               	movwf	?___fttol+2
  2111  0329  3000               	movlw	0
  2112  032A  00C4               	movwf	?___fttol+1
  2113  032B  3000               	movlw	0
  2114  032C  00C3               	movwf	?___fttol
  2115  032D  0008               	return
  2116  032E                     l1501:	
  2117  032E  3001               	movlw	1
  2118  032F                     u1305:	
  2119  032F  1003               	clrc
  2120  0330  0CCF               	rrf	___fttol@lval+3,f
  2121  0331  0CCE               	rrf	___fttol@lval+2,f
  2122  0332  0CCD               	rrf	___fttol@lval+1,f
  2123  0333  0CCC               	rrf	___fttol@lval,f
  2124  0334  3EFF               	addlw	-1
  2125  0335  1D03               	skipz
  2126  0336  2B2F               	goto	u1305
  2127  0337  3001               	movlw	1
  2128  0338  00C7               	movwf	??___fttol
  2129  0339  0847               	movf	??___fttol,w
  2130  033A  07D0               	addwf	___fttol@exp1,f
  2131  033B  1903               	btfsc	3,2
  2132  033C  2B59               	goto	l1511
  2133  033D  2B2E               	goto	l1501
  2134  033E                     l1503:	
  2135  033E  3018               	movlw	24
  2136  033F  0250               	subwf	___fttol@exp1,w
  2137  0340  1C03               	skipc
  2138  0341  2B56               	goto	l629
  2139  0342  3000               	movlw	0
  2140  0343  00C6               	movwf	?___fttol+3
  2141  0344  3000               	movlw	0
  2142  0345  00C5               	movwf	?___fttol+2
  2143  0346  3000               	movlw	0
  2144  0347  00C4               	movwf	?___fttol+1
  2145  0348  3000               	movlw	0
  2146  0349  00C3               	movwf	?___fttol
  2147  034A  0008               	return
  2148  034B                     l1509:	
  2149  034B  3001               	movlw	1
  2150  034C  00C7               	movwf	??___fttol
  2151  034D                     u1335:	
  2152  034D  1003               	clrc
  2153  034E  0DCC               	rlf	___fttol@lval,f
  2154  034F  0DCD               	rlf	___fttol@lval+1,f
  2155  0350  0DCE               	rlf	___fttol@lval+2,f
  2156  0351  0DCF               	rlf	___fttol@lval+3,f
  2157  0352  0BC7               	decfsz	??___fttol,f
  2158  0353  2B4D               	goto	u1335
  2159  0354  3001               	movlw	1
  2160  0355  02D0               	subwf	___fttol@exp1,f
  2161  0356                     l629:	
  2162  0356  0850               	movf	___fttol@exp1,w
  2163  0357  1D03               	btfss	3,2
  2164  0358  2B4B               	goto	l1509
  2165  0359                     l1511:	
  2166  0359  084B               	movf	___fttol@sign1,w
  2167  035A  1903               	btfsc	3,2
  2168  035B  2B67               	goto	l1515
  2169  035C  09CC               	comf	___fttol@lval,f
  2170  035D  09CD               	comf	___fttol@lval+1,f
  2171  035E  09CE               	comf	___fttol@lval+2,f
  2172  035F  09CF               	comf	___fttol@lval+3,f
  2173  0360  0ACC               	incf	___fttol@lval,f
  2174  0361  1903               	skipnz
  2175  0362  0ACD               	incf	___fttol@lval+1,f
  2176  0363  1903               	skipnz
  2177  0364  0ACE               	incf	___fttol@lval+2,f
  2178  0365  1903               	skipnz
  2179  0366  0ACF               	incf	___fttol@lval+3,f
  2180  0367                     l1515:	
  2181  0367  084F               	movf	___fttol@lval+3,w
  2182  0368  00C6               	movwf	?___fttol+3
  2183  0369  084E               	movf	___fttol@lval+2,w
  2184  036A  00C5               	movwf	?___fttol+2
  2185  036B  084D               	movf	___fttol@lval+1,w
  2186  036C  00C4               	movwf	?___fttol+1
  2187  036D  084C               	movf	___fttol@lval,w
  2188  036E  00C3               	movwf	?___fttol
  2189  036F  0008               	return
  2190  0370                     __end_of___fttol:	
  2191                           
  2192                           	psect	text9
  2193  0684                     __ptext9:	
  2194 ;; *************** function ___altoft *****************
  2195 ;; Defined at:
  2196 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  c               4    8[BANK0 ] long 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  sign            1   15[BANK0 ] unsigned char 
  2201 ;;  exp             1   14[BANK0 ] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  3    8[BANK0 ] float 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0, pclath, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2211 ;;      Params:         0       4       0       0       0
  2212 ;;      Locals:         0       2       0       0       0
  2213 ;;      Temps:          0       2       0       0       0
  2214 ;;      Totals:         0       8       0       0       0
  2215 ;;Total ram usage:        8 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    3
  2218 ;; This function calls:
  2219 ;;		___ftpack
  2220 ;; This function is called by:
  2221 ;;		_trunc
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function ___altoft
  2227  0684                     ___altoft:	
  2228                           
  2229                           ;incstack = 0
  2230                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2231  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0686  01AF               	clrf	___altoft@sign
  2234  0687  308E               	movlw	142
  2235  0688  00AC               	movwf	??___altoft
  2236  0689  082C               	movf	??___altoft,w
  2237  068A  00AE               	movwf	___altoft@exp
  2238  068B  1FAB               	btfss	___altoft@c+3,7
  2239  068C  2E9A               	goto	l2063
  2240  068D  09A8               	comf	___altoft@c,f
  2241  068E  09A9               	comf	___altoft@c+1,f
  2242  068F  09AA               	comf	___altoft@c+2,f
  2243  0690  09AB               	comf	___altoft@c+3,f
  2244  0691  0AA8               	incf	___altoft@c,f
  2245  0692  1903               	skipnz
  2246  0693  0AA9               	incf	___altoft@c+1,f
  2247  0694  1903               	skipnz
  2248  0695  0AAA               	incf	___altoft@c+2,f
  2249  0696  1903               	skipnz
  2250  0697  0AAB               	incf	___altoft@c+3,f
  2251  0698  01AF               	clrf	___altoft@sign
  2252  0699  0AAF               	incf	___altoft@sign,f
  2253  069A                     l2063:	
  2254  069A  30FF               	movlw	255
  2255  069B  052B               	andwf	___altoft@c+3,w
  2256  069C  1903               	btfsc	3,2
  2257  069D  2EAC               	goto	l2065
  2258  069E  3001               	movlw	1
  2259  069F                     u2305:	
  2260  069F  1003               	clrc
  2261  06A0  0CAB               	rrf	___altoft@c+3,f
  2262  06A1  0CAA               	rrf	___altoft@c+2,f
  2263  06A2  0CA9               	rrf	___altoft@c+1,f
  2264  06A3  0CA8               	rrf	___altoft@c,f
  2265  06A4  3EFF               	addlw	-1
  2266  06A5  1D03               	skipz
  2267  06A6  2E9F               	goto	u2305
  2268  06A7  3001               	movlw	1
  2269  06A8  00AC               	movwf	??___altoft
  2270  06A9  082C               	movf	??___altoft,w
  2271  06AA  07AE               	addwf	___altoft@exp,f
  2272  06AB  2E9A               	goto	l2063
  2273  06AC                     l2065:	
  2274  06AC  0828               	movf	___altoft@c,w
  2275  06AD  00A0               	movwf	___ftpack@arg
  2276  06AE  0829               	movf	___altoft@c+1,w
  2277  06AF  00A1               	movwf	___ftpack@arg+1
  2278  06B0  082A               	movf	___altoft@c+2,w
  2279  06B1  00A2               	movwf	___ftpack@arg+2
  2280  06B2  082E               	movf	___altoft@exp,w
  2281  06B3  00AC               	movwf	??___altoft
  2282  06B4  082C               	movf	??___altoft,w
  2283  06B5  00A3               	movwf	___ftpack@exp
  2284  06B6  082F               	movf	___altoft@sign,w
  2285  06B7  00AD               	movwf	??___altoft+1
  2286  06B8  082D               	movf	??___altoft+1,w
  2287  06B9  00A4               	movwf	___ftpack@sign
  2288  06BA  120A  118A  250D   	fcall	___ftpack
  2289  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  2290  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  2291  06BF  0820               	movf	?___ftpack,w
  2292  06C0  00A8               	movwf	?___altoft
  2293  06C1  0821               	movf	?___ftpack+1,w
  2294  06C2  00A9               	movwf	?___altoft+1
  2295  06C3  0822               	movf	?___ftpack+2,w
  2296  06C4  00AA               	movwf	?___altoft+2
  2297  06C5  0008               	return
  2298  06C6                     __end_of___altoft:	
  2299                           
  2300                           	psect	text10
  2301  0F6D                     __ptext10:	
  2302 ;; *************** function ___ftneg *****************
  2303 ;; Defined at:
  2304 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  f1              3   16[BANK0 ] float 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  3   16[BANK0 ] float 
  2311 ;; Registers used:
  2312 ;;		wreg
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2318 ;;      Params:         0       3       0       0       0
  2319 ;;      Locals:         0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0
  2321 ;;      Totals:         0       3       0       0       0
  2322 ;;Total ram usage:        3 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    2
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_moveDeg
  2329 ;;		_round
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           
  2334                           ;psect for function ___ftneg
  2335  0F6D                     ___ftneg:	
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in ___ftneg: [wreg]
  2339  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  2340  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  2341  0F6F  0832               	movf	___ftneg@f1+2,w
  2342  0F70  0431               	iorwf	___ftneg@f1+1,w
  2343  0F71  0430               	iorwf	___ftneg@f1,w
  2344  0F72  1903               	skipnz
  2345  0F73  0008               	return
  2346  0F74  3080               	movlw	128
  2347  0F75  06B2               	xorwf	___ftneg@f1+2,f
  2348  0F76  0008               	return
  2349  0F77                     __end_of___ftneg:	
  2350                           
  2351                           	psect	text11
  2352  0032                     __ptext11:	
  2353 ;; *************** function ___ftadd *****************
  2354 ;; Defined at:
  2355 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  f1              3   58[BANK0 ] float 
  2358 ;;  f2              3   61[BANK0 ] float 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  exp1            1   70[BANK0 ] unsigned char 
  2361 ;;  exp2            1   69[BANK0 ] unsigned char 
  2362 ;;  sign            1   68[BANK0 ] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  3   58[BANK0 ] float 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2372 ;;      Params:         0       6       0       0       0
  2373 ;;      Locals:         0       3       0       0       0
  2374 ;;      Temps:          0       4       0       0       0
  2375 ;;      Totals:         0      13       0       0       0
  2376 ;;Total ram usage:       13 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    3
  2379 ;; This function calls:
  2380 ;;		___ftpack
  2381 ;; This function is called by:
  2382 ;;		_round
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function ___ftadd
  2388  0032                     ___ftadd:	
  2389                           
  2390                           ;incstack = 0
  2391                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2392  0032  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0033  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0034  085A               	movf	___ftadd@f1,w
  2395  0035  00E0               	movwf	??___ftadd
  2396  0036  085B               	movf	___ftadd@f1+1,w
  2397  0037  00E1               	movwf	??___ftadd+1
  2398  0038  085C               	movf	___ftadd@f1+2,w
  2399  0039  00E2               	movwf	??___ftadd+2
  2400  003A  1003               	clrc
  2401  003B  0D61               	rlf	??___ftadd+1,w
  2402  003C  0D62               	rlf	??___ftadd+2,w
  2403  003D  00E3               	movwf	??___ftadd+3
  2404  003E  0863               	movf	??___ftadd+3,w
  2405  003F  00E6               	movwf	___ftadd@exp1
  2406  0040  085D               	movf	___ftadd@f2,w
  2407  0041  00E0               	movwf	??___ftadd
  2408  0042  085E               	movf	___ftadd@f2+1,w
  2409  0043  00E1               	movwf	??___ftadd+1
  2410  0044  085F               	movf	___ftadd@f2+2,w
  2411  0045  00E2               	movwf	??___ftadd+2
  2412  0046  1003               	clrc
  2413  0047  0D61               	rlf	??___ftadd+1,w
  2414  0048  0D62               	rlf	??___ftadd+2,w
  2415  0049  00E3               	movwf	??___ftadd+3
  2416  004A  0863               	movf	??___ftadd+3,w
  2417  004B  00E5               	movwf	___ftadd@exp2
  2418  004C  0866               	movf	___ftadd@exp1,w
  2419  004D  1903               	btfsc	3,2
  2420  004E  285B               	goto	l2125
  2421  004F  0865               	movf	___ftadd@exp2,w
  2422  0050  0266               	subwf	___ftadd@exp1,w
  2423  0051  1803               	skipnc
  2424  0052  2862               	goto	l2129
  2425  0053  0366               	decf	___ftadd@exp1,w
  2426  0054  3AFF               	xorlw	255
  2427  0055  0765               	addwf	___ftadd@exp2,w
  2428  0056  00E0               	movwf	??___ftadd
  2429  0057  3019               	movlw	25
  2430  0058  0260               	subwf	??___ftadd,w
  2431  0059  1C03               	skipc
  2432  005A  2862               	goto	l2129
  2433  005B                     l2125:	
  2434  005B  085D               	movf	___ftadd@f2,w
  2435  005C  00DA               	movwf	?___ftadd
  2436  005D  085E               	movf	___ftadd@f2+1,w
  2437  005E  00DB               	movwf	?___ftadd+1
  2438  005F  085F               	movf	___ftadd@f2+2,w
  2439  0060  00DC               	movwf	?___ftadd+2
  2440  0061  0008               	return
  2441  0062                     l2129:	
  2442  0062  0865               	movf	___ftadd@exp2,w
  2443  0063  1903               	btfsc	3,2
  2444  0064  0008               	return
  2445  0065  0866               	movf	___ftadd@exp1,w
  2446  0066  0265               	subwf	___ftadd@exp2,w
  2447  0067  1803               	skipnc
  2448  0068  2871               	goto	l2135
  2449  0069  0365               	decf	___ftadd@exp2,w
  2450  006A  3AFF               	xorlw	255
  2451  006B  0766               	addwf	___ftadd@exp1,w
  2452  006C  00E0               	movwf	??___ftadd
  2453  006D  3019               	movlw	25
  2454  006E  0260               	subwf	??___ftadd,w
  2455  006F  1803               	btfsc	3,0
  2456  0070  0008               	return
  2457  0071                     l2135:	
  2458  0071  3006               	movlw	6
  2459  0072  00E0               	movwf	??___ftadd
  2460  0073  0860               	movf	??___ftadd,w
  2461  0074  00E4               	movwf	___ftadd@sign
  2462  0075  1BDC               	btfsc	___ftadd@f1+2,7
  2463  0076  17E4               	bsf	___ftadd@sign,7
  2464  0077  1BDF               	btfsc	___ftadd@f2+2,7
  2465  0078  1764               	bsf	___ftadd@sign,6
  2466  0079  17DB               	bsf	___ftadd@f1+1,7
  2467  007A  30FF               	movlw	255
  2468  007B  05DA               	andwf	___ftadd@f1,f
  2469  007C  30FF               	movlw	255
  2470  007D  05DB               	andwf	___ftadd@f1+1,f
  2471  007E  3000               	movlw	0
  2472  007F  05DC               	andwf	___ftadd@f1+2,f
  2473  0080  17DE               	bsf	___ftadd@f2+1,7
  2474  0081  30FF               	movlw	255
  2475  0082  05DD               	andwf	___ftadd@f2,f
  2476  0083  30FF               	movlw	255
  2477  0084  05DE               	andwf	___ftadd@f2+1,f
  2478  0085  3000               	movlw	0
  2479  0086  05DF               	andwf	___ftadd@f2+2,f
  2480  0087  0865               	movf	___ftadd@exp2,w
  2481  0088  0266               	subwf	___ftadd@exp1,w
  2482  0089  1803               	skipnc
  2483  008A  28B1               	goto	l2157
  2484  008B                     l2147:	
  2485  008B  3001               	movlw	1
  2486  008C                     u2475:	
  2487  008C  1003               	clrc
  2488  008D  0DDD               	rlf	___ftadd@f2,f
  2489  008E  0DDE               	rlf	___ftadd@f2+1,f
  2490  008F  0DDF               	rlf	___ftadd@f2+2,f
  2491  0090  3EFF               	addlw	-1
  2492  0091  1D03               	skipz
  2493  0092  288C               	goto	u2475
  2494  0093  3001               	movlw	1
  2495  0094  02E5               	subwf	___ftadd@exp2,f
  2496  0095  0865               	movf	___ftadd@exp2,w
  2497  0096  0666               	xorwf	___ftadd@exp1,w
  2498  0097  1903               	skipnz
  2499  0098  28AC               	goto	l2155
  2500  0099  3001               	movlw	1
  2501  009A  02E4               	subwf	___ftadd@sign,f
  2502  009B  0864               	movf	___ftadd@sign,w
  2503  009C  3907               	andlw	7
  2504  009D  1903               	btfsc	3,2
  2505  009E  28AC               	goto	l2155
  2506  009F  288B               	goto	l2147
  2507  00A0                     l2153:	
  2508  00A0  3001               	movlw	1
  2509  00A1                     u2505:	
  2510  00A1  1003               	clrc
  2511  00A2  0CDC               	rrf	___ftadd@f1+2,f
  2512  00A3  0CDB               	rrf	___ftadd@f1+1,f
  2513  00A4  0CDA               	rrf	___ftadd@f1,f
  2514  00A5  3EFF               	addlw	-1
  2515  00A6  1D03               	skipz
  2516  00A7  28A1               	goto	u2505
  2517  00A8  3001               	movlw	1
  2518  00A9  00E0               	movwf	??___ftadd
  2519  00AA  0860               	movf	??___ftadd,w
  2520  00AB  07E6               	addwf	___ftadd@exp1,f
  2521  00AC                     l2155:	
  2522  00AC  0866               	movf	___ftadd@exp1,w
  2523  00AD  0665               	xorwf	___ftadd@exp2,w
  2524  00AE  1903               	btfsc	3,2
  2525  00AF  28DA               	goto	l569
  2526  00B0  28A0               	goto	l2153
  2527  00B1                     l2157:	
  2528  00B1  0866               	movf	___ftadd@exp1,w
  2529  00B2  0265               	subwf	___ftadd@exp2,w
  2530  00B3  1803               	skipnc
  2531  00B4  28DA               	goto	l569
  2532  00B5                     l2159:	
  2533  00B5  3001               	movlw	1
  2534  00B6                     u2535:	
  2535  00B6  1003               	clrc
  2536  00B7  0DDA               	rlf	___ftadd@f1,f
  2537  00B8  0DDB               	rlf	___ftadd@f1+1,f
  2538  00B9  0DDC               	rlf	___ftadd@f1+2,f
  2539  00BA  3EFF               	addlw	-1
  2540  00BB  1D03               	skipz
  2541  00BC  28B6               	goto	u2535
  2542  00BD  3001               	movlw	1
  2543  00BE  02E6               	subwf	___ftadd@exp1,f
  2544  00BF  0865               	movf	___ftadd@exp2,w
  2545  00C0  0666               	xorwf	___ftadd@exp1,w
  2546  00C1  1903               	skipnz
  2547  00C2  28D6               	goto	l2167
  2548  00C3  3001               	movlw	1
  2549  00C4  02E4               	subwf	___ftadd@sign,f
  2550  00C5  0864               	movf	___ftadd@sign,w
  2551  00C6  3907               	andlw	7
  2552  00C7  1903               	btfsc	3,2
  2553  00C8  28D6               	goto	l2167
  2554  00C9  28B5               	goto	l2159
  2555  00CA                     l2165:	
  2556  00CA  3001               	movlw	1
  2557  00CB                     u2565:	
  2558  00CB  1003               	clrc
  2559  00CC  0CDF               	rrf	___ftadd@f2+2,f
  2560  00CD  0CDE               	rrf	___ftadd@f2+1,f
  2561  00CE  0CDD               	rrf	___ftadd@f2,f
  2562  00CF  3EFF               	addlw	-1
  2563  00D0  1D03               	skipz
  2564  00D1  28CB               	goto	u2565
  2565  00D2  3001               	movlw	1
  2566  00D3  00E0               	movwf	??___ftadd
  2567  00D4  0860               	movf	??___ftadd,w
  2568  00D5  07E5               	addwf	___ftadd@exp2,f
  2569  00D6                     l2167:	
  2570  00D6  0866               	movf	___ftadd@exp1,w
  2571  00D7  0665               	xorwf	___ftadd@exp2,w
  2572  00D8  1D03               	skipz
  2573  00D9  28CA               	goto	l2165
  2574  00DA                     l569:	
  2575  00DA  1FE4               	btfss	___ftadd@sign,7
  2576  00DB  28EC               	goto	l2171
  2577  00DC  30FF               	movlw	255
  2578  00DD  06DA               	xorwf	___ftadd@f1,f
  2579  00DE  30FF               	movlw	255
  2580  00DF  06DB               	xorwf	___ftadd@f1+1,f
  2581  00E0  30FF               	movlw	255
  2582  00E1  06DC               	xorwf	___ftadd@f1+2,f
  2583  00E2  3001               	movlw	1
  2584  00E3  07DA               	addwf	___ftadd@f1,f
  2585  00E4  3000               	movlw	0
  2586  00E5  1803               	skipnc
  2587  00E6  3001               	movlw	1
  2588  00E7  07DB               	addwf	___ftadd@f1+1,f
  2589  00E8  3000               	movlw	0
  2590  00E9  1803               	skipnc
  2591  00EA  3001               	movlw	1
  2592  00EB  07DC               	addwf	___ftadd@f1+2,f
  2593  00EC                     l2171:	
  2594  00EC  1F64               	btfss	___ftadd@sign,6
  2595  00ED  28FE               	goto	l2175
  2596  00EE  30FF               	movlw	255
  2597  00EF  06DD               	xorwf	___ftadd@f2,f
  2598  00F0  30FF               	movlw	255
  2599  00F1  06DE               	xorwf	___ftadd@f2+1,f
  2600  00F2  30FF               	movlw	255
  2601  00F3  06DF               	xorwf	___ftadd@f2+2,f
  2602  00F4  3001               	movlw	1
  2603  00F5  07DD               	addwf	___ftadd@f2,f
  2604  00F6  3000               	movlw	0
  2605  00F7  1803               	skipnc
  2606  00F8  3001               	movlw	1
  2607  00F9  07DE               	addwf	___ftadd@f2+1,f
  2608  00FA  3000               	movlw	0
  2609  00FB  1803               	skipnc
  2610  00FC  3001               	movlw	1
  2611  00FD  07DF               	addwf	___ftadd@f2+2,f
  2612  00FE                     l2175:	
  2613  00FE  01E4               	clrf	___ftadd@sign
  2614  00FF  085A               	movf	___ftadd@f1,w
  2615  0100  07DD               	addwf	___ftadd@f2,f
  2616  0101  085B               	movf	___ftadd@f1+1,w
  2617  0102  1103               	clrz
  2618  0103  1803               	skipnc
  2619  0104  0A5B               	incf	___ftadd@f1+1,w
  2620  0105  1D03               	btfss	3,2
  2621  0106  07DE               	addwf	___ftadd@f2+1,f
  2622  0107  085C               	movf	___ftadd@f1+2,w
  2623  0108  1103               	clrz
  2624  0109  1803               	skipnc
  2625  010A  0A5C               	incf	___ftadd@f1+2,w
  2626  010B  1D03               	btfss	3,2
  2627  010C  07DF               	addwf	___ftadd@f2+2,f
  2628  010D  1FDF               	btfss	___ftadd@f2+2,7
  2629  010E  2921               	goto	l2185
  2630  010F  30FF               	movlw	255
  2631  0110  06DD               	xorwf	___ftadd@f2,f
  2632  0111  30FF               	movlw	255
  2633  0112  06DE               	xorwf	___ftadd@f2+1,f
  2634  0113  30FF               	movlw	255
  2635  0114  06DF               	xorwf	___ftadd@f2+2,f
  2636  0115  3001               	movlw	1
  2637  0116  07DD               	addwf	___ftadd@f2,f
  2638  0117  3000               	movlw	0
  2639  0118  1803               	skipnc
  2640  0119  3001               	movlw	1
  2641  011A  07DE               	addwf	___ftadd@f2+1,f
  2642  011B  3000               	movlw	0
  2643  011C  1803               	skipnc
  2644  011D  3001               	movlw	1
  2645  011E  07DF               	addwf	___ftadd@f2+2,f
  2646  011F  01E4               	clrf	___ftadd@sign
  2647  0120  0AE4               	incf	___ftadd@sign,f
  2648  0121                     l2185:	
  2649  0121  085D               	movf	___ftadd@f2,w
  2650  0122  00A0               	movwf	___ftpack@arg
  2651  0123  085E               	movf	___ftadd@f2+1,w
  2652  0124  00A1               	movwf	___ftpack@arg+1
  2653  0125  085F               	movf	___ftadd@f2+2,w
  2654  0126  00A2               	movwf	___ftpack@arg+2
  2655  0127  0866               	movf	___ftadd@exp1,w
  2656  0128  00E0               	movwf	??___ftadd
  2657  0129  0860               	movf	??___ftadd,w
  2658  012A  00A3               	movwf	___ftpack@exp
  2659  012B  0864               	movf	___ftadd@sign,w
  2660  012C  00E1               	movwf	??___ftadd+1
  2661  012D  0861               	movf	??___ftadd+1,w
  2662  012E  00A4               	movwf	___ftpack@sign
  2663  012F  120A  118A  250D   	fcall	___ftpack
  2664  0132  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0133  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0134  0820               	movf	?___ftpack,w
  2667  0135  00DA               	movwf	?___ftadd
  2668  0136  0821               	movf	?___ftpack+1,w
  2669  0137  00DB               	movwf	?___ftadd+1
  2670  0138  0822               	movf	?___ftpack+2,w
  2671  0139  00DC               	movwf	?___ftadd+2
  2672  013A  0008               	return
  2673  013B                     __end_of___ftadd:	
  2674                           
  2675                           	psect	text12
  2676  0370                     __ptext12:	
  2677 ;; *************** function _move *****************
  2678 ;; Defined at:
  2679 ;;		line 25 in file "motor.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  steps           1    wreg     unsigned char 
  2682 ;;  direction       1   15[BANK0 ] unsigned char 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  steps           1   18[BANK0 ] unsigned char 
  2685 ;;  i               1   19[BANK0 ] unsigned char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2695 ;;      Params:         0       1       0       0       0
  2696 ;;      Locals:         0       2       0       0       0
  2697 ;;      Temps:          0       2       0       0       0
  2698 ;;      Totals:         0       5       0       0       0
  2699 ;;Total ram usage:        5 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    4
  2702 ;; This function calls:
  2703 ;;		_lcdSetCursor
  2704 ;;		_lcdWriteToDigitBCD
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;;		_moveDeg
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           
  2712                           ;psect for function _move
  2713  0370                     _move:	
  2714                           
  2715                           ;incstack = 0
  2716                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2717                           ;move@steps stored from wreg
  2718  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0372  00B2               	movwf	move@steps
  2721                           
  2722                           ;motor.c: 26: for(char i = 0; i<steps; i++){
  2723  0373  01B3               	clrf	move@i
  2724  0374                     l2263:	
  2725  0374  0832               	movf	move@steps,w
  2726  0375  0233               	subwf	move@i,w
  2727  0376  1803               	btfsc	3,0
  2728  0377  0008               	return
  2729                           
  2730                           ;motor.c: 27: if(cstep == 7 && direction == 1){
  2731  0378  3007               	movlw	7
  2732  0379  0677               	xorwf	_cstep,w
  2733  037A  1D03               	btfss	3,2
  2734  037B  2B87               	goto	l2225
  2735  037C  032F               	decf	move@direction,w
  2736  037D  1D03               	btfss	3,2
  2737  037E  2B87               	goto	l2225
  2738                           
  2739                           ;motor.c: 28: PORTC = halfSteps[0];
  2740  037F  1683               	bsf	3,5	;RP0=1, select bank1
  2741  0380  1303               	bcf	3,6	;RP1=0, select bank1
  2742  0381  0820               	movf	_halfSteps^(0+128),w
  2743  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2745  0384  0087               	movwf	7	;volatile
  2746                           
  2747                           ;motor.c: 29: cstep = 0;
  2748  0385  01F7               	clrf	_cstep
  2749                           
  2750                           ;motor.c: 30: }
  2751  0386  2BBF               	goto	l2247
  2752  0387                     l2225:	
  2753                           
  2754                           ;motor.c: 31: else if(cstep == 0 && direction == 0){
  2755  0387  0877               	movf	_cstep,w
  2756  0388  1D03               	btfss	3,2
  2757  0389  2B98               	goto	l136
  2758  038A  082F               	movf	move@direction,w
  2759  038B  1D03               	btfss	3,2
  2760  038C  2B98               	goto	l136
  2761                           
  2762                           ;motor.c: 32: PORTC = halfSteps[7];
  2763  038D  1683               	bsf	3,5	;RP0=1, select bank1
  2764  038E  1303               	bcf	3,6	;RP1=0, select bank1
  2765  038F  082E               	movf	(_halfSteps^(0+128)+14),w
  2766  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2768  0392  0087               	movwf	7	;volatile
  2769                           
  2770                           ;motor.c: 33: cstep = 7;
  2771  0393  3007               	movlw	7
  2772  0394  00B0               	movwf	??_move
  2773  0395  0830               	movf	??_move,w
  2774  0396  00F7               	movwf	_cstep
  2775                           
  2776                           ;motor.c: 34: }
  2777  0397  2BBF               	goto	l2247
  2778  0398                     l136:	
  2779                           
  2780                           ;motor.c: 35: else if (cstep >= 0 && cstep <= 7){
  2781  0398  1BF7               	btfsc	_cstep,7
  2782  0399  2BBE               	goto	l2245
  2783  039A  0877               	movf	_cstep,w
  2784  039B  3A80               	xorlw	128
  2785  039C  3E78               	addlw	-136
  2786  039D  1803               	skipnc
  2787  039E  2BBE               	goto	l2245
  2788                           
  2789                           ;motor.c: 36: if(direction == 1){
  2790  039F  032F               	decf	move@direction,w
  2791  03A0  1D03               	btfss	3,2
  2792  03A1  2BAD               	goto	l2239
  2793                           
  2794                           ;motor.c: 37: PORTC = halfSteps[cstep+1];
  2795  03A2  0877               	movf	_cstep,w
  2796  03A3  00B0               	movwf	??_move
  2797  03A4  0730               	addwf	??_move,w
  2798  03A5  3E02               	addlw	2
  2799  03A6  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2800  03A7  0084               	movwf	4
  2801  03A8  1383               	bcf	3,7	;select IRP bank1
  2802  03A9  0800               	movf	0,w
  2803  03AA  0087               	movwf	7	;volatile
  2804                           
  2805                           ;motor.c: 38: cstep++;
  2806  03AB  3001               	movlw	1
  2807  03AC  2BBA               	goto	L3
  2808  03AD                     l2239:	
  2809                           ;motor.c: 39: }
  2810                           
  2811                           
  2812                           ;motor.c: 40: else if(direction == 0){
  2813  03AD  082F               	movf	move@direction,w
  2814  03AE  1D03               	btfss	3,2
  2815  03AF  2BBF               	goto	l2247
  2816                           
  2817                           ;motor.c: 41: PORTC = halfSteps[cstep-1];
  2818  03B0  0877               	movf	_cstep,w
  2819  03B1  00B0               	movwf	??_move
  2820  03B2  0730               	addwf	??_move,w
  2821  03B3  3EFE               	addlw	254
  2822  03B4  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2823  03B5  0084               	movwf	4
  2824  03B6  1383               	bcf	3,7	;select IRP bank1
  2825  03B7  0800               	movf	0,w
  2826  03B8  0087               	movwf	7	;volatile
  2827                           
  2828                           ;motor.c: 42: cstep--;
  2829  03B9  30FF               	movlw	255
  2830  03BA                     L3:	
  2831  03BA  00B0               	movwf	??_move
  2832  03BB  0830               	movf	??_move,w
  2833  03BC  07F7               	addwf	_cstep,f
  2834                           
  2835                           ;motor.c: 43: }
  2836                           ;motor.c: 45: }
  2837  03BD  2BBF               	goto	l2247
  2838  03BE                     l2245:	
  2839                           
  2840                           ;motor.c: 46: else{
  2841                           ;motor.c: 47: PORTC = 0x00;
  2842  03BE  0187               	clrf	7	;volatile
  2843  03BF                     l2247:	
  2844                           
  2845                           ;motor.c: 48: }
  2846                           ;motor.c: 49: if(direction){
  2847  03BF  082F               	movf	move@direction,w
  2848  03C0  1903               	btfsc	3,2
  2849  03C1  2BCA               	goto	l2255
  2850                           
  2851                           ;motor.c: 50: nrOfSteps--;
  2852  03C2  30FF               	movlw	255
  2853  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  2854  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  2855  03C5  07C9               	addwf	_nrOfSteps^(0+128),f
  2856  03C6  1803               	skipnc
  2857  03C7  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2858  03C8  30FF               	movlw	255
  2859  03C9  2BD1               	goto	L4
  2860  03CA                     l2255:	
  2861                           ;motor.c: 53: }
  2862                           
  2863                           ;motor.c: 52: lcdWriteToDigitBCD(nrOfSteps);
  2864                           
  2865                           ;motor.c: 51: lcdSetCursor(0x40);
  2866                           
  2867                           
  2868                           ;motor.c: 54: else{
  2869                           ;motor.c: 55: nrOfSteps++;
  2870  03CA  3001               	movlw	1
  2871  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  2872  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  2873  03CD  07C9               	addwf	_nrOfSteps^(0+128),f
  2874  03CE  1803               	skipnc
  2875  03CF  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2876  03D0  3000               	movlw	0
  2877  03D1                     L4:	
  2878  03D1  07CA               	addwf	(_nrOfSteps+1)^(0+128),f
  2879                           
  2880                           ;motor.c: 56: lcdSetCursor(0x40);
  2881  03D2  3040               	movlw	64
  2882  03D3  120A  158A  2764  120A  118A  	fcall	_lcdSetCursor
  2883                           
  2884                           ;motor.c: 57: lcdWriteToDigitBCD(nrOfSteps);
  2885  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  2886  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  2887  03DA  084A               	movf	(_nrOfSteps+1)^(0+128),w
  2888  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2889  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2890  03DD  00A7               	movwf	lcdWriteToDigitBCD@data+1
  2891  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2892  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  2893  03E0  0849               	movf	_nrOfSteps^(0+128),w
  2894  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2895  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2896  03E3  00A6               	movwf	lcdWriteToDigitBCD@data
  2897  03E4  120A  118A  2485  120A  118A  	fcall	_lcdWriteToDigitBCD
  2898                           
  2899                           ;motor.c: 58: }
  2900                           ;motor.c: 59: _delay((unsigned long)((20)*(20000000/4000.0)));
  2901  03E9  3082               	movlw	130
  2902  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2903  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2904  03EC  00B1               	movwf	??_move+1
  2905  03ED  30DD               	movlw	221
  2906  03EE  00B0               	movwf	??_move
  2907  03EF                     u2957:	
  2908  03EF  0BB0               	decfsz	??_move,f
  2909  03F0  2BEF               	goto	u2957
  2910  03F1  0BB1               	decfsz	??_move+1,f
  2911  03F2  2BEF               	goto	u2957
  2912  03F3  2BF4               	nop2
  2913  03F4  3001               	movlw	1
  2914  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2915  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2916  03F7  00B0               	movwf	??_move
  2917  03F8  0830               	movf	??_move,w
  2918  03F9  07B3               	addwf	move@i,f
  2919  03FA  2B74               	goto	l2263
  2920  03FB                     __end_of_move:	
  2921                           
  2922                           	psect	text13
  2923  05DB                     __ptext13:	
  2924 ;; *************** function ___ftge *****************
  2925 ;; Defined at:
  2926 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  ff1             3    0[BANK0 ] float 
  2929 ;;  ff2             3    3[BANK0 ] float 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;		None               void
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2941 ;;      Params:         0       6       0       0       0
  2942 ;;      Locals:         0       0       0       0       0
  2943 ;;      Temps:          0       6       0       0       0
  2944 ;;      Totals:         0      12       0       0       0
  2945 ;;Total ram usage:       12 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    2
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_moveDeg
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function ___ftge
  2957  05DB                     ___ftge:	
  2958                           
  2959                           ;incstack = 0
  2960                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2961  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2962  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  2963  05DD  1FA2               	btfss	___ftge@ff1+2,7
  2964  05DE  2E04               	goto	l1769
  2965  05DF  3000               	movlw	0
  2966  05E0  00A6               	movwf	??___ftge
  2967  05E1  3000               	movlw	0
  2968  05E2  00A7               	movwf	??___ftge+1
  2969  05E3  3080               	movlw	128
  2970  05E4  00A8               	movwf	??___ftge+2
  2971  05E5  0920               	comf	___ftge@ff1,w
  2972  05E6  00A9               	movwf	??___ftge+3
  2973  05E7  0921               	comf	___ftge@ff1+1,w
  2974  05E8  00AA               	movwf	??___ftge+4
  2975  05E9  0922               	comf	___ftge@ff1+2,w
  2976  05EA  00AB               	movwf	??___ftge+5
  2977  05EB  0AA9               	incf	??___ftge+3,f
  2978  05EC  1903               	skipnz
  2979  05ED  0AAA               	incf	??___ftge+4,f
  2980  05EE  1903               	skipnz
  2981  05EF  0AAB               	incf	??___ftge+5,f
  2982  05F0  0829               	movf	??___ftge+3,w
  2983  05F1  07A6               	addwf	??___ftge,f
  2984  05F2  082A               	movf	??___ftge+4,w
  2985  05F3  1803               	skipnc
  2986  05F4  0F2A               	incfsz	??___ftge+4,w
  2987  05F5  2DF7               	goto	u1881
  2988  05F6  2DF8               	goto	u1882
  2989  05F7                     u1881:	
  2990  05F7  07A7               	addwf	??___ftge+1,f
  2991  05F8                     u1882:	
  2992  05F8  082B               	movf	??___ftge+5,w
  2993  05F9  1803               	skipnc
  2994  05FA  0F2B               	incfsz	??___ftge+5,w
  2995  05FB  2DFD               	goto	u1883
  2996  05FC  2DFE               	goto	u1884
  2997  05FD                     u1883:	
  2998  05FD  07A8               	addwf	??___ftge+2,f
  2999  05FE                     u1884:	
  3000  05FE  0826               	movf	??___ftge,w
  3001  05FF  00A0               	movwf	___ftge@ff1
  3002  0600  0827               	movf	??___ftge+1,w
  3003  0601  00A1               	movwf	___ftge@ff1+1
  3004  0602  0828               	movf	??___ftge+2,w
  3005  0603  00A2               	movwf	___ftge@ff1+2
  3006  0604                     l1769:	
  3007  0604  1FA5               	btfss	___ftge@ff2+2,7
  3008  0605  2E2B               	goto	l1773
  3009  0606  3000               	movlw	0
  3010  0607  00A6               	movwf	??___ftge
  3011  0608  3000               	movlw	0
  3012  0609  00A7               	movwf	??___ftge+1
  3013  060A  3080               	movlw	128
  3014  060B  00A8               	movwf	??___ftge+2
  3015  060C  0923               	comf	___ftge@ff2,w
  3016  060D  00A9               	movwf	??___ftge+3
  3017  060E  0924               	comf	___ftge@ff2+1,w
  3018  060F  00AA               	movwf	??___ftge+4
  3019  0610  0925               	comf	___ftge@ff2+2,w
  3020  0611  00AB               	movwf	??___ftge+5
  3021  0612  0AA9               	incf	??___ftge+3,f
  3022  0613  1903               	skipnz
  3023  0614  0AAA               	incf	??___ftge+4,f
  3024  0615  1903               	skipnz
  3025  0616  0AAB               	incf	??___ftge+5,f
  3026  0617  0829               	movf	??___ftge+3,w
  3027  0618  07A6               	addwf	??___ftge,f
  3028  0619  082A               	movf	??___ftge+4,w
  3029  061A  1803               	skipnc
  3030  061B  0F2A               	incfsz	??___ftge+4,w
  3031  061C  2E1E               	goto	u1901
  3032  061D  2E1F               	goto	u1902
  3033  061E                     u1901:	
  3034  061E  07A7               	addwf	??___ftge+1,f
  3035  061F                     u1902:	
  3036  061F  082B               	movf	??___ftge+5,w
  3037  0620  1803               	skipnc
  3038  0621  0F2B               	incfsz	??___ftge+5,w
  3039  0622  2E24               	goto	u1903
  3040  0623  2E25               	goto	u1904
  3041  0624                     u1903:	
  3042  0624  07A8               	addwf	??___ftge+2,f
  3043  0625                     u1904:	
  3044  0625  0826               	movf	??___ftge,w
  3045  0626  00A3               	movwf	___ftge@ff2
  3046  0627  0827               	movf	??___ftge+1,w
  3047  0628  00A4               	movwf	___ftge@ff2+1
  3048  0629  0828               	movf	??___ftge+2,w
  3049  062A  00A5               	movwf	___ftge@ff2+2
  3050  062B                     l1773:	
  3051  062B  3080               	movlw	128
  3052  062C  06A2               	xorwf	___ftge@ff1+2,f
  3053  062D  3080               	movlw	128
  3054  062E  06A5               	xorwf	___ftge@ff2+2,f
  3055  062F  0825               	movf	___ftge@ff2+2,w
  3056  0630  0222               	subwf	___ftge@ff1+2,w
  3057  0631  1D03               	skipz
  3058  0632  0008               	return
  3059  0633  0824               	movf	___ftge@ff2+1,w
  3060  0634  0221               	subwf	___ftge@ff1+1,w
  3061  0635  1D03               	skipz
  3062  0636  0008               	return
  3063  0637  0823               	movf	___ftge@ff2,w
  3064  0638  0220               	subwf	___ftge@ff1,w
  3065  0639  0008               	return
  3066  063A                     __end_of___ftge:	
  3067                           
  3068                           	psect	text14
  3069  022A                     __ptext14:	
  3070 ;; *************** function ___ftdiv *****************
  3071 ;; Defined at:
  3072 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  f2              3   19[BANK0 ] float 
  3075 ;;  f1              3   22[BANK0 ] float 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  f3              3   30[BANK0 ] float 
  3078 ;;  sign            1   34[BANK0 ] unsigned char 
  3079 ;;  exp             1   33[BANK0 ] unsigned char 
  3080 ;;  cntr            1   29[BANK0 ] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  3   19[BANK0 ] float 
  3083 ;; Registers used:
  3084 ;;		wreg, status,2, status,0, pclath, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3090 ;;      Params:         0       6       0       0       0
  3091 ;;      Locals:         0       6       0       0       0
  3092 ;;      Temps:          0       4       0       0       0
  3093 ;;      Totals:         0      16       0       0       0
  3094 ;;Total ram usage:       16 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    3
  3097 ;; This function calls:
  3098 ;;		___ftpack
  3099 ;; This function is called by:
  3100 ;;		_moveDeg
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function ___ftdiv
  3106  022A                     ___ftdiv:	
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3110  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3111  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3112  022C  0836               	movf	___ftdiv@f1,w
  3113  022D  00B9               	movwf	??___ftdiv
  3114  022E  0837               	movf	___ftdiv@f1+1,w
  3115  022F  00BA               	movwf	??___ftdiv+1
  3116  0230  0838               	movf	___ftdiv@f1+2,w
  3117  0231  00BB               	movwf	??___ftdiv+2
  3118  0232  1003               	clrc
  3119  0233  0D3A               	rlf	??___ftdiv+1,w
  3120  0234  0D3B               	rlf	??___ftdiv+2,w
  3121  0235  00BC               	movwf	??___ftdiv+3
  3122  0236  083C               	movf	??___ftdiv+3,w
  3123  0237  00C1               	movwf	___ftdiv@exp
  3124  0238  0841               	movf	___ftdiv@exp,w
  3125  0239  1D03               	btfss	3,2
  3126  023A  2A42               	goto	l2279
  3127  023B  3000               	movlw	0
  3128  023C  00B3               	movwf	?___ftdiv
  3129  023D  3000               	movlw	0
  3130  023E  00B4               	movwf	?___ftdiv+1
  3131  023F  3000               	movlw	0
  3132  0240  00B5               	movwf	?___ftdiv+2
  3133  0241  0008               	return
  3134  0242                     l2279:	
  3135  0242  0833               	movf	___ftdiv@f2,w
  3136  0243  00B9               	movwf	??___ftdiv
  3137  0244  0834               	movf	___ftdiv@f2+1,w
  3138  0245  00BA               	movwf	??___ftdiv+1
  3139  0246  0835               	movf	___ftdiv@f2+2,w
  3140  0247  00BB               	movwf	??___ftdiv+2
  3141  0248  1003               	clrc
  3142  0249  0D3A               	rlf	??___ftdiv+1,w
  3143  024A  0D3B               	rlf	??___ftdiv+2,w
  3144  024B  00BC               	movwf	??___ftdiv+3
  3145  024C  083C               	movf	??___ftdiv+3,w
  3146  024D  00C2               	movwf	___ftdiv@sign
  3147  024E  0842               	movf	___ftdiv@sign,w
  3148  024F  1D03               	btfss	3,2
  3149  0250  2A58               	goto	l2285
  3150  0251  3000               	movlw	0
  3151  0252  00B3               	movwf	?___ftdiv
  3152  0253  3000               	movlw	0
  3153  0254  00B4               	movwf	?___ftdiv+1
  3154  0255  3000               	movlw	0
  3155  0256  00B5               	movwf	?___ftdiv+2
  3156  0257  0008               	return
  3157  0258                     l2285:	
  3158  0258  3000               	movlw	0
  3159  0259  00BE               	movwf	___ftdiv@f3
  3160  025A  3000               	movlw	0
  3161  025B  00BF               	movwf	___ftdiv@f3+1
  3162  025C  3000               	movlw	0
  3163  025D  00C0               	movwf	___ftdiv@f3+2
  3164  025E  3089               	movlw	137
  3165  025F  0742               	addwf	___ftdiv@sign,w
  3166  0260  00B9               	movwf	??___ftdiv
  3167  0261  0839               	movf	??___ftdiv,w
  3168  0262  02C1               	subwf	___ftdiv@exp,f
  3169  0263  0836               	movf	___ftdiv@f1,w
  3170  0264  00B9               	movwf	??___ftdiv
  3171  0265  0837               	movf	___ftdiv@f1+1,w
  3172  0266  00BA               	movwf	??___ftdiv+1
  3173  0267  0838               	movf	___ftdiv@f1+2,w
  3174  0268  00BB               	movwf	??___ftdiv+2
  3175  0269  3010               	movlw	16
  3176  026A                     u2775:	
  3177  026A  1003               	clrc
  3178  026B  0CBB               	rrf	??___ftdiv+2,f
  3179  026C  0CBA               	rrf	??___ftdiv+1,f
  3180  026D  0CB9               	rrf	??___ftdiv,f
  3181  026E  3EFF               	addlw	-1
  3182  026F  1D03               	skipz
  3183  0270  2A6A               	goto	u2775
  3184  0271  0839               	movf	??___ftdiv,w
  3185  0272  00BC               	movwf	??___ftdiv+3
  3186  0273  083C               	movf	??___ftdiv+3,w
  3187  0274  00C2               	movwf	___ftdiv@sign
  3188  0275  0833               	movf	___ftdiv@f2,w
  3189  0276  00B9               	movwf	??___ftdiv
  3190  0277  0834               	movf	___ftdiv@f2+1,w
  3191  0278  00BA               	movwf	??___ftdiv+1
  3192  0279  0835               	movf	___ftdiv@f2+2,w
  3193  027A  00BB               	movwf	??___ftdiv+2
  3194  027B  3010               	movlw	16
  3195  027C                     u2785:	
  3196  027C  1003               	clrc
  3197  027D  0CBB               	rrf	??___ftdiv+2,f
  3198  027E  0CBA               	rrf	??___ftdiv+1,f
  3199  027F  0CB9               	rrf	??___ftdiv,f
  3200  0280  3EFF               	addlw	-1
  3201  0281  1D03               	skipz
  3202  0282  2A7C               	goto	u2785
  3203  0283  0839               	movf	??___ftdiv,w
  3204  0284  00BC               	movwf	??___ftdiv+3
  3205  0285  083C               	movf	??___ftdiv+3,w
  3206  0286  06C2               	xorwf	___ftdiv@sign,f
  3207  0287  3080               	movlw	128
  3208  0288  00B9               	movwf	??___ftdiv
  3209  0289  0839               	movf	??___ftdiv,w
  3210  028A  05C2               	andwf	___ftdiv@sign,f
  3211  028B  17B7               	bsf	___ftdiv@f1+1,7
  3212  028C  30FF               	movlw	255
  3213  028D  05B6               	andwf	___ftdiv@f1,f
  3214  028E  30FF               	movlw	255
  3215  028F  05B7               	andwf	___ftdiv@f1+1,f
  3216  0290  3000               	movlw	0
  3217  0291  05B8               	andwf	___ftdiv@f1+2,f
  3218  0292  17B4               	bsf	___ftdiv@f2+1,7
  3219  0293  30FF               	movlw	255
  3220  0294  05B3               	andwf	___ftdiv@f2,f
  3221  0295  30FF               	movlw	255
  3222  0296  05B4               	andwf	___ftdiv@f2+1,f
  3223  0297  3000               	movlw	0
  3224  0298  05B5               	andwf	___ftdiv@f2+2,f
  3225  0299  3018               	movlw	24
  3226  029A  00B9               	movwf	??___ftdiv
  3227  029B  0839               	movf	??___ftdiv,w
  3228  029C  00BD               	movwf	___ftdiv@cntr
  3229  029D                     l2299:	
  3230  029D  3001               	movlw	1
  3231  029E                     u2795:	
  3232  029E  1003               	clrc
  3233  029F  0DBE               	rlf	___ftdiv@f3,f
  3234  02A0  0DBF               	rlf	___ftdiv@f3+1,f
  3235  02A1  0DC0               	rlf	___ftdiv@f3+2,f
  3236  02A2  3EFF               	addlw	-1
  3237  02A3  1D03               	skipz
  3238  02A4  2A9E               	goto	u2795
  3239  02A5  0835               	movf	___ftdiv@f2+2,w
  3240  02A6  0238               	subwf	___ftdiv@f1+2,w
  3241  02A7  1D03               	skipz
  3242  02A8  2AAF               	goto	u2805
  3243  02A9  0834               	movf	___ftdiv@f2+1,w
  3244  02AA  0237               	subwf	___ftdiv@f1+1,w
  3245  02AB  1D03               	skipz
  3246  02AC  2AAF               	goto	u2805
  3247  02AD  0833               	movf	___ftdiv@f2,w
  3248  02AE  0236               	subwf	___ftdiv@f1,w
  3249  02AF                     u2805:	
  3250  02AF  1C03               	skipc
  3251  02B0  2ABC               	goto	l2307
  3252  02B1  0833               	movf	___ftdiv@f2,w
  3253  02B2  02B6               	subwf	___ftdiv@f1,f
  3254  02B3  0834               	movf	___ftdiv@f2+1,w
  3255  02B4  1C03               	skipc
  3256  02B5  0F34               	incfsz	___ftdiv@f2+1,w
  3257  02B6  02B7               	subwf	___ftdiv@f1+1,f
  3258  02B7  0835               	movf	___ftdiv@f2+2,w
  3259  02B8  1C03               	skipc
  3260  02B9  0A35               	incf	___ftdiv@f2+2,w
  3261  02BA  02B8               	subwf	___ftdiv@f1+2,f
  3262  02BB  143E               	bsf	___ftdiv@f3,0
  3263  02BC                     l2307:	
  3264  02BC  3001               	movlw	1
  3265  02BD                     u2815:	
  3266  02BD  1003               	clrc
  3267  02BE  0DB6               	rlf	___ftdiv@f1,f
  3268  02BF  0DB7               	rlf	___ftdiv@f1+1,f
  3269  02C0  0DB8               	rlf	___ftdiv@f1+2,f
  3270  02C1  3EFF               	addlw	-1
  3271  02C2  1D03               	skipz
  3272  02C3  2ABD               	goto	u2815
  3273  02C4  3001               	movlw	1
  3274  02C5  02BD               	subwf	___ftdiv@cntr,f
  3275  02C6  1D03               	btfss	3,2
  3276  02C7  2A9D               	goto	l2299
  3277  02C8  083E               	movf	___ftdiv@f3,w
  3278  02C9  00A0               	movwf	___ftpack@arg
  3279  02CA  083F               	movf	___ftdiv@f3+1,w
  3280  02CB  00A1               	movwf	___ftpack@arg+1
  3281  02CC  0840               	movf	___ftdiv@f3+2,w
  3282  02CD  00A2               	movwf	___ftpack@arg+2
  3283  02CE  0841               	movf	___ftdiv@exp,w
  3284  02CF  00B9               	movwf	??___ftdiv
  3285  02D0  0839               	movf	??___ftdiv,w
  3286  02D1  00A3               	movwf	___ftpack@exp
  3287  02D2  0842               	movf	___ftdiv@sign,w
  3288  02D3  00BA               	movwf	??___ftdiv+1
  3289  02D4  083A               	movf	??___ftdiv+1,w
  3290  02D5  00A4               	movwf	___ftpack@sign
  3291  02D6  120A  118A  250D   	fcall	___ftpack
  3292  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  3293  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  3294  02DB  0820               	movf	?___ftpack,w
  3295  02DC  00B3               	movwf	?___ftdiv
  3296  02DD  0821               	movf	?___ftpack+1,w
  3297  02DE  00B4               	movwf	?___ftdiv+1
  3298  02DF  0822               	movf	?___ftpack+2,w
  3299  02E0  00B5               	movwf	?___ftdiv+2
  3300  02E1  0008               	return
  3301  02E2                     __end_of___ftdiv:	
  3302                           
  3303                           	psect	text15
  3304  050D                     __ptext15:	
  3305 ;; *************** function ___ftpack *****************
  3306 ;; Defined at:
  3307 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  arg             3    0[BANK0 ] unsigned um
  3310 ;;  exp             1    3[BANK0 ] unsigned char 
  3311 ;;  sign            1    4[BANK0 ] unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  3    0[BANK0 ] float 
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3323 ;;      Params:         0       5       0       0       0
  3324 ;;      Locals:         0       0       0       0       0
  3325 ;;      Temps:          0       3       0       0       0
  3326 ;;      Totals:         0       8       0       0       0
  3327 ;;Total ram usage:        8 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    2
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		___altoft
  3334 ;;		___ftadd
  3335 ;;		___ftdiv
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           
  3340                           ;psect for function ___ftpack
  3341  050D                     ___ftpack:	
  3342                           
  3343                           ;incstack = 0
  3344                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3345  050D  1283               	bcf	3,5	;RP0=0, select bank0
  3346  050E  1303               	bcf	3,6	;RP1=0, select bank0
  3347  050F  0823               	movf	___ftpack@exp,w
  3348  0510  1903               	btfsc	3,2
  3349  0511  2D17               	goto	l1995
  3350  0512  0822               	movf	___ftpack@arg+2,w
  3351  0513  0421               	iorwf	___ftpack@arg+1,w
  3352  0514  0420               	iorwf	___ftpack@arg,w
  3353  0515  1D03               	skipz
  3354  0516  2D2A               	goto	l2001
  3355  0517                     l1995:	
  3356  0517  3000               	movlw	0
  3357  0518  00A0               	movwf	?___ftpack
  3358  0519  3000               	movlw	0
  3359  051A  00A1               	movwf	?___ftpack+1
  3360  051B  3000               	movlw	0
  3361  051C  00A2               	movwf	?___ftpack+2
  3362  051D  0008               	return
  3363  051E                     l1999:	
  3364  051E  3001               	movlw	1
  3365  051F  00A5               	movwf	??___ftpack
  3366  0520  0825               	movf	??___ftpack,w
  3367  0521  07A3               	addwf	___ftpack@exp,f
  3368  0522  3001               	movlw	1
  3369  0523                     u2155:	
  3370  0523  1003               	clrc
  3371  0524  0CA2               	rrf	___ftpack@arg+2,f
  3372  0525  0CA1               	rrf	___ftpack@arg+1,f
  3373  0526  0CA0               	rrf	___ftpack@arg,f
  3374  0527  3EFF               	addlw	-1
  3375  0528  1D03               	skipz
  3376  0529  2D23               	goto	u2155
  3377  052A                     l2001:	
  3378  052A  30FE               	movlw	254
  3379  052B  0522               	andwf	___ftpack@arg+2,w
  3380  052C  1903               	btfsc	3,2
  3381  052D  2D45               	goto	l538
  3382  052E  2D1E               	goto	l1999
  3383  052F                     l2003:	
  3384  052F  3001               	movlw	1
  3385  0530  00A5               	movwf	??___ftpack
  3386  0531  0825               	movf	??___ftpack,w
  3387  0532  07A3               	addwf	___ftpack@exp,f
  3388  0533  3001               	movlw	1
  3389  0534  07A0               	addwf	___ftpack@arg,f
  3390  0535  3000               	movlw	0
  3391  0536  1803               	skipnc
  3392  0537  3001               	movlw	1
  3393  0538  07A1               	addwf	___ftpack@arg+1,f
  3394  0539  3000               	movlw	0
  3395  053A  1803               	skipnc
  3396  053B  3001               	movlw	1
  3397  053C  07A2               	addwf	___ftpack@arg+2,f
  3398  053D  3001               	movlw	1
  3399  053E                     u2175:	
  3400  053E  1003               	clrc
  3401  053F  0CA2               	rrf	___ftpack@arg+2,f
  3402  0540  0CA1               	rrf	___ftpack@arg+1,f
  3403  0541  0CA0               	rrf	___ftpack@arg,f
  3404  0542  3EFF               	addlw	-1
  3405  0543  1D03               	skipz
  3406  0544  2D3E               	goto	u2175
  3407  0545                     l538:	
  3408  0545  30FF               	movlw	255
  3409  0546  0522               	andwf	___ftpack@arg+2,w
  3410  0547  1903               	btfsc	3,2
  3411  0548  2D54               	goto	l2011
  3412  0549  2D2F               	goto	l2003
  3413  054A                     l2009:	
  3414  054A  3001               	movlw	1
  3415  054B  02A3               	subwf	___ftpack@exp,f
  3416  054C  3001               	movlw	1
  3417  054D                     u2195:	
  3418  054D  1003               	clrc
  3419  054E  0DA0               	rlf	___ftpack@arg,f
  3420  054F  0DA1               	rlf	___ftpack@arg+1,f
  3421  0550  0DA2               	rlf	___ftpack@arg+2,f
  3422  0551  3EFF               	addlw	-1
  3423  0552  1D03               	skipz
  3424  0553  2D4D               	goto	u2195
  3425  0554                     l2011:	
  3426  0554  1BA1               	btfsc	___ftpack@arg+1,7
  3427  0555  2D5A               	goto	l545
  3428  0556  3002               	movlw	2
  3429  0557  0223               	subwf	___ftpack@exp,w
  3430  0558  1803               	skipnc
  3431  0559  2D4A               	goto	l2009
  3432  055A                     l545:	
  3433  055A  1823               	btfsc	___ftpack@exp,0
  3434  055B  2D62               	goto	l546
  3435  055C  30FF               	movlw	255
  3436  055D  05A0               	andwf	___ftpack@arg,f
  3437  055E  307F               	movlw	127
  3438  055F  05A1               	andwf	___ftpack@arg+1,f
  3439  0560  30FF               	movlw	255
  3440  0561  05A2               	andwf	___ftpack@arg+2,f
  3441  0562                     l546:	
  3442  0562  1003               	clrc
  3443  0563  0CA3               	rrf	___ftpack@exp,f
  3444  0564  0823               	movf	___ftpack@exp,w
  3445  0565  00A5               	movwf	??___ftpack
  3446  0566  01A6               	clrf	??___ftpack+1
  3447  0567  01A7               	clrf	??___ftpack+2
  3448  0568  3010               	movlw	16
  3449  0569                     u2235:	
  3450  0569  1003               	clrc
  3451  056A  0DA5               	rlf	??___ftpack,f
  3452  056B  0DA6               	rlf	??___ftpack+1,f
  3453  056C  0DA7               	rlf	??___ftpack+2,f
  3454  056D  3EFF               	addlw	-1
  3455  056E  1D03               	skipz
  3456  056F  2D69               	goto	u2235
  3457  0570  0825               	movf	??___ftpack,w
  3458  0571  04A0               	iorwf	___ftpack@arg,f
  3459  0572  0826               	movf	??___ftpack+1,w
  3460  0573  04A1               	iorwf	___ftpack@arg+1,f
  3461  0574  0827               	movf	??___ftpack+2,w
  3462  0575  04A2               	iorwf	___ftpack@arg+2,f
  3463  0576  0824               	movf	___ftpack@sign,w
  3464  0577  1903               	btfsc	3,2
  3465  0578  0008               	return
  3466  0579  17A2               	bsf	___ftpack@arg+2,7
  3467  057A  0008               	return
  3468  057B                     __end_of___ftpack:	
  3469                           
  3470                           	psect	text16
  3471  07C9                     __ptext16:	
  3472 ;; *************** function _initializeMotor *****************
  3473 ;; Defined at:
  3474 ;;		line 19 in file "motor.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  2   40[None  ] int 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, pclath, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3488 ;;      Params:         0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    4
  3495 ;; This function calls:
  3496 ;;		_lcdSetCursor
  3497 ;;		_lcdWriteToDigitBCD
  3498 ;; This function is called by:
  3499 ;;		_main
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           
  3504                           ;psect for function _initializeMotor
  3505  07C9                     _initializeMotor:	
  3506                           
  3507                           ;motor.c: 20: PORTC = halfSteps[0];
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _initializeMotor: [wreg+status,2+status,0+pclath+cstack]
  3511  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  3512  07CA  1303               	bcf	3,6	;RP1=0, select bank1
  3513  07CB  0820               	movf	_halfSteps^(0+128),w
  3514  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  3515  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  3516  07CE  0087               	movwf	7	;volatile
  3517                           
  3518                           ;motor.c: 21: lcdSetCursor(0x40);
  3519  07CF  3040               	movlw	64
  3520  07D0  120A  158A  2764  120A  118A  	fcall	_lcdSetCursor
  3521                           
  3522                           ;motor.c: 22: lcdWriteToDigitBCD(nrOfSteps);
  3523  07D5  1683               	bsf	3,5	;RP0=1, select bank1
  3524  07D6  1303               	bcf	3,6	;RP1=0, select bank1
  3525  07D7  084A               	movf	(_nrOfSteps+1)^(0+128),w
  3526  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  3527  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  3528  07DA  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3529  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  3530  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  3531  07DD  0849               	movf	_nrOfSteps^(0+128),w
  3532  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  3533  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  3534  07E0  00A6               	movwf	lcdWriteToDigitBCD@data
  3535  07E1  120A  118A  2485   	fcall	_lcdWriteToDigitBCD
  3536  07E4  0008               	return
  3537  07E5                     __end_of_initializeMotor:	
  3538                           
  3539                           	psect	text17
  3540  0485                     __ptext17:	
  3541 ;; *************** function _lcdWriteToDigitBCD *****************
  3542 ;; Defined at:
  3543 ;;		line 39 in file "lcd.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  data            2    6[BANK0 ] int 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  3548 ;;  sign            1   12[BANK0 ] char 
  3549 ;;  ThousandDigi    1   11[BANK0 ] unsigned char 
  3550 ;;  HundredDigit    1   10[BANK0 ] unsigned char 
  3551 ;;  TensDigit       1    9[BANK0 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0, pclath, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3561 ;;      Params:         0       2       0       0       0
  3562 ;;      Locals:         0       6       0       0       0
  3563 ;;      Temps:          0       1       0       0       0
  3564 ;;      Totals:         0       9       0       0       0
  3565 ;;Total ram usage:        9 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    3
  3568 ;; This function calls:
  3569 ;;		___wmul
  3570 ;;		_lcdWriteData
  3571 ;; This function is called by:
  3572 ;;		_main
  3573 ;;		_initializeMotor
  3574 ;;		_move
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _lcdWriteToDigitBCD
  3580  0485                     _lcdWriteToDigitBCD:	
  3581                           
  3582                           ;lcd.c: 40: unsigned int OnesDigit;
  3583                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  3584                           ;lcd.c: 42: signed char sign = 1;
  3585                           
  3586                           ;incstack = 0
  3587                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  3588  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3589  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3590  0487  01AC               	clrf	lcdWriteToDigitBCD@sign
  3591  0488  0AAC               	incf	lcdWriteToDigitBCD@sign,f
  3592                           
  3593                           ;lcd.c: 43: if(data<0)
  3594  0489  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  3595  048A  2C8D               	goto	l2093
  3596                           
  3597                           ;lcd.c: 44: sign = -1;
  3598  048B  01AC               	clrf	lcdWriteToDigitBCD@sign
  3599  048C  03AC               	decf	lcdWriteToDigitBCD@sign,f
  3600  048D                     l2093:	
  3601                           
  3602                           ;lcd.c: 46: OnesDigit = data*sign;
  3603  048D  082C               	movf	lcdWriteToDigitBCD@sign,w
  3604  048E  00A0               	movwf	___wmul@multiplier
  3605  048F  01A1               	clrf	___wmul@multiplier+1
  3606  0490  1BA0               	btfsc	___wmul@multiplier,7
  3607  0491  03A1               	decf	___wmul@multiplier+1,f
  3608  0492  0827               	movf	lcdWriteToDigitBCD@data+1,w
  3609  0493  00A3               	movwf	___wmul@multiplicand+1
  3610  0494  0826               	movf	lcdWriteToDigitBCD@data,w
  3611  0495  00A2               	movwf	___wmul@multiplicand
  3612  0496  120A  118A  27A6  120A  118A  	fcall	___wmul
  3613  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3614  049C  1303               	bcf	3,6	;RP1=0, select bank0
  3615  049D  0821               	movf	?___wmul+1,w
  3616  049E  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3617  049F  0820               	movf	?___wmul,w
  3618  04A0  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3619                           
  3620                           ;lcd.c: 47: ThousandDigit = 0;
  3621  04A1  01AB               	clrf	lcdWriteToDigitBCD@ThousandDigit
  3622                           
  3623                           ;lcd.c: 48: HundredDigit = 0;
  3624  04A2  01AA               	clrf	lcdWriteToDigitBCD@HundredDigit
  3625                           
  3626                           ;lcd.c: 49: TensDigit = 0;
  3627  04A3  01A9               	clrf	lcdWriteToDigitBCD@TensDigit
  3628  04A4                     l2103:	
  3629                           ;lcd.c: 53: while(OnesDigit >= 1000){
  3630                           
  3631  04A4  3003               	movlw	3
  3632  04A5  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3633  04A6  30E8               	movlw	232
  3634  04A7  1903               	skipnz
  3635  04A8  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3636  04A9  1C03               	btfss	3,0
  3637  04AA  2CC4               	goto	l2107
  3638                           
  3639                           ;lcd.c: 54: OnesDigit = OnesDigit - 1000;
  3640  04AB  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3641  04AC  3E18               	addlw	24
  3642  04AD  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3643  04AE  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3644  04AF  1803               	skipnc
  3645  04B0  3E01               	addlw	1
  3646  04B1  3EFC               	addlw	252
  3647  04B2  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3648                           
  3649                           ;lcd.c: 55: ThousandDigit++;
  3650  04B3  3001               	movlw	1
  3651  04B4  00A8               	movwf	??_lcdWriteToDigitBCD
  3652  04B5  0828               	movf	??_lcdWriteToDigitBCD,w
  3653  04B6  07AB               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  3654  04B7  2CA4               	goto	l2103
  3655  04B8                     l2105:	
  3656                           ;lcd.c: 56: }
  3657                           ;lcd.c: 57: while(OnesDigit >= 100){
  3658                           
  3659                           
  3660                           ;lcd.c: 58: OnesDigit = OnesDigit - 100;
  3661  04B8  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3662  04B9  3E9C               	addlw	156
  3663  04BA  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3664  04BB  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3665  04BC  1803               	skipnc
  3666  04BD  3E01               	addlw	1
  3667  04BE  3EFF               	addlw	255
  3668  04BF  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3669                           
  3670                           ;lcd.c: 59: HundredDigit++;
  3671  04C0  3001               	movlw	1
  3672  04C1  00A8               	movwf	??_lcdWriteToDigitBCD
  3673  04C2  0828               	movf	??_lcdWriteToDigitBCD,w
  3674  04C3  07AA               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  3675  04C4                     l2107:	
  3676  04C4  3000               	movlw	0
  3677  04C5  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3678  04C6  3064               	movlw	100
  3679  04C7  1903               	skipnz
  3680  04C8  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3681  04C9  1C03               	btfss	3,0
  3682  04CA  2CD8               	goto	l2111
  3683  04CB  2CB8               	goto	l2105
  3684  04CC                     l2109:	
  3685                           ;lcd.c: 60: }
  3686                           ;lcd.c: 61: while (OnesDigit >= 10){
  3687                           
  3688                           
  3689                           ;lcd.c: 62: OnesDigit = OnesDigit - 10;
  3690  04CC  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3691  04CD  3EF6               	addlw	246
  3692  04CE  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3693  04CF  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3694  04D0  1803               	skipnc
  3695  04D1  3E01               	addlw	1
  3696  04D2  3EFF               	addlw	255
  3697  04D3  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3698                           
  3699                           ;lcd.c: 63: TensDigit++;
  3700  04D4  3001               	movlw	1
  3701  04D5  00A8               	movwf	??_lcdWriteToDigitBCD
  3702  04D6  0828               	movf	??_lcdWriteToDigitBCD,w
  3703  04D7  07A9               	addwf	lcdWriteToDigitBCD@TensDigit,f
  3704  04D8                     l2111:	
  3705  04D8  3000               	movlw	0
  3706  04D9  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3707  04DA  300A               	movlw	10
  3708  04DB  1903               	skipnz
  3709  04DC  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3710  04DD  1803               	skipnc
  3711  04DE  2CCC               	goto	l2109
  3712                           
  3713                           ;lcd.c: 64: }
  3714                           ;lcd.c: 65: if(sign == -1)
  3715  04DF  0A2C               	incf	lcdWriteToDigitBCD@sign,w
  3716  04E0  1D03               	btfss	3,2
  3717  04E1  2CE4               	goto	l2117
  3718                           
  3719                           ;lcd.c: 66: lcdWriteData((unsigned char)45);
  3720  04E2  302D               	movlw	45
  3721  04E3  2CE5               	goto	L6
  3722  04E4                     l2117:	
  3723                           
  3724                           ;lcd.c: 67: else{
  3725                           ;lcd.c: 68: lcdWriteData((unsigned char)43);
  3726  04E4  302B               	movlw	43
  3727  04E5                     L6:	
  3728  04E5  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3729                           
  3730                           ;lcd.c: 69: }
  3731                           ;lcd.c: 71: lcdWriteData((unsigned char)ThousandDigit + 48);
  3732  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3733  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3734  04EC  082B               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  3735  04ED  3E30               	addlw	48
  3736  04EE  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3737                           
  3738                           ;lcd.c: 72: lcdWriteData((unsigned char)HundredDigit + 48);
  3739  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  3740  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  3741  04F5  082A               	movf	lcdWriteToDigitBCD@HundredDigit,w
  3742  04F6  3E30               	addlw	48
  3743  04F7  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3744                           
  3745                           ;lcd.c: 73: lcdWriteData((unsigned char)TensDigit + 48);
  3746  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  3747  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  3748  04FE  0829               	movf	lcdWriteToDigitBCD@TensDigit,w
  3749  04FF  3E30               	addlw	48
  3750  0500  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3751                           
  3752                           ;lcd.c: 74: lcdWriteData((unsigned char)OnesDigit + 48);
  3753  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0507  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3756  0508  3E30               	addlw	48
  3757  0509  120A  158A  2796   	fcall	_lcdWriteData
  3758  050C  0008               	return
  3759  050D                     __end_of_lcdWriteToDigitBCD:	
  3760                           
  3761                           	psect	text18
  3762  0F96                     __ptext18:	
  3763 ;; *************** function _lcdWriteData *****************
  3764 ;; Defined at:
  3765 ;;		line 17 in file "lcd.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  databyte        1    wreg     unsigned char 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  databyte        1    2[BANK0 ] unsigned char 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3779 ;;      Params:         0       0       0       0       0
  3780 ;;      Locals:         0       1       0       0       0
  3781 ;;      Temps:          0       2       0       0       0
  3782 ;;      Totals:         0       3       0       0       0
  3783 ;;Total ram usage:        3 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    2
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_lcdWriteToDigitBCD
  3790 ;;		_lcdWriteString
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _lcdWriteData
  3796  0F96                     _lcdWriteData:	
  3797                           
  3798                           ;incstack = 0
  3799                           ; Regs used in _lcdWriteData: [wreg]
  3800                           ;lcdWriteData@databyte stored from wreg
  3801  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  3802  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  3803  0F98  00A2               	movwf	lcdWriteData@databyte
  3804                           
  3805                           ;lcd.c: 18: RE2 = 0;
  3806  0F99  1109               	bcf	9,2	;volatile
  3807                           
  3808                           ;lcd.c: 19: RE1 = 0;
  3809  0F9A  1089               	bcf	9,1	;volatile
  3810                           
  3811                           ;lcd.c: 20: RE0 = 1;
  3812  0F9B  1409               	bsf	9,0	;volatile
  3813                           
  3814                           ;lcd.c: 21: PORTD = databyte;
  3815  0F9C  0822               	movf	lcdWriteData@databyte,w
  3816  0F9D  0088               	movwf	8	;volatile
  3817                           
  3818                           ;lcd.c: 22: RE2 = 1;
  3819  0F9E  1509               	bsf	9,2	;volatile
  3820                           
  3821                           ;lcd.c: 23: RE2 = 0;
  3822  0F9F  1109               	bcf	9,2	;volatile
  3823                           
  3824                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  3825  0FA0  3007               	movlw	7
  3826  0FA1  00A1               	movwf	??_lcdWriteData+1
  3827  0FA2  307D               	movlw	125
  3828  0FA3  00A0               	movwf	??_lcdWriteData
  3829  0FA4                     u2967:	
  3830  0FA4  0BA0               	decfsz	??_lcdWriteData,f
  3831  0FA5  2FA4               	goto	u2967
  3832  0FA6  0BA1               	decfsz	??_lcdWriteData+1,f
  3833  0FA7  2FA4               	goto	u2967
  3834  0FA8  0008               	return
  3835  0FA9                     __end_of_lcdWriteData:	
  3836                           
  3837                           	psect	text19
  3838  07A6                     __ptext19:	
  3839 ;; *************** function ___wmul *****************
  3840 ;; Defined at:
  3841 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3844 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  product         2    4[BANK0 ] unsigned int 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  2    0[BANK0 ] unsigned int 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3856 ;;      Params:         0       4       0       0       0
  3857 ;;      Locals:         0       2       0       0       0
  3858 ;;      Temps:          0       0       0       0       0
  3859 ;;      Totals:         0       6       0       0       0
  3860 ;;Total ram usage:        6 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    2
  3863 ;; This function calls:
  3864 ;;		Nothing
  3865 ;; This function is called by:
  3866 ;;		_lcdWriteToDigitBCD
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function ___wmul
  3872  07A6                     ___wmul:	
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3876  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3877  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  3878  07A8  01A4               	clrf	___wmul@product
  3879  07A9  01A5               	clrf	___wmul@product+1
  3880  07AA                     l2041:	
  3881  07AA  1C20               	btfss	___wmul@multiplier,0
  3882  07AB  2FB2               	goto	l377
  3883  07AC  0822               	movf	___wmul@multiplicand,w
  3884  07AD  07A4               	addwf	___wmul@product,f
  3885  07AE  1803               	skipnc
  3886  07AF  0AA5               	incf	___wmul@product+1,f
  3887  07B0  0823               	movf	___wmul@multiplicand+1,w
  3888  07B1  07A5               	addwf	___wmul@product+1,f
  3889  07B2                     l377:	
  3890  07B2  3001               	movlw	1
  3891  07B3                     u2265:	
  3892  07B3  1003               	clrc
  3893  07B4  0DA2               	rlf	___wmul@multiplicand,f
  3894  07B5  0DA3               	rlf	___wmul@multiplicand+1,f
  3895  07B6  3EFF               	addlw	-1
  3896  07B7  1D03               	skipz
  3897  07B8  2FB3               	goto	u2265
  3898  07B9  3001               	movlw	1
  3899  07BA                     u2275:	
  3900  07BA  1003               	clrc
  3901  07BB  0CA1               	rrf	___wmul@multiplier+1,f
  3902  07BC  0CA0               	rrf	___wmul@multiplier,f
  3903  07BD  3EFF               	addlw	-1
  3904  07BE  1D03               	skipz
  3905  07BF  2FBA               	goto	u2275
  3906  07C0  0820               	movf	___wmul@multiplier,w
  3907  07C1  0421               	iorwf	___wmul@multiplier+1,w
  3908  07C2  1D03               	btfss	3,2
  3909  07C3  2FAA               	goto	l2041
  3910  07C4  0825               	movf	___wmul@product+1,w
  3911  07C5  00A1               	movwf	?___wmul+1
  3912  07C6  0824               	movf	___wmul@product,w
  3913  07C7  00A0               	movwf	?___wmul
  3914  07C8  0008               	return
  3915  07C9                     __end_of___wmul:	
  3916                           
  3917                           	psect	text20
  3918  0F64                     __ptext20:	
  3919 ;; *************** function _lcdSetCursor *****************
  3920 ;; Defined at:
  3921 ;;		line 28 in file "lcd.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;  address         1    wreg     unsigned char 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  address         1    3[BANK0 ] unsigned char 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3935 ;;      Params:         0       0       0       0       0
  3936 ;;      Locals:         0       1       0       0       0
  3937 ;;      Temps:          0       0       0       0       0
  3938 ;;      Totals:         0       1       0       0       0
  3939 ;;Total ram usage:        1 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    3
  3942 ;; This function calls:
  3943 ;;		_lcdWriteControl
  3944 ;; This function is called by:
  3945 ;;		_main
  3946 ;;		_initializeMotor
  3947 ;;		_move
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _lcdSetCursor
  3953  0F64                     _lcdSetCursor:	
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3957                           ;lcdSetCursor@address stored from wreg
  3958  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0F66  00A3               	movwf	lcdSetCursor@address
  3961                           
  3962                           ;lcd.c: 29: address |= 0b10000000;
  3963  0F67  17A3               	bsf	lcdSetCursor@address,7
  3964                           
  3965                           ;lcd.c: 30: lcdWriteControl(address);
  3966  0F68  0823               	movf	lcdSetCursor@address,w
  3967  0F69  120A  158A  27A9   	fcall	_lcdWriteControl
  3968  0F6C  0008               	return
  3969  0F6D                     __end_of_lcdSetCursor:	
  3970                           
  3971                           	psect	text21
  3972  0FA9                     __ptext21:	
  3973 ;; *************** function _lcdWriteControl *****************
  3974 ;; Defined at:
  3975 ;;		line 6 in file "lcd.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  databyte        1    wreg     unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  databyte        1    2[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3989 ;;      Params:         0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0
  3991 ;;      Temps:          0       2       0       0       0
  3992 ;;      Totals:         0       3       0       0       0
  3993 ;;Total ram usage:        3 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    2
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_lcdSetCursor
  4000 ;;		_setupLCD
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _lcdWriteControl
  4006  0FA9                     _lcdWriteControl:	
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _lcdWriteControl: [wreg]
  4010                           ;lcdWriteControl@databyte stored from wreg
  4011  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0FAB  00A2               	movwf	lcdWriteControl@databyte
  4014                           
  4015                           ;lcd.c: 7: RE2 = 0;
  4016  0FAC  1109               	bcf	9,2	;volatile
  4017                           
  4018                           ;lcd.c: 8: RE1 = 0;
  4019  0FAD  1089               	bcf	9,1	;volatile
  4020                           
  4021                           ;lcd.c: 9: RE0 = 0;
  4022  0FAE  1009               	bcf	9,0	;volatile
  4023                           
  4024                           ;lcd.c: 10: PORTD = databyte;
  4025  0FAF  0822               	movf	lcdWriteControl@databyte,w
  4026  0FB0  0088               	movwf	8	;volatile
  4027                           
  4028                           ;lcd.c: 11: RE2 = 1;
  4029  0FB1  1509               	bsf	9,2	;volatile
  4030                           
  4031                           ;lcd.c: 12: RE2 = 0;
  4032  0FB2  1109               	bcf	9,2	;volatile
  4033                           
  4034                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  4035  0FB3  300D               	movlw	13
  4036  0FB4  00A1               	movwf	??_lcdWriteControl+1
  4037  0FB5  30FB               	movlw	251
  4038  0FB6  00A0               	movwf	??_lcdWriteControl
  4039  0FB7                     u2977:	
  4040  0FB7  0BA0               	decfsz	??_lcdWriteControl,f
  4041  0FB8  2FB7               	goto	u2977
  4042  0FB9  0BA1               	decfsz	??_lcdWriteControl+1,f
  4043  0FBA  2FB7               	goto	u2977
  4044  0FBB  2FBC               	nop2
  4045  0FBC  0008               	return
  4046  0FBD                     __end_of_lcdWriteControl:	
  4047                           
  4048                           	psect	text22
  4049  0FBD                     __ptext22:	
  4050 ;; *************** function _initializeADC *****************
  4051 ;; Defined at:
  4052 ;;		line 5 in file "adConv.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4066 ;;      Params:         0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0
  4069 ;;      Totals:         0       0       0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    2
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _initializeADC
  4082  0FBD                     _initializeADC:	
  4083                           
  4084                           ;adConv.c: 6: TRISA = 0b11111111;
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _initializeADC: [wreg]
  4088  0FBD  30FF               	movlw	255
  4089  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  4090  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  4091  0FC0  0085               	movwf	5	;volatile
  4092                           
  4093                           ;adConv.c: 8: ADFM = 1;
  4094  0FC1  179F               	bsf	31,7	;volatile
  4095                           
  4096                           ;adConv.c: 10: ADCS2 = 0;
  4097  0FC2  131F               	bcf	31,6	;volatile
  4098                           
  4099                           ;adConv.c: 12: PCFG3 = 0;
  4100  0FC3  119F               	bcf	31,3	;volatile
  4101                           
  4102                           ;adConv.c: 13: PCFG2 = 0;
  4103  0FC4  111F               	bcf	31,2	;volatile
  4104                           
  4105                           ;adConv.c: 14: PCFG1 = 1;
  4106  0FC5  149F               	bsf	31,1	;volatile
  4107                           
  4108                           ;adConv.c: 15: PCFG0 = 1;
  4109  0FC6  141F               	bsf	31,0	;volatile
  4110                           
  4111                           ;adConv.c: 19: ADCON0 = 0b10000001;
  4112  0FC7  3081               	movlw	129
  4113  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0FCA  009F               	movwf	31	;volatile
  4116                           
  4117                           ;adConv.c: 23: ADIF = 0;
  4118  0FCB  130C               	bcf	12,6	;volatile
  4119                           
  4120                           ;adConv.c: 24: ADIE = 1;
  4121  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  4122  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  4123  0FCE  170C               	bsf	12,6	;volatile
  4124                           
  4125                           ;adConv.c: 25: PEIE = 1;
  4126  0FCF  170B               	bsf	11,6	;volatile
  4127                           
  4128                           ;adConv.c: 26: GIE = 1;
  4129  0FD0  178B               	bsf	11,7	;volatile
  4130  0FD1  0008               	return
  4131  0FD2                     __end_of_initializeADC:	
  4132                           
  4133                           	psect	text23
  4134  0FD2                     __ptext23:	
  4135 ;; *************** function _initialise *****************
  4136 ;; Defined at:
  4137 ;;		line 23 in file "main.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4151 ;;      Params:         0       0       0       0       0
  4152 ;;      Locals:         0       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0
  4154 ;;      Totals:         0       0       0       0       0
  4155 ;;Total ram usage:        0 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    2
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_main
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _initialise
  4167  0FD2                     _initialise:	
  4168                           
  4169                           ;main.c: 26: TRISB = 0b00000111;
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _initialise: [wreg+status,2]
  4173  0FD2  3007               	movlw	7
  4174  0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  4175  0FD4  1303               	bcf	3,6	;RP1=0, select bank1
  4176  0FD5  0086               	movwf	6	;volatile
  4177                           
  4178                           ;main.c: 27: TRISC = 0;
  4179  0FD6  0187               	clrf	7	;volatile
  4180                           
  4181                           ;main.c: 29: RB3 = 1;
  4182  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  4184  0FD9  1586               	bsf	6,3	;volatile
  4185                           
  4186                           ;main.c: 30: RB4 = 1;
  4187  0FDA  1606               	bsf	6,4	;volatile
  4188                           
  4189                           ;main.c: 34: TMR0 = 100;
  4190  0FDB  3064               	movlw	100
  4191  0FDC  0081               	movwf	1	;volatile
  4192                           
  4193                           ;main.c: 35: T0CS = 0;
  4194  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  4195  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  4196  0FDF  1281               	bcf	1,5	;volatile
  4197                           
  4198                           ;main.c: 36: T0SE = 0;
  4199  0FE0  1201               	bcf	1,4	;volatile
  4200                           
  4201                           ;main.c: 37: PSA = 0;
  4202  0FE1  1181               	bcf	1,3	;volatile
  4203                           
  4204                           ;main.c: 38: PS0 = 0;
  4205  0FE2  1001               	bcf	1,0	;volatile
  4206                           
  4207                           ;main.c: 39: PS1 = 0;
  4208  0FE3  1081               	bcf	1,1	;volatile
  4209                           
  4210                           ;main.c: 40: PS2 = 1;
  4211  0FE4  1501               	bsf	1,2	;volatile
  4212                           
  4213                           ;main.c: 42: TMR0IE = 1;
  4214  0FE5  168B               	bsf	11,5	;volatile
  4215                           
  4216                           ;main.c: 43: (GIE = 1);
  4217  0FE6  178B               	bsf	11,7	;volatile
  4218  0FE7  0008               	return
  4219  0FE8                     __end_of_initialise:	
  4220                           
  4221                           	psect	text24
  4222  07E5                     __ptext24:	
  4223 ;; *************** function _isr *****************
  4224 ;; Defined at:
  4225 ;;		line 12 in file "main.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4239 ;;      Params:         0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0
  4241 ;;      Temps:          4       0       0       0       0
  4242 ;;      Totals:         4       0       0       0       0
  4243 ;;Total ram usage:        4 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    1
  4246 ;; This function calls:
  4247 ;;		_debounceButtons
  4248 ;; This function is called by:
  4249 ;;		Interrupt level 1
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _isr
  4255  07E5                     _isr:	
  4256                           
  4257                           ;main.c: 13: if (T0IF){
  4258  07E5  1D0B               	btfss	11,2	;volatile
  4259  07E6  2FEF               	goto	i1l1939
  4260                           
  4261                           ;main.c: 14: T0IF = 0;
  4262  07E7  110B               	bcf	11,2	;volatile
  4263                           
  4264                           ;main.c: 15: TMR0 = 100;
  4265  07E8  3064               	movlw	100
  4266  07E9  0081               	movwf	1	;volatile
  4267                           
  4268                           ;main.c: 16: debounceButtons();
  4269  07EA  120A  118A  2743  120A  118A  	fcall	_debounceButtons
  4270  07EF                     i1l1939:	
  4271                           
  4272                           ;main.c: 17: }
  4273                           ;main.c: 18: if(ADIF){
  4274  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4275  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4276  07F1  1F0C               	btfss	12,6	;volatile
  4277  07F2  2FF5               	goto	i1l93
  4278                           
  4279                           ;main.c: 19: conversionDone = 1;
  4280  07F3  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  4281                           
  4282                           ;main.c: 20: ADIF = 0;
  4283  07F4  130C               	bcf	12,6	;volatile
  4284  07F5                     i1l93:	
  4285  07F5  0876               	movf	??_isr+3,w
  4286  07F6  00FF               	movwf	127
  4287  07F7  0875               	movf	??_isr+2,w
  4288  07F8  008A               	movwf	10
  4289  07F9  0874               	movf	??_isr+1,w
  4290  07FA  0084               	movwf	4
  4291  07FB  0E73               	swapf	??_isr^(0+-128),w
  4292  07FC  0083               	movwf	3
  4293  07FD  0EFE               	swapf	126,f
  4294  07FE  0E7E               	swapf	126,w
  4295  07FF  0009               	retfie
  4296  0800                     __end_of_isr:	
  4297                           
  4298                           	psect	intentry
  4299  0004                     __pintentry:	
  4300                           ;incstack = 0
  4301                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4302                           
  4303  0004                     interrupt_function:	
  4304  007E                     saved_w	set	btemp
  4305  0004  00FE               	movwf	btemp
  4306  0005  0E03               	swapf	3,w
  4307  0006  00F3               	movwf	??_isr
  4308  0007  0804               	movf	4,w
  4309  0008  00F4               	movwf	??_isr+1
  4310  0009  080A               	movf	10,w
  4311  000A  00F5               	movwf	??_isr+2
  4312  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4313  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4314  000D  087F               	movf	btemp+1,w
  4315  000E  00F6               	movwf	??_isr+3
  4316  000F  120A  118A  2FE5   	ljmp	_isr
  4317                           
  4318                           	psect	text25
  4319  0743                     __ptext25:	
  4320 ;; *************** function _debounceButtons *****************
  4321 ;; Defined at:
  4322 ;;		line 7 in file "timer0.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;		None
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;		None
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, status,2, status,0
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4336 ;;      Params:         0       0       0       0       0
  4337 ;;      Locals:         0       0       0       0       0
  4338 ;;      Temps:          1       0       0       0       0
  4339 ;;      Totals:         1       0       0       0       0
  4340 ;;Total ram usage:        1 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_isr
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           
  4350                           ;psect for function _debounceButtons
  4351  0743                     _debounceButtons:	
  4352                           
  4353                           ;timer0.c: 9: if(!RB0) {
  4354                           
  4355                           ;incstack = 0
  4356                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  4357  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4358  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4359  0745  1806               	btfsc	6,0	;volatile
  4360  0746  2F53               	goto	i1l1795
  4361                           
  4362                           ;timer0.c: 10: rtcCounter++;
  4363  0747  3001               	movlw	1
  4364  0748  00F2               	movwf	??_debounceButtons
  4365  0749  0872               	movf	??_debounceButtons,w
  4366  074A  07F8               	addwf	_rtcCounter,f	;volatile
  4367                           
  4368                           ;timer0.c: 11: if(rtcCounter >10 &&pb0Released){
  4369  074B  300B               	movlw	11
  4370  074C  0278               	subwf	_rtcCounter,w	;volatile
  4371  074D  1803               	btfsc	3,0
  4372  074E  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4373  074F  2F55               	goto	i1l1799
  4374                           
  4375                           ;timer0.c: 12: pb0Pressed = 1;
  4376  0750  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  4377                           
  4378                           ;timer0.c: 13: pb0Released = 0;
  4379  0751  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4380                           
  4381                           ;timer0.c: 14: }
  4382                           ;timer0.c: 15: }
  4383  0752  2F55               	goto	i1l1799
  4384  0753                     i1l1795:	
  4385                           
  4386                           ;timer0.c: 16: else{
  4387                           ;timer0.c: 17: rtcCounter = 0;
  4388  0753  01F8               	clrf	_rtcCounter	;volatile
  4389                           
  4390                           ;timer0.c: 18: pb0Released = 1;
  4391  0754  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4392  0755                     i1l1799:	
  4393                           
  4394                           ;timer0.c: 19: }
  4395                           ;timer0.c: 21: if(!RB1) {
  4396  0755  1886               	btfsc	6,1	;volatile
  4397  0756  2F63               	goto	i1l1809
  4398                           
  4399                           ;timer0.c: 22: rtcCounter2++;
  4400  0757  3001               	movlw	1
  4401  0758  00F2               	movwf	??_debounceButtons
  4402  0759  0872               	movf	??_debounceButtons,w
  4403  075A  07F9               	addwf	_rtcCounter2,f	;volatile
  4404                           
  4405                           ;timer0.c: 23: if(rtcCounter2 >10 &&pb1Released){
  4406  075B  300B               	movlw	11
  4407  075C  0279               	subwf	_rtcCounter2,w	;volatile
  4408  075D  1803               	btfsc	3,0
  4409  075E  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4410  075F  2F65               	goto	i1l1813
  4411                           
  4412                           ;timer0.c: 24: pb1Pressed = 1;
  4413  0760  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  4414                           
  4415                           ;timer0.c: 25: pb1Released = 0;
  4416  0761  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4417                           
  4418                           ;timer0.c: 26: }
  4419                           ;timer0.c: 27: }
  4420  0762  2F65               	goto	i1l1813
  4421  0763                     i1l1809:	
  4422                           
  4423                           ;timer0.c: 28: else{
  4424                           ;timer0.c: 29: rtcCounter2 = 0;
  4425  0763  01F9               	clrf	_rtcCounter2	;volatile
  4426                           
  4427                           ;timer0.c: 30: pb1Released = 1;
  4428  0764  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4429  0765                     i1l1813:	
  4430                           
  4431                           ;timer0.c: 31: }
  4432                           ;timer0.c: 32: if(!RB2) {
  4433  0765  1906               	btfsc	6,2	;volatile
  4434  0766  2F76               	goto	i1l1823
  4435                           
  4436                           ;timer0.c: 33: rtcCounter3++;
  4437  0767  3001               	movlw	1
  4438  0768  00F2               	movwf	??_debounceButtons
  4439  0769  0872               	movf	??_debounceButtons,w
  4440  076A  1683               	bsf	3,5	;RP0=1, select bank1
  4441  076B  1303               	bcf	3,6	;RP1=0, select bank1
  4442  076C  07CB               	addwf	_rtcCounter3^(0+128),f	;volatile
  4443                           
  4444                           ;timer0.c: 34: if(rtcCounter3 >10 &&pb2Released){
  4445  076D  300B               	movlw	11
  4446  076E  024B               	subwf	_rtcCounter3^(0+128),w	;volatile
  4447  076F  1C03               	skipc
  4448  0770  0008               	return
  4449  0771  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4450  0772  0008               	return
  4451                           
  4452                           ;timer0.c: 35: pb2Pressed = 1;
  4453  0773  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  4454                           
  4455                           ;timer0.c: 36: pb2Released = 0;
  4456  0774  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4457                           
  4458                           ;timer0.c: 37: }
  4459                           ;timer0.c: 38: }
  4460  0775  0008               	return
  4461  0776                     i1l1823:	
  4462                           
  4463                           ;timer0.c: 39: else{
  4464                           ;timer0.c: 40: rtcCounter3 = 0;
  4465  0776  1683               	bsf	3,5	;RP0=1, select bank1
  4466  0777  1303               	bcf	3,6	;RP1=0, select bank1
  4467  0778  01CB               	clrf	_rtcCounter3^(0+128)	;volatile
  4468                           
  4469                           ;timer0.c: 41: pb2Released = 1;
  4470  0779  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4471  077A  0008               	return
  4472  077B                     __end_of_debounceButtons:	
  4473  007E                     btemp	set	126	;btemp
  4474  007E                     wtemp	set	126
  4475  007E                     wtemp0	set	126
  4476  0080                     wtemp1	set	128
  4477  0082                     wtemp2	set	130
  4478  0084                     wtemp3	set	132
  4479  0086                     wtemp4	set	134
  4480  0088                     wtemp5	set	136
  4481  007F                     wtemp6	set	127
  4482  007E                     ttemp	set	126
  4483  007E                     ttemp0	set	126
  4484  0081                     ttemp1	set	129
  4485  0084                     ttemp2	set	132
  4486  0087                     ttemp3	set	135
  4487  007F                     ttemp4	set	127
  4488  007E                     ltemp	set	126
  4489  007E                     ltemp0	set	126
  4490  0082                     ltemp1	set	130
  4491  0086                     ltemp2	set	134
  4492  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     15      45
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _setupLCD->_lcdWriteControl
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   17184
                                             11 BANK1      4     4      0
                         _initialise
                      _initializeADC
                    _initializeMotor
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                           _setupLCD
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _readADCData                                          4     2      2     127
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   13233
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7604
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    1575
                                             15 BANK0      5     4      1
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initializeMotor                                      0     0      0    1092
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                   9     7      2    1027
                                              6 BANK0      9     7      2
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _initializeADC
   _initializeMotor
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _setupLCD
     _lcdWriteControl
   _startADCConversion

 _isr (ROOT)
   _debounceButtons

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      F      2D       7       56.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      87      12        0.0%
ABS                  0      0      87       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Apr 06 21:41:33 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               _GO 00FA              ?_startADCConversion 0072  
                             fsr 0004              ___wmul@multiplicand 0022                     ___ftadd@exp1 0066  
                   ___ftadd@exp2 0065                     ___ftadd@sign 0064                              l136 0398  
                            l239 06FE                              l377 07B2                              l545 055A  
                            l546 0562                              l538 0545                              l629 0356  
                            l569 00DA                              _GIE 005F                              _RB0 0030  
                            _RB1 0031                              _RB2 0032                              _RB3 0033  
                            _RB4 0034                              _RE0 0048                              _RE1 0049  
                            _RE2 004A                              _PS0 0408                              _PS1 0409  
                            _PS2 040A                     __CFG_CPD$OFF 0000                              _PSA 040B  
                            _isr 07E5                              fsr0 0004                              indf 0000  
                   __CFG_FOSC$HS 0000                     ?_readADCData 0020                   ??_lcdWriteData 0020  
                   __CFG_LVP$OFF 0000                     ___ftdiv@cntr 003D                     ___ftdiv@sign 0042  
                           l2001 052A                             l2011 0554                             l2003 052F  
                           l2111 04D8                             l2103 04A4                             l2041 07AA  
                           l2105 04B8                             l2009 054A                             l2107 04C4  
                           l2117 04E4                             l2109 04CC                             l2125 005B  
                           l1501 032E                             l2205 0656                             l2135 0071  
                           l2063 069A                             l1511 0359                             l1503 033E  
                           l2225 0387                             l2153 00A0                             l2129 0062  
                           l2065 06AC                             l2307 02BC                             l2171 00EC  
                           l2155 00AC                             l2147 008B                             l1515 0367  
                           l2075 0715                             l2093 048D                             l2245 03BE  
                           l2165 00CA                             l2157 00B1                             l1509 034B  
                           l2413 01D0                             l2421 0414                             l2255 03CA  
                           l2239 03AD                             l2247 03BF                             l2263 0374  
                           l2175 00FE                             l2167 00D6                             l2159 00B5  
                           l2185 0121                             l2433 0444                             l1483 02FC  
                           l2451 0469                             l2285 0258                             l2445 045D  
                           l2279 0242                             l2439 0450                             l2393 06DF  
                           l2457 0479                             l2299 029D                             l1773 062B  
                           l2399 0702                             l1769 0604                             l1995 0517  
                           l1999 051E                             _ADIE 0466                             _ADIF 0066  
                           _ADFM 04FF                             ?_isr 0072             ??_startADCConversion 0020  
                           _T0IF 005A                             _T0CS 040D                             u1305 032F  
                           _T0SE 040C                             u1335 034D                             u2305 069F  
                           u2235 0569                             u2155 0523                             u1275 0303  
                           u2175 053E                             u2265 07B3                             u2505 00A1  
                           u2275 07BA                             u2195 054D                             u1901 061E  
                           u1902 061F                             u1903 0624                             u2535 00B6  
                           u1904 0625                             u2475 008C                             u2805 02AF  
                           u2565 00CB                             u2815 02BD                             u1881 05F7  
                           u1882 05F8                             u1883 05FD                             u2835 06D9  
                           _PEIE 005E                             u1884 05FE                             u2845 06EA  
                           u2775 026A                             u2855 06F7                             u2785 027C  
                           u2937 047F                             u2795 029E                             u2947 0F7D  
                           u2957 03EF                             u2967 0FA4                             u2977 0FB7  
                           i1l93 07F5                             _TMR0 0001                     __CFG_WRT$OFF 0000  
                           _main 03FB                     ___ftpack@arg 0020                     ___ftpack@exp 0023  
                           _move 0370                             btemp 007E                             ltemp 007E  
                           start 0012                             ttemp 007E                             wtemp 007E  
                   ___fttol@exp1 0050                     ___fttol@lval 004C                            ??_isr 0073  
                          _ADCS2 04FE                            ?_main 0072                  __end_of___ftadd 013B  
                          ?_move 002F                    __CFG_WDTE$OFF 0000                  __end_of___ftdiv 02E2  
                __end_of___ftneg 0F77                  __end_of___fttol 0370                            _PCFG0 04F8  
                          _PCFG1 04F9                            _PCFG2 04FA                            _PCFG3 04FB  
                          _PORTC 0007                            _PORTD 0008                            _PORTE 0009  
                          _TRISA 0085                            _TRISB 0086                            _TRISC 0087  
                          _TRISD 0088                            _TRISE 0089                ??_initializeMotor 002F  
     __end_of_lcdWriteToDigitBCD 050D                            _cstep 0077                            _frexp 0707  
                          _errno 00C7                ??_debounceButtons 0072                    ___ftpack@sign 0024  
                          _round 057B                            _trunc 063A                  __end_of_moveDeg 022A  
                 __pbitbssCOMMON 0380                   __CFG_BOREN$OFF 0000                            pclath 000A  
                          ltemp0 007E                            ltemp1 0082                            ltemp2 0086  
                          ltemp3 0080                            move@i 0033                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
                __initialization 0015                     __end_of_main 0485                     __end_of_move 03FB  
       __size_of_lcdWriteControl 0014                           ??_main 00C3                    ___fttol@sign1 004B  
                         ??_move 0030             __end_of_lcdSetCursor 0F6D                           _ADCON0 001F  
                         ?_frexp 0020                 __end_of___altoft 06C6                           _ADRESH 001E  
                         _ADRESL 009E                 __end_of___ftpack 057B                           ?_round 0067  
                 _conversionDone 0380                           ?_trunc 0051                           i1l1813 0765  
                         i1l1823 0776                           i1l1809 0763                           i1l1795 0753  
                         i1l1939 07EF                           i1l1799 0755                           _TMR0IE 005D  
                 __CFG_PWRTE$OFF 0000                           ___ftge 05DB                           ___wmul 07A6  
           __end_of_lcdWriteData 0FA9                        ??___ftadd 0060                        ??___ftdiv 0039  
                      ??___ftneg 0033                        ??___fttol 0047                 __end_of_setupLCD 07A6  
                      ??_moveDeg 00B8                           saved_w 007E           __size_of_initializeADC 0015  
                         round@f 006A                           round@x 0067                           trunc@i 0055  
                         trunc@x 0051             __size_of_readADCData 0041          __end_of__initialization 002E  
                     ___altoft@c 0028                       ___ftadd@f1 005A                       ___ftadd@f2 005D  
                     ___ftge@ff1 0020                       ___ftge@ff2 0023                       ___ftdiv@f1 0036  
                     ___ftdiv@f2 0033                       ___ftdiv@f3 003E                       ___ftneg@f1 0030  
                     ___fttol@f1 0043                   __pcstackCOMMON 0072                     __pidataBANK1 0FE8  
                     _pb0Pressed 0382                       _pb1Pressed 0384                    __end_of_frexp 0743  
                     _pb2Pressed 0386                    __end_of_round 05DB                       _pb3Pressed 0388  
                  __end_of_trunc 0684                ??_lcdWriteControl 0020                          ??_frexp 0024  
                        ??_round 006A                          ??_trunc 0054                       __pbssBANK1 00C7  
           readADCData@ADCResult 0022              lcdSetCursor@address 0023                    _initializeADC 0FBD  
                     __pmaintext 03FB                          ?___ftge 0020                          ?___wmul 0020  
                _initializeMotor 07C9                       __pintentry 0004            __size_of_lcdSetCursor 0009  
                      ?___altoft 0028                        ?___ftpack 0020                  _debounceButtons 0743  
    __size_of_startADCConversion 000E            __size_of_lcdWriteData 0013                     _lcdSetCursor 0F64  
                 ?_initializeADC 0072               _lcdWriteToDigitBCD 0485                    move@direction 002F  
                      ?_setupLCD 0072                  __size_of___ftge 005F                          ___ftadd 0032  
                        ___ftdiv 022A                          ___ftneg 0F6D                  __size_of___wmul 0023  
                        ___fttol 02E2                       ??___altoft 002C              ?_lcdWriteToDigitBCD 0026  
                     ??___ftpack 0025                       _initialise 0FD2                          __ptext1 0F77  
                        __ptext2 077B                          __ptext3 06C6                          __ptext4 013B  
                        __ptext5 057B                          __ptext6 063A                          __ptext7 0707  
                        __ptext8 02E2                          __ptext9 0684                     __size_of_isr 001B  
                        _moveDeg 013B                     _lcdWriteData 0F96             end_of_initialization 002E  
           ??_lcdWriteToDigitBCD 0028               moveDeg@stepsToMove 00C2          __end_of_initializeMotor 07E5  
                     _rtcCounter 0078          __end_of_debounceButtons 077B                       ??_setupLCD 0023  
                     _wholeSteps 00B0                      ___ftdiv@exp 0041                  ??_initializeADC 0020  
                     main@result 00C5                      _pb0Released 0383                      _pb1Released 0385  
                 __end_of___ftge 063A                      _pb2Released 0387                  _lcdWriteControl 0FA9  
                 __end_of___wmul 07C9                      _pb3Released 0389                      ?_initialise 0072  
            start_initialization 0015                    ??_readADCData 0022                      __end_of_isr 0800  
                     frexp@value 0020                 ?_initializeMotor 0072                 ?_debounceButtons 0072  
                       ??___ftge 0026                         ??___wmul 0024                       init_fetch0 0F85  
                    __pdataBANK1 00A0                __size_of___altoft 0042                __size_of___ftpack 006E  
                    __pbssCOMMON 0077                        ___latbits 0002                    __pcstackBANK0 0020  
                  __pcstackBANK1 00B8              __end_of_readADCData 0707              __size_of_initialise 0016  
lcdWriteToDigitBCD@ThousandDigit 002B          __end_of_lcdWriteControl 0FBD                        _halfSteps 00A0  
                     moveDeg@deg 006D                         ?___ftadd 005A                         ?___ftdiv 0033  
                       ?___ftneg 0030                         ?___fttol 0043                __size_of_setupLCD 002B  
                       ?_moveDeg 006D                        _nrOfSteps 00C9       __end_of_startADCConversion 0F85  
                 __size_of_frexp 003C                   __size_of_round 0060                   __size_of_trunc 004A  
        lcdWriteControl@databyte 0022                interrupt_function 0004                   ___wmul@product 0024  
              ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002A                      _readADCData 06C6  
           lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 0088                        frexp@eptr 0023  
               ?_lcdWriteControl 0072                 __size_of___ftadd 0109                 __size_of___ftdiv 00B8  
               __size_of___ftneg 000A                         ___altoft 0684                 __size_of___fttol 008E  
                   ??_initialise 0020                         ___ftpack 050D                 __size_of_moveDeg 00EF  
                       __ptext10 0F6D                         __ptext11 0032                         __ptext20 0F64  
                       __ptext12 0370                         __ptext21 0FA9                         __ptext13 05DB  
                       __ptext22 0FBD                         __ptext14 022A                         __ptext23 0FD2  
                       __ptext15 050D                         __ptext24 07E5                         __ptext16 07C9  
                       __ptext25 0743                         __ptext17 0485                         __ptext18 0F96  
                       __ptext19 07A6                        move@steps 0032                       trunc@expon 0058  
                  __size_of_main 008A                    __size_of_move 008B               __end_of_initialise 0FE8  
          __end_of_initializeADC 0FD2                         _setupLCD 077B      lcdWriteToDigitBCD@OnesDigit 002D  
                    _moveDeg$640 00BC                      _moveDeg$641 00BF                      _moveDeg$639 00B9  
    lcdWriteToDigitBCD@TensDigit 0029                         init_ram0 0F89                         intlevel1 0000  
                    _rtcCounter2 0079                      _rtcCounter3 00CB                      _rtcCounter4 00CC  
                  ?_lcdSetCursor 0072         __size_of_initializeMotor 001C                      _motorToggle 0381  
       __size_of_debounceButtons 0038                    ?_lcdWriteData 0072           lcdWriteToDigitBCD@data 0026  
         lcdWriteToDigitBCD@sign 002C                   ??_lcdSetCursor 0023               _startADCConversion 0F77  
