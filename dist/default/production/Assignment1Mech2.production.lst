

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Apr 06 22:34:49 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0088                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  0091                     	;# 
   329  0092                     	;# 
   330  0093                     	;# 
   331  0094                     	;# 
   332  0098                     	;# 
   333  0099                     	;# 
   334  009C                     	;# 
   335  009D                     	;# 
   336  009E                     	;# 
   337  009F                     	;# 
   338  010C                     	;# 
   339  010D                     	;# 
   340  010E                     	;# 
   341  010F                     	;# 
   342  018C                     	;# 
   343  018D                     	;# 
   344                           
   345                           	psect	idataBANK1
   346  0FE8                     __pidataBANK1:	
   347                           
   348                           ;initializer for _halfSteps
   349  0FE8  343C               	retlw	60
   350  0FE9  3400               	retlw	0
   351  0FEA  342E               	retlw	46
   352  0FEB  3400               	retlw	0
   353  0FEC  342B               	retlw	43
   354  0FED  3400               	retlw	0
   355  0FEE  3427               	retlw	39
   356  0FEF  3400               	retlw	0
   357  0FF0  3435               	retlw	53
   358  0FF1  3400               	retlw	0
   359  0FF2  3417               	retlw	23
   360  0FF3  3400               	retlw	0
   361  0FF4  341B               	retlw	27
   362  0FF5  3400               	retlw	0
   363  0FF6  341E               	retlw	30
   364  0FF7  3400               	retlw	0
   365                           
   366                           ;initializer for _wholeSteps
   367  0FF8  343C               	retlw	60
   368  0FF9  3400               	retlw	0
   369  0FFA  342B               	retlw	43
   370  0FFB  3400               	retlw	0
   371  0FFC  3435               	retlw	53
   372  0FFD  3400               	retlw	0
   373  0FFE  341B               	retlw	27
   374  0FFF  3400               	retlw	0
   375  001F                     _ADCON0	set	31
   376  001E                     _ADRESH	set	30
   377  0007                     _PORTC	set	7
   378  0008                     _PORTD	set	8
   379  0009                     _PORTE	set	9
   380  0001                     _TMR0	set	1
   381  0066                     _ADIF	set	102
   382  005F                     _GIE	set	95
   383  00FA                     _GO	set	250
   384  005E                     _PEIE	set	94
   385  0030                     _RB0	set	48
   386  0031                     _RB1	set	49
   387  0032                     _RB2	set	50
   388  0033                     _RB3	set	51
   389  0034                     _RB4	set	52
   390  0035                     _RB5	set	53
   391  0048                     _RE0	set	72
   392  0049                     _RE1	set	73
   393  004A                     _RE2	set	74
   394  005A                     _T0IF	set	90
   395  005D                     _TMR0IE	set	93
   396  009E                     _ADRESL	set	158
   397  0085                     _TRISA	set	133
   398  0086                     _TRISB	set	134
   399  0087                     _TRISC	set	135
   400  0088                     _TRISD	set	136
   401  0089                     _TRISE	set	137
   402  04FE                     _ADCS2	set	1278
   403  04FF                     _ADFM	set	1279
   404  0466                     _ADIE	set	1126
   405  04F8                     _PCFG0	set	1272
   406  04F9                     _PCFG1	set	1273
   407  04FA                     _PCFG2	set	1274
   408  04FB                     _PCFG3	set	1275
   409  0408                     _PS0	set	1032
   410  0409                     _PS1	set	1033
   411  040A                     _PS2	set	1034
   412  040B                     _PSA	set	1035
   413  040D                     _T0CS	set	1037
   414  040C                     _T0SE	set	1036
   415                           
   416                           ; #config settings
   417  0000                     
   418                           	psect	cinit
   419  0015                     start_initialization:	
   420  0015                     __initialization:	
   421                           
   422                           ; Clear objects allocated to BITCOMMON
   423  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   424  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   425                           
   426                           ; Clear objects allocated to COMMON
   427  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   428  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   429  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   430                           
   431                           ; Clear objects allocated to BANK1
   432  001A  1683               	bsf	3,5	;RP0=1, select bank1
   433  001B  1303               	bcf	3,6	;RP1=0, select bank1
   434  001C  01C7               	clrf	__pbssBANK1& (0+127)
   435  001D  01C8               	clrf	(__pbssBANK1+1)& (0+127)
   436  001E  01C9               	clrf	(__pbssBANK1+2)& (0+127)
   437  001F  01CA               	clrf	(__pbssBANK1+3)& (0+127)
   438  0020  01CB               	clrf	(__pbssBANK1+4)& (0+127)
   439  0021  01CC               	clrf	(__pbssBANK1+5)& (0+127)
   440  0022  01CD               	clrf	(__pbssBANK1+6)& (0+127)
   441  0023  01CE               	clrf	(__pbssBANK1+7)& (0+127)
   442                           
   443                           ; Initialize objects allocated to BANK1
   444  0024  1383               	bcf	3,7	;select IRP bank0
   445  0025  30B8               	movlw	low (__pdataBANK1+24)
   446  0026  00FD               	movwf	btemp+-1
   447  0027  300F               	movlw	high __pidataBANK1
   448  0028  00FE               	movwf	btemp
   449  0029  30E8               	movlw	low __pidataBANK1
   450  002A  00FF               	movwf	btemp+1
   451  002B  30A0               	movlw	low __pdataBANK1
   452  002C  0084               	movwf	4
   453  002D  120A  158A  2787   	fcall	init_ram0
   454  0030                     end_of_initialization:	
   455                           ;End of C runtime variable initialization code
   456                           
   457  0030                     __end_of__initialization:	
   458  0030  0183               	clrf	3
   459  0031  120A  118A  2C85   	ljmp	_main	;jump to C main() function
   460                           
   461                           	psect	bitbssCOMMON
   462  0380                     __pbitbssCOMMON:	
   463  0380                     _conversionDone:	
   464  0380                     	ds	1
   465  0381                     _motorToggle:	
   466  0381                     	ds	1
   467  0382                     _pb0Pressed:	
   468  0382                     	ds	1
   469  0383                     _pb0Released:	
   470  0383                     	ds	1
   471  0384                     _pb1Pressed:	
   472  0384                     	ds	1
   473  0385                     _pb1Released:	
   474  0385                     	ds	1
   475  0386                     _pb2Pressed:	
   476  0386                     	ds	1
   477  0387                     _pb2Released:	
   478  0387                     	ds	1
   479  0388                     _pb3Pressed:	
   480  0388                     	ds	1
   481  0389                     _pb3Released:	
   482  0389                     	ds	1
   483                           
   484                           	psect	bssCOMMON
   485  0077                     __pbssCOMMON:	
   486  0077                     _cstep:	
   487  0077                     	ds	1
   488  0078                     _pbCounter:	
   489  0078                     	ds	1
   490  0079                     _pbCounter2:	
   491  0079                     	ds	1
   492                           
   493                           	psect	bssBANK1
   494  00C7                     __pbssBANK1:	
   495  00C7                     _errno:	
   496  00C7                     	ds	2
   497  00C9                     _nrOfSteps:	
   498  00C9                     	ds	2
   499  00CB                     _rtcCounter:	
   500  00CB                     	ds	2
   501  00CD                     _pbCounter3:	
   502  00CD                     	ds	1
   503  00CE                     _pbCounter4:	
   504  00CE                     	ds	1
   505                           
   506                           	psect	dataBANK1
   507  00A0                     __pdataBANK1:	
   508  00A0                     _halfSteps:	
   509  00A0                     	ds	16
   510  00B0                     _wholeSteps:	
   511  00B0                     	ds	8
   512                           
   513                           	psect	inittext
   514  0F83                     init_fetch0:	
   515                           ;	Called with low address in FSR and high address in W
   516                           
   517  0F83  087E               	movf	126,w
   518  0F84  008A               	movwf	10
   519  0F85  087F               	movf	127,w
   520  0F86  0082               	movwf	2
   521  0F87                     init_ram0:	
   522                           ;Called with:
   523                           ;	high address of idata address in btemp 
   524                           ;	low address of idata address in btemp+1 
   525                           ;	low address of data in FSR
   526                           ;	high address + 1 of data in btemp-1
   527                           
   528  0F87  2783  120A  158A   	fcall	init_fetch0
   529  0F8A  0080               	movwf	0
   530  0F8B  0A84               	incf	4,f
   531  0F8C  0804               	movf	4,w
   532  0F8D  067D               	xorwf	125,w
   533  0F8E  1903               	btfsc	3,2
   534  0F8F  3400               	retlw	0
   535  0F90  0AFF               	incf	127,f
   536  0F91  1903               	btfsc	3,2
   537  0F92  0AFE               	incf	126,f
   538  0F93  2F87               	goto	init_ram0
   539                           
   540                           	psect	cstackBANK1
   541  00B8                     __pcstackBANK1:	
   542  00B8                     ??_moveDeg:	
   543                           
   544                           ; 1 bytes @ 0x0
   545  00B8                     	ds	1
   546  00B9                     _moveDeg$652:	
   547                           
   548                           ; 3 bytes @ 0x1
   549  00B9                     	ds	3
   550  00BC                     _moveDeg$653:	
   551                           
   552                           ; 3 bytes @ 0x4
   553  00BC                     	ds	3
   554  00BF                     _moveDeg$654:	
   555                           
   556                           ; 3 bytes @ 0x7
   557  00BF                     	ds	3
   558  00C2                     moveDeg@stepsToMove:	
   559                           
   560                           ; 1 bytes @ 0xA
   561  00C2                     	ds	1
   562  00C3                     ??_main:	
   563                           
   564                           ; 1 bytes @ 0xB
   565  00C3                     	ds	2
   566  00C5                     main@result:	
   567                           
   568                           ; 2 bytes @ 0xD
   569  00C5                     	ds	2
   570                           
   571                           	psect	cstackCOMMON
   572  0072                     __pcstackCOMMON:	
   573  0072                     ?_flashLed:	
   574  0072                     ??_flashLed:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0072                     ?_debounceButtons:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0072                     ??_debounceButtons:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0072                     ?_initializeTimer0:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0072                     ?_initializeADC:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0072                     ?_setupLCD:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0072                     ?_startADCConversion:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0072                     ?_lcdSetCursor:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0072                     ?_isr:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0072                     ?_initialise:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0072                     ?_main:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0072                     ?_lcdWriteControl:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0072                     ?_lcdWriteData:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0072                     ?_initializeMotor:	
   614                           ; 1 bytes @ 0x0
   615                           
   616                           
   617                           ; 2 bytes @ 0x0
   618  0072                     	ds	1
   619  0073                     ??_isr:	
   620                           
   621                           ; 1 bytes @ 0x1
   622  0073                     	ds	4
   623                           
   624                           	psect	cstackBANK0
   625  0020                     __pcstackBANK0:	
   626  0020                     ?___ftge:	
   627  0020                     ??_initializeTimer0:	
   628                           ; 1 bit 
   629                           
   630  0020                     ??_initializeADC:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0020                     ??_startADCConversion:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0020                     ??_lcdWriteControl:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0020                     ??_lcdWriteData:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0020                     ?_readADCData:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0020                     ?___wmul:	
   646                           ; 2 bytes @ 0x0
   647                           
   648  0020                     ?___ftpack:	
   649                           ; 2 bytes @ 0x0
   650                           
   651  0020                     ?_frexp:	
   652                           ; 3 bytes @ 0x0
   653                           
   654  0020                     ___wmul@multiplier:	
   655                           ; 3 bytes @ 0x0
   656                           
   657  0020                     ___ftpack@arg:	
   658                           ; 2 bytes @ 0x0
   659                           
   660  0020                     ___ftge@ff1:	
   661                           ; 3 bytes @ 0x0
   662                           
   663  0020                     frexp@value:	
   664                           ; 3 bytes @ 0x0
   665                           
   666                           
   667                           ; 3 bytes @ 0x0
   668  0020                     	ds	2
   669  0022                     ??_readADCData:	
   670  0022                     lcdWriteControl@databyte:	
   671                           ; 1 bytes @ 0x2
   672                           
   673  0022                     lcdWriteData@databyte:	
   674                           ; 1 bytes @ 0x2
   675                           
   676  0022                     readADCData@ADCResult:	
   677                           ; 1 bytes @ 0x2
   678                           
   679  0022                     ___wmul@multiplicand:	
   680                           ; 2 bytes @ 0x2
   681                           
   682                           
   683                           ; 2 bytes @ 0x2
   684  0022                     	ds	1
   685  0023                     ??_setupLCD:	
   686  0023                     ??_lcdSetCursor:	
   687                           ; 1 bytes @ 0x3
   688                           
   689  0023                     lcdSetCursor@address:	
   690                           ; 1 bytes @ 0x3
   691                           
   692  0023                     ___ftpack@exp:	
   693                           ; 1 bytes @ 0x3
   694                           
   695  0023                     frexp@eptr:	
   696                           ; 1 bytes @ 0x3
   697                           
   698  0023                     ___ftge@ff2:	
   699                           ; 1 bytes @ 0x3
   700                           
   701                           
   702                           ; 3 bytes @ 0x3
   703  0023                     	ds	1
   704  0024                     ??_frexp:	
   705  0024                     ??___wmul:	
   706                           ; 1 bytes @ 0x4
   707                           
   708  0024                     ___ftpack@sign:	
   709                           ; 1 bytes @ 0x4
   710                           
   711  0024                     ___wmul@product:	
   712                           ; 1 bytes @ 0x4
   713                           
   714                           
   715                           ; 2 bytes @ 0x4
   716  0024                     	ds	1
   717  0025                     ??___ftpack:	
   718                           
   719                           ; 1 bytes @ 0x5
   720  0025                     	ds	1
   721  0026                     ?_lcdWriteToDigitBCD:	
   722  0026                     ??___ftge:	
   723                           ; 1 bytes @ 0x6
   724                           
   725  0026                     lcdWriteToDigitBCD@data:	
   726                           ; 1 bytes @ 0x6
   727                           
   728                           
   729                           ; 2 bytes @ 0x6
   730  0026                     	ds	2
   731  0028                     ??_lcdWriteToDigitBCD:	
   732  0028                     ?___altoft:	
   733                           ; 1 bytes @ 0x8
   734                           
   735  0028                     ___altoft@c:	
   736                           ; 3 bytes @ 0x8
   737                           
   738                           
   739                           ; 4 bytes @ 0x8
   740  0028                     	ds	1
   741  0029                     lcdWriteToDigitBCD@TensDigit:	
   742                           
   743                           ; 1 bytes @ 0x9
   744  0029                     	ds	1
   745  002A                     lcdWriteToDigitBCD@HundredDigit:	
   746                           
   747                           ; 1 bytes @ 0xA
   748  002A                     	ds	1
   749  002B                     lcdWriteToDigitBCD@ThousandDigit:	
   750                           
   751                           ; 1 bytes @ 0xB
   752  002B                     	ds	1
   753  002C                     ??___altoft:	
   754  002C                     lcdWriteToDigitBCD@sign:	
   755                           ; 1 bytes @ 0xC
   756                           
   757                           
   758                           ; 1 bytes @ 0xC
   759  002C                     	ds	1
   760  002D                     lcdWriteToDigitBCD@OnesDigit:	
   761                           
   762                           ; 2 bytes @ 0xD
   763  002D                     	ds	1
   764  002E                     ___altoft@exp:	
   765                           
   766                           ; 1 bytes @ 0xE
   767  002E                     	ds	1
   768  002F                     ??_initializeMotor:	
   769  002F                     ?_move:	
   770                           ; 1 bytes @ 0xF
   771                           
   772  002F                     ??_initialise:	
   773                           ; 1 bytes @ 0xF
   774                           
   775  002F                     move@direction:	
   776                           ; 1 bytes @ 0xF
   777                           
   778  002F                     ___altoft@sign:	
   779                           ; 1 bytes @ 0xF
   780                           
   781                           
   782                           ; 1 bytes @ 0xF
   783  002F                     	ds	1
   784  0030                     ??_move:	
   785  0030                     ?___ftneg:	
   786                           ; 1 bytes @ 0x10
   787                           
   788  0030                     ___ftneg@f1:	
   789                           ; 3 bytes @ 0x10
   790                           
   791                           
   792                           ; 3 bytes @ 0x10
   793  0030                     	ds	2
   794  0032                     move@steps:	
   795                           
   796                           ; 1 bytes @ 0x12
   797  0032                     	ds	1
   798  0033                     ??___ftneg:	
   799  0033                     ?___ftdiv:	
   800                           ; 1 bytes @ 0x13
   801                           
   802  0033                     move@i:	
   803                           ; 3 bytes @ 0x13
   804                           
   805  0033                     ___ftdiv@f2:	
   806                           ; 1 bytes @ 0x13
   807                           
   808                           
   809                           ; 3 bytes @ 0x13
   810  0033                     	ds	3
   811  0036                     ___ftdiv@f1:	
   812                           
   813                           ; 3 bytes @ 0x16
   814  0036                     	ds	3
   815  0039                     ??___ftdiv:	
   816                           
   817                           ; 1 bytes @ 0x19
   818  0039                     	ds	4
   819  003D                     ___ftdiv@cntr:	
   820                           
   821                           ; 1 bytes @ 0x1D
   822  003D                     	ds	1
   823  003E                     ___ftdiv@f3:	
   824                           
   825                           ; 3 bytes @ 0x1E
   826  003E                     	ds	3
   827  0041                     ___ftdiv@exp:	
   828                           
   829                           ; 1 bytes @ 0x21
   830  0041                     	ds	1
   831  0042                     ___ftdiv@sign:	
   832                           
   833                           ; 1 bytes @ 0x22
   834  0042                     	ds	1
   835  0043                     ?___fttol:	
   836  0043                     ___fttol@f1:	
   837                           ; 4 bytes @ 0x23
   838                           
   839                           
   840                           ; 3 bytes @ 0x23
   841  0043                     	ds	4
   842  0047                     ??___fttol:	
   843                           
   844                           ; 1 bytes @ 0x27
   845  0047                     	ds	4
   846  004B                     ___fttol@sign1:	
   847                           
   848                           ; 1 bytes @ 0x2B
   849  004B                     	ds	1
   850  004C                     ___fttol@lval:	
   851                           
   852                           ; 4 bytes @ 0x2C
   853  004C                     	ds	4
   854  0050                     ___fttol@exp1:	
   855                           
   856                           ; 1 bytes @ 0x30
   857  0050                     	ds	1
   858  0051                     ?_trunc:	
   859  0051                     trunc@x:	
   860                           ; 3 bytes @ 0x31
   861                           
   862                           
   863                           ; 3 bytes @ 0x31
   864  0051                     	ds	3
   865  0054                     ??_trunc:	
   866                           
   867                           ; 1 bytes @ 0x34
   868  0054                     	ds	1
   869  0055                     trunc@i:	
   870                           
   871                           ; 3 bytes @ 0x35
   872  0055                     	ds	3
   873  0058                     trunc@expon:	
   874                           
   875                           ; 2 bytes @ 0x38
   876  0058                     	ds	2
   877  005A                     ?___ftadd:	
   878  005A                     ___ftadd@f1:	
   879                           ; 3 bytes @ 0x3A
   880                           
   881                           
   882                           ; 3 bytes @ 0x3A
   883  005A                     	ds	3
   884  005D                     ___ftadd@f2:	
   885                           
   886                           ; 3 bytes @ 0x3D
   887  005D                     	ds	3
   888  0060                     ??___ftadd:	
   889                           
   890                           ; 1 bytes @ 0x40
   891  0060                     	ds	4
   892  0064                     ___ftadd@sign:	
   893                           
   894                           ; 1 bytes @ 0x44
   895  0064                     	ds	1
   896  0065                     ___ftadd@exp2:	
   897                           
   898                           ; 1 bytes @ 0x45
   899  0065                     	ds	1
   900  0066                     ___ftadd@exp1:	
   901                           
   902                           ; 1 bytes @ 0x46
   903  0066                     	ds	1
   904  0067                     ?_round:	
   905  0067                     round@x:	
   906                           ; 3 bytes @ 0x47
   907                           
   908                           
   909                           ; 3 bytes @ 0x47
   910  0067                     	ds	3
   911  006A                     ??_round:	
   912  006A                     round@f:	
   913                           ; 1 bytes @ 0x4A
   914                           
   915                           
   916                           ; 3 bytes @ 0x4A
   917  006A                     	ds	3
   918  006D                     ?_moveDeg:	
   919  006D                     moveDeg@deg:	
   920                           ; 1 bytes @ 0x4D
   921                           
   922                           
   923                           ; 3 bytes @ 0x4D
   924  006D                     	ds	3
   925                           
   926                           	psect	maintext
   927  0485                     __pmaintext:	
   928 ;;
   929 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   930 ;;
   931 ;; *************** function _main *****************
   932 ;; Defined at:
   933 ;;		line 43 in file "main.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  result          2   13[BANK1 ] int 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : B00/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   947 ;;      Params:         0       0       0       0       0
   948 ;;      Locals:         0       0       2       0       0
   949 ;;      Temps:          0       0       2       0       0
   950 ;;      Totals:         0       0       4       0       0
   951 ;;Total ram usage:        4 bytes
   952 ;; Hardware stack levels required when called:    7
   953 ;; This function calls:
   954 ;;		_initialise
   955 ;;		_lcdSetCursor
   956 ;;		_lcdWriteToDigitBCD
   957 ;;		_move
   958 ;;		_moveDeg
   959 ;;		_readADCData
   960 ;;		_startADCConversion
   961 ;; This function is called by:
   962 ;;		Startup code after reset
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _main
   968  0485                     _main:	
   969                           
   970                           ;main.c: 45: initialise();
   971                           
   972                           ;incstack = 0
   973                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   974  0485  120A  118A  27B8  120A  118A  	fcall	_initialise
   975                           
   976                           ;main.c: 46: startADCConversion();
   977  048A  120A  158A  2766  120A  118A  	fcall	_startADCConversion
   978  048F                     l2482:	
   979                           ;main.c: 49: while(1){
   980                           
   981                           
   982                           ;main.c: 52: if(conversionDone){
   983  048F  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   984  0490  2CBF               	goto	l2494
   985                           
   986                           ;main.c: 53: conversionDone = 0;
   987  0491  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   988                           
   989                           ;main.c: 54: int result = readADCData();
   990  0492  120A  118A  27F0  120A  118A  	fcall	_readADCData
   991  0497  1283               	bcf	3,5	;RP0=0, select bank0
   992  0498  1303               	bcf	3,6	;RP1=0, select bank0
   993  0499  0821               	movf	?_readADCData+1,w
   994  049A  1683               	bsf	3,5	;RP0=1, select bank1
   995  049B  1303               	bcf	3,6	;RP1=0, select bank1
   996  049C  00C6               	movwf	(main@result+1)^(0+128)
   997  049D  1283               	bcf	3,5	;RP0=0, select bank0
   998  049E  1303               	bcf	3,6	;RP1=0, select bank0
   999  049F  0820               	movf	?_readADCData,w
  1000  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  1001  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  1002  04A2  00C5               	movwf	main@result^(0+128)
  1003                           
  1004                           ;main.c: 55: lcdSetCursor(0x00);
  1005  04A3  3000               	movlw	0
  1006  04A4  120A  158A  2753  120A  118A  	fcall	_lcdSetCursor
  1007                           
  1008                           ;main.c: 56: lcdWriteToDigitBCD(result);
  1009  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  1010  04AA  1303               	bcf	3,6	;RP1=0, select bank1
  1011  04AB  0846               	movf	(main@result+1)^(0+128),w
  1012  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  1013  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  1014  04AE  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1015  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  1016  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  1017  04B1  0845               	movf	main@result^(0+128),w
  1018  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1019  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1020  04B4  00A6               	movwf	lcdWriteToDigitBCD@data
  1021  04B5  120A  118A  23FD  120A  118A  	fcall	_lcdWriteToDigitBCD
  1022                           
  1023                           ;main.c: 58: startADCConversion();
  1024  04BA  120A  158A  2766  120A  118A  	fcall	_startADCConversion
  1025  04BF                     l2494:	
  1026                           
  1027                           ;main.c: 60: }
  1028                           ;main.c: 61: if(pb0Pressed){
  1029  04BF  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1030  04C0  2CCB               	goto	l2500
  1031                           
  1032                           ;main.c: 62: move(1,0);
  1033  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1034  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1035  04C3  01AF               	clrf	move@direction
  1036  04C4  3001               	movlw	1
  1037  04C5  120A  118A  2372  120A  118A  	fcall	_move
  1038                           
  1039                           ;main.c: 63: pb0Pressed = 0;
  1040  04CA  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1041  04CB                     l2500:	
  1042                           
  1043                           ;main.c: 64: }
  1044                           ;main.c: 65: if(pb1Pressed){
  1045  04CB  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1046  04CC  2CD8               	goto	l2506
  1047                           
  1048                           ;main.c: 66: move(1,1);
  1049  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1050  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1051  04CF  01AF               	clrf	move@direction
  1052  04D0  0AAF               	incf	move@direction,f
  1053  04D1  3001               	movlw	1
  1054  04D2  120A  118A  2372  120A  118A  	fcall	_move
  1055                           
  1056                           ;main.c: 67: pb1Pressed = 0;
  1057  04D7  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1058  04D8                     l2506:	
  1059                           
  1060                           ;main.c: 68: }
  1061                           ;main.c: 69: if(pb2Pressed){
  1062  04D8  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1063  04D9  2CF4               	goto	l2518
  1064                           
  1065                           ;main.c: 70: if(motorToggle){
  1066  04DA  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1067  04DB  2CE4               	goto	l2512
  1068                           
  1069                           ;main.c: 71: moveDeg(-180);
  1070  04DC  3000               	movlw	0
  1071  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1072  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1073  04DF  00ED               	movwf	moveDeg@deg
  1074  04E0  3034               	movlw	52
  1075  04E1  00EE               	movwf	moveDeg@deg+1
  1076  04E2  30C3               	movlw	195
  1077  04E3  2CEB               	goto	L1
  1078  04E4                     l2512:	
  1079                           ;main.c: 72: }
  1080                           
  1081                           
  1082                           ;main.c: 73: else{
  1083                           ;main.c: 74: moveDeg(180);
  1084  04E4  3000               	movlw	0
  1085  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1086  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1087  04E7  00ED               	movwf	moveDeg@deg
  1088  04E8  3034               	movlw	52
  1089  04E9  00EE               	movwf	moveDeg@deg+1
  1090  04EA  3043               	movlw	67
  1091  04EB                     L1:	
  1092  04EB  00EF               	movwf	moveDeg@deg+2
  1093  04EC  120A  118A  213D  120A  118A  	fcall	_moveDeg
  1094                           
  1095                           ;main.c: 75: }
  1096                           ;main.c: 76: motorToggle = !motorToggle;
  1097  04F1  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1098  04F2  06F0               	xorwf	_motorToggle/(0+8),f
  1099                           
  1100                           ;main.c: 77: pb2Pressed = 0;
  1101  04F3  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1102  04F4                     l2518:	
  1103                           
  1104                           ;main.c: 78: }
  1105                           ;main.c: 79: if(pb3Pressed){
  1106  04F4  1C71               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1107  04F5  2CFB               	goto	l96
  1108                           
  1109                           ;main.c: 80: RB4 = !RB4;
  1110  04F6  3010               	movlw	16
  1111  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1112  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1113  04F9  0686               	xorwf	6,f
  1114                           
  1115                           ;main.c: 81: pb3Pressed = 0;
  1116  04FA  1071               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1117  04FB                     l96:	
  1118                           
  1119                           ;main.c: 82: }
  1120                           ;main.c: 84: _delay((unsigned long)((20)*(20000000/4000.0)));
  1121  04FB  3082               	movlw	130
  1122  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  1123  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  1124  04FE  00C4               	movwf	(??_main^(0+128)+1)
  1125  04FF  30DD               	movlw	221
  1126  0500  00C3               	movwf	??_main^(0+128)
  1127  0501                     u2957:	
  1128  0501  0BC3               	decfsz	??_main^(0+128),f
  1129  0502  2D01               	goto	u2957
  1130  0503  0BC4               	decfsz	(??_main^(0+128)+1),f
  1131  0504  2D01               	goto	u2957
  1132  0505  2D06               	nop2
  1133  0506  2C8F               	goto	l2482
  1134  0507                     __end_of_main:	
  1135                           
  1136                           	psect	text1
  1137  0F66                     __ptext1:	
  1138 ;; *************** function _startADCConversion *****************
  1139 ;; Defined at:
  1140 ;;		line 33 in file "adConv.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1154 ;;      Params:         0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0
  1156 ;;      Temps:          0       2       0       0       0
  1157 ;;      Totals:         0       2       0       0       0
  1158 ;;Total ram usage:        2 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _startADCConversion
  1170  0F66                     _startADCConversion:	
  1171                           
  1172                           ;adConv.c: 35: _delay((unsigned long)((1)*(20000000/4000.0)));
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _startADCConversion: [wreg]
  1176  0F66  3007               	movlw	7
  1177  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0F69  00A1               	movwf	??_startADCConversion+1
  1180  0F6A  307D               	movlw	125
  1181  0F6B  00A0               	movwf	??_startADCConversion
  1182  0F6C                     u2967:	
  1183  0F6C  0BA0               	decfsz	??_startADCConversion,f
  1184  0F6D  2F6C               	goto	u2967
  1185  0F6E  0BA1               	decfsz	??_startADCConversion+1,f
  1186  0F6F  2F6C               	goto	u2967
  1187                           
  1188                           ;adConv.c: 37: GO = 1;
  1189  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0F72  151F               	bsf	31,2	;volatile
  1192  0F73  0008               	return
  1193  0F74                     __end_of_startADCConversion:	
  1194                           
  1195                           	psect	text2
  1196  07F0                     __ptext2:	
  1197 ;; *************** function _readADCData *****************
  1198 ;; Defined at:
  1199 ;;		line 27 in file "adConv.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  ADCResult       2    2[BANK0 ] int 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  2    0[BANK0 ] int 
  1206 ;; Registers used:
  1207 ;;		wreg
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1213 ;;      Params:         0       2       0       0       0
  1214 ;;      Locals:         0       2       0       0       0
  1215 ;;      Temps:          0       0       0       0       0
  1216 ;;      Totals:         0       4       0       0       0
  1217 ;;Total ram usage:        4 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    2
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _readADCData
  1229  07F0                     _readADCData:	
  1230                           
  1231                           ;adConv.c: 29: int ADCResult = (ADRESH<<8) + ADRESL ;
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _readADCData: [wreg]
  1235  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  1236  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  1237  07F2  081E               	movf	30,w	;volatile
  1238  07F3  00A3               	movwf	readADCData@ADCResult+1
  1239  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  1240  07F5  1303               	bcf	3,6	;RP1=0, select bank1
  1241  07F6  081E               	movf	30,w	;volatile
  1242  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1243  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1244  07F9  00A2               	movwf	readADCData@ADCResult
  1245                           
  1246                           ;adConv.c: 30: return ADCResult;
  1247  07FA  0823               	movf	readADCData@ADCResult+1,w
  1248  07FB  00A1               	movwf	?_readADCData+1
  1249  07FC  0822               	movf	readADCData@ADCResult,w
  1250  07FD  00A0               	movwf	?_readADCData
  1251  07FE  0008               	return
  1252  07FF                     __end_of_readADCData:	
  1253                           
  1254                           	psect	text3
  1255  013D                     __ptext3:	
  1256 ;; *************** function _moveDeg *****************
  1257 ;; Defined at:
  1258 ;;		line 63 in file "motor.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  deg             3   77[BANK0 ] int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1272 ;;      Params:         0       3       0       0       0
  1273 ;;      Locals:         0       0      10       0       0
  1274 ;;      Temps:          0       0       1       0       0
  1275 ;;      Totals:         0       3      11       0       0
  1276 ;;Total ram usage:       14 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    6
  1279 ;; This function calls:
  1280 ;;		___ftdiv
  1281 ;;		___ftge
  1282 ;;		___ftneg
  1283 ;;		___fttol
  1284 ;;		_move
  1285 ;;		_round
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _moveDeg
  1293  013D                     _moveDeg:	
  1294                           
  1295                           ;motor.c: 64: char stepsToMove;
  1296                           ;motor.c: 65: if(deg<0){
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1300  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1301  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1302  013F  086D               	movf	moveDeg@deg,w
  1303  0140  00A0               	movwf	___ftge@ff1
  1304  0141  086E               	movf	moveDeg@deg+1,w
  1305  0142  00A1               	movwf	___ftge@ff1+1
  1306  0143  086F               	movf	moveDeg@deg+2,w
  1307  0144  00A2               	movwf	___ftge@ff1+2
  1308  0145  3000               	movlw	0
  1309  0146  00A3               	movwf	___ftge@ff2
  1310  0147  3000               	movlw	0
  1311  0148  00A4               	movwf	___ftge@ff2+1
  1312  0149  3000               	movlw	0
  1313  014A  00A5               	movwf	___ftge@ff2+2
  1314  014B  120A  118A  25D5  120A  118A  	fcall	___ftge
  1315  0150  1803               	btfsc	3,0
  1316  0151  29D2               	goto	l2474
  1317                           
  1318                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1319  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0154  086D               	movf	moveDeg@deg,w
  1322  0155  00B0               	movwf	___ftneg@f1
  1323  0156  086E               	movf	moveDeg@deg+1,w
  1324  0157  00B1               	movwf	___ftneg@f1+1
  1325  0158  086F               	movf	moveDeg@deg+2,w
  1326  0159  00B2               	movwf	___ftneg@f1+2
  1327  015A  120A  158A  275C  120A  118A  	fcall	___ftneg
  1328  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0161  0830               	movf	?___ftneg,w
  1331  0162  00B6               	movwf	___ftdiv@f1
  1332  0163  0831               	movf	?___ftneg+1,w
  1333  0164  00B7               	movwf	___ftdiv@f1+1
  1334  0165  0832               	movf	?___ftneg+2,w
  1335  0166  00B8               	movwf	___ftdiv@f1+2
  1336  0167  3000               	movlw	0
  1337  0168  00B3               	movwf	___ftdiv@f2
  1338  0169  3070               	movlw	112
  1339  016A  00B4               	movwf	___ftdiv@f2+1
  1340  016B  3040               	movlw	64
  1341  016C  00B5               	movwf	___ftdiv@f2+2
  1342  016D  120A  118A  222C  120A  118A  	fcall	___ftdiv
  1343  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0174  0833               	movf	?___ftdiv,w
  1346  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1347  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1348  0177  00B9               	movwf	_moveDeg$652^(0+128)
  1349  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1351  017A  0834               	movf	?___ftdiv+1,w
  1352  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1353  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1354  017D  00BA               	movwf	(_moveDeg$652+1)^(0+128)
  1355  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1356  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0180  0835               	movf	?___ftdiv+2,w
  1358  0181  1683               	bsf	3,5	;RP0=1, select bank1
  1359  0182  1303               	bcf	3,6	;RP1=0, select bank1
  1360  0183  00BB               	movwf	(_moveDeg$652+2)^(0+128)
  1361                           
  1362                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1363  0184  0839               	movf	_moveDeg$652^(0+128),w
  1364  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1365  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1366  0187  00E7               	movwf	round@x
  1367  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1368  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1369  018A  083A               	movf	(_moveDeg$652+1)^(0+128),w
  1370  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1371  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1372  018D  00E8               	movwf	round@x+1
  1373  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1374  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1375  0190  083B               	movf	(_moveDeg$652+2)^(0+128),w
  1376  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0193  00E9               	movwf	round@x+2
  1379  0194  120A  118A  2575  120A  118A  	fcall	_round
  1380  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1381  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1382  019B  0867               	movf	?_round,w
  1383  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1384  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1385  019E  00BC               	movwf	_moveDeg$653^(0+128)
  1386  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1387  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1388  01A1  0868               	movf	?_round+1,w
  1389  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1390  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1391  01A4  00BD               	movwf	(_moveDeg$653+1)^(0+128)
  1392  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1393  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1394  01A7  0869               	movf	?_round+2,w
  1395  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1396  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1397  01AA  00BE               	movwf	(_moveDeg$653+2)^(0+128)
  1398                           
  1399                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1400  01AB  083C               	movf	_moveDeg$653^(0+128),w
  1401  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1402  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1403  01AE  00C3               	movwf	___fttol@f1
  1404  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1405  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1406  01B1  083D               	movf	(_moveDeg$653+1)^(0+128),w
  1407  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1408  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1409  01B4  00C4               	movwf	___fttol@f1+1
  1410  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1411  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1412  01B7  083E               	movf	(_moveDeg$653+2)^(0+128),w
  1413  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1414  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1415  01BA  00C5               	movwf	___fttol@f1+2
  1416  01BB  120A  118A  22E4  120A  118A  	fcall	___fttol
  1417  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1418  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1419  01C2  0843               	movf	?___fttol,w
  1420  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  1421  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  1422  01C5  00B8               	movwf	??_moveDeg^(0+128)
  1423  01C6  0838               	movf	??_moveDeg^(0+128),w
  1424  01C7  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1425                           
  1426                           ;motor.c: 67: move(stepsToMove,0);
  1427  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1428  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1429  01CA  01AF               	clrf	move@direction
  1430  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1431  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1432  01CD  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1433  01CE  120A  118A  2372   	fcall	_move
  1434                           
  1435                           ;motor.c: 68: }
  1436  01D1  0008               	return
  1437  01D2                     l2474:	
  1438                           
  1439                           ;motor.c: 69: else{
  1440                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1441  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1442  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1443  01D4  086D               	movf	moveDeg@deg,w
  1444  01D5  00B6               	movwf	___ftdiv@f1
  1445  01D6  086E               	movf	moveDeg@deg+1,w
  1446  01D7  00B7               	movwf	___ftdiv@f1+1
  1447  01D8  086F               	movf	moveDeg@deg+2,w
  1448  01D9  00B8               	movwf	___ftdiv@f1+2
  1449  01DA  3000               	movlw	0
  1450  01DB  00B3               	movwf	___ftdiv@f2
  1451  01DC  3070               	movlw	112
  1452  01DD  00B4               	movwf	___ftdiv@f2+1
  1453  01DE  3040               	movlw	64
  1454  01DF  00B5               	movwf	___ftdiv@f2+2
  1455  01E0  120A  118A  222C  120A  118A  	fcall	___ftdiv
  1456  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1457  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1458  01E7  0833               	movf	?___ftdiv,w
  1459  01E8  00E7               	movwf	round@x
  1460  01E9  0834               	movf	?___ftdiv+1,w
  1461  01EA  00E8               	movwf	round@x+1
  1462  01EB  0835               	movf	?___ftdiv+2,w
  1463  01EC  00E9               	movwf	round@x+2
  1464  01ED  120A  118A  2575  120A  118A  	fcall	_round
  1465  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1466  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1467  01F4  0867               	movf	?_round,w
  1468  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1469  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1470  01F7  00BF               	movwf	_moveDeg$654^(0+128)
  1471  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1472  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1473  01FA  0868               	movf	?_round+1,w
  1474  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1475  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1476  01FD  00C0               	movwf	(_moveDeg$654+1)^(0+128)
  1477  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1478  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0200  0869               	movf	?_round+2,w
  1480  0201  1683               	bsf	3,5	;RP0=1, select bank1
  1481  0202  1303               	bcf	3,6	;RP1=0, select bank1
  1482  0203  00C1               	movwf	(_moveDeg$654+2)^(0+128)
  1483                           
  1484                           ;motor.c: 69: else{
  1485                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1486  0204  083F               	movf	_moveDeg$654^(0+128),w
  1487  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0207  00C3               	movwf	___fttol@f1
  1490  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1492  020A  0840               	movf	(_moveDeg$654+1)^(0+128),w
  1493  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1494  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1495  020D  00C4               	movwf	___fttol@f1+1
  1496  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1497  020F  1303               	bcf	3,6	;RP1=0, select bank1
  1498  0210  0841               	movf	(_moveDeg$654+2)^(0+128),w
  1499  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1501  0213  00C5               	movwf	___fttol@f1+2
  1502  0214  120A  118A  22E4  120A  118A  	fcall	___fttol
  1503  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1504  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1505  021B  0843               	movf	?___fttol,w
  1506  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1507  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1508  021E  00B8               	movwf	??_moveDeg^(0+128)
  1509  021F  0838               	movf	??_moveDeg^(0+128),w
  1510  0220  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1511                           
  1512                           ;motor.c: 71: move(stepsToMove,1);
  1513  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0223  01AF               	clrf	move@direction
  1516  0224  0AAF               	incf	move@direction,f
  1517  0225  1683               	bsf	3,5	;RP0=1, select bank1
  1518  0226  1303               	bcf	3,6	;RP1=0, select bank1
  1519  0227  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1520  0228  120A  118A  2372   	fcall	_move
  1521  022B  0008               	return
  1522  022C                     __end_of_moveDeg:	
  1523                           
  1524                           	psect	text4
  1525  0575                     __ptext4:	
  1526 ;; *************** function _round *****************
  1527 ;; Defined at:
  1528 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  x               3   71[BANK0 ] void 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  f               3   74[BANK0 ] void 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  3   71[BANK0 ] void 
  1535 ;; Registers used:
  1536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1542 ;;      Params:         0       3       0       0       0
  1543 ;;      Locals:         0       3       0       0       0
  1544 ;;      Temps:          0       0       0       0       0
  1545 ;;      Totals:         0       6       0       0       0
  1546 ;;Total ram usage:        6 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    5
  1549 ;; This function calls:
  1550 ;;		___ftadd
  1551 ;;		___ftneg
  1552 ;;		_trunc
  1553 ;; This function is called by:
  1554 ;;		_moveDeg
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           
  1559                           ;psect for function _round
  1560  0575                     _round:	
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1564  0575  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0576  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0577  0867               	movf	round@x,w
  1567  0578  00DA               	movwf	___ftadd@f1
  1568  0579  0868               	movf	round@x+1,w
  1569  057A  00DB               	movwf	___ftadd@f1+1
  1570  057B  0869               	movf	round@x+2,w
  1571  057C  00DC               	movwf	___ftadd@f1+2
  1572  057D  0867               	movf	round@x,w
  1573  057E  00D1               	movwf	trunc@x
  1574  057F  0868               	movf	round@x+1,w
  1575  0580  00D2               	movwf	trunc@x+1
  1576  0581  0869               	movf	round@x+2,w
  1577  0582  00D3               	movwf	trunc@x+2
  1578  0583  120A  118A  2682  120A  118A  	fcall	_trunc
  1579  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1580  0589  1303               	bcf	3,6	;RP1=0, select bank0
  1581  058A  0851               	movf	?_trunc,w
  1582  058B  00B0               	movwf	___ftneg@f1
  1583  058C  0852               	movf	?_trunc+1,w
  1584  058D  00B1               	movwf	___ftneg@f1+1
  1585  058E  0853               	movf	?_trunc+2,w
  1586  058F  00B2               	movwf	___ftneg@f1+2
  1587  0590  120A  158A  275C  120A  118A  	fcall	___ftneg
  1588  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0597  0830               	movf	?___ftneg,w
  1591  0598  00DD               	movwf	___ftadd@f2
  1592  0599  0831               	movf	?___ftneg+1,w
  1593  059A  00DE               	movwf	___ftadd@f2+1
  1594  059B  0832               	movf	?___ftneg+2,w
  1595  059C  00DF               	movwf	___ftadd@f2+2
  1596  059D  120A  118A  2034  120A  118A  	fcall	___ftadd
  1597  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1598  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1599  05A4  085A               	movf	?___ftadd,w
  1600  05A5  00EA               	movwf	round@f
  1601  05A6  085B               	movf	?___ftadd+1,w
  1602  05A7  00EB               	movwf	round@f+1
  1603  05A8  085C               	movf	?___ftadd+2,w
  1604  05A9  00EC               	movwf	round@f+2
  1605  05AA  086A               	movf	round@f,w
  1606  05AB  00DA               	movwf	___ftadd@f1
  1607  05AC  086B               	movf	round@f+1,w
  1608  05AD  00DB               	movwf	___ftadd@f1+1
  1609  05AE  086C               	movf	round@f+2,w
  1610  05AF  00DC               	movwf	___ftadd@f1+2
  1611  05B0  0867               	movf	round@x,w
  1612  05B1  00DD               	movwf	___ftadd@f2
  1613  05B2  0868               	movf	round@x+1,w
  1614  05B3  00DE               	movwf	___ftadd@f2+1
  1615  05B4  0869               	movf	round@x+2,w
  1616  05B5  00DF               	movwf	___ftadd@f2+2
  1617  05B6  120A  118A  2034  120A  118A  	fcall	___ftadd
  1618  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1619  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1620  05BD  085A               	movf	?___ftadd,w
  1621  05BE  00E7               	movwf	round@x
  1622  05BF  085B               	movf	?___ftadd+1,w
  1623  05C0  00E8               	movwf	round@x+1
  1624  05C1  085C               	movf	?___ftadd+2,w
  1625  05C2  00E9               	movwf	round@x+2
  1626  05C3  0867               	movf	round@x,w
  1627  05C4  00D1               	movwf	trunc@x
  1628  05C5  0868               	movf	round@x+1,w
  1629  05C6  00D2               	movwf	trunc@x+1
  1630  05C7  0869               	movf	round@x+2,w
  1631  05C8  00D3               	movwf	trunc@x+2
  1632  05C9  120A  118A  2682   	fcall	_trunc
  1633  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1634  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1635  05CE  0851               	movf	?_trunc,w
  1636  05CF  00E7               	movwf	?_round
  1637  05D0  0852               	movf	?_trunc+1,w
  1638  05D1  00E8               	movwf	?_round+1
  1639  05D2  0853               	movf	?_trunc+2,w
  1640  05D3  00E9               	movwf	?_round+2
  1641  05D4  0008               	return
  1642  05D5                     __end_of_round:	
  1643                           
  1644                           	psect	text5
  1645  0682                     __ptext5:	
  1646 ;; *************** function _trunc *****************
  1647 ;; Defined at:
  1648 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  x               3   49[BANK0 ] void 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  i               3   53[BANK0 ] void 
  1653 ;;  expon           2   56[BANK0 ] int 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  3   49[BANK0 ] int 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         0       3       0       0       0
  1664 ;;      Locals:         0       5       0       0       0
  1665 ;;      Temps:          0       1       0       0       0
  1666 ;;      Totals:         0       9       0       0       0
  1667 ;;Total ram usage:        9 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		___altoft
  1672 ;;		___fttol
  1673 ;;		_frexp
  1674 ;; This function is called by:
  1675 ;;		_round
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _trunc
  1681  0682                     _trunc:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1685  0682  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0683  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0684  0851               	movf	trunc@x,w
  1688  0685  00A0               	movwf	frexp@value
  1689  0686  0852               	movf	trunc@x+1,w
  1690  0687  00A1               	movwf	frexp@value+1
  1691  0688  0853               	movf	trunc@x+2,w
  1692  0689  00A2               	movwf	frexp@value+2
  1693  068A  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1694  068B  00D4               	movwf	??_trunc
  1695  068C  0854               	movf	??_trunc,w
  1696  068D  00A3               	movwf	frexp@eptr
  1697  068E  120A  118A  270E  120A  118A  	fcall	_frexp
  1698  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1700  0695  1FD9               	btfss	trunc@expon+1,7
  1701  0696  2E9E               	goto	l2270
  1702  0697  3000               	movlw	0
  1703  0698  00D1               	movwf	?_trunc
  1704  0699  3000               	movlw	0
  1705  069A  00D2               	movwf	?_trunc+1
  1706  069B  3000               	movlw	0
  1707  069C  00D3               	movwf	?_trunc+2
  1708  069D  0008               	return
  1709  069E                     l2270:	
  1710  069E  3000               	movlw	0
  1711  069F  0259               	subwf	trunc@expon+1,w
  1712  06A0  3015               	movlw	21
  1713  06A1  1903               	skipnz
  1714  06A2  0258               	subwf	trunc@expon,w
  1715  06A3  1803               	btfsc	3,0
  1716  06A4  0008               	return
  1717  06A5  0851               	movf	trunc@x,w
  1718  06A6  00C3               	movwf	___fttol@f1
  1719  06A7  0852               	movf	trunc@x+1,w
  1720  06A8  00C4               	movwf	___fttol@f1+1
  1721  06A9  0853               	movf	trunc@x+2,w
  1722  06AA  00C5               	movwf	___fttol@f1+2
  1723  06AB  120A  118A  22E4  120A  118A  	fcall	___fttol
  1724  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1725  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1726  06B2  0846               	movf	?___fttol+3,w
  1727  06B3  00AB               	movwf	___altoft@c+3
  1728  06B4  0845               	movf	?___fttol+2,w
  1729  06B5  00AA               	movwf	___altoft@c+2
  1730  06B6  0844               	movf	?___fttol+1,w
  1731  06B7  00A9               	movwf	___altoft@c+1
  1732  06B8  0843               	movf	?___fttol,w
  1733  06B9  00A8               	movwf	___altoft@c
  1734  06BA  120A  118A  26CC   	fcall	___altoft
  1735  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1736  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1737  06BF  0828               	movf	?___altoft,w
  1738  06C0  00D5               	movwf	trunc@i
  1739  06C1  0829               	movf	?___altoft+1,w
  1740  06C2  00D6               	movwf	trunc@i+1
  1741  06C3  082A               	movf	?___altoft+2,w
  1742  06C4  00D7               	movwf	trunc@i+2
  1743  06C5  0855               	movf	trunc@i,w
  1744  06C6  00D1               	movwf	?_trunc
  1745  06C7  0856               	movf	trunc@i+1,w
  1746  06C8  00D2               	movwf	?_trunc+1
  1747  06C9  0857               	movf	trunc@i+2,w
  1748  06CA  00D3               	movwf	?_trunc+2
  1749  06CB  0008               	return
  1750  06CC                     __end_of_trunc:	
  1751                           
  1752                           	psect	text6
  1753  070E                     __ptext6:	
  1754 ;; *************** function _frexp *****************
  1755 ;; Defined at:
  1756 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  value           3    0[BANK0 ] int 
  1759 ;;  eptr            1    3[BANK0 ] PTR int 
  1760 ;;		 -> trunc@expon(2), 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  3    0[BANK0 ] PTR int 
  1765 ;; Registers used:
  1766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1772 ;;      Params:         0       4       0       0       0
  1773 ;;      Locals:         0       0       0       0       0
  1774 ;;      Temps:          0       2       0       0       0
  1775 ;;      Totals:         0       6       0       0       0
  1776 ;;Total ram usage:        6 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    2
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_trunc
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           
  1787                           ;psect for function _frexp
  1788  070E                     _frexp:	
  1789                           
  1790                           ;incstack = 0
  1791                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1792  070E  1283               	bcf	3,5	;RP0=0, select bank0
  1793  070F  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0710  0822               	movf	frexp@value+2,w
  1795  0711  0421               	iorwf	frexp@value+1,w
  1796  0712  0420               	iorwf	frexp@value,w
  1797  0713  1D03               	skipz
  1798  0714  2F1C               	goto	l2140
  1799  0715  0823               	movf	frexp@eptr,w
  1800  0716  0084               	movwf	4
  1801  0717  1383               	bcf	3,7	;select IRP bank0
  1802  0718  0180               	clrf	0
  1803  0719  0A84               	incf	4,f
  1804  071A  0180               	clrf	0
  1805                           
  1806                           ;	Return value of _frexp is never used
  1807  071B  0008               	return
  1808  071C                     l2140:	
  1809  071C  0822               	movf	frexp@value+2,w
  1810  071D  397F               	andlw	127
  1811  071E  00A4               	movwf	??_frexp
  1812  071F  01A5               	clrf	??_frexp+1
  1813  0720  1003               	clrc
  1814  0721  0DA4               	rlf	??_frexp,f
  1815  0722  0DA5               	rlf	??_frexp+1,f
  1816  0723  0823               	movf	frexp@eptr,w
  1817  0724  0084               	movwf	4
  1818  0725  0824               	movf	??_frexp,w
  1819  0726  1383               	bcf	3,7	;select IRP bank0
  1820  0727  0080               	movwf	0
  1821  0728  0A84               	incf	4,f
  1822  0729  0825               	movf	??_frexp+1,w
  1823  072A  0080               	movwf	0
  1824  072B  0D21               	rlf	frexp@value+1,w
  1825  072C  0D21               	rlf	frexp@value+1,w
  1826  072D  3901               	andlw	1
  1827  072E  00A4               	movwf	??_frexp
  1828  072F  01A5               	clrf	??_frexp+1
  1829  0730  0823               	movf	frexp@eptr,w
  1830  0731  0084               	movwf	4
  1831  0732  0824               	movf	??_frexp,w
  1832  0733  0480               	iorwf	0,f
  1833  0734  0A84               	incf	4,f
  1834  0735  0825               	movf	??_frexp+1,w
  1835  0736  0480               	iorwf	0,f
  1836  0737  0823               	movf	frexp@eptr,w
  1837  0738  0084               	movwf	4
  1838  0739  3082               	movlw	130
  1839  073A  0780               	addwf	0,f
  1840  073B  0F84               	incfsz	4,f
  1841  073C  0800               	movf	0,w
  1842  073D  1803               	skipnc
  1843  073E  0A00               	incf	0,w
  1844  073F  00FF               	movwf	127
  1845  0740  30FF               	movlw	255
  1846  0741  077F               	addwf	127,w
  1847  0742  0080               	movwf	0
  1848  0743  0384               	decf	4,f
  1849  0744  0822               	movf	frexp@value+2,w
  1850  0745  3980               	andlw	-128
  1851  0746  383F               	iorlw	63
  1852  0747  00A2               	movwf	frexp@value+2
  1853  0748  13A1               	bcf	frexp@value+1,7
  1854  0749  0008               	return
  1855  074A                     __end_of_frexp:	
  1856                           ;	Return value of _frexp is never used
  1857                           
  1858                           
  1859                           	psect	text7
  1860  02E4                     __ptext7:	
  1861 ;; *************** function ___fttol *****************
  1862 ;; Defined at:
  1863 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  f1              3   35[BANK0 ] float 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  lval            4   44[BANK0 ] unsigned long 
  1868 ;;  exp1            1   48[BANK0 ] unsigned char 
  1869 ;;  sign1           1   43[BANK0 ] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  4   35[BANK0 ] long 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         0       4       0       0       0
  1880 ;;      Locals:         0       6       0       0       0
  1881 ;;      Temps:          0       4       0       0       0
  1882 ;;      Totals:         0      14       0       0       0
  1883 ;;Total ram usage:       14 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    2
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_moveDeg
  1890 ;;		_trunc
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function ___fttol
  1896  02E4                     ___fttol:	
  1897                           
  1898                           ;incstack = 0
  1899                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1900  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1901  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1902  02E6  0843               	movf	___fttol@f1,w
  1903  02E7  00C7               	movwf	??___fttol
  1904  02E8  0844               	movf	___fttol@f1+1,w
  1905  02E9  00C8               	movwf	??___fttol+1
  1906  02EA  0845               	movf	___fttol@f1+2,w
  1907  02EB  00C9               	movwf	??___fttol+2
  1908  02EC  1003               	clrc
  1909  02ED  0D48               	rlf	??___fttol+1,w
  1910  02EE  0D49               	rlf	??___fttol+2,w
  1911  02EF  00CA               	movwf	??___fttol+3
  1912  02F0  084A               	movf	??___fttol+3,w
  1913  02F1  00D0               	movwf	___fttol@exp1
  1914  02F2  0850               	movf	___fttol@exp1,w
  1915  02F3  1D03               	btfss	3,2
  1916  02F4  2AFE               	goto	l1524
  1917  02F5  3000               	movlw	0
  1918  02F6  00C6               	movwf	?___fttol+3
  1919  02F7  3000               	movlw	0
  1920  02F8  00C5               	movwf	?___fttol+2
  1921  02F9  3000               	movlw	0
  1922  02FA  00C4               	movwf	?___fttol+1
  1923  02FB  3000               	movlw	0
  1924  02FC  00C3               	movwf	?___fttol
  1925  02FD  0008               	return
  1926  02FE                     l1524:	
  1927  02FE  0843               	movf	___fttol@f1,w
  1928  02FF  00C7               	movwf	??___fttol
  1929  0300  0844               	movf	___fttol@f1+1,w
  1930  0301  00C8               	movwf	??___fttol+1
  1931  0302  0845               	movf	___fttol@f1+2,w
  1932  0303  00C9               	movwf	??___fttol+2
  1933  0304  3017               	movlw	23
  1934  0305                     u1295:	
  1935  0305  1003               	clrc
  1936  0306  0CC9               	rrf	??___fttol+2,f
  1937  0307  0CC8               	rrf	??___fttol+1,f
  1938  0308  0CC7               	rrf	??___fttol,f
  1939  0309  3EFF               	addlw	-1
  1940  030A  1D03               	skipz
  1941  030B  2B05               	goto	u1295
  1942  030C  0847               	movf	??___fttol,w
  1943  030D  00CA               	movwf	??___fttol+3
  1944  030E  084A               	movf	??___fttol+3,w
  1945  030F  00CB               	movwf	___fttol@sign1
  1946  0310  17C4               	bsf	___fttol@f1+1,7
  1947  0311  30FF               	movlw	255
  1948  0312  05C3               	andwf	___fttol@f1,f
  1949  0313  30FF               	movlw	255
  1950  0314  05C4               	andwf	___fttol@f1+1,f
  1951  0315  3000               	movlw	0
  1952  0316  05C5               	andwf	___fttol@f1+2,f
  1953  0317  0843               	movf	___fttol@f1,w
  1954  0318  00CC               	movwf	___fttol@lval
  1955  0319  0844               	movf	___fttol@f1+1,w
  1956  031A  00CD               	movwf	___fttol@lval+1
  1957  031B  0845               	movf	___fttol@f1+2,w
  1958  031C  00CE               	movwf	___fttol@lval+2
  1959  031D  01CF               	clrf	___fttol@lval+3
  1960  031E  308E               	movlw	142
  1961  031F  02D0               	subwf	___fttol@exp1,f
  1962  0320  1FD0               	btfss	___fttol@exp1,7
  1963  0321  2B40               	goto	l1544
  1964  0322  0850               	movf	___fttol@exp1,w
  1965  0323  3A80               	xorlw	128
  1966  0324  3E8F               	addlw	143
  1967  0325  1803               	skipnc
  1968  0326  2B30               	goto	l1542
  1969  0327  3000               	movlw	0
  1970  0328  00C6               	movwf	?___fttol+3
  1971  0329  3000               	movlw	0
  1972  032A  00C5               	movwf	?___fttol+2
  1973  032B  3000               	movlw	0
  1974  032C  00C4               	movwf	?___fttol+1
  1975  032D  3000               	movlw	0
  1976  032E  00C3               	movwf	?___fttol
  1977  032F  0008               	return
  1978  0330                     l1542:	
  1979  0330  3001               	movlw	1
  1980  0331                     u1325:	
  1981  0331  1003               	clrc
  1982  0332  0CCF               	rrf	___fttol@lval+3,f
  1983  0333  0CCE               	rrf	___fttol@lval+2,f
  1984  0334  0CCD               	rrf	___fttol@lval+1,f
  1985  0335  0CCC               	rrf	___fttol@lval,f
  1986  0336  3EFF               	addlw	-1
  1987  0337  1D03               	skipz
  1988  0338  2B31               	goto	u1325
  1989  0339  3001               	movlw	1
  1990  033A  00C7               	movwf	??___fttol
  1991  033B  0847               	movf	??___fttol,w
  1992  033C  07D0               	addwf	___fttol@exp1,f
  1993  033D  1903               	btfsc	3,2
  1994  033E  2B5B               	goto	l1552
  1995  033F  2B30               	goto	l1542
  1996  0340                     l1544:	
  1997  0340  3018               	movlw	24
  1998  0341  0250               	subwf	___fttol@exp1,w
  1999  0342  1C03               	skipc
  2000  0343  2B58               	goto	l646
  2001  0344  3000               	movlw	0
  2002  0345  00C6               	movwf	?___fttol+3
  2003  0346  3000               	movlw	0
  2004  0347  00C5               	movwf	?___fttol+2
  2005  0348  3000               	movlw	0
  2006  0349  00C4               	movwf	?___fttol+1
  2007  034A  3000               	movlw	0
  2008  034B  00C3               	movwf	?___fttol
  2009  034C  0008               	return
  2010  034D                     l1550:	
  2011  034D  3001               	movlw	1
  2012  034E  00C7               	movwf	??___fttol
  2013  034F                     u1355:	
  2014  034F  1003               	clrc
  2015  0350  0DCC               	rlf	___fttol@lval,f
  2016  0351  0DCD               	rlf	___fttol@lval+1,f
  2017  0352  0DCE               	rlf	___fttol@lval+2,f
  2018  0353  0DCF               	rlf	___fttol@lval+3,f
  2019  0354  0BC7               	decfsz	??___fttol,f
  2020  0355  2B4F               	goto	u1355
  2021  0356  3001               	movlw	1
  2022  0357  02D0               	subwf	___fttol@exp1,f
  2023  0358                     l646:	
  2024  0358  0850               	movf	___fttol@exp1,w
  2025  0359  1D03               	btfss	3,2
  2026  035A  2B4D               	goto	l1550
  2027  035B                     l1552:	
  2028  035B  084B               	movf	___fttol@sign1,w
  2029  035C  1903               	btfsc	3,2
  2030  035D  2B69               	goto	l1556
  2031  035E  09CC               	comf	___fttol@lval,f
  2032  035F  09CD               	comf	___fttol@lval+1,f
  2033  0360  09CE               	comf	___fttol@lval+2,f
  2034  0361  09CF               	comf	___fttol@lval+3,f
  2035  0362  0ACC               	incf	___fttol@lval,f
  2036  0363  1903               	skipnz
  2037  0364  0ACD               	incf	___fttol@lval+1,f
  2038  0365  1903               	skipnz
  2039  0366  0ACE               	incf	___fttol@lval+2,f
  2040  0367  1903               	skipnz
  2041  0368  0ACF               	incf	___fttol@lval+3,f
  2042  0369                     l1556:	
  2043  0369  084F               	movf	___fttol@lval+3,w
  2044  036A  00C6               	movwf	?___fttol+3
  2045  036B  084E               	movf	___fttol@lval+2,w
  2046  036C  00C5               	movwf	?___fttol+2
  2047  036D  084D               	movf	___fttol@lval+1,w
  2048  036E  00C4               	movwf	?___fttol+1
  2049  036F  084C               	movf	___fttol@lval,w
  2050  0370  00C3               	movwf	?___fttol
  2051  0371  0008               	return
  2052  0372                     __end_of___fttol:	
  2053                           
  2054                           	psect	text8
  2055  06CC                     __ptext8:	
  2056 ;; *************** function ___altoft *****************
  2057 ;; Defined at:
  2058 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  c               4    8[BANK0 ] long 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  sign            1   15[BANK0 ] unsigned char 
  2063 ;;  exp             1   14[BANK0 ] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  3    8[BANK0 ] float 
  2066 ;; Registers used:
  2067 ;;		wreg, status,2, status,0, pclath, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2073 ;;      Params:         0       4       0       0       0
  2074 ;;      Locals:         0       2       0       0       0
  2075 ;;      Temps:          0       2       0       0       0
  2076 ;;      Totals:         0       8       0       0       0
  2077 ;;Total ram usage:        8 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    3
  2080 ;; This function calls:
  2081 ;;		___ftpack
  2082 ;; This function is called by:
  2083 ;;		_trunc
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           
  2088                           ;psect for function ___altoft
  2089  06CC                     ___altoft:	
  2090                           
  2091                           ;incstack = 0
  2092                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2093  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  2094  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  2095  06CE  01AF               	clrf	___altoft@sign
  2096  06CF  308E               	movlw	142
  2097  06D0  00AC               	movwf	??___altoft
  2098  06D1  082C               	movf	??___altoft,w
  2099  06D2  00AE               	movwf	___altoft@exp
  2100  06D3  1FAB               	btfss	___altoft@c+3,7
  2101  06D4  2EE2               	goto	l2128
  2102  06D5  09A8               	comf	___altoft@c,f
  2103  06D6  09A9               	comf	___altoft@c+1,f
  2104  06D7  09AA               	comf	___altoft@c+2,f
  2105  06D8  09AB               	comf	___altoft@c+3,f
  2106  06D9  0AA8               	incf	___altoft@c,f
  2107  06DA  1903               	skipnz
  2108  06DB  0AA9               	incf	___altoft@c+1,f
  2109  06DC  1903               	skipnz
  2110  06DD  0AAA               	incf	___altoft@c+2,f
  2111  06DE  1903               	skipnz
  2112  06DF  0AAB               	incf	___altoft@c+3,f
  2113  06E0  01AF               	clrf	___altoft@sign
  2114  06E1  0AAF               	incf	___altoft@sign,f
  2115  06E2                     l2128:	
  2116  06E2  30FF               	movlw	255
  2117  06E3  052B               	andwf	___altoft@c+3,w
  2118  06E4  1903               	btfsc	3,2
  2119  06E5  2EF4               	goto	l2130
  2120  06E6  3001               	movlw	1
  2121  06E7                     u2345:	
  2122  06E7  1003               	clrc
  2123  06E8  0CAB               	rrf	___altoft@c+3,f
  2124  06E9  0CAA               	rrf	___altoft@c+2,f
  2125  06EA  0CA9               	rrf	___altoft@c+1,f
  2126  06EB  0CA8               	rrf	___altoft@c,f
  2127  06EC  3EFF               	addlw	-1
  2128  06ED  1D03               	skipz
  2129  06EE  2EE7               	goto	u2345
  2130  06EF  3001               	movlw	1
  2131  06F0  00AC               	movwf	??___altoft
  2132  06F1  082C               	movf	??___altoft,w
  2133  06F2  07AE               	addwf	___altoft@exp,f
  2134  06F3  2EE2               	goto	l2128
  2135  06F4                     l2130:	
  2136  06F4  0828               	movf	___altoft@c,w
  2137  06F5  00A0               	movwf	___ftpack@arg
  2138  06F6  0829               	movf	___altoft@c+1,w
  2139  06F7  00A1               	movwf	___ftpack@arg+1
  2140  06F8  082A               	movf	___altoft@c+2,w
  2141  06F9  00A2               	movwf	___ftpack@arg+2
  2142  06FA  082E               	movf	___altoft@exp,w
  2143  06FB  00AC               	movwf	??___altoft
  2144  06FC  082C               	movf	??___altoft,w
  2145  06FD  00A3               	movwf	___ftpack@exp
  2146  06FE  082F               	movf	___altoft@sign,w
  2147  06FF  00AD               	movwf	??___altoft+1
  2148  0700  082D               	movf	??___altoft+1,w
  2149  0701  00A4               	movwf	___ftpack@sign
  2150  0702  120A  118A  2507   	fcall	___ftpack
  2151  0705  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0706  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0707  0820               	movf	?___ftpack,w
  2154  0708  00A8               	movwf	?___altoft
  2155  0709  0821               	movf	?___ftpack+1,w
  2156  070A  00A9               	movwf	?___altoft+1
  2157  070B  0822               	movf	?___ftpack+2,w
  2158  070C  00AA               	movwf	?___altoft+2
  2159  070D  0008               	return
  2160  070E                     __end_of___altoft:	
  2161                           
  2162                           	psect	text9
  2163  0F5C                     __ptext9:	
  2164 ;; *************** function ___ftneg *****************
  2165 ;; Defined at:
  2166 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  f1              3   16[BANK0 ] float 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  3   16[BANK0 ] float 
  2173 ;; Registers used:
  2174 ;;		wreg
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         0       3       0       0       0
  2181 ;;      Locals:         0       0       0       0       0
  2182 ;;      Temps:          0       0       0       0       0
  2183 ;;      Totals:         0       3       0       0       0
  2184 ;;Total ram usage:        3 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    2
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_moveDeg
  2191 ;;		_round
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function ___ftneg
  2197  0F5C                     ___ftneg:	
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in ___ftneg: [wreg]
  2201  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  2203  0F5E  0832               	movf	___ftneg@f1+2,w
  2204  0F5F  0431               	iorwf	___ftneg@f1+1,w
  2205  0F60  0430               	iorwf	___ftneg@f1,w
  2206  0F61  1903               	skipnz
  2207  0F62  0008               	return
  2208  0F63  3080               	movlw	128
  2209  0F64  06B2               	xorwf	___ftneg@f1+2,f
  2210  0F65  0008               	return
  2211  0F66                     __end_of___ftneg:	
  2212                           
  2213                           	psect	text10
  2214  0034                     __ptext10:	
  2215 ;; *************** function ___ftadd *****************
  2216 ;; Defined at:
  2217 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  f1              3   58[BANK0 ] float 
  2220 ;;  f2              3   61[BANK0 ] float 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  exp1            1   70[BANK0 ] unsigned char 
  2223 ;;  exp2            1   69[BANK0 ] unsigned char 
  2224 ;;  sign            1   68[BANK0 ] unsigned char 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  3   58[BANK0 ] float 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       6       0       0       0
  2235 ;;      Locals:         0       3       0       0       0
  2236 ;;      Temps:          0       4       0       0       0
  2237 ;;      Totals:         0      13       0       0       0
  2238 ;;Total ram usage:       13 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    3
  2241 ;; This function calls:
  2242 ;;		___ftpack
  2243 ;; This function is called by:
  2244 ;;		_round
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function ___ftadd
  2250  0034                     ___ftadd:	
  2251                           
  2252                           ;incstack = 0
  2253                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2254  0034  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0035  1303               	bcf	3,6	;RP1=0, select bank0
  2256  0036  085A               	movf	___ftadd@f1,w
  2257  0037  00E0               	movwf	??___ftadd
  2258  0038  085B               	movf	___ftadd@f1+1,w
  2259  0039  00E1               	movwf	??___ftadd+1
  2260  003A  085C               	movf	___ftadd@f1+2,w
  2261  003B  00E2               	movwf	??___ftadd+2
  2262  003C  1003               	clrc
  2263  003D  0D61               	rlf	??___ftadd+1,w
  2264  003E  0D62               	rlf	??___ftadd+2,w
  2265  003F  00E3               	movwf	??___ftadd+3
  2266  0040  0863               	movf	??___ftadd+3,w
  2267  0041  00E6               	movwf	___ftadd@exp1
  2268  0042  085D               	movf	___ftadd@f2,w
  2269  0043  00E0               	movwf	??___ftadd
  2270  0044  085E               	movf	___ftadd@f2+1,w
  2271  0045  00E1               	movwf	??___ftadd+1
  2272  0046  085F               	movf	___ftadd@f2+2,w
  2273  0047  00E2               	movwf	??___ftadd+2
  2274  0048  1003               	clrc
  2275  0049  0D61               	rlf	??___ftadd+1,w
  2276  004A  0D62               	rlf	??___ftadd+2,w
  2277  004B  00E3               	movwf	??___ftadd+3
  2278  004C  0863               	movf	??___ftadd+3,w
  2279  004D  00E5               	movwf	___ftadd@exp2
  2280  004E  0866               	movf	___ftadd@exp1,w
  2281  004F  1903               	btfsc	3,2
  2282  0050  285D               	goto	l2190
  2283  0051  0865               	movf	___ftadd@exp2,w
  2284  0052  0266               	subwf	___ftadd@exp1,w
  2285  0053  1803               	skipnc
  2286  0054  2864               	goto	l2194
  2287  0055  0366               	decf	___ftadd@exp1,w
  2288  0056  3AFF               	xorlw	255
  2289  0057  0765               	addwf	___ftadd@exp2,w
  2290  0058  00E0               	movwf	??___ftadd
  2291  0059  3019               	movlw	25
  2292  005A  0260               	subwf	??___ftadd,w
  2293  005B  1C03               	skipc
  2294  005C  2864               	goto	l2194
  2295  005D                     l2190:	
  2296  005D  085D               	movf	___ftadd@f2,w
  2297  005E  00DA               	movwf	?___ftadd
  2298  005F  085E               	movf	___ftadd@f2+1,w
  2299  0060  00DB               	movwf	?___ftadd+1
  2300  0061  085F               	movf	___ftadd@f2+2,w
  2301  0062  00DC               	movwf	?___ftadd+2
  2302  0063  0008               	return
  2303  0064                     l2194:	
  2304  0064  0865               	movf	___ftadd@exp2,w
  2305  0065  1903               	btfsc	3,2
  2306  0066  0008               	return
  2307  0067  0866               	movf	___ftadd@exp1,w
  2308  0068  0265               	subwf	___ftadd@exp2,w
  2309  0069  1803               	skipnc
  2310  006A  2873               	goto	l2200
  2311  006B  0365               	decf	___ftadd@exp2,w
  2312  006C  3AFF               	xorlw	255
  2313  006D  0766               	addwf	___ftadd@exp1,w
  2314  006E  00E0               	movwf	??___ftadd
  2315  006F  3019               	movlw	25
  2316  0070  0260               	subwf	??___ftadd,w
  2317  0071  1803               	btfsc	3,0
  2318  0072  0008               	return
  2319  0073                     l2200:	
  2320  0073  3006               	movlw	6
  2321  0074  00E0               	movwf	??___ftadd
  2322  0075  0860               	movf	??___ftadd,w
  2323  0076  00E4               	movwf	___ftadd@sign
  2324  0077  1BDC               	btfsc	___ftadd@f1+2,7
  2325  0078  17E4               	bsf	___ftadd@sign,7
  2326  0079  1BDF               	btfsc	___ftadd@f2+2,7
  2327  007A  1764               	bsf	___ftadd@sign,6
  2328  007B  17DB               	bsf	___ftadd@f1+1,7
  2329  007C  30FF               	movlw	255
  2330  007D  05DA               	andwf	___ftadd@f1,f
  2331  007E  30FF               	movlw	255
  2332  007F  05DB               	andwf	___ftadd@f1+1,f
  2333  0080  3000               	movlw	0
  2334  0081  05DC               	andwf	___ftadd@f1+2,f
  2335  0082  17DE               	bsf	___ftadd@f2+1,7
  2336  0083  30FF               	movlw	255
  2337  0084  05DD               	andwf	___ftadd@f2,f
  2338  0085  30FF               	movlw	255
  2339  0086  05DE               	andwf	___ftadd@f2+1,f
  2340  0087  3000               	movlw	0
  2341  0088  05DF               	andwf	___ftadd@f2+2,f
  2342  0089  0865               	movf	___ftadd@exp2,w
  2343  008A  0266               	subwf	___ftadd@exp1,w
  2344  008B  1803               	skipnc
  2345  008C  28B3               	goto	l2222
  2346  008D                     l2212:	
  2347  008D  3001               	movlw	1
  2348  008E                     u2515:	
  2349  008E  1003               	clrc
  2350  008F  0DDD               	rlf	___ftadd@f2,f
  2351  0090  0DDE               	rlf	___ftadd@f2+1,f
  2352  0091  0DDF               	rlf	___ftadd@f2+2,f
  2353  0092  3EFF               	addlw	-1
  2354  0093  1D03               	skipz
  2355  0094  288E               	goto	u2515
  2356  0095  3001               	movlw	1
  2357  0096  02E5               	subwf	___ftadd@exp2,f
  2358  0097  0865               	movf	___ftadd@exp2,w
  2359  0098  0666               	xorwf	___ftadd@exp1,w
  2360  0099  1903               	skipnz
  2361  009A  28AE               	goto	l2220
  2362  009B  3001               	movlw	1
  2363  009C  02E4               	subwf	___ftadd@sign,f
  2364  009D  0864               	movf	___ftadd@sign,w
  2365  009E  3907               	andlw	7
  2366  009F  1903               	btfsc	3,2
  2367  00A0  28AE               	goto	l2220
  2368  00A1  288D               	goto	l2212
  2369  00A2                     l2218:	
  2370  00A2  3001               	movlw	1
  2371  00A3                     u2545:	
  2372  00A3  1003               	clrc
  2373  00A4  0CDC               	rrf	___ftadd@f1+2,f
  2374  00A5  0CDB               	rrf	___ftadd@f1+1,f
  2375  00A6  0CDA               	rrf	___ftadd@f1,f
  2376  00A7  3EFF               	addlw	-1
  2377  00A8  1D03               	skipz
  2378  00A9  28A3               	goto	u2545
  2379  00AA  3001               	movlw	1
  2380  00AB  00E0               	movwf	??___ftadd
  2381  00AC  0860               	movf	??___ftadd,w
  2382  00AD  07E6               	addwf	___ftadd@exp1,f
  2383  00AE                     l2220:	
  2384  00AE  0866               	movf	___ftadd@exp1,w
  2385  00AF  0665               	xorwf	___ftadd@exp2,w
  2386  00B0  1903               	btfsc	3,2
  2387  00B1  28DC               	goto	l586
  2388  00B2  28A2               	goto	l2218
  2389  00B3                     l2222:	
  2390  00B3  0866               	movf	___ftadd@exp1,w
  2391  00B4  0265               	subwf	___ftadd@exp2,w
  2392  00B5  1803               	skipnc
  2393  00B6  28DC               	goto	l586
  2394  00B7                     l2224:	
  2395  00B7  3001               	movlw	1
  2396  00B8                     u2575:	
  2397  00B8  1003               	clrc
  2398  00B9  0DDA               	rlf	___ftadd@f1,f
  2399  00BA  0DDB               	rlf	___ftadd@f1+1,f
  2400  00BB  0DDC               	rlf	___ftadd@f1+2,f
  2401  00BC  3EFF               	addlw	-1
  2402  00BD  1D03               	skipz
  2403  00BE  28B8               	goto	u2575
  2404  00BF  3001               	movlw	1
  2405  00C0  02E6               	subwf	___ftadd@exp1,f
  2406  00C1  0865               	movf	___ftadd@exp2,w
  2407  00C2  0666               	xorwf	___ftadd@exp1,w
  2408  00C3  1903               	skipnz
  2409  00C4  28D8               	goto	l2232
  2410  00C5  3001               	movlw	1
  2411  00C6  02E4               	subwf	___ftadd@sign,f
  2412  00C7  0864               	movf	___ftadd@sign,w
  2413  00C8  3907               	andlw	7
  2414  00C9  1903               	btfsc	3,2
  2415  00CA  28D8               	goto	l2232
  2416  00CB  28B7               	goto	l2224
  2417  00CC                     l2230:	
  2418  00CC  3001               	movlw	1
  2419  00CD                     u2605:	
  2420  00CD  1003               	clrc
  2421  00CE  0CDF               	rrf	___ftadd@f2+2,f
  2422  00CF  0CDE               	rrf	___ftadd@f2+1,f
  2423  00D0  0CDD               	rrf	___ftadd@f2,f
  2424  00D1  3EFF               	addlw	-1
  2425  00D2  1D03               	skipz
  2426  00D3  28CD               	goto	u2605
  2427  00D4  3001               	movlw	1
  2428  00D5  00E0               	movwf	??___ftadd
  2429  00D6  0860               	movf	??___ftadd,w
  2430  00D7  07E5               	addwf	___ftadd@exp2,f
  2431  00D8                     l2232:	
  2432  00D8  0866               	movf	___ftadd@exp1,w
  2433  00D9  0665               	xorwf	___ftadd@exp2,w
  2434  00DA  1D03               	skipz
  2435  00DB  28CC               	goto	l2230
  2436  00DC                     l586:	
  2437  00DC  1FE4               	btfss	___ftadd@sign,7
  2438  00DD  28EE               	goto	l2236
  2439  00DE  30FF               	movlw	255
  2440  00DF  06DA               	xorwf	___ftadd@f1,f
  2441  00E0  30FF               	movlw	255
  2442  00E1  06DB               	xorwf	___ftadd@f1+1,f
  2443  00E2  30FF               	movlw	255
  2444  00E3  06DC               	xorwf	___ftadd@f1+2,f
  2445  00E4  3001               	movlw	1
  2446  00E5  07DA               	addwf	___ftadd@f1,f
  2447  00E6  3000               	movlw	0
  2448  00E7  1803               	skipnc
  2449  00E8  3001               	movlw	1
  2450  00E9  07DB               	addwf	___ftadd@f1+1,f
  2451  00EA  3000               	movlw	0
  2452  00EB  1803               	skipnc
  2453  00EC  3001               	movlw	1
  2454  00ED  07DC               	addwf	___ftadd@f1+2,f
  2455  00EE                     l2236:	
  2456  00EE  1F64               	btfss	___ftadd@sign,6
  2457  00EF  2900               	goto	l2240
  2458  00F0  30FF               	movlw	255
  2459  00F1  06DD               	xorwf	___ftadd@f2,f
  2460  00F2  30FF               	movlw	255
  2461  00F3  06DE               	xorwf	___ftadd@f2+1,f
  2462  00F4  30FF               	movlw	255
  2463  00F5  06DF               	xorwf	___ftadd@f2+2,f
  2464  00F6  3001               	movlw	1
  2465  00F7  07DD               	addwf	___ftadd@f2,f
  2466  00F8  3000               	movlw	0
  2467  00F9  1803               	skipnc
  2468  00FA  3001               	movlw	1
  2469  00FB  07DE               	addwf	___ftadd@f2+1,f
  2470  00FC  3000               	movlw	0
  2471  00FD  1803               	skipnc
  2472  00FE  3001               	movlw	1
  2473  00FF  07DF               	addwf	___ftadd@f2+2,f
  2474  0100                     l2240:	
  2475  0100  01E4               	clrf	___ftadd@sign
  2476  0101  085A               	movf	___ftadd@f1,w
  2477  0102  07DD               	addwf	___ftadd@f2,f
  2478  0103  085B               	movf	___ftadd@f1+1,w
  2479  0104  1103               	clrz
  2480  0105  1803               	skipnc
  2481  0106  0A5B               	incf	___ftadd@f1+1,w
  2482  0107  1D03               	btfss	3,2
  2483  0108  07DE               	addwf	___ftadd@f2+1,f
  2484  0109  085C               	movf	___ftadd@f1+2,w
  2485  010A  1103               	clrz
  2486  010B  1803               	skipnc
  2487  010C  0A5C               	incf	___ftadd@f1+2,w
  2488  010D  1D03               	btfss	3,2
  2489  010E  07DF               	addwf	___ftadd@f2+2,f
  2490  010F  1FDF               	btfss	___ftadd@f2+2,7
  2491  0110  2923               	goto	l2250
  2492  0111  30FF               	movlw	255
  2493  0112  06DD               	xorwf	___ftadd@f2,f
  2494  0113  30FF               	movlw	255
  2495  0114  06DE               	xorwf	___ftadd@f2+1,f
  2496  0115  30FF               	movlw	255
  2497  0116  06DF               	xorwf	___ftadd@f2+2,f
  2498  0117  3001               	movlw	1
  2499  0118  07DD               	addwf	___ftadd@f2,f
  2500  0119  3000               	movlw	0
  2501  011A  1803               	skipnc
  2502  011B  3001               	movlw	1
  2503  011C  07DE               	addwf	___ftadd@f2+1,f
  2504  011D  3000               	movlw	0
  2505  011E  1803               	skipnc
  2506  011F  3001               	movlw	1
  2507  0120  07DF               	addwf	___ftadd@f2+2,f
  2508  0121  01E4               	clrf	___ftadd@sign
  2509  0122  0AE4               	incf	___ftadd@sign,f
  2510  0123                     l2250:	
  2511  0123  085D               	movf	___ftadd@f2,w
  2512  0124  00A0               	movwf	___ftpack@arg
  2513  0125  085E               	movf	___ftadd@f2+1,w
  2514  0126  00A1               	movwf	___ftpack@arg+1
  2515  0127  085F               	movf	___ftadd@f2+2,w
  2516  0128  00A2               	movwf	___ftpack@arg+2
  2517  0129  0866               	movf	___ftadd@exp1,w
  2518  012A  00E0               	movwf	??___ftadd
  2519  012B  0860               	movf	??___ftadd,w
  2520  012C  00A3               	movwf	___ftpack@exp
  2521  012D  0864               	movf	___ftadd@sign,w
  2522  012E  00E1               	movwf	??___ftadd+1
  2523  012F  0861               	movf	??___ftadd+1,w
  2524  0130  00A4               	movwf	___ftpack@sign
  2525  0131  120A  118A  2507   	fcall	___ftpack
  2526  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0135  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0136  0820               	movf	?___ftpack,w
  2529  0137  00DA               	movwf	?___ftadd
  2530  0138  0821               	movf	?___ftpack+1,w
  2531  0139  00DB               	movwf	?___ftadd+1
  2532  013A  0822               	movf	?___ftpack+2,w
  2533  013B  00DC               	movwf	?___ftadd+2
  2534  013C  0008               	return
  2535  013D                     __end_of___ftadd:	
  2536                           
  2537                           	psect	text11
  2538  0372                     __ptext11:	
  2539 ;; *************** function _move *****************
  2540 ;; Defined at:
  2541 ;;		line 25 in file "motor.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  steps           1    wreg     unsigned char 
  2544 ;;  direction       1   15[BANK0 ] unsigned char 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  steps           1   18[BANK0 ] unsigned char 
  2547 ;;  i               1   19[BANK0 ] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2557 ;;      Params:         0       1       0       0       0
  2558 ;;      Locals:         0       2       0       0       0
  2559 ;;      Temps:          0       2       0       0       0
  2560 ;;      Totals:         0       5       0       0       0
  2561 ;;Total ram usage:        5 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		_lcdSetCursor
  2566 ;;		_lcdWriteToDigitBCD
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;;		_moveDeg
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function _move
  2575  0372                     _move:	
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2579                           ;move@steps stored from wreg
  2580  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2581  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2582  0374  00B2               	movwf	move@steps
  2583                           
  2584                           ;motor.c: 26: for(char i = 0; i<steps; i++){
  2585  0375  01B3               	clrf	move@i
  2586  0376                     l2388:	
  2587  0376  0832               	movf	move@steps,w
  2588  0377  0233               	subwf	move@i,w
  2589  0378  1803               	btfsc	3,0
  2590  0379  0008               	return
  2591                           
  2592                           ;motor.c: 27: if(cstep == 7 && direction == 1){
  2593  037A  3007               	movlw	7
  2594  037B  0677               	xorwf	_cstep,w
  2595  037C  1D03               	btfss	3,2
  2596  037D  2B89               	goto	l2350
  2597  037E  032F               	decf	move@direction,w
  2598  037F  1D03               	btfss	3,2
  2599  0380  2B89               	goto	l2350
  2600                           
  2601                           ;motor.c: 28: PORTC = halfSteps[0];
  2602  0381  1683               	bsf	3,5	;RP0=1, select bank1
  2603  0382  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0383  0820               	movf	_halfSteps^(0+128),w
  2605  0384  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0385  1303               	bcf	3,6	;RP1=0, select bank0
  2607  0386  0087               	movwf	7	;volatile
  2608                           
  2609                           ;motor.c: 29: cstep = 0;
  2610  0387  01F7               	clrf	_cstep
  2611                           
  2612                           ;motor.c: 30: }
  2613  0388  2BC1               	goto	l2372
  2614  0389                     l2350:	
  2615                           
  2616                           ;motor.c: 31: else if(cstep == 0 && direction == 0){
  2617  0389  0877               	movf	_cstep,w
  2618  038A  1D03               	btfss	3,2
  2619  038B  2B9A               	goto	l127
  2620  038C  082F               	movf	move@direction,w
  2621  038D  1D03               	btfss	3,2
  2622  038E  2B9A               	goto	l127
  2623                           
  2624                           ;motor.c: 32: PORTC = halfSteps[7];
  2625  038F  1683               	bsf	3,5	;RP0=1, select bank1
  2626  0390  1303               	bcf	3,6	;RP1=0, select bank1
  2627  0391  082E               	movf	(_halfSteps^(0+128)+14),w
  2628  0392  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0393  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0394  0087               	movwf	7	;volatile
  2631                           
  2632                           ;motor.c: 33: cstep = 7;
  2633  0395  3007               	movlw	7
  2634  0396  00B0               	movwf	??_move
  2635  0397  0830               	movf	??_move,w
  2636  0398  00F7               	movwf	_cstep
  2637                           
  2638                           ;motor.c: 34: }
  2639  0399  2BC1               	goto	l2372
  2640  039A                     l127:	
  2641                           
  2642                           ;motor.c: 35: else if (cstep >= 0 && cstep <= 7){
  2643  039A  1BF7               	btfsc	_cstep,7
  2644  039B  2BC0               	goto	l2370
  2645  039C  0877               	movf	_cstep,w
  2646  039D  3A80               	xorlw	128
  2647  039E  3E78               	addlw	-136
  2648  039F  1803               	skipnc
  2649  03A0  2BC0               	goto	l2370
  2650                           
  2651                           ;motor.c: 36: if(direction == 1){
  2652  03A1  032F               	decf	move@direction,w
  2653  03A2  1D03               	btfss	3,2
  2654  03A3  2BAF               	goto	l2364
  2655                           
  2656                           ;motor.c: 37: PORTC = halfSteps[cstep+1];
  2657  03A4  0877               	movf	_cstep,w
  2658  03A5  00B0               	movwf	??_move
  2659  03A6  0730               	addwf	??_move,w
  2660  03A7  3E02               	addlw	2
  2661  03A8  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2662  03A9  0084               	movwf	4
  2663  03AA  1383               	bcf	3,7	;select IRP bank1
  2664  03AB  0800               	movf	0,w
  2665  03AC  0087               	movwf	7	;volatile
  2666                           
  2667                           ;motor.c: 38: cstep++;
  2668  03AD  3001               	movlw	1
  2669  03AE  2BBC               	goto	L2
  2670  03AF                     l2364:	
  2671                           ;motor.c: 39: }
  2672                           
  2673                           
  2674                           ;motor.c: 40: else if(direction == 0){
  2675  03AF  082F               	movf	move@direction,w
  2676  03B0  1D03               	btfss	3,2
  2677  03B1  2BC1               	goto	l2372
  2678                           
  2679                           ;motor.c: 41: PORTC = halfSteps[cstep-1];
  2680  03B2  0877               	movf	_cstep,w
  2681  03B3  00B0               	movwf	??_move
  2682  03B4  0730               	addwf	??_move,w
  2683  03B5  3EFE               	addlw	254
  2684  03B6  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2685  03B7  0084               	movwf	4
  2686  03B8  1383               	bcf	3,7	;select IRP bank1
  2687  03B9  0800               	movf	0,w
  2688  03BA  0087               	movwf	7	;volatile
  2689                           
  2690                           ;motor.c: 42: cstep--;
  2691  03BB  30FF               	movlw	255
  2692  03BC                     L2:	
  2693  03BC  00B0               	movwf	??_move
  2694  03BD  0830               	movf	??_move,w
  2695  03BE  07F7               	addwf	_cstep,f
  2696                           
  2697                           ;motor.c: 43: }
  2698                           ;motor.c: 45: }
  2699  03BF  2BC1               	goto	l2372
  2700  03C0                     l2370:	
  2701                           
  2702                           ;motor.c: 46: else{
  2703                           ;motor.c: 47: PORTC = 0x00;
  2704  03C0  0187               	clrf	7	;volatile
  2705  03C1                     l2372:	
  2706                           
  2707                           ;motor.c: 48: }
  2708                           ;motor.c: 50: lcdSetCursor(0x40);
  2709  03C1  3040               	movlw	64
  2710  03C2  120A  158A  2753  120A  118A  	fcall	_lcdSetCursor
  2711                           
  2712                           ;motor.c: 51: if(direction){
  2713  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2714  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2715  03C9  082F               	movf	move@direction,w
  2716  03CA  1903               	btfsc	3,2
  2717  03CB  2BD4               	goto	l2380
  2718                           
  2719                           ;motor.c: 52: nrOfSteps--;
  2720  03CC  30FF               	movlw	255
  2721  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  2722  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  2723  03CF  07C9               	addwf	_nrOfSteps^(0+128),f
  2724  03D0  1803               	skipnc
  2725  03D1  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2726  03D2  30FF               	movlw	255
  2727  03D3  2BDB               	goto	L3
  2728  03D4                     l2380:	
  2729                           ;motor.c: 54: }
  2730                           
  2731                           ;motor.c: 53: lcdWriteToDigitBCD(nrOfSteps);
  2732                           
  2733                           
  2734                           ;motor.c: 55: else{
  2735                           ;motor.c: 56: nrOfSteps++;
  2736  03D4  3001               	movlw	1
  2737  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2738  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2739  03D7  07C9               	addwf	_nrOfSteps^(0+128),f
  2740  03D8  1803               	skipnc
  2741  03D9  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2742  03DA  3000               	movlw	0
  2743  03DB                     L3:	
  2744  03DB  07CA               	addwf	(_nrOfSteps+1)^(0+128),f
  2745                           
  2746                           ;motor.c: 57: lcdWriteToDigitBCD(nrOfSteps);
  2747  03DC  084A               	movf	(_nrOfSteps+1)^(0+128),w
  2748  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2749  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2750  03DF  00A7               	movwf	lcdWriteToDigitBCD@data+1
  2751  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2752  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2753  03E2  0849               	movf	_nrOfSteps^(0+128),w
  2754  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2755  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2756  03E5  00A6               	movwf	lcdWriteToDigitBCD@data
  2757  03E6  120A  118A  23FD  120A  118A  	fcall	_lcdWriteToDigitBCD
  2758                           
  2759                           ;motor.c: 58: }
  2760                           ;motor.c: 59: _delay((unsigned long)((20)*(20000000/4000.0)));
  2761  03EB  3082               	movlw	130
  2762  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2763  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2764  03EE  00B1               	movwf	??_move+1
  2765  03EF  30DD               	movlw	221
  2766  03F0  00B0               	movwf	??_move
  2767  03F1                     u2977:	
  2768  03F1  0BB0               	decfsz	??_move,f
  2769  03F2  2BF1               	goto	u2977
  2770  03F3  0BB1               	decfsz	??_move+1,f
  2771  03F4  2BF1               	goto	u2977
  2772  03F5  2BF6               	nop2
  2773  03F6  3001               	movlw	1
  2774  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2775  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2776  03F9  00B0               	movwf	??_move
  2777  03FA  0830               	movf	??_move,w
  2778  03FB  07B3               	addwf	move@i,f
  2779  03FC  2B76               	goto	l2388
  2780  03FD                     __end_of_move:	
  2781                           
  2782                           	psect	text12
  2783  05D5                     __ptext12:	
  2784 ;; *************** function ___ftge *****************
  2785 ;; Defined at:
  2786 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  ff1             3    0[BANK0 ] float 
  2789 ;;  ff2             3    3[BANK0 ] float 
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;		None               void
  2794 ;; Registers used:
  2795 ;;		wreg, status,2, status,0
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2801 ;;      Params:         0       6       0       0       0
  2802 ;;      Locals:         0       0       0       0       0
  2803 ;;      Temps:          0       6       0       0       0
  2804 ;;      Totals:         0      12       0       0       0
  2805 ;;Total ram usage:       12 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    2
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_moveDeg
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           
  2816                           ;psect for function ___ftge
  2817  05D5                     ___ftge:	
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2821  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  2822  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  2823  05D7  1FA2               	btfss	___ftge@ff1+2,7
  2824  05D8  2DFE               	goto	l1870
  2825  05D9  3000               	movlw	0
  2826  05DA  00A6               	movwf	??___ftge
  2827  05DB  3000               	movlw	0
  2828  05DC  00A7               	movwf	??___ftge+1
  2829  05DD  3080               	movlw	128
  2830  05DE  00A8               	movwf	??___ftge+2
  2831  05DF  0920               	comf	___ftge@ff1,w
  2832  05E0  00A9               	movwf	??___ftge+3
  2833  05E1  0921               	comf	___ftge@ff1+1,w
  2834  05E2  00AA               	movwf	??___ftge+4
  2835  05E3  0922               	comf	___ftge@ff1+2,w
  2836  05E4  00AB               	movwf	??___ftge+5
  2837  05E5  0AA9               	incf	??___ftge+3,f
  2838  05E6  1903               	skipnz
  2839  05E7  0AAA               	incf	??___ftge+4,f
  2840  05E8  1903               	skipnz
  2841  05E9  0AAB               	incf	??___ftge+5,f
  2842  05EA  0829               	movf	??___ftge+3,w
  2843  05EB  07A6               	addwf	??___ftge,f
  2844  05EC  082A               	movf	??___ftge+4,w
  2845  05ED  1803               	skipnc
  2846  05EE  0F2A               	incfsz	??___ftge+4,w
  2847  05EF  2DF1               	goto	u1901
  2848  05F0  2DF2               	goto	u1902
  2849  05F1                     u1901:	
  2850  05F1  07A7               	addwf	??___ftge+1,f
  2851  05F2                     u1902:	
  2852  05F2  082B               	movf	??___ftge+5,w
  2853  05F3  1803               	skipnc
  2854  05F4  0F2B               	incfsz	??___ftge+5,w
  2855  05F5  2DF7               	goto	u1903
  2856  05F6  2DF8               	goto	u1904
  2857  05F7                     u1903:	
  2858  05F7  07A8               	addwf	??___ftge+2,f
  2859  05F8                     u1904:	
  2860  05F8  0826               	movf	??___ftge,w
  2861  05F9  00A0               	movwf	___ftge@ff1
  2862  05FA  0827               	movf	??___ftge+1,w
  2863  05FB  00A1               	movwf	___ftge@ff1+1
  2864  05FC  0828               	movf	??___ftge+2,w
  2865  05FD  00A2               	movwf	___ftge@ff1+2
  2866  05FE                     l1870:	
  2867  05FE  1FA5               	btfss	___ftge@ff2+2,7
  2868  05FF  2E25               	goto	l1874
  2869  0600  3000               	movlw	0
  2870  0601  00A6               	movwf	??___ftge
  2871  0602  3000               	movlw	0
  2872  0603  00A7               	movwf	??___ftge+1
  2873  0604  3080               	movlw	128
  2874  0605  00A8               	movwf	??___ftge+2
  2875  0606  0923               	comf	___ftge@ff2,w
  2876  0607  00A9               	movwf	??___ftge+3
  2877  0608  0924               	comf	___ftge@ff2+1,w
  2878  0609  00AA               	movwf	??___ftge+4
  2879  060A  0925               	comf	___ftge@ff2+2,w
  2880  060B  00AB               	movwf	??___ftge+5
  2881  060C  0AA9               	incf	??___ftge+3,f
  2882  060D  1903               	skipnz
  2883  060E  0AAA               	incf	??___ftge+4,f
  2884  060F  1903               	skipnz
  2885  0610  0AAB               	incf	??___ftge+5,f
  2886  0611  0829               	movf	??___ftge+3,w
  2887  0612  07A6               	addwf	??___ftge,f
  2888  0613  082A               	movf	??___ftge+4,w
  2889  0614  1803               	skipnc
  2890  0615  0F2A               	incfsz	??___ftge+4,w
  2891  0616  2E18               	goto	u1921
  2892  0617  2E19               	goto	u1922
  2893  0618                     u1921:	
  2894  0618  07A7               	addwf	??___ftge+1,f
  2895  0619                     u1922:	
  2896  0619  082B               	movf	??___ftge+5,w
  2897  061A  1803               	skipnc
  2898  061B  0F2B               	incfsz	??___ftge+5,w
  2899  061C  2E1E               	goto	u1923
  2900  061D  2E1F               	goto	u1924
  2901  061E                     u1923:	
  2902  061E  07A8               	addwf	??___ftge+2,f
  2903  061F                     u1924:	
  2904  061F  0826               	movf	??___ftge,w
  2905  0620  00A3               	movwf	___ftge@ff2
  2906  0621  0827               	movf	??___ftge+1,w
  2907  0622  00A4               	movwf	___ftge@ff2+1
  2908  0623  0828               	movf	??___ftge+2,w
  2909  0624  00A5               	movwf	___ftge@ff2+2
  2910  0625                     l1874:	
  2911  0625  3080               	movlw	128
  2912  0626  06A2               	xorwf	___ftge@ff1+2,f
  2913  0627  3080               	movlw	128
  2914  0628  06A5               	xorwf	___ftge@ff2+2,f
  2915  0629  0825               	movf	___ftge@ff2+2,w
  2916  062A  0222               	subwf	___ftge@ff1+2,w
  2917  062B  1D03               	skipz
  2918  062C  0008               	return
  2919  062D  0824               	movf	___ftge@ff2+1,w
  2920  062E  0221               	subwf	___ftge@ff1+1,w
  2921  062F  1D03               	skipz
  2922  0630  0008               	return
  2923  0631  0823               	movf	___ftge@ff2,w
  2924  0632  0220               	subwf	___ftge@ff1,w
  2925  0633  0008               	return
  2926  0634                     __end_of___ftge:	
  2927                           
  2928                           	psect	text13
  2929  022C                     __ptext13:	
  2930 ;; *************** function ___ftdiv *****************
  2931 ;; Defined at:
  2932 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  f2              3   19[BANK0 ] float 
  2935 ;;  f1              3   22[BANK0 ] float 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  f3              3   30[BANK0 ] float 
  2938 ;;  sign            1   34[BANK0 ] unsigned char 
  2939 ;;  exp             1   33[BANK0 ] unsigned char 
  2940 ;;  cntr            1   29[BANK0 ] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  3   19[BANK0 ] float 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0, pclath, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2950 ;;      Params:         0       6       0       0       0
  2951 ;;      Locals:         0       6       0       0       0
  2952 ;;      Temps:          0       4       0       0       0
  2953 ;;      Totals:         0      16       0       0       0
  2954 ;;Total ram usage:       16 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    3
  2957 ;; This function calls:
  2958 ;;		___ftpack
  2959 ;; This function is called by:
  2960 ;;		_moveDeg
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           
  2965                           ;psect for function ___ftdiv
  2966  022C                     ___ftdiv:	
  2967                           
  2968                           ;incstack = 0
  2969                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2970  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2971  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2972  022E  0836               	movf	___ftdiv@f1,w
  2973  022F  00B9               	movwf	??___ftdiv
  2974  0230  0837               	movf	___ftdiv@f1+1,w
  2975  0231  00BA               	movwf	??___ftdiv+1
  2976  0232  0838               	movf	___ftdiv@f1+2,w
  2977  0233  00BB               	movwf	??___ftdiv+2
  2978  0234  1003               	clrc
  2979  0235  0D3A               	rlf	??___ftdiv+1,w
  2980  0236  0D3B               	rlf	??___ftdiv+2,w
  2981  0237  00BC               	movwf	??___ftdiv+3
  2982  0238  083C               	movf	??___ftdiv+3,w
  2983  0239  00C1               	movwf	___ftdiv@exp
  2984  023A  0841               	movf	___ftdiv@exp,w
  2985  023B  1D03               	btfss	3,2
  2986  023C  2A44               	goto	l2404
  2987  023D  3000               	movlw	0
  2988  023E  00B3               	movwf	?___ftdiv
  2989  023F  3000               	movlw	0
  2990  0240  00B4               	movwf	?___ftdiv+1
  2991  0241  3000               	movlw	0
  2992  0242  00B5               	movwf	?___ftdiv+2
  2993  0243  0008               	return
  2994  0244                     l2404:	
  2995  0244  0833               	movf	___ftdiv@f2,w
  2996  0245  00B9               	movwf	??___ftdiv
  2997  0246  0834               	movf	___ftdiv@f2+1,w
  2998  0247  00BA               	movwf	??___ftdiv+1
  2999  0248  0835               	movf	___ftdiv@f2+2,w
  3000  0249  00BB               	movwf	??___ftdiv+2
  3001  024A  1003               	clrc
  3002  024B  0D3A               	rlf	??___ftdiv+1,w
  3003  024C  0D3B               	rlf	??___ftdiv+2,w
  3004  024D  00BC               	movwf	??___ftdiv+3
  3005  024E  083C               	movf	??___ftdiv+3,w
  3006  024F  00C2               	movwf	___ftdiv@sign
  3007  0250  0842               	movf	___ftdiv@sign,w
  3008  0251  1D03               	btfss	3,2
  3009  0252  2A5A               	goto	l2410
  3010  0253  3000               	movlw	0
  3011  0254  00B3               	movwf	?___ftdiv
  3012  0255  3000               	movlw	0
  3013  0256  00B4               	movwf	?___ftdiv+1
  3014  0257  3000               	movlw	0
  3015  0258  00B5               	movwf	?___ftdiv+2
  3016  0259  0008               	return
  3017  025A                     l2410:	
  3018  025A  3000               	movlw	0
  3019  025B  00BE               	movwf	___ftdiv@f3
  3020  025C  3000               	movlw	0
  3021  025D  00BF               	movwf	___ftdiv@f3+1
  3022  025E  3000               	movlw	0
  3023  025F  00C0               	movwf	___ftdiv@f3+2
  3024  0260  3089               	movlw	137
  3025  0261  0742               	addwf	___ftdiv@sign,w
  3026  0262  00B9               	movwf	??___ftdiv
  3027  0263  0839               	movf	??___ftdiv,w
  3028  0264  02C1               	subwf	___ftdiv@exp,f
  3029  0265  0836               	movf	___ftdiv@f1,w
  3030  0266  00B9               	movwf	??___ftdiv
  3031  0267  0837               	movf	___ftdiv@f1+1,w
  3032  0268  00BA               	movwf	??___ftdiv+1
  3033  0269  0838               	movf	___ftdiv@f1+2,w
  3034  026A  00BB               	movwf	??___ftdiv+2
  3035  026B  3010               	movlw	16
  3036  026C                     u2815:	
  3037  026C  1003               	clrc
  3038  026D  0CBB               	rrf	??___ftdiv+2,f
  3039  026E  0CBA               	rrf	??___ftdiv+1,f
  3040  026F  0CB9               	rrf	??___ftdiv,f
  3041  0270  3EFF               	addlw	-1
  3042  0271  1D03               	skipz
  3043  0272  2A6C               	goto	u2815
  3044  0273  0839               	movf	??___ftdiv,w
  3045  0274  00BC               	movwf	??___ftdiv+3
  3046  0275  083C               	movf	??___ftdiv+3,w
  3047  0276  00C2               	movwf	___ftdiv@sign
  3048  0277  0833               	movf	___ftdiv@f2,w
  3049  0278  00B9               	movwf	??___ftdiv
  3050  0279  0834               	movf	___ftdiv@f2+1,w
  3051  027A  00BA               	movwf	??___ftdiv+1
  3052  027B  0835               	movf	___ftdiv@f2+2,w
  3053  027C  00BB               	movwf	??___ftdiv+2
  3054  027D  3010               	movlw	16
  3055  027E                     u2825:	
  3056  027E  1003               	clrc
  3057  027F  0CBB               	rrf	??___ftdiv+2,f
  3058  0280  0CBA               	rrf	??___ftdiv+1,f
  3059  0281  0CB9               	rrf	??___ftdiv,f
  3060  0282  3EFF               	addlw	-1
  3061  0283  1D03               	skipz
  3062  0284  2A7E               	goto	u2825
  3063  0285  0839               	movf	??___ftdiv,w
  3064  0286  00BC               	movwf	??___ftdiv+3
  3065  0287  083C               	movf	??___ftdiv+3,w
  3066  0288  06C2               	xorwf	___ftdiv@sign,f
  3067  0289  3080               	movlw	128
  3068  028A  00B9               	movwf	??___ftdiv
  3069  028B  0839               	movf	??___ftdiv,w
  3070  028C  05C2               	andwf	___ftdiv@sign,f
  3071  028D  17B7               	bsf	___ftdiv@f1+1,7
  3072  028E  30FF               	movlw	255
  3073  028F  05B6               	andwf	___ftdiv@f1,f
  3074  0290  30FF               	movlw	255
  3075  0291  05B7               	andwf	___ftdiv@f1+1,f
  3076  0292  3000               	movlw	0
  3077  0293  05B8               	andwf	___ftdiv@f1+2,f
  3078  0294  17B4               	bsf	___ftdiv@f2+1,7
  3079  0295  30FF               	movlw	255
  3080  0296  05B3               	andwf	___ftdiv@f2,f
  3081  0297  30FF               	movlw	255
  3082  0298  05B4               	andwf	___ftdiv@f2+1,f
  3083  0299  3000               	movlw	0
  3084  029A  05B5               	andwf	___ftdiv@f2+2,f
  3085  029B  3018               	movlw	24
  3086  029C  00B9               	movwf	??___ftdiv
  3087  029D  0839               	movf	??___ftdiv,w
  3088  029E  00BD               	movwf	___ftdiv@cntr
  3089  029F                     l2424:	
  3090  029F  3001               	movlw	1
  3091  02A0                     u2835:	
  3092  02A0  1003               	clrc
  3093  02A1  0DBE               	rlf	___ftdiv@f3,f
  3094  02A2  0DBF               	rlf	___ftdiv@f3+1,f
  3095  02A3  0DC0               	rlf	___ftdiv@f3+2,f
  3096  02A4  3EFF               	addlw	-1
  3097  02A5  1D03               	skipz
  3098  02A6  2AA0               	goto	u2835
  3099  02A7  0835               	movf	___ftdiv@f2+2,w
  3100  02A8  0238               	subwf	___ftdiv@f1+2,w
  3101  02A9  1D03               	skipz
  3102  02AA  2AB1               	goto	u2845
  3103  02AB  0834               	movf	___ftdiv@f2+1,w
  3104  02AC  0237               	subwf	___ftdiv@f1+1,w
  3105  02AD  1D03               	skipz
  3106  02AE  2AB1               	goto	u2845
  3107  02AF  0833               	movf	___ftdiv@f2,w
  3108  02B0  0236               	subwf	___ftdiv@f1,w
  3109  02B1                     u2845:	
  3110  02B1  1C03               	skipc
  3111  02B2  2ABE               	goto	l2432
  3112  02B3  0833               	movf	___ftdiv@f2,w
  3113  02B4  02B6               	subwf	___ftdiv@f1,f
  3114  02B5  0834               	movf	___ftdiv@f2+1,w
  3115  02B6  1C03               	skipc
  3116  02B7  0F34               	incfsz	___ftdiv@f2+1,w
  3117  02B8  02B7               	subwf	___ftdiv@f1+1,f
  3118  02B9  0835               	movf	___ftdiv@f2+2,w
  3119  02BA  1C03               	skipc
  3120  02BB  0A35               	incf	___ftdiv@f2+2,w
  3121  02BC  02B8               	subwf	___ftdiv@f1+2,f
  3122  02BD  143E               	bsf	___ftdiv@f3,0
  3123  02BE                     l2432:	
  3124  02BE  3001               	movlw	1
  3125  02BF                     u2855:	
  3126  02BF  1003               	clrc
  3127  02C0  0DB6               	rlf	___ftdiv@f1,f
  3128  02C1  0DB7               	rlf	___ftdiv@f1+1,f
  3129  02C2  0DB8               	rlf	___ftdiv@f1+2,f
  3130  02C3  3EFF               	addlw	-1
  3131  02C4  1D03               	skipz
  3132  02C5  2ABF               	goto	u2855
  3133  02C6  3001               	movlw	1
  3134  02C7  02BD               	subwf	___ftdiv@cntr,f
  3135  02C8  1D03               	btfss	3,2
  3136  02C9  2A9F               	goto	l2424
  3137  02CA  083E               	movf	___ftdiv@f3,w
  3138  02CB  00A0               	movwf	___ftpack@arg
  3139  02CC  083F               	movf	___ftdiv@f3+1,w
  3140  02CD  00A1               	movwf	___ftpack@arg+1
  3141  02CE  0840               	movf	___ftdiv@f3+2,w
  3142  02CF  00A2               	movwf	___ftpack@arg+2
  3143  02D0  0841               	movf	___ftdiv@exp,w
  3144  02D1  00B9               	movwf	??___ftdiv
  3145  02D2  0839               	movf	??___ftdiv,w
  3146  02D3  00A3               	movwf	___ftpack@exp
  3147  02D4  0842               	movf	___ftdiv@sign,w
  3148  02D5  00BA               	movwf	??___ftdiv+1
  3149  02D6  083A               	movf	??___ftdiv+1,w
  3150  02D7  00A4               	movwf	___ftpack@sign
  3151  02D8  120A  118A  2507   	fcall	___ftpack
  3152  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3153  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  3154  02DD  0820               	movf	?___ftpack,w
  3155  02DE  00B3               	movwf	?___ftdiv
  3156  02DF  0821               	movf	?___ftpack+1,w
  3157  02E0  00B4               	movwf	?___ftdiv+1
  3158  02E1  0822               	movf	?___ftpack+2,w
  3159  02E2  00B5               	movwf	?___ftdiv+2
  3160  02E3  0008               	return
  3161  02E4                     __end_of___ftdiv:	
  3162                           
  3163                           	psect	text14
  3164  0507                     __ptext14:	
  3165 ;; *************** function ___ftpack *****************
  3166 ;; Defined at:
  3167 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  arg             3    0[BANK0 ] unsigned um
  3170 ;;  exp             1    3[BANK0 ] unsigned char 
  3171 ;;  sign            1    4[BANK0 ] unsigned char 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  3    0[BANK0 ] float 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2, status,0
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3183 ;;      Params:         0       5       0       0       0
  3184 ;;      Locals:         0       0       0       0       0
  3185 ;;      Temps:          0       3       0       0       0
  3186 ;;      Totals:         0       8       0       0       0
  3187 ;;Total ram usage:        8 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    2
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		___altoft
  3194 ;;		___ftadd
  3195 ;;		___ftdiv
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           
  3200                           ;psect for function ___ftpack
  3201  0507                     ___ftpack:	
  3202                           
  3203                           ;incstack = 0
  3204                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3205  0507  1283               	bcf	3,5	;RP0=0, select bank0
  3206  0508  1303               	bcf	3,6	;RP1=0, select bank0
  3207  0509  0823               	movf	___ftpack@exp,w
  3208  050A  1903               	btfsc	3,2
  3209  050B  2D11               	goto	l2060
  3210  050C  0822               	movf	___ftpack@arg+2,w
  3211  050D  0421               	iorwf	___ftpack@arg+1,w
  3212  050E  0420               	iorwf	___ftpack@arg,w
  3213  050F  1D03               	skipz
  3214  0510  2D24               	goto	l2066
  3215  0511                     l2060:	
  3216  0511  3000               	movlw	0
  3217  0512  00A0               	movwf	?___ftpack
  3218  0513  3000               	movlw	0
  3219  0514  00A1               	movwf	?___ftpack+1
  3220  0515  3000               	movlw	0
  3221  0516  00A2               	movwf	?___ftpack+2
  3222  0517  0008               	return
  3223  0518                     l2064:	
  3224  0518  3001               	movlw	1
  3225  0519  00A5               	movwf	??___ftpack
  3226  051A  0825               	movf	??___ftpack,w
  3227  051B  07A3               	addwf	___ftpack@exp,f
  3228  051C  3001               	movlw	1
  3229  051D                     u2195:	
  3230  051D  1003               	clrc
  3231  051E  0CA2               	rrf	___ftpack@arg+2,f
  3232  051F  0CA1               	rrf	___ftpack@arg+1,f
  3233  0520  0CA0               	rrf	___ftpack@arg,f
  3234  0521  3EFF               	addlw	-1
  3235  0522  1D03               	skipz
  3236  0523  2D1D               	goto	u2195
  3237  0524                     l2066:	
  3238  0524  30FE               	movlw	254
  3239  0525  0522               	andwf	___ftpack@arg+2,w
  3240  0526  1903               	btfsc	3,2
  3241  0527  2D3F               	goto	l555
  3242  0528  2D18               	goto	l2064
  3243  0529                     l2068:	
  3244  0529  3001               	movlw	1
  3245  052A  00A5               	movwf	??___ftpack
  3246  052B  0825               	movf	??___ftpack,w
  3247  052C  07A3               	addwf	___ftpack@exp,f
  3248  052D  3001               	movlw	1
  3249  052E  07A0               	addwf	___ftpack@arg,f
  3250  052F  3000               	movlw	0
  3251  0530  1803               	skipnc
  3252  0531  3001               	movlw	1
  3253  0532  07A1               	addwf	___ftpack@arg+1,f
  3254  0533  3000               	movlw	0
  3255  0534  1803               	skipnc
  3256  0535  3001               	movlw	1
  3257  0536  07A2               	addwf	___ftpack@arg+2,f
  3258  0537  3001               	movlw	1
  3259  0538                     u2215:	
  3260  0538  1003               	clrc
  3261  0539  0CA2               	rrf	___ftpack@arg+2,f
  3262  053A  0CA1               	rrf	___ftpack@arg+1,f
  3263  053B  0CA0               	rrf	___ftpack@arg,f
  3264  053C  3EFF               	addlw	-1
  3265  053D  1D03               	skipz
  3266  053E  2D38               	goto	u2215
  3267  053F                     l555:	
  3268  053F  30FF               	movlw	255
  3269  0540  0522               	andwf	___ftpack@arg+2,w
  3270  0541  1903               	btfsc	3,2
  3271  0542  2D4E               	goto	l2076
  3272  0543  2D29               	goto	l2068
  3273  0544                     l2074:	
  3274  0544  3001               	movlw	1
  3275  0545  02A3               	subwf	___ftpack@exp,f
  3276  0546  3001               	movlw	1
  3277  0547                     u2235:	
  3278  0547  1003               	clrc
  3279  0548  0DA0               	rlf	___ftpack@arg,f
  3280  0549  0DA1               	rlf	___ftpack@arg+1,f
  3281  054A  0DA2               	rlf	___ftpack@arg+2,f
  3282  054B  3EFF               	addlw	-1
  3283  054C  1D03               	skipz
  3284  054D  2D47               	goto	u2235
  3285  054E                     l2076:	
  3286  054E  1BA1               	btfsc	___ftpack@arg+1,7
  3287  054F  2D54               	goto	l562
  3288  0550  3002               	movlw	2
  3289  0551  0223               	subwf	___ftpack@exp,w
  3290  0552  1803               	skipnc
  3291  0553  2D44               	goto	l2074
  3292  0554                     l562:	
  3293  0554  1823               	btfsc	___ftpack@exp,0
  3294  0555  2D5C               	goto	l563
  3295  0556  30FF               	movlw	255
  3296  0557  05A0               	andwf	___ftpack@arg,f
  3297  0558  307F               	movlw	127
  3298  0559  05A1               	andwf	___ftpack@arg+1,f
  3299  055A  30FF               	movlw	255
  3300  055B  05A2               	andwf	___ftpack@arg+2,f
  3301  055C                     l563:	
  3302  055C  1003               	clrc
  3303  055D  0CA3               	rrf	___ftpack@exp,f
  3304  055E  0823               	movf	___ftpack@exp,w
  3305  055F  00A5               	movwf	??___ftpack
  3306  0560  01A6               	clrf	??___ftpack+1
  3307  0561  01A7               	clrf	??___ftpack+2
  3308  0562  3010               	movlw	16
  3309  0563                     u2275:	
  3310  0563  1003               	clrc
  3311  0564  0DA5               	rlf	??___ftpack,f
  3312  0565  0DA6               	rlf	??___ftpack+1,f
  3313  0566  0DA7               	rlf	??___ftpack+2,f
  3314  0567  3EFF               	addlw	-1
  3315  0568  1D03               	skipz
  3316  0569  2D63               	goto	u2275
  3317  056A  0825               	movf	??___ftpack,w
  3318  056B  04A0               	iorwf	___ftpack@arg,f
  3319  056C  0826               	movf	??___ftpack+1,w
  3320  056D  04A1               	iorwf	___ftpack@arg+1,f
  3321  056E  0827               	movf	??___ftpack+2,w
  3322  056F  04A2               	iorwf	___ftpack@arg+2,f
  3323  0570  0824               	movf	___ftpack@sign,w
  3324  0571  1903               	btfsc	3,2
  3325  0572  0008               	return
  3326  0573  17A2               	bsf	___ftpack@arg+2,7
  3327  0574  0008               	return
  3328  0575                     __end_of___ftpack:	
  3329                           
  3330                           	psect	text15
  3331  07B8                     __ptext15:	
  3332 ;; *************** function _initialise *****************
  3333 ;; Defined at:
  3334 ;;		line 25 in file "main.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, pclath, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3348 ;;      Params:         0       0       0       0       0
  3349 ;;      Locals:         0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0
  3351 ;;      Totals:         0       0       0       0       0
  3352 ;;Total ram usage:        0 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    5
  3355 ;; This function calls:
  3356 ;;		_initializeADC
  3357 ;;		_initializeMotor
  3358 ;;		_initializeTimer0
  3359 ;;		_setupLCD
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           
  3366                           ;psect for function _initialise
  3367  07B8                     _initialise:	
  3368                           
  3369                           ;main.c: 28: TRISB = 0b00001111;
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in _initialise: [wreg+status,2+status,0+pclath+cstack]
  3373  07B8  300F               	movlw	15
  3374  07B9  1683               	bsf	3,5	;RP0=1, select bank1
  3375  07BA  1303               	bcf	3,6	;RP1=0, select bank1
  3376  07BB  0086               	movwf	6	;volatile
  3377                           
  3378                           ;main.c: 29: TRISC = 0;
  3379  07BC  0187               	clrf	7	;volatile
  3380                           
  3381                           ;main.c: 31: RB4 = 1;
  3382  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  3383  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  3384  07BF  1606               	bsf	6,4	;volatile
  3385                           
  3386                           ;main.c: 32: RB5 = 1;
  3387  07C0  1686               	bsf	6,5	;volatile
  3388                           
  3389                           ;main.c: 34: initializeTimer0();
  3390  07C1  120A  158A  2774  120A  118A  	fcall	_initializeTimer0
  3391                           
  3392                           ;main.c: 35: initializeADC();
  3393  07C6  120A  158A  27BB  120A  118A  	fcall	_initializeADC
  3394                           
  3395                           ;main.c: 36: setupLCD();
  3396  07CB  120A  118A  274A  120A  118A  	fcall	_setupLCD
  3397                           
  3398                           ;main.c: 37: initializeMotor();
  3399  07D0  120A  118A  27D4   	fcall	_initializeMotor
  3400  07D3  0008               	return
  3401  07D4                     __end_of_initialise:	
  3402                           
  3403                           	psect	text16
  3404  074A                     __ptext16:	
  3405 ;; *************** function _setupLCD *****************
  3406 ;; Defined at:
  3407 ;;		line 78 in file "lcd.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      void 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0, pclath, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3421 ;;      Params:         0       0       0       0       0
  3422 ;;      Locals:         0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0
  3424 ;;      Totals:         0       0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    3
  3428 ;; This function calls:
  3429 ;;		_lcdWriteControl
  3430 ;; This function is called by:
  3431 ;;		_initialise
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _setupLCD
  3437  074A                     _setupLCD:	
  3438                           
  3439                           ;lcd.c: 81: PORTD = 0;
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  3443  074A  1283               	bcf	3,5	;RP0=0, select bank0
  3444  074B  1303               	bcf	3,6	;RP1=0, select bank0
  3445  074C  0188               	clrf	8	;volatile
  3446                           
  3447                           ;lcd.c: 82: PORTE = 0;
  3448  074D  0189               	clrf	9	;volatile
  3449                           
  3450                           ;lcd.c: 84: TRISD = 0b00000000;
  3451  074E  1683               	bsf	3,5	;RP0=1, select bank1
  3452  074F  1303               	bcf	3,6	;RP1=0, select bank1
  3453  0750  0188               	clrf	8	;volatile
  3454                           
  3455                           ;lcd.c: 85: TRISE = 0b00000000;
  3456  0751  0189               	clrf	9	;volatile
  3457                           
  3458                           ;lcd.c: 88: lcdWriteControl(0b00000001);
  3459  0752  3001               	movlw	1
  3460  0753  120A  158A  27A7  120A  118A  	fcall	_lcdWriteControl
  3461                           
  3462                           ;lcd.c: 89: lcdWriteControl(0b00111000);
  3463  0758  3038               	movlw	56
  3464  0759  120A  158A  27A7  120A  118A  	fcall	_lcdWriteControl
  3465                           
  3466                           ;lcd.c: 90: lcdWriteControl(0b00001100);
  3467  075E  300C               	movlw	12
  3468  075F  120A  158A  27A7  120A  118A  	fcall	_lcdWriteControl
  3469                           
  3470                           ;lcd.c: 91: lcdWriteControl(0b00000110);
  3471  0764  3006               	movlw	6
  3472  0765  120A  158A  27A7  120A  118A  	fcall	_lcdWriteControl
  3473                           
  3474                           ;lcd.c: 92: lcdWriteControl(0b00000010);
  3475  076A  3002               	movlw	2
  3476  076B  120A  158A  27A7  120A  118A  	fcall	_lcdWriteControl
  3477                           
  3478                           ;lcd.c: 96: lcdWriteControl(0b00000001);
  3479  0770  3001               	movlw	1
  3480  0771  120A  158A  27A7   	fcall	_lcdWriteControl
  3481  0774  0008               	return
  3482  0775                     __end_of_setupLCD:	
  3483                           
  3484                           	psect	text17
  3485  0F74                     __ptext17:	
  3486 ;; *************** function _initializeTimer0 *****************
  3487 ;; Defined at:
  3488 ;;		line 6 in file "timer0.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;		None
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;		None
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         0       0       0       0       0
  3503 ;;      Locals:         0       0       0       0       0
  3504 ;;      Temps:          0       0       0       0       0
  3505 ;;      Totals:         0       0       0       0       0
  3506 ;;Total ram usage:        0 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    2
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_initialise
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _initializeTimer0
  3518  0F74                     _initializeTimer0:	
  3519                           
  3520                           ;timer0.c: 9: TMR0 = 100;
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _initializeTimer0: [wreg]
  3524  0F74  3064               	movlw	100
  3525  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0F76  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0F77  0081               	movwf	1	;volatile
  3528                           
  3529                           ;timer0.c: 10: T0CS = 0;
  3530  0F78  1683               	bsf	3,5	;RP0=1, select bank1
  3531  0F79  1303               	bcf	3,6	;RP1=0, select bank1
  3532  0F7A  1281               	bcf	1,5	;volatile
  3533                           
  3534                           ;timer0.c: 11: T0SE = 0;
  3535  0F7B  1201               	bcf	1,4	;volatile
  3536                           
  3537                           ;timer0.c: 12: PSA = 0;
  3538  0F7C  1181               	bcf	1,3	;volatile
  3539                           
  3540                           ;timer0.c: 13: PS0 = 0;
  3541  0F7D  1001               	bcf	1,0	;volatile
  3542                           
  3543                           ;timer0.c: 14: PS1 = 0;
  3544  0F7E  1081               	bcf	1,1	;volatile
  3545                           
  3546                           ;timer0.c: 15: PS2 = 1;
  3547  0F7F  1501               	bsf	1,2	;volatile
  3548                           
  3549                           ;timer0.c: 17: TMR0IE = 1;
  3550  0F80  168B               	bsf	11,5	;volatile
  3551                           
  3552                           ;timer0.c: 18: (GIE = 1);
  3553  0F81  178B               	bsf	11,7	;volatile
  3554  0F82  0008               	return
  3555  0F83                     __end_of_initializeTimer0:	
  3556                           
  3557                           	psect	text18
  3558  07D4                     __ptext18:	
  3559 ;; *************** function _initializeMotor *****************
  3560 ;; Defined at:
  3561 ;;		line 19 in file "motor.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  2   26[None  ] int 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, pclath, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3575 ;;      Params:         0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0
  3578 ;;      Totals:         0       0       0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    4
  3582 ;; This function calls:
  3583 ;;		_lcdSetCursor
  3584 ;;		_lcdWriteToDigitBCD
  3585 ;; This function is called by:
  3586 ;;		_initialise
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           
  3591                           ;psect for function _initializeMotor
  3592  07D4                     _initializeMotor:	
  3593                           
  3594                           ;motor.c: 20: PORTC = halfSteps[0];
  3595                           
  3596                           ;incstack = 0
  3597                           ; Regs used in _initializeMotor: [wreg+status,2+status,0+pclath+cstack]
  3598  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  3599  07D5  1303               	bcf	3,6	;RP1=0, select bank1
  3600  07D6  0820               	movf	_halfSteps^(0+128),w
  3601  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3602  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  3603  07D9  0087               	movwf	7	;volatile
  3604                           
  3605                           ;motor.c: 21: lcdSetCursor(0x40);
  3606  07DA  3040               	movlw	64
  3607  07DB  120A  158A  2753  120A  118A  	fcall	_lcdSetCursor
  3608                           
  3609                           ;motor.c: 22: lcdWriteToDigitBCD(nrOfSteps);
  3610  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  3611  07E1  1303               	bcf	3,6	;RP1=0, select bank1
  3612  07E2  084A               	movf	(_nrOfSteps+1)^(0+128),w
  3613  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  3614  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  3615  07E5  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3616  07E6  1683               	bsf	3,5	;RP0=1, select bank1
  3617  07E7  1303               	bcf	3,6	;RP1=0, select bank1
  3618  07E8  0849               	movf	_nrOfSteps^(0+128),w
  3619  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  3620  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  3621  07EB  00A6               	movwf	lcdWriteToDigitBCD@data
  3622  07EC  120A  118A  23FD   	fcall	_lcdWriteToDigitBCD
  3623  07EF  0008               	return
  3624  07F0                     __end_of_initializeMotor:	
  3625                           
  3626                           	psect	text19
  3627  03FD                     __ptext19:	
  3628 ;; *************** function _lcdWriteToDigitBCD *****************
  3629 ;; Defined at:
  3630 ;;		line 39 in file "lcd.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;  data            2    6[BANK0 ] int 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  3635 ;;  sign            1   12[BANK0 ] char 
  3636 ;;  ThousandDigi    1   11[BANK0 ] unsigned char 
  3637 ;;  HundredDigit    1   10[BANK0 ] unsigned char 
  3638 ;;  TensDigit       1    9[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0, pclath, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3648 ;;      Params:         0       2       0       0       0
  3649 ;;      Locals:         0       6       0       0       0
  3650 ;;      Temps:          0       1       0       0       0
  3651 ;;      Totals:         0       9       0       0       0
  3652 ;;Total ram usage:        9 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    3
  3655 ;; This function calls:
  3656 ;;		___wmul
  3657 ;;		_lcdWriteData
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;;		_initializeMotor
  3661 ;;		_move
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _lcdWriteToDigitBCD
  3667  03FD                     _lcdWriteToDigitBCD:	
  3668                           
  3669                           ;lcd.c: 40: unsigned int OnesDigit;
  3670                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  3671                           ;lcd.c: 42: signed char sign = 1;
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  3675  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3676  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  3677  03FF  01AC               	clrf	lcdWriteToDigitBCD@sign
  3678  0400  0AAC               	incf	lcdWriteToDigitBCD@sign,f
  3679                           
  3680                           ;lcd.c: 43: if(data<0)
  3681  0401  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  3682  0402  2C05               	goto	l2158
  3683                           
  3684                           ;lcd.c: 44: sign = -1;
  3685  0403  01AC               	clrf	lcdWriteToDigitBCD@sign
  3686  0404  03AC               	decf	lcdWriteToDigitBCD@sign,f
  3687  0405                     l2158:	
  3688                           
  3689                           ;lcd.c: 46: OnesDigit = data*sign;
  3690  0405  082C               	movf	lcdWriteToDigitBCD@sign,w
  3691  0406  00A0               	movwf	___wmul@multiplier
  3692  0407  01A1               	clrf	___wmul@multiplier+1
  3693  0408  1BA0               	btfsc	___wmul@multiplier,7
  3694  0409  03A1               	decf	___wmul@multiplier+1,f
  3695  040A  0827               	movf	lcdWriteToDigitBCD@data+1,w
  3696  040B  00A3               	movwf	___wmul@multiplicand+1
  3697  040C  0826               	movf	lcdWriteToDigitBCD@data,w
  3698  040D  00A2               	movwf	___wmul@multiplicand
  3699  040E  120A  118A  2775  120A  118A  	fcall	___wmul
  3700  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3701  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3702  0415  0821               	movf	?___wmul+1,w
  3703  0416  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3704  0417  0820               	movf	?___wmul,w
  3705  0418  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3706                           
  3707                           ;lcd.c: 47: ThousandDigit = 0;
  3708  0419  01AB               	clrf	lcdWriteToDigitBCD@ThousandDigit
  3709                           
  3710                           ;lcd.c: 48: HundredDigit = 0;
  3711  041A  01AA               	clrf	lcdWriteToDigitBCD@HundredDigit
  3712                           
  3713                           ;lcd.c: 49: TensDigit = 0;
  3714  041B  01A9               	clrf	lcdWriteToDigitBCD@TensDigit
  3715  041C                     l2168:	
  3716                           ;lcd.c: 53: while(OnesDigit >= 1000){
  3717                           
  3718  041C  3003               	movlw	3
  3719  041D  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3720  041E  30E8               	movlw	232
  3721  041F  1903               	skipnz
  3722  0420  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3723  0421  1C03               	btfss	3,0
  3724  0422  2C3C               	goto	l2172
  3725                           
  3726                           ;lcd.c: 54: OnesDigit = OnesDigit - 1000;
  3727  0423  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3728  0424  3E18               	addlw	24
  3729  0425  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3730  0426  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3731  0427  1803               	skipnc
  3732  0428  3E01               	addlw	1
  3733  0429  3EFC               	addlw	252
  3734  042A  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3735                           
  3736                           ;lcd.c: 55: ThousandDigit++;
  3737  042B  3001               	movlw	1
  3738  042C  00A8               	movwf	??_lcdWriteToDigitBCD
  3739  042D  0828               	movf	??_lcdWriteToDigitBCD,w
  3740  042E  07AB               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  3741  042F  2C1C               	goto	l2168
  3742  0430                     l2170:	
  3743                           ;lcd.c: 56: }
  3744                           ;lcd.c: 57: while(OnesDigit >= 100){
  3745                           
  3746                           
  3747                           ;lcd.c: 58: OnesDigit = OnesDigit - 100;
  3748  0430  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3749  0431  3E9C               	addlw	156
  3750  0432  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3751  0433  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3752  0434  1803               	skipnc
  3753  0435  3E01               	addlw	1
  3754  0436  3EFF               	addlw	255
  3755  0437  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3756                           
  3757                           ;lcd.c: 59: HundredDigit++;
  3758  0438  3001               	movlw	1
  3759  0439  00A8               	movwf	??_lcdWriteToDigitBCD
  3760  043A  0828               	movf	??_lcdWriteToDigitBCD,w
  3761  043B  07AA               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  3762  043C                     l2172:	
  3763  043C  3000               	movlw	0
  3764  043D  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3765  043E  3064               	movlw	100
  3766  043F  1903               	skipnz
  3767  0440  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3768  0441  1C03               	btfss	3,0
  3769  0442  2C50               	goto	l2176
  3770  0443  2C30               	goto	l2170
  3771  0444                     l2174:	
  3772                           ;lcd.c: 60: }
  3773                           ;lcd.c: 61: while (OnesDigit >= 10){
  3774                           
  3775                           
  3776                           ;lcd.c: 62: OnesDigit = OnesDigit - 10;
  3777  0444  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3778  0445  3EF6               	addlw	246
  3779  0446  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3780  0447  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3781  0448  1803               	skipnc
  3782  0449  3E01               	addlw	1
  3783  044A  3EFF               	addlw	255
  3784  044B  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3785                           
  3786                           ;lcd.c: 63: TensDigit++;
  3787  044C  3001               	movlw	1
  3788  044D  00A8               	movwf	??_lcdWriteToDigitBCD
  3789  044E  0828               	movf	??_lcdWriteToDigitBCD,w
  3790  044F  07A9               	addwf	lcdWriteToDigitBCD@TensDigit,f
  3791  0450                     l2176:	
  3792  0450  3000               	movlw	0
  3793  0451  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3794  0452  300A               	movlw	10
  3795  0453  1903               	skipnz
  3796  0454  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3797  0455  1803               	skipnc
  3798  0456  2C44               	goto	l2174
  3799                           
  3800                           ;lcd.c: 64: }
  3801                           ;lcd.c: 65: if(sign == -1)
  3802  0457  0A2C               	incf	lcdWriteToDigitBCD@sign,w
  3803  0458  1D03               	btfss	3,2
  3804  0459  2C5C               	goto	l2182
  3805                           
  3806                           ;lcd.c: 66: lcdWriteData((unsigned char)45);
  3807  045A  302D               	movlw	45
  3808  045B  2C5D               	goto	L5
  3809  045C                     l2182:	
  3810                           
  3811                           ;lcd.c: 67: else{
  3812                           ;lcd.c: 68: lcdWriteData((unsigned char)43);
  3813  045C  302B               	movlw	43
  3814  045D                     L5:	
  3815  045D  120A  158A  2794  120A  118A  	fcall	_lcdWriteData
  3816                           
  3817                           ;lcd.c: 69: }
  3818                           ;lcd.c: 71: lcdWriteData((unsigned char)ThousandDigit + 48);
  3819  0462  1283               	bcf	3,5	;RP0=0, select bank0
  3820  0463  1303               	bcf	3,6	;RP1=0, select bank0
  3821  0464  082B               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  3822  0465  3E30               	addlw	48
  3823  0466  120A  158A  2794  120A  118A  	fcall	_lcdWriteData
  3824                           
  3825                           ;lcd.c: 72: lcdWriteData((unsigned char)HundredDigit + 48);
  3826  046B  1283               	bcf	3,5	;RP0=0, select bank0
  3827  046C  1303               	bcf	3,6	;RP1=0, select bank0
  3828  046D  082A               	movf	lcdWriteToDigitBCD@HundredDigit,w
  3829  046E  3E30               	addlw	48
  3830  046F  120A  158A  2794  120A  118A  	fcall	_lcdWriteData
  3831                           
  3832                           ;lcd.c: 73: lcdWriteData((unsigned char)TensDigit + 48);
  3833  0474  1283               	bcf	3,5	;RP0=0, select bank0
  3834  0475  1303               	bcf	3,6	;RP1=0, select bank0
  3835  0476  0829               	movf	lcdWriteToDigitBCD@TensDigit,w
  3836  0477  3E30               	addlw	48
  3837  0478  120A  158A  2794  120A  118A  	fcall	_lcdWriteData
  3838                           
  3839                           ;lcd.c: 74: lcdWriteData((unsigned char)OnesDigit + 48);
  3840  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3841  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3842  047F  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3843  0480  3E30               	addlw	48
  3844  0481  120A  158A  2794   	fcall	_lcdWriteData
  3845  0484  0008               	return
  3846  0485                     __end_of_lcdWriteToDigitBCD:	
  3847                           
  3848                           	psect	text20
  3849  0F94                     __ptext20:	
  3850 ;; *************** function _lcdWriteData *****************
  3851 ;; Defined at:
  3852 ;;		line 17 in file "lcd.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  databyte        1    wreg     unsigned char 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  databyte        1    2[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3866 ;;      Params:         0       0       0       0       0
  3867 ;;      Locals:         0       1       0       0       0
  3868 ;;      Temps:          0       2       0       0       0
  3869 ;;      Totals:         0       3       0       0       0
  3870 ;;Total ram usage:        3 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    2
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_lcdWriteToDigitBCD
  3877 ;;		_lcdWriteString
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           
  3882                           ;psect for function _lcdWriteData
  3883  0F94                     _lcdWriteData:	
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _lcdWriteData: [wreg]
  3887                           ;lcdWriteData@databyte stored from wreg
  3888  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0F96  00A2               	movwf	lcdWriteData@databyte
  3891                           
  3892                           ;lcd.c: 18: RE2 = 0;
  3893  0F97  1109               	bcf	9,2	;volatile
  3894                           
  3895                           ;lcd.c: 19: RE1 = 0;
  3896  0F98  1089               	bcf	9,1	;volatile
  3897                           
  3898                           ;lcd.c: 20: RE0 = 1;
  3899  0F99  1409               	bsf	9,0	;volatile
  3900                           
  3901                           ;lcd.c: 21: PORTD = databyte;
  3902  0F9A  0822               	movf	lcdWriteData@databyte,w
  3903  0F9B  0088               	movwf	8	;volatile
  3904                           
  3905                           ;lcd.c: 22: RE2 = 1;
  3906  0F9C  1509               	bsf	9,2	;volatile
  3907                           
  3908                           ;lcd.c: 23: RE2 = 0;
  3909  0F9D  1109               	bcf	9,2	;volatile
  3910                           
  3911                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  3912  0F9E  3007               	movlw	7
  3913  0F9F  00A1               	movwf	??_lcdWriteData+1
  3914  0FA0  307D               	movlw	125
  3915  0FA1  00A0               	movwf	??_lcdWriteData
  3916  0FA2                     u2987:	
  3917  0FA2  0BA0               	decfsz	??_lcdWriteData,f
  3918  0FA3  2FA2               	goto	u2987
  3919  0FA4  0BA1               	decfsz	??_lcdWriteData+1,f
  3920  0FA5  2FA2               	goto	u2987
  3921  0FA6  0008               	return
  3922  0FA7                     __end_of_lcdWriteData:	
  3923                           
  3924                           	psect	text21
  3925  0775                     __ptext21:	
  3926 ;; *************** function ___wmul *****************
  3927 ;; Defined at:
  3928 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3931 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  product         2    4[BANK0 ] unsigned int 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  2    0[BANK0 ] unsigned int 
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3943 ;;      Params:         0       4       0       0       0
  3944 ;;      Locals:         0       2       0       0       0
  3945 ;;      Temps:          0       0       0       0       0
  3946 ;;      Totals:         0       6       0       0       0
  3947 ;;Total ram usage:        6 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    2
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_lcdWriteToDigitBCD
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           
  3958                           ;psect for function ___wmul
  3959  0775                     ___wmul:	
  3960                           
  3961                           ;incstack = 0
  3962                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3963  0775  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0776  1303               	bcf	3,6	;RP1=0, select bank0
  3965  0777  01A4               	clrf	___wmul@product
  3966  0778  01A5               	clrf	___wmul@product+1
  3967  0779                     l2106:	
  3968  0779  1C20               	btfss	___wmul@multiplier,0
  3969  077A  2F81               	goto	l394
  3970  077B  0822               	movf	___wmul@multiplicand,w
  3971  077C  07A4               	addwf	___wmul@product,f
  3972  077D  1803               	skipnc
  3973  077E  0AA5               	incf	___wmul@product+1,f
  3974  077F  0823               	movf	___wmul@multiplicand+1,w
  3975  0780  07A5               	addwf	___wmul@product+1,f
  3976  0781                     l394:	
  3977  0781  3001               	movlw	1
  3978  0782                     u2305:	
  3979  0782  1003               	clrc
  3980  0783  0DA2               	rlf	___wmul@multiplicand,f
  3981  0784  0DA3               	rlf	___wmul@multiplicand+1,f
  3982  0785  3EFF               	addlw	-1
  3983  0786  1D03               	skipz
  3984  0787  2F82               	goto	u2305
  3985  0788  3001               	movlw	1
  3986  0789                     u2315:	
  3987  0789  1003               	clrc
  3988  078A  0CA1               	rrf	___wmul@multiplier+1,f
  3989  078B  0CA0               	rrf	___wmul@multiplier,f
  3990  078C  3EFF               	addlw	-1
  3991  078D  1D03               	skipz
  3992  078E  2F89               	goto	u2315
  3993  078F  0820               	movf	___wmul@multiplier,w
  3994  0790  0421               	iorwf	___wmul@multiplier+1,w
  3995  0791  1D03               	btfss	3,2
  3996  0792  2F79               	goto	l2106
  3997  0793  0825               	movf	___wmul@product+1,w
  3998  0794  00A1               	movwf	?___wmul+1
  3999  0795  0824               	movf	___wmul@product,w
  4000  0796  00A0               	movwf	?___wmul
  4001  0797  0008               	return
  4002  0798                     __end_of___wmul:	
  4003                           
  4004                           	psect	text22
  4005  0F53                     __ptext22:	
  4006 ;; *************** function _lcdSetCursor *****************
  4007 ;; Defined at:
  4008 ;;		line 28 in file "lcd.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  address         1    wreg     unsigned char 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  address         1    3[BANK0 ] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, pclath, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4022 ;;      Params:         0       0       0       0       0
  4023 ;;      Locals:         0       1       0       0       0
  4024 ;;      Temps:          0       0       0       0       0
  4025 ;;      Totals:         0       1       0       0       0
  4026 ;;Total ram usage:        1 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    3
  4029 ;; This function calls:
  4030 ;;		_lcdWriteControl
  4031 ;; This function is called by:
  4032 ;;		_main
  4033 ;;		_initializeMotor
  4034 ;;		_move
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _lcdSetCursor
  4040  0F53                     _lcdSetCursor:	
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4044                           ;lcdSetCursor@address stored from wreg
  4045  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  4046  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  4047  0F55  00A3               	movwf	lcdSetCursor@address
  4048                           
  4049                           ;lcd.c: 29: address |= 0b10000000;
  4050  0F56  17A3               	bsf	lcdSetCursor@address,7
  4051                           
  4052                           ;lcd.c: 30: lcdWriteControl(address);
  4053  0F57  0823               	movf	lcdSetCursor@address,w
  4054  0F58  120A  158A  27A7   	fcall	_lcdWriteControl
  4055  0F5B  0008               	return
  4056  0F5C                     __end_of_lcdSetCursor:	
  4057                           
  4058                           	psect	text23
  4059  0FA7                     __ptext23:	
  4060 ;; *************** function _lcdWriteControl *****************
  4061 ;; Defined at:
  4062 ;;		line 6 in file "lcd.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  databyte        1    wreg     unsigned char 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  databyte        1    2[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4076 ;;      Params:         0       0       0       0       0
  4077 ;;      Locals:         0       1       0       0       0
  4078 ;;      Temps:          0       2       0       0       0
  4079 ;;      Totals:         0       3       0       0       0
  4080 ;;Total ram usage:        3 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    2
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_lcdSetCursor
  4087 ;;		_setupLCD
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _lcdWriteControl
  4093  0FA7                     _lcdWriteControl:	
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _lcdWriteControl: [wreg]
  4097                           ;lcdWriteControl@databyte stored from wreg
  4098  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  4099  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  4100  0FA9  00A2               	movwf	lcdWriteControl@databyte
  4101                           
  4102                           ;lcd.c: 7: RE2 = 0;
  4103  0FAA  1109               	bcf	9,2	;volatile
  4104                           
  4105                           ;lcd.c: 8: RE1 = 0;
  4106  0FAB  1089               	bcf	9,1	;volatile
  4107                           
  4108                           ;lcd.c: 9: RE0 = 0;
  4109  0FAC  1009               	bcf	9,0	;volatile
  4110                           
  4111                           ;lcd.c: 10: PORTD = databyte;
  4112  0FAD  0822               	movf	lcdWriteControl@databyte,w
  4113  0FAE  0088               	movwf	8	;volatile
  4114                           
  4115                           ;lcd.c: 11: RE2 = 1;
  4116  0FAF  1509               	bsf	9,2	;volatile
  4117                           
  4118                           ;lcd.c: 12: RE2 = 0;
  4119  0FB0  1109               	bcf	9,2	;volatile
  4120                           
  4121                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  4122  0FB1  300D               	movlw	13
  4123  0FB2  00A1               	movwf	??_lcdWriteControl+1
  4124  0FB3  30FB               	movlw	251
  4125  0FB4  00A0               	movwf	??_lcdWriteControl
  4126  0FB5                     u2997:	
  4127  0FB5  0BA0               	decfsz	??_lcdWriteControl,f
  4128  0FB6  2FB5               	goto	u2997
  4129  0FB7  0BA1               	decfsz	??_lcdWriteControl+1,f
  4130  0FB8  2FB5               	goto	u2997
  4131  0FB9  2FBA               	nop2
  4132  0FBA  0008               	return
  4133  0FBB                     __end_of_lcdWriteControl:	
  4134                           
  4135                           	psect	text24
  4136  0FBB                     __ptext24:	
  4137 ;; *************** function _initializeADC *****************
  4138 ;; Defined at:
  4139 ;;		line 4 in file "adConv.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4153 ;;      Params:         0       0       0       0       0
  4154 ;;      Locals:         0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0
  4156 ;;      Totals:         0       0       0       0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    2
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_initialise
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _initializeADC
  4169  0FBB                     _initializeADC:	
  4170                           
  4171                           ;adConv.c: 5: TRISA = 0b11111111;
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _initializeADC: [wreg]
  4175  0FBB  30FF               	movlw	255
  4176  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  4177  0FBD  1303               	bcf	3,6	;RP1=0, select bank1
  4178  0FBE  0085               	movwf	5	;volatile
  4179                           
  4180                           ;adConv.c: 7: ADFM = 1;
  4181  0FBF  179F               	bsf	31,7	;volatile
  4182                           
  4183                           ;adConv.c: 9: ADCS2 = 0;
  4184  0FC0  131F               	bcf	31,6	;volatile
  4185                           
  4186                           ;adConv.c: 11: PCFG3 = 0;
  4187  0FC1  119F               	bcf	31,3	;volatile
  4188                           
  4189                           ;adConv.c: 12: PCFG2 = 0;
  4190  0FC2  111F               	bcf	31,2	;volatile
  4191                           
  4192                           ;adConv.c: 13: PCFG1 = 1;
  4193  0FC3  149F               	bsf	31,1	;volatile
  4194                           
  4195                           ;adConv.c: 14: PCFG0 = 1;
  4196  0FC4  141F               	bsf	31,0	;volatile
  4197                           
  4198                           ;adConv.c: 18: ADCON0 = 0b10000001;
  4199  0FC5  3081               	movlw	129
  4200  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  4201  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  4202  0FC8  009F               	movwf	31	;volatile
  4203                           
  4204                           ;adConv.c: 22: ADIF = 0;
  4205  0FC9  130C               	bcf	12,6	;volatile
  4206                           
  4207                           ;adConv.c: 23: ADIE = 1;
  4208  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  4209  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  4210  0FCC  170C               	bsf	12,6	;volatile
  4211                           
  4212                           ;adConv.c: 24: PEIE = 1;
  4213  0FCD  170B               	bsf	11,6	;volatile
  4214                           
  4215                           ;adConv.c: 25: GIE = 1;
  4216  0FCE  178B               	bsf	11,7	;volatile
  4217  0FCF  0008               	return
  4218  0FD0                     __end_of_initializeADC:	
  4219                           
  4220                           	psect	text25
  4221  0798                     __ptext25:	
  4222 ;; *************** function _isr *****************
  4223 ;; Defined at:
  4224 ;;		line 13 in file "main.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0, pclath, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4238 ;;      Params:         0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0
  4240 ;;      Temps:          4       0       0       0       0
  4241 ;;      Totals:         4       0       0       0       0
  4242 ;;Total ram usage:        4 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    1
  4245 ;; This function calls:
  4246 ;;		_debounceButtons
  4247 ;;		_flashLed
  4248 ;; This function is called by:
  4249 ;;		Interrupt level 1
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _isr
  4255  0798                     _isr:	
  4256                           
  4257                           ;main.c: 14: if (T0IF){
  4258  0798  1D0B               	btfss	11,2	;volatile
  4259  0799  2FA7               	goto	i1l2000
  4260                           
  4261                           ;main.c: 15: T0IF = 0;
  4262  079A  110B               	bcf	11,2	;volatile
  4263                           
  4264                           ;main.c: 16: TMR0 = 100;
  4265  079B  3064               	movlw	100
  4266  079C  0081               	movwf	1	;volatile
  4267                           
  4268                           ;main.c: 17: flashLed();
  4269  079D  120A  158A  27D0  120A  118A  	fcall	_flashLed
  4270                           
  4271                           ;main.c: 18: debounceButtons();
  4272  07A2  120A  118A  2634  120A  118A  	fcall	_debounceButtons
  4273  07A7                     i1l2000:	
  4274                           
  4275                           ;main.c: 19: }
  4276                           ;main.c: 20: if(ADIF){
  4277  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  4278  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  4279  07A9  1F0C               	btfss	12,6	;volatile
  4280  07AA  2FAD               	goto	i1l83
  4281                           
  4282                           ;main.c: 21: conversionDone = 1;
  4283  07AB  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  4284                           
  4285                           ;main.c: 22: ADIF = 0;
  4286  07AC  130C               	bcf	12,6	;volatile
  4287  07AD                     i1l83:	
  4288  07AD  0876               	movf	??_isr+3,w
  4289  07AE  00FF               	movwf	127
  4290  07AF  0875               	movf	??_isr+2,w
  4291  07B0  008A               	movwf	10
  4292  07B1  0874               	movf	??_isr+1,w
  4293  07B2  0084               	movwf	4
  4294  07B3  0E73               	swapf	??_isr^(0+-128),w
  4295  07B4  0083               	movwf	3
  4296  07B5  0EFE               	swapf	126,f
  4297  07B6  0E7E               	swapf	126,w
  4298  07B7  0009               	retfie
  4299  07B8                     __end_of_isr:	
  4300                           
  4301                           	psect	intentry
  4302  0004                     __pintentry:	
  4303                           ;incstack = 0
  4304                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4305                           
  4306  0004                     interrupt_function:	
  4307  007E                     saved_w	set	btemp
  4308  0004  00FE               	movwf	btemp
  4309  0005  0E03               	swapf	3,w
  4310  0006  00F3               	movwf	??_isr
  4311  0007  0804               	movf	4,w
  4312  0008  00F4               	movwf	??_isr+1
  4313  0009  080A               	movf	10,w
  4314  000A  00F5               	movwf	??_isr+2
  4315  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4316  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4317  000D  087F               	movf	btemp+1,w
  4318  000E  00F6               	movwf	??_isr+3
  4319  000F  120A  118A  2F98   	ljmp	_isr
  4320                           
  4321                           	psect	text26
  4322  0FD0                     __ptext26:	
  4323 ;; *************** function _flashLed *****************
  4324 ;; Defined at:
  4325 ;;		line 21 in file "timer0.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4339 ;;      Params:         0       0       0       0       0
  4340 ;;      Locals:         0       0       0       0       0
  4341 ;;      Temps:          0       0       0       0       0
  4342 ;;      Totals:         0       0       0       0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_isr
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _flashLed
  4354  0FD0                     _flashLed:	
  4355                           
  4356                           ;timer0.c: 22: rtcCounter++;
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _flashLed: [wreg+status,2+status,0]
  4360  0FD0  3001               	movlw	1
  4361  0FD1  1683               	bsf	3,5	;RP0=1, select bank1
  4362  0FD2  1303               	bcf	3,6	;RP1=0, select bank1
  4363  0FD3  07CB               	addwf	_rtcCounter^(0+128),f	;volatile
  4364  0FD4  1803               	skipnc
  4365  0FD5  0ACC               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  4366  0FD6  3000               	movlw	0
  4367  0FD7  07CC               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  4368                           
  4369                           ;timer0.c: 23: if(rtcCounter == 500){
  4370  0FD8  30F4               	movlw	244
  4371  0FD9  064B               	xorwf	_rtcCounter^(0+128),w	;volatile
  4372  0FDA  1D03               	skipz
  4373  0FDB  0008               	return
  4374  0FDC  034C               	decf	(_rtcCounter+1)^(0+128),w	;volatile
  4375  0FDD  1D03               	btfss	3,2
  4376  0FDE  0008               	return
  4377                           
  4378                           ;timer0.c: 24: RB5 = !RB5;
  4379  0FDF  3020               	movlw	32
  4380  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  4381  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  4382  0FE2  0686               	xorwf	6,f
  4383                           
  4384                           ;timer0.c: 25: rtcCounter = 0;
  4385  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  4386  0FE4  1303               	bcf	3,6	;RP1=0, select bank1
  4387  0FE5  01CB               	clrf	_rtcCounter^(0+128)	;volatile
  4388  0FE6  01CC               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  4389  0FE7  0008               	return
  4390  0FE8                     __end_of_flashLed:	
  4391                           
  4392                           	psect	text27
  4393  0634                     __ptext27:	
  4394 ;; *************** function _debounceButtons *****************
  4395 ;; Defined at:
  4396 ;;		line 29 in file "timer0.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4410 ;;      Params:         0       0       0       0       0
  4411 ;;      Locals:         0       0       0       0       0
  4412 ;;      Temps:          1       0       0       0       0
  4413 ;;      Totals:         1       0       0       0       0
  4414 ;;Total ram usage:        1 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_isr
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _debounceButtons
  4425  0634                     _debounceButtons:	
  4426                           
  4427                           ;timer0.c: 31: if(!RB0) {
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  4431  0634  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0635  1303               	bcf	3,6	;RP1=0, select bank0
  4433  0636  1806               	btfsc	6,0	;volatile
  4434  0637  2E44               	goto	i1l1904
  4435                           
  4436                           ;timer0.c: 32: pbCounter++;
  4437  0638  3001               	movlw	1
  4438  0639  00F2               	movwf	??_debounceButtons
  4439  063A  0872               	movf	??_debounceButtons,w
  4440  063B  07F8               	addwf	_pbCounter,f	;volatile
  4441                           
  4442                           ;timer0.c: 33: if(pbCounter >10 &&pb0Released){
  4443  063C  300B               	movlw	11
  4444  063D  0278               	subwf	_pbCounter,w	;volatile
  4445  063E  1803               	btfsc	3,0
  4446  063F  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4447  0640  2E46               	goto	i1l1908
  4448                           
  4449                           ;timer0.c: 34: pb0Pressed = 1;
  4450  0641  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  4451                           
  4452                           ;timer0.c: 35: pb0Released = 0;
  4453  0642  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4454                           
  4455                           ;timer0.c: 36: }
  4456                           ;timer0.c: 37: }
  4457  0643  2E46               	goto	i1l1908
  4458  0644                     i1l1904:	
  4459                           
  4460                           ;timer0.c: 38: else{
  4461                           ;timer0.c: 39: pbCounter = 0;
  4462  0644  01F8               	clrf	_pbCounter	;volatile
  4463                           
  4464                           ;timer0.c: 40: pb0Released = 1;
  4465  0645  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4466  0646                     i1l1908:	
  4467                           
  4468                           ;timer0.c: 41: }
  4469                           ;timer0.c: 43: if(!RB1) {
  4470  0646  1886               	btfsc	6,1	;volatile
  4471  0647  2E54               	goto	i1l1918
  4472                           
  4473                           ;timer0.c: 44: pbCounter2++;
  4474  0648  3001               	movlw	1
  4475  0649  00F2               	movwf	??_debounceButtons
  4476  064A  0872               	movf	??_debounceButtons,w
  4477  064B  07F9               	addwf	_pbCounter2,f	;volatile
  4478                           
  4479                           ;timer0.c: 45: if(pbCounter2 >10 &&pb1Released){
  4480  064C  300B               	movlw	11
  4481  064D  0279               	subwf	_pbCounter2,w	;volatile
  4482  064E  1803               	btfsc	3,0
  4483  064F  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4484  0650  2E56               	goto	i1l1922
  4485                           
  4486                           ;timer0.c: 46: pb1Pressed = 1;
  4487  0651  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  4488                           
  4489                           ;timer0.c: 47: pb1Released = 0;
  4490  0652  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4491                           
  4492                           ;timer0.c: 48: }
  4493                           ;timer0.c: 49: }
  4494  0653  2E56               	goto	i1l1922
  4495  0654                     i1l1918:	
  4496                           
  4497                           ;timer0.c: 50: else{
  4498                           ;timer0.c: 51: pbCounter2 = 0;
  4499  0654  01F9               	clrf	_pbCounter2	;volatile
  4500                           
  4501                           ;timer0.c: 52: pb1Released = 1;
  4502  0655  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4503  0656                     i1l1922:	
  4504                           
  4505                           ;timer0.c: 53: }
  4506                           ;timer0.c: 54: if(!RB2) {
  4507  0656  1906               	btfsc	6,2	;volatile
  4508  0657  2E66               	goto	i1l1932
  4509                           
  4510                           ;timer0.c: 55: pbCounter3++;
  4511  0658  3001               	movlw	1
  4512  0659  00F2               	movwf	??_debounceButtons
  4513  065A  0872               	movf	??_debounceButtons,w
  4514  065B  1683               	bsf	3,5	;RP0=1, select bank1
  4515  065C  1303               	bcf	3,6	;RP1=0, select bank1
  4516  065D  07CD               	addwf	_pbCounter3^(0+128),f	;volatile
  4517                           
  4518                           ;timer0.c: 56: if(pbCounter3 >10 &&pb2Released){
  4519  065E  300B               	movlw	11
  4520  065F  024D               	subwf	_pbCounter3^(0+128),w	;volatile
  4521  0660  1803               	btfsc	3,0
  4522  0661  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4523  0662  2E6A               	goto	i1l1936
  4524                           
  4525                           ;timer0.c: 57: pb2Pressed = 1;
  4526  0663  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  4527                           
  4528                           ;timer0.c: 58: pb2Released = 0;
  4529  0664  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4530                           
  4531                           ;timer0.c: 59: }
  4532                           ;timer0.c: 60: }
  4533  0665  2E6A               	goto	i1l1936
  4534  0666                     i1l1932:	
  4535                           
  4536                           ;timer0.c: 61: else{
  4537                           ;timer0.c: 62: pbCounter3 = 0;
  4538  0666  1683               	bsf	3,5	;RP0=1, select bank1
  4539  0667  1303               	bcf	3,6	;RP1=0, select bank1
  4540  0668  01CD               	clrf	_pbCounter3^(0+128)	;volatile
  4541                           
  4542                           ;timer0.c: 63: pb2Released = 1;
  4543  0669  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4544  066A                     i1l1936:	
  4545                           
  4546                           ;timer0.c: 64: }
  4547                           ;timer0.c: 65: if(!RB3) {
  4548  066A  1283               	bcf	3,5	;RP0=0, select bank0
  4549  066B  1303               	bcf	3,6	;RP1=0, select bank0
  4550  066C  1986               	btfsc	6,3	;volatile
  4551  066D  2E7D               	goto	i1l1946
  4552                           
  4553                           ;timer0.c: 66: pbCounter4++;
  4554  066E  3001               	movlw	1
  4555  066F  00F2               	movwf	??_debounceButtons
  4556  0670  0872               	movf	??_debounceButtons,w
  4557  0671  1683               	bsf	3,5	;RP0=1, select bank1
  4558  0672  1303               	bcf	3,6	;RP1=0, select bank1
  4559  0673  07CE               	addwf	_pbCounter4^(0+128),f	;volatile
  4560                           
  4561                           ;timer0.c: 67: if(pbCounter4 >10 &&pb3Released){
  4562  0674  300B               	movlw	11
  4563  0675  024E               	subwf	_pbCounter4^(0+128),w	;volatile
  4564  0676  1C03               	skipc
  4565  0677  0008               	return
  4566  0678  1CF1               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4567  0679  0008               	return
  4568                           
  4569                           ;timer0.c: 68: pb3Pressed = 1;
  4570  067A  1471               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  4571                           
  4572                           ;timer0.c: 69: pb3Released = 0;
  4573  067B  10F1               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4574                           
  4575                           ;timer0.c: 70: }
  4576                           ;timer0.c: 71: }
  4577  067C  0008               	return
  4578  067D                     i1l1946:	
  4579                           
  4580                           ;timer0.c: 72: else{
  4581                           ;timer0.c: 73: pbCounter4 = 0;
  4582  067D  1683               	bsf	3,5	;RP0=1, select bank1
  4583  067E  1303               	bcf	3,6	;RP1=0, select bank1
  4584  067F  01CE               	clrf	_pbCounter4^(0+128)	;volatile
  4585                           
  4586                           ;timer0.c: 74: pb3Released = 1;
  4587  0680  14F1               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4588  0681  0008               	return
  4589  0682                     __end_of_debounceButtons:	
  4590  007E                     btemp	set	126	;btemp
  4591  007E                     wtemp	set	126
  4592  007E                     wtemp0	set	126
  4593  0080                     wtemp1	set	128
  4594  0082                     wtemp2	set	130
  4595  0084                     wtemp3	set	132
  4596  0086                     wtemp4	set	134
  4597  0088                     wtemp5	set	136
  4598  007F                     wtemp6	set	127
  4599  007E                     ttemp	set	126
  4600  007E                     ttemp0	set	126
  4601  0081                     ttemp1	set	129
  4602  0084                     ttemp2	set	132
  4603  0087                     ttemp3	set	135
  4604  007F                     ttemp4	set	127
  4605  007E                     ltemp	set	126
  4606  007E                     ltemp0	set	126
  4607  0082                     ltemp1	set	130
  4608  0086                     ltemp2	set	134
  4609  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     15      47
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _setupLCD->_lcdWriteControl
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   17091
                                             11 BANK1      4     4      0
                         _initialise
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCData                                          4     2      2      34
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   13233
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7604
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    1575
                                             15 BANK0      5     4      1
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0    1123
                      _initializeADC
                    _initializeMotor
                   _initializeTimer0
                           _setupLCD
 ---------------------------------------------------------------------------------
 (2) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeMotor                                      0     0      0    1092
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                   9     7      2    1027
                                              6 BANK0      9     7      2
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (4) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
                           _flashLed
 ---------------------------------------------------------------------------------
 (7) _flashLed                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
     _initializeADC
     _initializeMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _initializeTimer0
     _setupLCD
       _lcdWriteControl
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _startADCConversion

 _isr (ROOT)
   _debounceButtons
   _flashLed

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      F      2F       7       58.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Apr 06 22:34:49 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               l96 04FB                               _GO 00FA  
            ?_startADCConversion 0072                               fsr 0004              ___wmul@multiplicand 0022  
                   ___ftadd@exp1 0066                     ___ftadd@exp2 0065                     ___ftadd@sign 0064  
                            l127 039A                              l394 0781                              l562 0554  
                            l563 055C                              l555 053F                              l646 0358  
                            l586 00DC                              _GIE 005F                              _RB0 0030  
                            _RB1 0031                              _RB2 0032                              _RB3 0033  
                            _RB4 0034                              _RB5 0035                              _RE0 0048  
                            _RE1 0049                              _RE2 004A                              _PS0 0408  
                            _PS1 0409                              _PS2 040A                     __CFG_CPD$OFF 0000  
                            _PSA 040B                              _isr 0798                              fsr0 0004  
                            indf 0000                     __CFG_FOSC$HS 0000                     ?_readADCData 0020  
                 ??_lcdWriteData 0020                     __CFG_LVP$OFF 0000                     ___ftdiv@cntr 003D  
                   ___ftdiv@sign 0042                             l2200 0073                             l2106 0779  
                           l2130 06F4                             l2060 0511                             l2220 00AE  
                           l2212 008D                             l2140 071C                             l2230 00CC  
                           l2222 00B3                             l2064 0518                             l2240 0100  
                           l2232 00D8                             l2224 00B7                             l2128 06E2  
                           l2170 0430                             l2074 0544                             l2066 0524  
                           l2410 025A                             l2250 0123                             l2218 00A2  
                           l2172 043C                             l2076 054E                             l2068 0529  
                           l2404 0244                             l2236 00EE                             l1524 02FE  
                           l2500 04CB                             l2182 045C                             l2174 0444  
                           l2158 0405                             l2350 0389                             l2190 005D  
                           l1550 034D                             l1542 0330                             l2270 069E  
                           l2176 0450                             l2168 041C                             l2432 02BE  
                           l2424 029F                             l1552 035B                             l1544 0340  
                           l2512 04E4                             l2370 03C0                             l2194 0064  
                           l2506 04D8                             l2380 03D4                             l2364 03AF  
                           l2372 03C1                             l1556 0369                             l2518 04F4  
                           l2474 01D2                             l2482 048F                             l2388 0376  
                           l1870 05FE                             l2494 04BF                             l1874 0625  
                           _ADIE 0466                             _ADIF 0066                             _ADFM 04FF  
                           ?_isr 0072             ??_startADCConversion 0020                             _T0IF 005A  
                           _T0CS 040D                             _T0SE 040C                             u1325 0331  
                           u2215 0538                             u2305 0782                             u2315 0789  
                           u2235 0547                             u1355 034F                             u1295 0305  
                           u2345 06E7                             u2275 0563                             u2195 051D  
                           u2515 008E                             u1901 05F1                             u2605 00CD  
                           u1902 05F2                             u1903 05F7                             u1904 05F8  
                           u1921 0618                             u2545 00A3                             u1922 0619  
                           u1923 061E                             u1924 061F                             u2815 026C  
                           u2575 00B8                             u2825 027E                             u2835 02A0  
                           _PEIE 005E                             u2845 02B1                             u2855 02BF  
                           u2957 0501                             u2967 0F6C                             u2977 03F1  
                           i1l83 07AD                             u2987 0FA2                             u2997 0FB5  
                           _TMR0 0001                     __CFG_WRT$OFF 0000                             _main 0485  
                   ___ftpack@arg 0020                     ___ftpack@exp 0023                             _move 0372  
                           btemp 007E                             ltemp 007E                             start 0012  
                           ttemp 007E                             wtemp 007E                     ___fttol@exp1 0050  
                   ___fttol@lval 004C                            ??_isr 0073                            _ADCS2 04FE  
                          ?_main 0072                  __end_of___ftadd 013D                            ?_move 002F  
                  __CFG_WDTE$OFF 0000                  __end_of___ftdiv 02E4                  __end_of___ftneg 0F66  
                __end_of___fttol 0372                            _PCFG0 04F8                            _PCFG1 04F9  
                          _PCFG2 04FA                            _PCFG3 04FB                            _PORTC 0007  
                          _PORTD 0008                            _PORTE 0009                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _TRISD 0088  
                          _TRISE 0089                ??_initializeMotor 002F       __end_of_lcdWriteToDigitBCD 0485  
                          _cstep 0077                            _frexp 070E                            _errno 00C7  
              ??_debounceButtons 0072                    ___ftpack@sign 0024                            _round 0575  
                          _trunc 0682                  __end_of_moveDeg 022C                   __pbitbssCOMMON 0380  
                 __CFG_BOREN$OFF 0000                            pclath 000A                            ltemp0 007E  
                          ltemp1 0082                            ltemp2 0086                            ltemp3 0080  
                          move@i 0033                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F                  __initialization 0015  
                   __end_of_main 0507                     __end_of_move 03FD         __size_of_lcdWriteControl 0014  
                         ??_main 00C3                    ___fttol@sign1 004B                           ??_move 0030  
           __end_of_lcdSetCursor 0F5C                           _ADCON0 001F                           ?_frexp 0020  
               __end_of___altoft 070E                           _ADRESH 001E                           _ADRESL 009E  
               __end_of___ftpack 0575                           ?_round 0067                   _conversionDone 0380  
                         ?_trunc 0051                           i1l2000 07A7                           i1l1904 0644  
                         i1l1922 0656                           i1l1932 0666                           i1l1908 0646  
                         i1l1918 0654                           i1l1936 066A                           i1l1946 067D  
                         _TMR0IE 005D                ?_initializeTimer0 0072               ??_initializeTimer0 0020  
                 __CFG_PWRTE$OFF 0000                 __end_of_flashLed 0FE8                           ___ftge 05D5  
                         ___wmul 0775             __end_of_lcdWriteData 0FA7                        ??___ftadd 0060  
                      ??___ftdiv 0039                        ??___ftneg 0033                        ??___fttol 0047  
               __end_of_setupLCD 0775                        ??_moveDeg 00B8                           saved_w 007E  
         __size_of_initializeADC 0015                           round@f 006A                           round@x 0067  
                         trunc@i 0055                           trunc@x 0051             __size_of_readADCData 000F  
        __end_of__initialization 0030                       ___altoft@c 0028                       ___ftadd@f1 005A  
                     ___ftadd@f2 005D                       ___ftge@ff1 0020                       ___ftge@ff2 0023  
                     ___ftdiv@f1 0036                       ___ftdiv@f2 0033                       ___ftdiv@f3 003E  
                     ___ftneg@f1 0030                       ___fttol@f1 0043                   __pcstackCOMMON 0072  
                   __pidataBANK1 0FE8                       _pb0Pressed 0382                       _pb1Pressed 0384  
                  __end_of_frexp 074A                       _pb2Pressed 0386                    __end_of_round 05D5  
                     _pb3Pressed 0388                    __end_of_trunc 06CC                ??_lcdWriteControl 0020  
                        ??_frexp 0024                          ??_round 006A                          ??_trunc 0054  
                     __pbssBANK1 00C7             readADCData@ADCResult 0022              lcdSetCursor@address 0023  
                  _initializeADC 0FBB                       __pmaintext 0485                          ?___ftge 0020  
                        ?___wmul 0020                  _initializeMotor 07D4                       __pintentry 0004  
          __size_of_lcdSetCursor 0009                        ?___altoft 0028                       _pbCounter2 0079  
                     _pbCounter3 00CD                       _pbCounter4 00CE                        ?___ftpack 0020  
                _debounceButtons 0634                        ?_flashLed 0072      __size_of_startADCConversion 000E  
          __size_of_lcdWriteData 0013                     _lcdSetCursor 0F53                   ?_initializeADC 0072  
             _lcdWriteToDigitBCD 03FD                    move@direction 002F                        ?_setupLCD 0072  
                __size_of___ftge 005F                          ___ftadd 0034                          ___ftdiv 022C  
                        ___ftneg 0F5C                  __size_of___wmul 0023                          ___fttol 02E4  
                     ??___altoft 002C              ?_lcdWriteToDigitBCD 0026                       ??___ftpack 0025  
                     _initialise 07B8                          __ptext1 0F66                          __ptext2 07F0  
                        __ptext3 013D                          __ptext4 0575                          __ptext5 0682  
                        __ptext6 070E                          __ptext7 02E4                          __ptext8 06CC  
                        __ptext9 0F5C                     __size_of_isr 0020                          _moveDeg 013D  
                     ??_flashLed 0072                     _lcdWriteData 0F94             end_of_initialization 0030  
           ??_lcdWriteToDigitBCD 0028               moveDeg@stepsToMove 00C2          __end_of_initializeMotor 07F0  
                     _rtcCounter 00CB          __end_of_debounceButtons 0682                       ??_setupLCD 0023  
      __size_of_initializeTimer0 000F                       _wholeSteps 00B0                      ___ftdiv@exp 0041  
                ??_initializeADC 0020                       main@result 00C5                      _pb0Released 0383  
                    _pb1Released 0385                   __end_of___ftge 0634                      _pb2Released 0387  
                _lcdWriteControl 0FA7                   __end_of___wmul 0798                      _pb3Released 0389  
                    ?_initialise 0072              start_initialization 0015                    ??_readADCData 0022  
                    __end_of_isr 07B8                       frexp@value 0020                 ?_initializeMotor 0072  
               ?_debounceButtons 0072                         ??___ftge 0026                         ??___wmul 0024  
                     init_fetch0 0F83                      __pdataBANK1 00A0                __size_of___altoft 0042  
              __size_of___ftpack 006E                      __pbssCOMMON 0077                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00B8                __size_of_flashLed 0018  
            __end_of_readADCData 07FF              __size_of_initialise 001C  lcdWriteToDigitBCD@ThousandDigit 002B  
        __end_of_lcdWriteControl 0FBB                        _halfSteps 00A0                       moveDeg@deg 006D  
                       ?___ftadd 005A                         ?___ftdiv 0033                         ?___ftneg 0030  
                      _pbCounter 0078                         ?___fttol 0043                __size_of_setupLCD 002B  
               _initializeTimer0 0F74                         ?_moveDeg 006D                        _nrOfSteps 00C9  
     __end_of_startADCConversion 0F74                   __size_of_frexp 003C                   __size_of_round 0060  
                 __size_of_trunc 004A          lcdWriteControl@databyte 0022                interrupt_function 0004  
                 ___wmul@product 0024                ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002A  
                    _readADCData 07F0             lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 0088  
                      frexp@eptr 0023                 ?_lcdWriteControl 0072                 __size_of___ftadd 0109  
               __size_of___ftdiv 00B8                 __size_of___ftneg 000A                         ___altoft 06CC  
               __size_of___fttol 008E                     ??_initialise 002F                         ___ftpack 0507  
               __size_of_moveDeg 00EF                         __ptext10 0034                         __ptext11 0372  
                       __ptext20 0F94                         __ptext12 05D5                         __ptext21 0775  
                       __ptext13 022C                         __ptext22 0F53                         __ptext14 0507  
                       __ptext23 0FA7                         __ptext15 07B8                         __ptext24 0FBB  
                       __ptext16 074A                         __ptext25 0798                         __ptext17 0F74  
                       __ptext26 0FD0                         __ptext18 07D4                         __ptext27 0634  
                       __ptext19 03FD                         _flashLed 0FD0                        move@steps 0032  
                     trunc@expon 0058                    __size_of_main 0082                    __size_of_move 008B  
             __end_of_initialise 07D4            __end_of_initializeADC 0FD0                         _setupLCD 074A  
    lcdWriteToDigitBCD@OnesDigit 002D                      _moveDeg$652 00B9                      _moveDeg$653 00BC  
                    _moveDeg$654 00BF      lcdWriteToDigitBCD@TensDigit 0029                         init_ram0 0F87  
                       intlevel1 0000         __end_of_initializeTimer0 0F83                    ?_lcdSetCursor 0072  
       __size_of_initializeMotor 001C                      _motorToggle 0381         __size_of_debounceButtons 004E  
                  ?_lcdWriteData 0072           lcdWriteToDigitBCD@data 0026           lcdWriteToDigitBCD@sign 002C  
                 ??_lcdSetCursor 0023               _startADCConversion 0F66  
