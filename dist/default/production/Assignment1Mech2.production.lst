

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Apr 06 22:25:02 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  0088                     	;# 
    82  0089                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0094                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010D                     	;# 
    98  010E                     	;# 
    99  010F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0088                     	;# 
   322  0089                     	;# 
   323  008C                     	;# 
   324  008D                     	;# 
   325  008E                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0093                     	;# 
   329  0094                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  009F                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  010F                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342                           
   343                           	psect	idataBANK1
   344  0FE8                     __pidataBANK1:	
   345                           
   346                           ;initializer for _halfSteps
   347  0FE8  343C               	retlw	60
   348  0FE9  3400               	retlw	0
   349  0FEA  342E               	retlw	46
   350  0FEB  3400               	retlw	0
   351  0FEC  342B               	retlw	43
   352  0FED  3400               	retlw	0
   353  0FEE  3427               	retlw	39
   354  0FEF  3400               	retlw	0
   355  0FF0  3435               	retlw	53
   356  0FF1  3400               	retlw	0
   357  0FF2  3417               	retlw	23
   358  0FF3  3400               	retlw	0
   359  0FF4  341B               	retlw	27
   360  0FF5  3400               	retlw	0
   361  0FF6  341E               	retlw	30
   362  0FF7  3400               	retlw	0
   363                           
   364                           ;initializer for _wholeSteps
   365  0FF8  343C               	retlw	60
   366  0FF9  3400               	retlw	0
   367  0FFA  342B               	retlw	43
   368  0FFB  3400               	retlw	0
   369  0FFC  3435               	retlw	53
   370  0FFD  3400               	retlw	0
   371  0FFE  341B               	retlw	27
   372  0FFF  3400               	retlw	0
   373  001F                     _ADCON0	set	31
   374  001E                     _ADRESH	set	30
   375  0007                     _PORTC	set	7
   376  0008                     _PORTD	set	8
   377  0009                     _PORTE	set	9
   378  0001                     _TMR0	set	1
   379  0066                     _ADIF	set	102
   380  005F                     _GIE	set	95
   381  00FA                     _GO	set	250
   382  005E                     _PEIE	set	94
   383  0030                     _RB0	set	48
   384  0031                     _RB1	set	49
   385  0032                     _RB2	set	50
   386  0033                     _RB3	set	51
   387  0034                     _RB4	set	52
   388  0035                     _RB5	set	53
   389  0048                     _RE0	set	72
   390  0049                     _RE1	set	73
   391  004A                     _RE2	set	74
   392  005A                     _T0IF	set	90
   393  005D                     _TMR0IE	set	93
   394  009E                     _ADRESL	set	158
   395  0085                     _TRISA	set	133
   396  0086                     _TRISB	set	134
   397  0087                     _TRISC	set	135
   398  0088                     _TRISD	set	136
   399  0089                     _TRISE	set	137
   400  04FE                     _ADCS2	set	1278
   401  04FF                     _ADFM	set	1279
   402  0466                     _ADIE	set	1126
   403  04F8                     _PCFG0	set	1272
   404  04F9                     _PCFG1	set	1273
   405  04FA                     _PCFG2	set	1274
   406  04FB                     _PCFG3	set	1275
   407  0408                     _PS0	set	1032
   408  0409                     _PS1	set	1033
   409  040A                     _PS2	set	1034
   410  040B                     _PSA	set	1035
   411  040D                     _T0CS	set	1037
   412  040C                     _T0SE	set	1036
   413                           
   414                           ; #config settings
   415  0000                     
   416                           	psect	cinit
   417  0015                     start_initialization:	
   418  0015                     __initialization:	
   419                           
   420                           ; Clear objects allocated to BITCOMMON
   421  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   422  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   423                           
   424                           ; Clear objects allocated to COMMON
   425  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   426  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   427  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   428                           
   429                           ; Clear objects allocated to BANK1
   430  001A  1683               	bsf	3,5	;RP0=1, select bank1
   431  001B  1303               	bcf	3,6	;RP1=0, select bank1
   432  001C  01C7               	clrf	__pbssBANK1& (0+127)
   433  001D  01C8               	clrf	(__pbssBANK1+1)& (0+127)
   434  001E  01C9               	clrf	(__pbssBANK1+2)& (0+127)
   435  001F  01CA               	clrf	(__pbssBANK1+3)& (0+127)
   436  0020  01CB               	clrf	(__pbssBANK1+4)& (0+127)
   437  0021  01CC               	clrf	(__pbssBANK1+5)& (0+127)
   438  0022  01CD               	clrf	(__pbssBANK1+6)& (0+127)
   439  0023  01CE               	clrf	(__pbssBANK1+7)& (0+127)
   440                           
   441                           ; Initialize objects allocated to BANK1
   442  0024  1383               	bcf	3,7	;select IRP bank0
   443  0025  30B8               	movlw	low (__pdataBANK1+24)
   444  0026  00FD               	movwf	btemp+-1
   445  0027  300F               	movlw	high __pidataBANK1
   446  0028  00FE               	movwf	btemp
   447  0029  30E8               	movlw	low __pidataBANK1
   448  002A  00FF               	movwf	btemp+1
   449  002B  30A0               	movlw	low __pdataBANK1
   450  002C  0084               	movwf	4
   451  002D  120A  158A  2789   	fcall	init_ram0
   452  0030                     end_of_initialization:	
   453                           ;End of C runtime variable initialization code
   454                           
   455  0030                     __end_of__initialization:	
   456  0030  0183               	clrf	3
   457  0031  120A  118A  2AE4   	ljmp	_main	;jump to C main() function
   458                           
   459                           	psect	bitbssCOMMON
   460  0380                     __pbitbssCOMMON:	
   461  0380                     _conversionDone:	
   462  0380                     	ds	1
   463  0381                     _motorToggle:	
   464  0381                     	ds	1
   465  0382                     _pb0Pressed:	
   466  0382                     	ds	1
   467  0383                     _pb0Released:	
   468  0383                     	ds	1
   469  0384                     _pb1Pressed:	
   470  0384                     	ds	1
   471  0385                     _pb1Released:	
   472  0385                     	ds	1
   473  0386                     _pb2Pressed:	
   474  0386                     	ds	1
   475  0387                     _pb2Released:	
   476  0387                     	ds	1
   477  0388                     _pb3Pressed:	
   478  0388                     	ds	1
   479  0389                     _pb3Released:	
   480  0389                     	ds	1
   481                           
   482                           	psect	bssCOMMON
   483  0077                     __pbssCOMMON:	
   484  0077                     _cstep:	
   485  0077                     	ds	1
   486  0078                     _pbCounter:	
   487  0078                     	ds	1
   488  0079                     _pbCounter2:	
   489  0079                     	ds	1
   490                           
   491                           	psect	bssBANK1
   492  00C7                     __pbssBANK1:	
   493  00C7                     _errno:	
   494  00C7                     	ds	2
   495  00C9                     _nrOfSteps:	
   496  00C9                     	ds	2
   497  00CB                     _rtcCounter:	
   498  00CB                     	ds	2
   499  00CD                     _pbCounter3:	
   500  00CD                     	ds	1
   501  00CE                     _pbCounter4:	
   502  00CE                     	ds	1
   503                           
   504                           	psect	dataBANK1
   505  00A0                     __pdataBANK1:	
   506  00A0                     _halfSteps:	
   507  00A0                     	ds	16
   508  00B0                     _wholeSteps:	
   509  00B0                     	ds	8
   510                           
   511                           	psect	inittext
   512  0F85                     init_fetch0:	
   513                           ;	Called with low address in FSR and high address in W
   514                           
   515  0F85  087E               	movf	126,w
   516  0F86  008A               	movwf	10
   517  0F87  087F               	movf	127,w
   518  0F88  0082               	movwf	2
   519  0F89                     init_ram0:	
   520                           ;Called with:
   521                           ;	high address of idata address in btemp 
   522                           ;	low address of idata address in btemp+1 
   523                           ;	low address of data in FSR
   524                           ;	high address + 1 of data in btemp-1
   525                           
   526  0F89  2785  120A  158A   	fcall	init_fetch0
   527  0F8C  0080               	movwf	0
   528  0F8D  0A84               	incf	4,f
   529  0F8E  0804               	movf	4,w
   530  0F8F  067D               	xorwf	125,w
   531  0F90  1903               	btfsc	3,2
   532  0F91  3400               	retlw	0
   533  0F92  0AFF               	incf	127,f
   534  0F93  1903               	btfsc	3,2
   535  0F94  0AFE               	incf	126,f
   536  0F95  2F89               	goto	init_ram0
   537                           
   538                           	psect	cstackBANK1
   539  00B8                     __pcstackBANK1:	
   540  00B8                     ??_moveDeg:	
   541                           
   542                           ; 1 bytes @ 0x0
   543  00B8                     	ds	1
   544  00B9                     _moveDeg$640:	
   545                           
   546                           ; 3 bytes @ 0x1
   547  00B9                     	ds	3
   548  00BC                     _moveDeg$641:	
   549                           
   550                           ; 3 bytes @ 0x4
   551  00BC                     	ds	3
   552  00BF                     _moveDeg$642:	
   553                           
   554                           ; 3 bytes @ 0x7
   555  00BF                     	ds	3
   556  00C2                     moveDeg@stepsToMove:	
   557                           
   558                           ; 1 bytes @ 0xA
   559  00C2                     	ds	1
   560  00C3                     ??_main:	
   561                           
   562                           ; 1 bytes @ 0xB
   563  00C3                     	ds	2
   564  00C5                     main@result:	
   565                           
   566                           ; 2 bytes @ 0xD
   567  00C5                     	ds	2
   568                           
   569                           	psect	cstackCOMMON
   570  0072                     __pcstackCOMMON:	
   571  0072                     ?_debounceButtons:	
   572  0072                     ??_debounceButtons:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0072                     ?_initializeADC:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0072                     ?_startADCConversion:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0072                     ?_setupLCD:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0072                     ?_lcdSetCursor:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0072                     ?_isr:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0072                     ?_initialise:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0072                     ?_main:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0072                     ?_lcdWriteControl:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0072                     ?_lcdWriteData:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0072                     ?_initializeMotor:	
   603                           ; 1 bytes @ 0x0
   604                           
   605                           
   606                           ; 2 bytes @ 0x0
   607  0072                     	ds	1
   608  0073                     ??_isr:	
   609                           
   610                           ; 1 bytes @ 0x1
   611  0073                     	ds	4
   612                           
   613                           	psect	cstackBANK0
   614  0020                     __pcstackBANK0:	
   615  0020                     ?___ftge:	
   616  0020                     ??_initializeADC:	
   617                           ; 1 bit 
   618                           
   619  0020                     ??_startADCConversion:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0020                     ??_initialise:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0020                     ??_lcdWriteControl:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0020                     ??_lcdWriteData:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     ?_readADCData:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0020                     ?___wmul:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0020                     ?___ftpack:	
   638                           ; 2 bytes @ 0x0
   639                           
   640  0020                     ?_frexp:	
   641                           ; 3 bytes @ 0x0
   642                           
   643  0020                     ___wmul@multiplier:	
   644                           ; 3 bytes @ 0x0
   645                           
   646  0020                     ___ftpack@arg:	
   647                           ; 2 bytes @ 0x0
   648                           
   649  0020                     ___ftge@ff1:	
   650                           ; 3 bytes @ 0x0
   651                           
   652  0020                     frexp@value:	
   653                           ; 3 bytes @ 0x0
   654                           
   655                           
   656                           ; 3 bytes @ 0x0
   657  0020                     	ds	2
   658  0022                     ??_readADCData:	
   659  0022                     lcdWriteControl@databyte:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0022                     lcdWriteData@databyte:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0022                     readADCData@ADCResult:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  0022                     ___wmul@multiplicand:	
   669                           ; 2 bytes @ 0x2
   670                           
   671                           
   672                           ; 2 bytes @ 0x2
   673  0022                     	ds	1
   674  0023                     ??_setupLCD:	
   675  0023                     ??_lcdSetCursor:	
   676                           ; 1 bytes @ 0x3
   677                           
   678  0023                     lcdSetCursor@address:	
   679                           ; 1 bytes @ 0x3
   680                           
   681  0023                     ___ftpack@exp:	
   682                           ; 1 bytes @ 0x3
   683                           
   684  0023                     frexp@eptr:	
   685                           ; 1 bytes @ 0x3
   686                           
   687  0023                     ___ftge@ff2:	
   688                           ; 1 bytes @ 0x3
   689                           
   690                           
   691                           ; 3 bytes @ 0x3
   692  0023                     	ds	1
   693  0024                     ??_frexp:	
   694  0024                     ??___wmul:	
   695                           ; 1 bytes @ 0x4
   696                           
   697  0024                     ___ftpack@sign:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0024                     ___wmul@product:	
   701                           ; 1 bytes @ 0x4
   702                           
   703                           
   704                           ; 2 bytes @ 0x4
   705  0024                     	ds	1
   706  0025                     ??___ftpack:	
   707                           
   708                           ; 1 bytes @ 0x5
   709  0025                     	ds	1
   710  0026                     ?_lcdWriteToDigitBCD:	
   711  0026                     ??___ftge:	
   712                           ; 1 bytes @ 0x6
   713                           
   714  0026                     lcdWriteToDigitBCD@data:	
   715                           ; 1 bytes @ 0x6
   716                           
   717                           
   718                           ; 2 bytes @ 0x6
   719  0026                     	ds	2
   720  0028                     ??_lcdWriteToDigitBCD:	
   721  0028                     ?___altoft:	
   722                           ; 1 bytes @ 0x8
   723                           
   724  0028                     ___altoft@c:	
   725                           ; 3 bytes @ 0x8
   726                           
   727                           
   728                           ; 4 bytes @ 0x8
   729  0028                     	ds	1
   730  0029                     lcdWriteToDigitBCD@TensDigit:	
   731                           
   732                           ; 1 bytes @ 0x9
   733  0029                     	ds	1
   734  002A                     lcdWriteToDigitBCD@HundredDigit:	
   735                           
   736                           ; 1 bytes @ 0xA
   737  002A                     	ds	1
   738  002B                     lcdWriteToDigitBCD@ThousandDigit:	
   739                           
   740                           ; 1 bytes @ 0xB
   741  002B                     	ds	1
   742  002C                     ??___altoft:	
   743  002C                     lcdWriteToDigitBCD@sign:	
   744                           ; 1 bytes @ 0xC
   745                           
   746                           
   747                           ; 1 bytes @ 0xC
   748  002C                     	ds	1
   749  002D                     lcdWriteToDigitBCD@OnesDigit:	
   750                           
   751                           ; 2 bytes @ 0xD
   752  002D                     	ds	1
   753  002E                     ___altoft@exp:	
   754                           
   755                           ; 1 bytes @ 0xE
   756  002E                     	ds	1
   757  002F                     ??_initializeMotor:	
   758  002F                     ?_move:	
   759                           ; 1 bytes @ 0xF
   760                           
   761  002F                     move@direction:	
   762                           ; 1 bytes @ 0xF
   763                           
   764  002F                     ___altoft@sign:	
   765                           ; 1 bytes @ 0xF
   766                           
   767                           
   768                           ; 1 bytes @ 0xF
   769  002F                     	ds	1
   770  0030                     ??_move:	
   771  0030                     ?___ftneg:	
   772                           ; 1 bytes @ 0x10
   773                           
   774  0030                     ___ftneg@f1:	
   775                           ; 3 bytes @ 0x10
   776                           
   777                           
   778                           ; 3 bytes @ 0x10
   779  0030                     	ds	2
   780  0032                     move@steps:	
   781                           
   782                           ; 1 bytes @ 0x12
   783  0032                     	ds	1
   784  0033                     ??___ftneg:	
   785  0033                     ?___ftdiv:	
   786                           ; 1 bytes @ 0x13
   787                           
   788  0033                     move@i:	
   789                           ; 3 bytes @ 0x13
   790                           
   791  0033                     ___ftdiv@f2:	
   792                           ; 1 bytes @ 0x13
   793                           
   794                           
   795                           ; 3 bytes @ 0x13
   796  0033                     	ds	3
   797  0036                     ___ftdiv@f1:	
   798                           
   799                           ; 3 bytes @ 0x16
   800  0036                     	ds	3
   801  0039                     ??___ftdiv:	
   802                           
   803                           ; 1 bytes @ 0x19
   804  0039                     	ds	4
   805  003D                     ___ftdiv@cntr:	
   806                           
   807                           ; 1 bytes @ 0x1D
   808  003D                     	ds	1
   809  003E                     ___ftdiv@f3:	
   810                           
   811                           ; 3 bytes @ 0x1E
   812  003E                     	ds	3
   813  0041                     ___ftdiv@exp:	
   814                           
   815                           ; 1 bytes @ 0x21
   816  0041                     	ds	1
   817  0042                     ___ftdiv@sign:	
   818                           
   819                           ; 1 bytes @ 0x22
   820  0042                     	ds	1
   821  0043                     ?___fttol:	
   822  0043                     ___fttol@f1:	
   823                           ; 4 bytes @ 0x23
   824                           
   825                           
   826                           ; 3 bytes @ 0x23
   827  0043                     	ds	4
   828  0047                     ??___fttol:	
   829                           
   830                           ; 1 bytes @ 0x27
   831  0047                     	ds	4
   832  004B                     ___fttol@sign1:	
   833                           
   834                           ; 1 bytes @ 0x2B
   835  004B                     	ds	1
   836  004C                     ___fttol@lval:	
   837                           
   838                           ; 4 bytes @ 0x2C
   839  004C                     	ds	4
   840  0050                     ___fttol@exp1:	
   841                           
   842                           ; 1 bytes @ 0x30
   843  0050                     	ds	1
   844  0051                     ?_trunc:	
   845  0051                     trunc@x:	
   846                           ; 3 bytes @ 0x31
   847                           
   848                           
   849                           ; 3 bytes @ 0x31
   850  0051                     	ds	3
   851  0054                     ??_trunc:	
   852                           
   853                           ; 1 bytes @ 0x34
   854  0054                     	ds	1
   855  0055                     trunc@i:	
   856                           
   857                           ; 3 bytes @ 0x35
   858  0055                     	ds	3
   859  0058                     trunc@expon:	
   860                           
   861                           ; 2 bytes @ 0x38
   862  0058                     	ds	2
   863  005A                     ?___ftadd:	
   864  005A                     ___ftadd@f1:	
   865                           ; 3 bytes @ 0x3A
   866                           
   867                           
   868                           ; 3 bytes @ 0x3A
   869  005A                     	ds	3
   870  005D                     ___ftadd@f2:	
   871                           
   872                           ; 3 bytes @ 0x3D
   873  005D                     	ds	3
   874  0060                     ??___ftadd:	
   875                           
   876                           ; 1 bytes @ 0x40
   877  0060                     	ds	4
   878  0064                     ___ftadd@sign:	
   879                           
   880                           ; 1 bytes @ 0x44
   881  0064                     	ds	1
   882  0065                     ___ftadd@exp2:	
   883                           
   884                           ; 1 bytes @ 0x45
   885  0065                     	ds	1
   886  0066                     ___ftadd@exp1:	
   887                           
   888                           ; 1 bytes @ 0x46
   889  0066                     	ds	1
   890  0067                     ?_round:	
   891  0067                     round@x:	
   892                           ; 3 bytes @ 0x47
   893                           
   894                           
   895                           ; 3 bytes @ 0x47
   896  0067                     	ds	3
   897  006A                     ??_round:	
   898  006A                     round@f:	
   899                           ; 1 bytes @ 0x4A
   900                           
   901                           
   902                           ; 3 bytes @ 0x4A
   903  006A                     	ds	3
   904  006D                     ?_moveDeg:	
   905  006D                     moveDeg@deg:	
   906                           ; 1 bytes @ 0x4D
   907                           
   908                           
   909                           ; 3 bytes @ 0x4D
   910  006D                     	ds	3
   911                           
   912                           	psect	maintext
   913  02E4                     __pmaintext:	
   914 ;;
   915 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   916 ;;
   917 ;; *************** function _main *****************
   918 ;; Defined at:
   919 ;;		line 53 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  result          2   13[BANK1 ] int 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : B00/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   933 ;;      Params:         0       0       0       0       0
   934 ;;      Locals:         0       0       2       0       0
   935 ;;      Temps:          0       0       2       0       0
   936 ;;      Totals:         0       0       4       0       0
   937 ;;Total ram usage:        4 bytes
   938 ;; Hardware stack levels required when called:    7
   939 ;; This function calls:
   940 ;;		_initialise
   941 ;;		_initializeADC
   942 ;;		_initializeMotor
   943 ;;		_lcdSetCursor
   944 ;;		_lcdWriteToDigitBCD
   945 ;;		_move
   946 ;;		_moveDeg
   947 ;;		_readADCData
   948 ;;		_setupLCD
   949 ;;		_startADCConversion
   950 ;; This function is called by:
   951 ;;		Startup code after reset
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           
   956                           ;psect for function _main
   957  02E4                     _main:	
   958                           
   959                           ;main.c: 55: initialise();
   960                           
   961                           ;incstack = 0
   962                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   963  02E4  120A  158A  27D2  120A  118A  	fcall	_initialise
   964                           
   965                           ;main.c: 56: initializeADC();
   966  02E9  120A  158A  27BD  120A  118A  	fcall	_initializeADC
   967                           
   968                           ;main.c: 57: startADCConversion();
   969  02EE  120A  158A  2768  120A  118A  	fcall	_startADCConversion
   970                           
   971                           ;main.c: 58: setupLCD();
   972  02F3  120A  118A  278B  120A  118A  	fcall	_setupLCD
   973                           
   974                           ;main.c: 59: initializeMotor();
   975  02F8  120A  118A  27D9  120A  118A  	fcall	_initializeMotor
   976  02FD                     l2436:	
   977                           ;main.c: 62: while(1){
   978                           
   979                           
   980                           ;main.c: 65: if(conversionDone){
   981  02FD  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   982  02FE  2B2D               	goto	l2448
   983                           
   984                           ;main.c: 66: conversionDone = 0;
   985  02FF  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   986                           
   987                           ;main.c: 67: int result = readADCData();
   988  0300  120A  158A  2776  120A  118A  	fcall	_readADCData
   989  0305  1283               	bcf	3,5	;RP0=0, select bank0
   990  0306  1303               	bcf	3,6	;RP1=0, select bank0
   991  0307  0821               	movf	?_readADCData+1,w
   992  0308  1683               	bsf	3,5	;RP0=1, select bank1
   993  0309  1303               	bcf	3,6	;RP1=0, select bank1
   994  030A  00C6               	movwf	(main@result+1)^(0+128)
   995  030B  1283               	bcf	3,5	;RP0=0, select bank0
   996  030C  1303               	bcf	3,6	;RP1=0, select bank0
   997  030D  0820               	movf	?_readADCData,w
   998  030E  1683               	bsf	3,5	;RP0=1, select bank1
   999  030F  1303               	bcf	3,6	;RP1=0, select bank1
  1000  0310  00C5               	movwf	main@result^(0+128)
  1001                           
  1002                           ;main.c: 68: lcdSetCursor(0x00);
  1003  0311  3000               	movlw	0
  1004  0312  120A  158A  275F  120A  118A  	fcall	_lcdSetCursor
  1005                           
  1006                           ;main.c: 69: lcdWriteToDigitBCD(result);
  1007  0317  1683               	bsf	3,5	;RP0=1, select bank1
  1008  0318  1303               	bcf	3,6	;RP1=0, select bank1
  1009  0319  0846               	movf	(main@result+1)^(0+128),w
  1010  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1011  031B  1303               	bcf	3,6	;RP1=0, select bank0
  1012  031C  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1013  031D  1683               	bsf	3,5	;RP0=1, select bank1
  1014  031E  1303               	bcf	3,6	;RP1=0, select bank1
  1015  031F  0845               	movf	main@result^(0+128),w
  1016  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0322  00A6               	movwf	lcdWriteToDigitBCD@data
  1019  0323  120A  118A  248E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1020                           
  1021                           ;main.c: 71: startADCConversion();
  1022  0328  120A  158A  2768  120A  118A  	fcall	_startADCConversion
  1023  032D                     l2448:	
  1024                           
  1025                           ;main.c: 73: }
  1026                           ;main.c: 74: if(pb0Pressed){
  1027  032D  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1028  032E  2B39               	goto	l2454
  1029                           
  1030                           ;main.c: 75: move(1,0);
  1031  032F  1283               	bcf	3,5	;RP0=0, select bank0
  1032  0330  1303               	bcf	3,6	;RP1=0, select bank0
  1033  0331  01AF               	clrf	move@direction
  1034  0332  3001               	movlw	1
  1035  0333  120A  118A  2403  120A  118A  	fcall	_move
  1036                           
  1037                           ;main.c: 76: pb0Pressed = 0;
  1038  0338  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1039  0339                     l2454:	
  1040                           
  1041                           ;main.c: 77: }
  1042                           ;main.c: 78: if(pb1Pressed){
  1043  0339  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1044  033A  2B46               	goto	l2460
  1045                           
  1046                           ;main.c: 79: move(1,1);
  1047  033B  1283               	bcf	3,5	;RP0=0, select bank0
  1048  033C  1303               	bcf	3,6	;RP1=0, select bank0
  1049  033D  01AF               	clrf	move@direction
  1050  033E  0AAF               	incf	move@direction,f
  1051  033F  3001               	movlw	1
  1052  0340  120A  118A  2403  120A  118A  	fcall	_move
  1053                           
  1054                           ;main.c: 80: pb1Pressed = 0;
  1055  0345  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1056  0346                     l2460:	
  1057                           
  1058                           ;main.c: 81: }
  1059                           ;main.c: 82: if(pb2Pressed){
  1060  0346  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1061  0347  2B62               	goto	l2472
  1062                           
  1063                           ;main.c: 83: if(motorToggle){
  1064  0348  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1065  0349  2B52               	goto	l2466
  1066                           
  1067                           ;main.c: 84: moveDeg(-180);
  1068  034A  3000               	movlw	0
  1069  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1070  034C  1303               	bcf	3,6	;RP1=0, select bank0
  1071  034D  00ED               	movwf	moveDeg@deg
  1072  034E  3034               	movlw	52
  1073  034F  00EE               	movwf	moveDeg@deg+1
  1074  0350  30C3               	movlw	195
  1075  0351  2B59               	goto	L1
  1076  0352                     l2466:	
  1077                           ;main.c: 85: }
  1078                           
  1079                           
  1080                           ;main.c: 86: else{
  1081                           ;main.c: 87: moveDeg(180);
  1082  0352  3000               	movlw	0
  1083  0353  1283               	bcf	3,5	;RP0=0, select bank0
  1084  0354  1303               	bcf	3,6	;RP1=0, select bank0
  1085  0355  00ED               	movwf	moveDeg@deg
  1086  0356  3034               	movlw	52
  1087  0357  00EE               	movwf	moveDeg@deg+1
  1088  0358  3043               	movlw	67
  1089  0359                     L1:	
  1090  0359  00EF               	movwf	moveDeg@deg+2
  1091  035A  120A  118A  213D  120A  118A  	fcall	_moveDeg
  1092                           
  1093                           ;main.c: 88: }
  1094                           ;main.c: 89: motorToggle = !motorToggle;
  1095  035F  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1096  0360  06F0               	xorwf	_motorToggle/(0+8),f
  1097                           
  1098                           ;main.c: 90: pb2Pressed = 0;
  1099  0361  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1100  0362                     l2472:	
  1101                           
  1102                           ;main.c: 91: }
  1103                           ;main.c: 92: if(pb3Pressed){
  1104  0362  1C71               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1105  0363  2B69               	goto	l109
  1106                           
  1107                           ;main.c: 93: RB4 = !RB4;
  1108  0364  3010               	movlw	16
  1109  0365  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0366  1303               	bcf	3,6	;RP1=0, select bank0
  1111  0367  0686               	xorwf	6,f
  1112                           
  1113                           ;main.c: 94: pb3Pressed = 0;
  1114  0368  1071               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1115  0369                     l109:	
  1116                           
  1117                           ;main.c: 95: }
  1118                           ;main.c: 97: _delay((unsigned long)((20)*(20000000/4000.0)));
  1119  0369  3082               	movlw	130
  1120  036A  1683               	bsf	3,5	;RP0=1, select bank1
  1121  036B  1303               	bcf	3,6	;RP1=0, select bank1
  1122  036C  00C4               	movwf	(??_main^(0+128)+1)
  1123  036D  30DD               	movlw	221
  1124  036E  00C3               	movwf	??_main^(0+128)
  1125  036F                     u2957:	
  1126  036F  0BC3               	decfsz	??_main^(0+128),f
  1127  0370  2B6F               	goto	u2957
  1128  0371  0BC4               	decfsz	(??_main^(0+128)+1),f
  1129  0372  2B6F               	goto	u2957
  1130  0373  2B74               	nop2
  1131  0374  2AFD               	goto	l2436
  1132  0375                     __end_of_main:	
  1133                           
  1134                           	psect	text1
  1135  0F68                     __ptext1:	
  1136 ;; *************** function _startADCConversion *****************
  1137 ;; Defined at:
  1138 ;;		line 33 in file "adConv.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1152 ;;      Params:         0       0       0       0       0
  1153 ;;      Locals:         0       0       0       0       0
  1154 ;;      Temps:          0       2       0       0       0
  1155 ;;      Totals:         0       2       0       0       0
  1156 ;;Total ram usage:        2 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    2
  1159 ;; This function calls:
  1160 ;;		Nothing
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _startADCConversion
  1168  0F68                     _startADCConversion:	
  1169                           
  1170                           ;adConv.c: 35: _delay((unsigned long)((1)*(20000000/4000.0)));
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _startADCConversion: [wreg]
  1174  0F68  3007               	movlw	7
  1175  0F69  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0F6A  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0F6B  00A1               	movwf	??_startADCConversion+1
  1178  0F6C  307D               	movlw	125
  1179  0F6D  00A0               	movwf	??_startADCConversion
  1180  0F6E                     u2967:	
  1181  0F6E  0BA0               	decfsz	??_startADCConversion,f
  1182  0F6F  2F6E               	goto	u2967
  1183  0F70  0BA1               	decfsz	??_startADCConversion+1,f
  1184  0F71  2F6E               	goto	u2967
  1185                           
  1186                           ;adConv.c: 37: GO = 1;
  1187  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  1188  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  1189  0F74  151F               	bsf	31,2	;volatile
  1190  0F75  0008               	return
  1191  0F76                     __end_of_startADCConversion:	
  1192                           
  1193                           	psect	text2
  1194  078B                     __ptext2:	
  1195 ;; *************** function _setupLCD *****************
  1196 ;; Defined at:
  1197 ;;		line 78 in file "lcd.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0, pclath, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1211 ;;      Params:         0       0       0       0       0
  1212 ;;      Locals:         0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0
  1214 ;;      Totals:         0       0       0       0       0
  1215 ;;Total ram usage:        0 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    3
  1218 ;; This function calls:
  1219 ;;		_lcdWriteControl
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           
  1226                           ;psect for function _setupLCD
  1227  078B                     _setupLCD:	
  1228                           
  1229                           ;lcd.c: 81: PORTD = 0;
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1233  078B  1283               	bcf	3,5	;RP0=0, select bank0
  1234  078C  1303               	bcf	3,6	;RP1=0, select bank0
  1235  078D  0188               	clrf	8	;volatile
  1236                           
  1237                           ;lcd.c: 82: PORTE = 0;
  1238  078E  0189               	clrf	9	;volatile
  1239                           
  1240                           ;lcd.c: 84: TRISD = 0b00000000;
  1241  078F  1683               	bsf	3,5	;RP0=1, select bank1
  1242  0790  1303               	bcf	3,6	;RP1=0, select bank1
  1243  0791  0188               	clrf	8	;volatile
  1244                           
  1245                           ;lcd.c: 85: TRISE = 0b00000000;
  1246  0792  0189               	clrf	9	;volatile
  1247                           
  1248                           ;lcd.c: 88: lcdWriteControl(0b00000001);
  1249  0793  3001               	movlw	1
  1250  0794  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1251                           
  1252                           ;lcd.c: 89: lcdWriteControl(0b00111000);
  1253  0799  3038               	movlw	56
  1254  079A  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1255                           
  1256                           ;lcd.c: 90: lcdWriteControl(0b00001100);
  1257  079F  300C               	movlw	12
  1258  07A0  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1259                           
  1260                           ;lcd.c: 91: lcdWriteControl(0b00000110);
  1261  07A5  3006               	movlw	6
  1262  07A6  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1263                           
  1264                           ;lcd.c: 92: lcdWriteControl(0b00000010);
  1265  07AB  3002               	movlw	2
  1266  07AC  120A  158A  27A9  120A  118A  	fcall	_lcdWriteControl
  1267                           
  1268                           ;lcd.c: 96: lcdWriteControl(0b00000001);
  1269  07B1  3001               	movlw	1
  1270  07B2  120A  158A  27A9   	fcall	_lcdWriteControl
  1271  07B5  0008               	return
  1272  07B6                     __end_of_setupLCD:	
  1273                           
  1274                           	psect	text3
  1275  0F76                     __ptext3:	
  1276 ;; *************** function _readADCData *****************
  1277 ;; Defined at:
  1278 ;;		line 27 in file "adConv.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  ADCResult       2    2[BANK0 ] int 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2    0[BANK0 ] int 
  1285 ;; Registers used:
  1286 ;;		wreg
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1292 ;;      Params:         0       2       0       0       0
  1293 ;;      Locals:         0       2       0       0       0
  1294 ;;      Temps:          0       0       0       0       0
  1295 ;;      Totals:         0       4       0       0       0
  1296 ;;Total ram usage:        4 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    2
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _readADCData
  1308  0F76                     _readADCData:	
  1309                           
  1310                           ;adConv.c: 29: int ADCResult = (ADRESH<<8) + ADRESL ;
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in _readADCData: [wreg]
  1314  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0F77  1303               	bcf	3,6	;RP1=0, select bank0
  1316  0F78  081E               	movf	30,w	;volatile
  1317  0F79  00A3               	movwf	readADCData@ADCResult+1
  1318  0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  1319  0F7B  1303               	bcf	3,6	;RP1=0, select bank1
  1320  0F7C  081E               	movf	30,w	;volatile
  1321  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  1322  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  1323  0F7F  00A2               	movwf	readADCData@ADCResult
  1324                           
  1325                           ;adConv.c: 30: return ADCResult;
  1326  0F80  0823               	movf	readADCData@ADCResult+1,w
  1327  0F81  00A1               	movwf	?_readADCData+1
  1328  0F82  0822               	movf	readADCData@ADCResult,w
  1329  0F83  00A0               	movwf	?_readADCData
  1330  0F84  0008               	return
  1331  0F85                     __end_of_readADCData:	
  1332                           
  1333                           	psect	text4
  1334  013D                     __ptext4:	
  1335 ;; *************** function _moveDeg *****************
  1336 ;; Defined at:
  1337 ;;		line 63 in file "motor.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  deg             3   77[BANK0 ] int 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1351 ;;      Params:         0       3       0       0       0
  1352 ;;      Locals:         0       0      10       0       0
  1353 ;;      Temps:          0       0       1       0       0
  1354 ;;      Totals:         0       3      11       0       0
  1355 ;;Total ram usage:       14 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    6
  1358 ;; This function calls:
  1359 ;;		___ftdiv
  1360 ;;		___ftge
  1361 ;;		___ftneg
  1362 ;;		___fttol
  1363 ;;		_move
  1364 ;;		_round
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _moveDeg
  1372  013D                     _moveDeg:	
  1373                           
  1374                           ;motor.c: 64: char stepsToMove;
  1375                           ;motor.c: 65: if(deg<0){
  1376                           
  1377                           ;incstack = 0
  1378                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1379  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1380  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1381  013F  086D               	movf	moveDeg@deg,w
  1382  0140  00A0               	movwf	___ftge@ff1
  1383  0141  086E               	movf	moveDeg@deg+1,w
  1384  0142  00A1               	movwf	___ftge@ff1+1
  1385  0143  086F               	movf	moveDeg@deg+2,w
  1386  0144  00A2               	movwf	___ftge@ff1+2
  1387  0145  3000               	movlw	0
  1388  0146  00A3               	movwf	___ftge@ff2
  1389  0147  3000               	movlw	0
  1390  0148  00A4               	movwf	___ftge@ff2+1
  1391  0149  3000               	movlw	0
  1392  014A  00A5               	movwf	___ftge@ff2+2
  1393  014B  120A  118A  25E4  120A  118A  	fcall	___ftge
  1394  0150  1803               	btfsc	3,0
  1395  0151  29D2               	goto	l2428
  1396                           
  1397                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1398  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0154  086D               	movf	moveDeg@deg,w
  1401  0155  00B0               	movwf	___ftneg@f1
  1402  0156  086E               	movf	moveDeg@deg+1,w
  1403  0157  00B1               	movwf	___ftneg@f1+1
  1404  0158  086F               	movf	moveDeg@deg+2,w
  1405  0159  00B2               	movwf	___ftneg@f1+2
  1406  015A  120A  118A  27F5  120A  118A  	fcall	___ftneg
  1407  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0161  0830               	movf	?___ftneg,w
  1410  0162  00B6               	movwf	___ftdiv@f1
  1411  0163  0831               	movf	?___ftneg+1,w
  1412  0164  00B7               	movwf	___ftdiv@f1+1
  1413  0165  0832               	movf	?___ftneg+2,w
  1414  0166  00B8               	movwf	___ftdiv@f1+2
  1415  0167  3000               	movlw	0
  1416  0168  00B3               	movwf	___ftdiv@f2
  1417  0169  3070               	movlw	112
  1418  016A  00B4               	movwf	___ftdiv@f2+1
  1419  016B  3040               	movlw	64
  1420  016C  00B5               	movwf	___ftdiv@f2+2
  1421  016D  120A  118A  222C  120A  118A  	fcall	___ftdiv
  1422  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0174  0833               	movf	?___ftdiv,w
  1425  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1426  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1427  0177  00B9               	movwf	_moveDeg$640^(0+128)
  1428  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1430  017A  0834               	movf	?___ftdiv+1,w
  1431  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1432  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1433  017D  00BA               	movwf	(_moveDeg$640+1)^(0+128)
  1434  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1435  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1436  0180  0835               	movf	?___ftdiv+2,w
  1437  0181  1683               	bsf	3,5	;RP0=1, select bank1
  1438  0182  1303               	bcf	3,6	;RP1=0, select bank1
  1439  0183  00BB               	movwf	(_moveDeg$640+2)^(0+128)
  1440                           
  1441                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1442  0184  0839               	movf	_moveDeg$640^(0+128),w
  1443  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0187  00E7               	movwf	round@x
  1446  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1448  018A  083A               	movf	(_moveDeg$640+1)^(0+128),w
  1449  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1450  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1451  018D  00E8               	movwf	round@x+1
  1452  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1453  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0190  083B               	movf	(_moveDeg$640+2)^(0+128),w
  1455  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1457  0193  00E9               	movwf	round@x+2
  1458  0194  120A  118A  2584  120A  118A  	fcall	_round
  1459  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1460  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1461  019B  0867               	movf	?_round,w
  1462  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1463  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1464  019E  00BC               	movwf	_moveDeg$641^(0+128)
  1465  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1466  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1467  01A1  0868               	movf	?_round+1,w
  1468  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1469  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1470  01A4  00BD               	movwf	(_moveDeg$641+1)^(0+128)
  1471  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1472  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1473  01A7  0869               	movf	?_round+2,w
  1474  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1475  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1476  01AA  00BE               	movwf	(_moveDeg$641+2)^(0+128)
  1477                           
  1478                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  1479  01AB  083C               	movf	_moveDeg$641^(0+128),w
  1480  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1481  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1482  01AE  00C3               	movwf	___fttol@f1
  1483  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1484  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1485  01B1  083D               	movf	(_moveDeg$641+1)^(0+128),w
  1486  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1487  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1488  01B4  00C4               	movwf	___fttol@f1+1
  1489  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1490  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1491  01B7  083E               	movf	(_moveDeg$641+2)^(0+128),w
  1492  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1493  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1494  01BA  00C5               	movwf	___fttol@f1+2
  1495  01BB  120A  118A  2375  120A  118A  	fcall	___fttol
  1496  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1497  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1498  01C2  0843               	movf	?___fttol,w
  1499  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  1500  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  1501  01C5  00B8               	movwf	??_moveDeg^(0+128)
  1502  01C6  0838               	movf	??_moveDeg^(0+128),w
  1503  01C7  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1504                           
  1505                           ;motor.c: 67: move(stepsToMove,0);
  1506  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1507  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1508  01CA  01AF               	clrf	move@direction
  1509  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1510  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1511  01CD  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1512  01CE  120A  118A  2403   	fcall	_move
  1513                           
  1514                           ;motor.c: 68: }
  1515  01D1  0008               	return
  1516  01D2                     l2428:	
  1517                           
  1518                           ;motor.c: 69: else{
  1519                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1520  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1521  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1522  01D4  086D               	movf	moveDeg@deg,w
  1523  01D5  00B6               	movwf	___ftdiv@f1
  1524  01D6  086E               	movf	moveDeg@deg+1,w
  1525  01D7  00B7               	movwf	___ftdiv@f1+1
  1526  01D8  086F               	movf	moveDeg@deg+2,w
  1527  01D9  00B8               	movwf	___ftdiv@f1+2
  1528  01DA  3000               	movlw	0
  1529  01DB  00B3               	movwf	___ftdiv@f2
  1530  01DC  3070               	movlw	112
  1531  01DD  00B4               	movwf	___ftdiv@f2+1
  1532  01DE  3040               	movlw	64
  1533  01DF  00B5               	movwf	___ftdiv@f2+2
  1534  01E0  120A  118A  222C  120A  118A  	fcall	___ftdiv
  1535  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1536  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1537  01E7  0833               	movf	?___ftdiv,w
  1538  01E8  00E7               	movwf	round@x
  1539  01E9  0834               	movf	?___ftdiv+1,w
  1540  01EA  00E8               	movwf	round@x+1
  1541  01EB  0835               	movf	?___ftdiv+2,w
  1542  01EC  00E9               	movwf	round@x+2
  1543  01ED  120A  118A  2584  120A  118A  	fcall	_round
  1544  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1545  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1546  01F4  0867               	movf	?_round,w
  1547  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1548  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1549  01F7  00BF               	movwf	_moveDeg$642^(0+128)
  1550  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1551  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1552  01FA  0868               	movf	?_round+1,w
  1553  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1554  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1555  01FD  00C0               	movwf	(_moveDeg$642+1)^(0+128)
  1556  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1557  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1558  0200  0869               	movf	?_round+2,w
  1559  0201  1683               	bsf	3,5	;RP0=1, select bank1
  1560  0202  1303               	bcf	3,6	;RP1=0, select bank1
  1561  0203  00C1               	movwf	(_moveDeg$642+2)^(0+128)
  1562                           
  1563                           ;motor.c: 69: else{
  1564                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  1565  0204  083F               	movf	_moveDeg$642^(0+128),w
  1566  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1568  0207  00C3               	movwf	___fttol@f1
  1569  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1570  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1571  020A  0840               	movf	(_moveDeg$642+1)^(0+128),w
  1572  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1573  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1574  020D  00C4               	movwf	___fttol@f1+1
  1575  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1576  020F  1303               	bcf	3,6	;RP1=0, select bank1
  1577  0210  0841               	movf	(_moveDeg$642+2)^(0+128),w
  1578  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0212  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0213  00C5               	movwf	___fttol@f1+2
  1581  0214  120A  118A  2375  120A  118A  	fcall	___fttol
  1582  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1583  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1584  021B  0843               	movf	?___fttol,w
  1585  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1586  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1587  021E  00B8               	movwf	??_moveDeg^(0+128)
  1588  021F  0838               	movf	??_moveDeg^(0+128),w
  1589  0220  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1590                           
  1591                           ;motor.c: 71: move(stepsToMove,1);
  1592  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1594  0223  01AF               	clrf	move@direction
  1595  0224  0AAF               	incf	move@direction,f
  1596  0225  1683               	bsf	3,5	;RP0=1, select bank1
  1597  0226  1303               	bcf	3,6	;RP1=0, select bank1
  1598  0227  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1599  0228  120A  118A  2403   	fcall	_move
  1600  022B  0008               	return
  1601  022C                     __end_of_moveDeg:	
  1602                           
  1603                           	psect	text5
  1604  0584                     __ptext5:	
  1605 ;; *************** function _round *****************
  1606 ;; Defined at:
  1607 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  x               3   71[BANK0 ] void 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  f               3   74[BANK0 ] void 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  3   71[BANK0 ] void 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1621 ;;      Params:         0       3       0       0       0
  1622 ;;      Locals:         0       3       0       0       0
  1623 ;;      Temps:          0       0       0       0       0
  1624 ;;      Totals:         0       6       0       0       0
  1625 ;;Total ram usage:        6 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    5
  1628 ;; This function calls:
  1629 ;;		___ftadd
  1630 ;;		___ftneg
  1631 ;;		_trunc
  1632 ;; This function is called by:
  1633 ;;		_moveDeg
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _round
  1639  0584                     _round:	
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1643  0584  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0585  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0586  0867               	movf	round@x,w
  1646  0587  00DA               	movwf	___ftadd@f1
  1647  0588  0868               	movf	round@x+1,w
  1648  0589  00DB               	movwf	___ftadd@f1+1
  1649  058A  0869               	movf	round@x+2,w
  1650  058B  00DC               	movwf	___ftadd@f1+2
  1651  058C  0867               	movf	round@x,w
  1652  058D  00D1               	movwf	trunc@x
  1653  058E  0868               	movf	round@x+1,w
  1654  058F  00D2               	movwf	trunc@x+1
  1655  0590  0869               	movf	round@x+2,w
  1656  0591  00D3               	movwf	trunc@x+2
  1657  0592  120A  118A  2691  120A  118A  	fcall	_trunc
  1658  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0599  0851               	movf	?_trunc,w
  1661  059A  00B0               	movwf	___ftneg@f1
  1662  059B  0852               	movf	?_trunc+1,w
  1663  059C  00B1               	movwf	___ftneg@f1+1
  1664  059D  0853               	movf	?_trunc+2,w
  1665  059E  00B2               	movwf	___ftneg@f1+2
  1666  059F  120A  118A  27F5  120A  118A  	fcall	___ftneg
  1667  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1668  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1669  05A6  0830               	movf	?___ftneg,w
  1670  05A7  00DD               	movwf	___ftadd@f2
  1671  05A8  0831               	movf	?___ftneg+1,w
  1672  05A9  00DE               	movwf	___ftadd@f2+1
  1673  05AA  0832               	movf	?___ftneg+2,w
  1674  05AB  00DF               	movwf	___ftadd@f2+2
  1675  05AC  120A  118A  2034  120A  118A  	fcall	___ftadd
  1676  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1677  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1678  05B3  085A               	movf	?___ftadd,w
  1679  05B4  00EA               	movwf	round@f
  1680  05B5  085B               	movf	?___ftadd+1,w
  1681  05B6  00EB               	movwf	round@f+1
  1682  05B7  085C               	movf	?___ftadd+2,w
  1683  05B8  00EC               	movwf	round@f+2
  1684  05B9  086A               	movf	round@f,w
  1685  05BA  00DA               	movwf	___ftadd@f1
  1686  05BB  086B               	movf	round@f+1,w
  1687  05BC  00DB               	movwf	___ftadd@f1+1
  1688  05BD  086C               	movf	round@f+2,w
  1689  05BE  00DC               	movwf	___ftadd@f1+2
  1690  05BF  0867               	movf	round@x,w
  1691  05C0  00DD               	movwf	___ftadd@f2
  1692  05C1  0868               	movf	round@x+1,w
  1693  05C2  00DE               	movwf	___ftadd@f2+1
  1694  05C3  0869               	movf	round@x+2,w
  1695  05C4  00DF               	movwf	___ftadd@f2+2
  1696  05C5  120A  118A  2034  120A  118A  	fcall	___ftadd
  1697  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1698  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1699  05CC  085A               	movf	?___ftadd,w
  1700  05CD  00E7               	movwf	round@x
  1701  05CE  085B               	movf	?___ftadd+1,w
  1702  05CF  00E8               	movwf	round@x+1
  1703  05D0  085C               	movf	?___ftadd+2,w
  1704  05D1  00E9               	movwf	round@x+2
  1705  05D2  0867               	movf	round@x,w
  1706  05D3  00D1               	movwf	trunc@x
  1707  05D4  0868               	movf	round@x+1,w
  1708  05D5  00D2               	movwf	trunc@x+1
  1709  05D6  0869               	movf	round@x+2,w
  1710  05D7  00D3               	movwf	trunc@x+2
  1711  05D8  120A  118A  2691   	fcall	_trunc
  1712  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  1713  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  1714  05DD  0851               	movf	?_trunc,w
  1715  05DE  00E7               	movwf	?_round
  1716  05DF  0852               	movf	?_trunc+1,w
  1717  05E0  00E8               	movwf	?_round+1
  1718  05E1  0853               	movf	?_trunc+2,w
  1719  05E2  00E9               	movwf	?_round+2
  1720  05E3  0008               	return
  1721  05E4                     __end_of_round:	
  1722                           
  1723                           	psect	text6
  1724  0691                     __ptext6:	
  1725 ;; *************** function _trunc *****************
  1726 ;; Defined at:
  1727 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  x               3   49[BANK0 ] void 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  i               3   53[BANK0 ] void 
  1732 ;;  expon           2   56[BANK0 ] int 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  3   49[BANK0 ] int 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1742 ;;      Params:         0       3       0       0       0
  1743 ;;      Locals:         0       5       0       0       0
  1744 ;;      Temps:          0       1       0       0       0
  1745 ;;      Totals:         0       9       0       0       0
  1746 ;;Total ram usage:        9 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    4
  1749 ;; This function calls:
  1750 ;;		___altoft
  1751 ;;		___fttol
  1752 ;;		_frexp
  1753 ;; This function is called by:
  1754 ;;		_round
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _trunc
  1760  0691                     _trunc:	
  1761                           
  1762                           ;incstack = 0
  1763                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1764  0691  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0692  1303               	bcf	3,6	;RP1=0, select bank0
  1766  0693  0851               	movf	trunc@x,w
  1767  0694  00A0               	movwf	frexp@value
  1768  0695  0852               	movf	trunc@x+1,w
  1769  0696  00A1               	movwf	frexp@value+1
  1770  0697  0853               	movf	trunc@x+2,w
  1771  0698  00A2               	movwf	frexp@value+2
  1772  0699  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1773  069A  00D4               	movwf	??_trunc
  1774  069B  0854               	movf	??_trunc,w
  1775  069C  00A3               	movwf	frexp@eptr
  1776  069D  120A  118A  271D  120A  118A  	fcall	_frexp
  1777  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  1778  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  1779  06A4  1FD9               	btfss	trunc@expon+1,7
  1780  06A5  2EAD               	goto	l2232
  1781  06A6  3000               	movlw	0
  1782  06A7  00D1               	movwf	?_trunc
  1783  06A8  3000               	movlw	0
  1784  06A9  00D2               	movwf	?_trunc+1
  1785  06AA  3000               	movlw	0
  1786  06AB  00D3               	movwf	?_trunc+2
  1787  06AC  0008               	return
  1788  06AD                     l2232:	
  1789  06AD  3000               	movlw	0
  1790  06AE  0259               	subwf	trunc@expon+1,w
  1791  06AF  3015               	movlw	21
  1792  06B0  1903               	skipnz
  1793  06B1  0258               	subwf	trunc@expon,w
  1794  06B2  1803               	btfsc	3,0
  1795  06B3  0008               	return
  1796  06B4  0851               	movf	trunc@x,w
  1797  06B5  00C3               	movwf	___fttol@f1
  1798  06B6  0852               	movf	trunc@x+1,w
  1799  06B7  00C4               	movwf	___fttol@f1+1
  1800  06B8  0853               	movf	trunc@x+2,w
  1801  06B9  00C5               	movwf	___fttol@f1+2
  1802  06BA  120A  118A  2375  120A  118A  	fcall	___fttol
  1803  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  1804  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  1805  06C1  0846               	movf	?___fttol+3,w
  1806  06C2  00AB               	movwf	___altoft@c+3
  1807  06C3  0845               	movf	?___fttol+2,w
  1808  06C4  00AA               	movwf	___altoft@c+2
  1809  06C5  0844               	movf	?___fttol+1,w
  1810  06C6  00A9               	movwf	___altoft@c+1
  1811  06C7  0843               	movf	?___fttol,w
  1812  06C8  00A8               	movwf	___altoft@c
  1813  06C9  120A  118A  26DB   	fcall	___altoft
  1814  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  1815  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  1816  06CE  0828               	movf	?___altoft,w
  1817  06CF  00D5               	movwf	trunc@i
  1818  06D0  0829               	movf	?___altoft+1,w
  1819  06D1  00D6               	movwf	trunc@i+1
  1820  06D2  082A               	movf	?___altoft+2,w
  1821  06D3  00D7               	movwf	trunc@i+2
  1822  06D4  0855               	movf	trunc@i,w
  1823  06D5  00D1               	movwf	?_trunc
  1824  06D6  0856               	movf	trunc@i+1,w
  1825  06D7  00D2               	movwf	?_trunc+1
  1826  06D8  0857               	movf	trunc@i+2,w
  1827  06D9  00D3               	movwf	?_trunc+2
  1828  06DA  0008               	return
  1829  06DB                     __end_of_trunc:	
  1830                           
  1831                           	psect	text7
  1832  071D                     __ptext7:	
  1833 ;; *************** function _frexp *****************
  1834 ;; Defined at:
  1835 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;  value           3    0[BANK0 ] int 
  1838 ;;  eptr            1    3[BANK0 ] PTR int 
  1839 ;;		 -> trunc@expon(2), 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  3    0[BANK0 ] PTR int 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         0       4       0       0       0
  1852 ;;      Locals:         0       0       0       0       0
  1853 ;;      Temps:          0       2       0       0       0
  1854 ;;      Totals:         0       6       0       0       0
  1855 ;;Total ram usage:        6 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    2
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_trunc
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           
  1866                           ;psect for function _frexp
  1867  071D                     _frexp:	
  1868                           
  1869                           ;incstack = 0
  1870                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1871  071D  1283               	bcf	3,5	;RP0=0, select bank0
  1872  071E  1303               	bcf	3,6	;RP1=0, select bank0
  1873  071F  0822               	movf	frexp@value+2,w
  1874  0720  0421               	iorwf	frexp@value+1,w
  1875  0721  0420               	iorwf	frexp@value,w
  1876  0722  1D03               	skipz
  1877  0723  2F2B               	goto	l2102
  1878  0724  0823               	movf	frexp@eptr,w
  1879  0725  0084               	movwf	4
  1880  0726  1383               	bcf	3,7	;select IRP bank0
  1881  0727  0180               	clrf	0
  1882  0728  0A84               	incf	4,f
  1883  0729  0180               	clrf	0
  1884                           
  1885                           ;	Return value of _frexp is never used
  1886  072A  0008               	return
  1887  072B                     l2102:	
  1888  072B  0822               	movf	frexp@value+2,w
  1889  072C  397F               	andlw	127
  1890  072D  00A4               	movwf	??_frexp
  1891  072E  01A5               	clrf	??_frexp+1
  1892  072F  1003               	clrc
  1893  0730  0DA4               	rlf	??_frexp,f
  1894  0731  0DA5               	rlf	??_frexp+1,f
  1895  0732  0823               	movf	frexp@eptr,w
  1896  0733  0084               	movwf	4
  1897  0734  0824               	movf	??_frexp,w
  1898  0735  1383               	bcf	3,7	;select IRP bank0
  1899  0736  0080               	movwf	0
  1900  0737  0A84               	incf	4,f
  1901  0738  0825               	movf	??_frexp+1,w
  1902  0739  0080               	movwf	0
  1903  073A  0D21               	rlf	frexp@value+1,w
  1904  073B  0D21               	rlf	frexp@value+1,w
  1905  073C  3901               	andlw	1
  1906  073D  00A4               	movwf	??_frexp
  1907  073E  01A5               	clrf	??_frexp+1
  1908  073F  0823               	movf	frexp@eptr,w
  1909  0740  0084               	movwf	4
  1910  0741  0824               	movf	??_frexp,w
  1911  0742  0480               	iorwf	0,f
  1912  0743  0A84               	incf	4,f
  1913  0744  0825               	movf	??_frexp+1,w
  1914  0745  0480               	iorwf	0,f
  1915  0746  0823               	movf	frexp@eptr,w
  1916  0747  0084               	movwf	4
  1917  0748  3082               	movlw	130
  1918  0749  0780               	addwf	0,f
  1919  074A  0F84               	incfsz	4,f
  1920  074B  0800               	movf	0,w
  1921  074C  1803               	skipnc
  1922  074D  0A00               	incf	0,w
  1923  074E  00FF               	movwf	127
  1924  074F  30FF               	movlw	255
  1925  0750  077F               	addwf	127,w
  1926  0751  0080               	movwf	0
  1927  0752  0384               	decf	4,f
  1928  0753  0822               	movf	frexp@value+2,w
  1929  0754  3980               	andlw	-128
  1930  0755  383F               	iorlw	63
  1931  0756  00A2               	movwf	frexp@value+2
  1932  0757  13A1               	bcf	frexp@value+1,7
  1933  0758  0008               	return
  1934  0759                     __end_of_frexp:	
  1935                           ;	Return value of _frexp is never used
  1936                           
  1937                           
  1938                           	psect	text8
  1939  0375                     __ptext8:	
  1940 ;; *************** function ___fttol *****************
  1941 ;; Defined at:
  1942 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  f1              3   35[BANK0 ] float 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  lval            4   44[BANK0 ] unsigned long 
  1947 ;;  exp1            1   48[BANK0 ] unsigned char 
  1948 ;;  sign1           1   43[BANK0 ] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  4   35[BANK0 ] long 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1958 ;;      Params:         0       4       0       0       0
  1959 ;;      Locals:         0       6       0       0       0
  1960 ;;      Temps:          0       4       0       0       0
  1961 ;;      Totals:         0      14       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_moveDeg
  1969 ;;		_trunc
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function ___fttol
  1975  0375                     ___fttol:	
  1976                           
  1977                           ;incstack = 0
  1978                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1979  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0377  0843               	movf	___fttol@f1,w
  1982  0378  00C7               	movwf	??___fttol
  1983  0379  0844               	movf	___fttol@f1+1,w
  1984  037A  00C8               	movwf	??___fttol+1
  1985  037B  0845               	movf	___fttol@f1+2,w
  1986  037C  00C9               	movwf	??___fttol+2
  1987  037D  1003               	clrc
  1988  037E  0D48               	rlf	??___fttol+1,w
  1989  037F  0D49               	rlf	??___fttol+2,w
  1990  0380  00CA               	movwf	??___fttol+3
  1991  0381  084A               	movf	??___fttol+3,w
  1992  0382  00D0               	movwf	___fttol@exp1
  1993  0383  0850               	movf	___fttol@exp1,w
  1994  0384  1D03               	btfss	3,2
  1995  0385  2B8F               	goto	l1498
  1996  0386  3000               	movlw	0
  1997  0387  00C6               	movwf	?___fttol+3
  1998  0388  3000               	movlw	0
  1999  0389  00C5               	movwf	?___fttol+2
  2000  038A  3000               	movlw	0
  2001  038B  00C4               	movwf	?___fttol+1
  2002  038C  3000               	movlw	0
  2003  038D  00C3               	movwf	?___fttol
  2004  038E  0008               	return
  2005  038F                     l1498:	
  2006  038F  0843               	movf	___fttol@f1,w
  2007  0390  00C7               	movwf	??___fttol
  2008  0391  0844               	movf	___fttol@f1+1,w
  2009  0392  00C8               	movwf	??___fttol+1
  2010  0393  0845               	movf	___fttol@f1+2,w
  2011  0394  00C9               	movwf	??___fttol+2
  2012  0395  3017               	movlw	23
  2013  0396                     u1295:	
  2014  0396  1003               	clrc
  2015  0397  0CC9               	rrf	??___fttol+2,f
  2016  0398  0CC8               	rrf	??___fttol+1,f
  2017  0399  0CC7               	rrf	??___fttol,f
  2018  039A  3EFF               	addlw	-1
  2019  039B  1D03               	skipz
  2020  039C  2B96               	goto	u1295
  2021  039D  0847               	movf	??___fttol,w
  2022  039E  00CA               	movwf	??___fttol+3
  2023  039F  084A               	movf	??___fttol+3,w
  2024  03A0  00CB               	movwf	___fttol@sign1
  2025  03A1  17C4               	bsf	___fttol@f1+1,7
  2026  03A2  30FF               	movlw	255
  2027  03A3  05C3               	andwf	___fttol@f1,f
  2028  03A4  30FF               	movlw	255
  2029  03A5  05C4               	andwf	___fttol@f1+1,f
  2030  03A6  3000               	movlw	0
  2031  03A7  05C5               	andwf	___fttol@f1+2,f
  2032  03A8  0843               	movf	___fttol@f1,w
  2033  03A9  00CC               	movwf	___fttol@lval
  2034  03AA  0844               	movf	___fttol@f1+1,w
  2035  03AB  00CD               	movwf	___fttol@lval+1
  2036  03AC  0845               	movf	___fttol@f1+2,w
  2037  03AD  00CE               	movwf	___fttol@lval+2
  2038  03AE  01CF               	clrf	___fttol@lval+3
  2039  03AF  308E               	movlw	142
  2040  03B0  02D0               	subwf	___fttol@exp1,f
  2041  03B1  1FD0               	btfss	___fttol@exp1,7
  2042  03B2  2BD1               	goto	l1518
  2043  03B3  0850               	movf	___fttol@exp1,w
  2044  03B4  3A80               	xorlw	128
  2045  03B5  3E8F               	addlw	143
  2046  03B6  1803               	skipnc
  2047  03B7  2BC1               	goto	l1516
  2048  03B8  3000               	movlw	0
  2049  03B9  00C6               	movwf	?___fttol+3
  2050  03BA  3000               	movlw	0
  2051  03BB  00C5               	movwf	?___fttol+2
  2052  03BC  3000               	movlw	0
  2053  03BD  00C4               	movwf	?___fttol+1
  2054  03BE  3000               	movlw	0
  2055  03BF  00C3               	movwf	?___fttol
  2056  03C0  0008               	return
  2057  03C1                     l1516:	
  2058  03C1  3001               	movlw	1
  2059  03C2                     u1325:	
  2060  03C2  1003               	clrc
  2061  03C3  0CCF               	rrf	___fttol@lval+3,f
  2062  03C4  0CCE               	rrf	___fttol@lval+2,f
  2063  03C5  0CCD               	rrf	___fttol@lval+1,f
  2064  03C6  0CCC               	rrf	___fttol@lval,f
  2065  03C7  3EFF               	addlw	-1
  2066  03C8  1D03               	skipz
  2067  03C9  2BC2               	goto	u1325
  2068  03CA  3001               	movlw	1
  2069  03CB  00C7               	movwf	??___fttol
  2070  03CC  0847               	movf	??___fttol,w
  2071  03CD  07D0               	addwf	___fttol@exp1,f
  2072  03CE  1903               	btfsc	3,2
  2073  03CF  2BEC               	goto	l1526
  2074  03D0  2BC1               	goto	l1516
  2075  03D1                     l1518:	
  2076  03D1  3018               	movlw	24
  2077  03D2  0250               	subwf	___fttol@exp1,w
  2078  03D3  1C03               	skipc
  2079  03D4  2BE9               	goto	l632
  2080  03D5  3000               	movlw	0
  2081  03D6  00C6               	movwf	?___fttol+3
  2082  03D7  3000               	movlw	0
  2083  03D8  00C5               	movwf	?___fttol+2
  2084  03D9  3000               	movlw	0
  2085  03DA  00C4               	movwf	?___fttol+1
  2086  03DB  3000               	movlw	0
  2087  03DC  00C3               	movwf	?___fttol
  2088  03DD  0008               	return
  2089  03DE                     l1524:	
  2090  03DE  3001               	movlw	1
  2091  03DF  00C7               	movwf	??___fttol
  2092  03E0                     u1355:	
  2093  03E0  1003               	clrc
  2094  03E1  0DCC               	rlf	___fttol@lval,f
  2095  03E2  0DCD               	rlf	___fttol@lval+1,f
  2096  03E3  0DCE               	rlf	___fttol@lval+2,f
  2097  03E4  0DCF               	rlf	___fttol@lval+3,f
  2098  03E5  0BC7               	decfsz	??___fttol,f
  2099  03E6  2BE0               	goto	u1355
  2100  03E7  3001               	movlw	1
  2101  03E8  02D0               	subwf	___fttol@exp1,f
  2102  03E9                     l632:	
  2103  03E9  0850               	movf	___fttol@exp1,w
  2104  03EA  1D03               	btfss	3,2
  2105  03EB  2BDE               	goto	l1524
  2106  03EC                     l1526:	
  2107  03EC  084B               	movf	___fttol@sign1,w
  2108  03ED  1903               	btfsc	3,2
  2109  03EE  2BFA               	goto	l1530
  2110  03EF  09CC               	comf	___fttol@lval,f
  2111  03F0  09CD               	comf	___fttol@lval+1,f
  2112  03F1  09CE               	comf	___fttol@lval+2,f
  2113  03F2  09CF               	comf	___fttol@lval+3,f
  2114  03F3  0ACC               	incf	___fttol@lval,f
  2115  03F4  1903               	skipnz
  2116  03F5  0ACD               	incf	___fttol@lval+1,f
  2117  03F6  1903               	skipnz
  2118  03F7  0ACE               	incf	___fttol@lval+2,f
  2119  03F8  1903               	skipnz
  2120  03F9  0ACF               	incf	___fttol@lval+3,f
  2121  03FA                     l1530:	
  2122  03FA  084F               	movf	___fttol@lval+3,w
  2123  03FB  00C6               	movwf	?___fttol+3
  2124  03FC  084E               	movf	___fttol@lval+2,w
  2125  03FD  00C5               	movwf	?___fttol+2
  2126  03FE  084D               	movf	___fttol@lval+1,w
  2127  03FF  00C4               	movwf	?___fttol+1
  2128  0400  084C               	movf	___fttol@lval,w
  2129  0401  00C3               	movwf	?___fttol
  2130  0402  0008               	return
  2131  0403                     __end_of___fttol:	
  2132                           
  2133                           	psect	text9
  2134  06DB                     __ptext9:	
  2135 ;; *************** function ___altoft *****************
  2136 ;; Defined at:
  2137 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  c               4    8[BANK0 ] long 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  sign            1   15[BANK0 ] unsigned char 
  2142 ;;  exp             1   14[BANK0 ] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  3    8[BANK0 ] float 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         0       4       0       0       0
  2153 ;;      Locals:         0       2       0       0       0
  2154 ;;      Temps:          0       2       0       0       0
  2155 ;;      Totals:         0       8       0       0       0
  2156 ;;Total ram usage:        8 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    3
  2159 ;; This function calls:
  2160 ;;		___ftpack
  2161 ;; This function is called by:
  2162 ;;		_trunc
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function ___altoft
  2168  06DB                     ___altoft:	
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2172  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  2173  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  2174  06DD  01AF               	clrf	___altoft@sign
  2175  06DE  308E               	movlw	142
  2176  06DF  00AC               	movwf	??___altoft
  2177  06E0  082C               	movf	??___altoft,w
  2178  06E1  00AE               	movwf	___altoft@exp
  2179  06E2  1FAB               	btfss	___altoft@c+3,7
  2180  06E3  2EF1               	goto	l2090
  2181  06E4  09A8               	comf	___altoft@c,f
  2182  06E5  09A9               	comf	___altoft@c+1,f
  2183  06E6  09AA               	comf	___altoft@c+2,f
  2184  06E7  09AB               	comf	___altoft@c+3,f
  2185  06E8  0AA8               	incf	___altoft@c,f
  2186  06E9  1903               	skipnz
  2187  06EA  0AA9               	incf	___altoft@c+1,f
  2188  06EB  1903               	skipnz
  2189  06EC  0AAA               	incf	___altoft@c+2,f
  2190  06ED  1903               	skipnz
  2191  06EE  0AAB               	incf	___altoft@c+3,f
  2192  06EF  01AF               	clrf	___altoft@sign
  2193  06F0  0AAF               	incf	___altoft@sign,f
  2194  06F1                     l2090:	
  2195  06F1  30FF               	movlw	255
  2196  06F2  052B               	andwf	___altoft@c+3,w
  2197  06F3  1903               	btfsc	3,2
  2198  06F4  2F03               	goto	l2092
  2199  06F5  3001               	movlw	1
  2200  06F6                     u2345:	
  2201  06F6  1003               	clrc
  2202  06F7  0CAB               	rrf	___altoft@c+3,f
  2203  06F8  0CAA               	rrf	___altoft@c+2,f
  2204  06F9  0CA9               	rrf	___altoft@c+1,f
  2205  06FA  0CA8               	rrf	___altoft@c,f
  2206  06FB  3EFF               	addlw	-1
  2207  06FC  1D03               	skipz
  2208  06FD  2EF6               	goto	u2345
  2209  06FE  3001               	movlw	1
  2210  06FF  00AC               	movwf	??___altoft
  2211  0700  082C               	movf	??___altoft,w
  2212  0701  07AE               	addwf	___altoft@exp,f
  2213  0702  2EF1               	goto	l2090
  2214  0703                     l2092:	
  2215  0703  0828               	movf	___altoft@c,w
  2216  0704  00A0               	movwf	___ftpack@arg
  2217  0705  0829               	movf	___altoft@c+1,w
  2218  0706  00A1               	movwf	___ftpack@arg+1
  2219  0707  082A               	movf	___altoft@c+2,w
  2220  0708  00A2               	movwf	___ftpack@arg+2
  2221  0709  082E               	movf	___altoft@exp,w
  2222  070A  00AC               	movwf	??___altoft
  2223  070B  082C               	movf	??___altoft,w
  2224  070C  00A3               	movwf	___ftpack@exp
  2225  070D  082F               	movf	___altoft@sign,w
  2226  070E  00AD               	movwf	??___altoft+1
  2227  070F  082D               	movf	??___altoft+1,w
  2228  0710  00A4               	movwf	___ftpack@sign
  2229  0711  120A  118A  2516   	fcall	___ftpack
  2230  0714  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0715  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0716  0820               	movf	?___ftpack,w
  2233  0717  00A8               	movwf	?___altoft
  2234  0718  0821               	movf	?___ftpack+1,w
  2235  0719  00A9               	movwf	?___altoft+1
  2236  071A  0822               	movf	?___ftpack+2,w
  2237  071B  00AA               	movwf	?___altoft+2
  2238  071C  0008               	return
  2239  071D                     __end_of___altoft:	
  2240                           
  2241                           	psect	text10
  2242  07F5                     __ptext10:	
  2243 ;; *************** function ___ftneg *****************
  2244 ;; Defined at:
  2245 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  f1              3   16[BANK0 ] float 
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  3   16[BANK0 ] float 
  2252 ;; Registers used:
  2253 ;;		wreg
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2259 ;;      Params:         0       3       0       0       0
  2260 ;;      Locals:         0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0
  2262 ;;      Totals:         0       3       0       0       0
  2263 ;;Total ram usage:        3 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    2
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_moveDeg
  2270 ;;		_round
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           
  2275                           ;psect for function ___ftneg
  2276  07F5                     ___ftneg:	
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in ___ftneg: [wreg]
  2280  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  2281  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  2282  07F7  0832               	movf	___ftneg@f1+2,w
  2283  07F8  0431               	iorwf	___ftneg@f1+1,w
  2284  07F9  0430               	iorwf	___ftneg@f1,w
  2285  07FA  1903               	skipnz
  2286  07FB  0008               	return
  2287  07FC  3080               	movlw	128
  2288  07FD  06B2               	xorwf	___ftneg@f1+2,f
  2289  07FE  0008               	return
  2290  07FF                     __end_of___ftneg:	
  2291                           
  2292                           	psect	text11
  2293  0034                     __ptext11:	
  2294 ;; *************** function ___ftadd *****************
  2295 ;; Defined at:
  2296 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  f1              3   58[BANK0 ] float 
  2299 ;;  f2              3   61[BANK0 ] float 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  exp1            1   70[BANK0 ] unsigned char 
  2302 ;;  exp2            1   69[BANK0 ] unsigned char 
  2303 ;;  sign            1   68[BANK0 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  3   58[BANK0 ] float 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       6       0       0       0
  2314 ;;      Locals:         0       3       0       0       0
  2315 ;;      Temps:          0       4       0       0       0
  2316 ;;      Totals:         0      13       0       0       0
  2317 ;;Total ram usage:       13 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    3
  2320 ;; This function calls:
  2321 ;;		___ftpack
  2322 ;; This function is called by:
  2323 ;;		_round
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function ___ftadd
  2329  0034                     ___ftadd:	
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2333  0034  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0035  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0036  085A               	movf	___ftadd@f1,w
  2336  0037  00E0               	movwf	??___ftadd
  2337  0038  085B               	movf	___ftadd@f1+1,w
  2338  0039  00E1               	movwf	??___ftadd+1
  2339  003A  085C               	movf	___ftadd@f1+2,w
  2340  003B  00E2               	movwf	??___ftadd+2
  2341  003C  1003               	clrc
  2342  003D  0D61               	rlf	??___ftadd+1,w
  2343  003E  0D62               	rlf	??___ftadd+2,w
  2344  003F  00E3               	movwf	??___ftadd+3
  2345  0040  0863               	movf	??___ftadd+3,w
  2346  0041  00E6               	movwf	___ftadd@exp1
  2347  0042  085D               	movf	___ftadd@f2,w
  2348  0043  00E0               	movwf	??___ftadd
  2349  0044  085E               	movf	___ftadd@f2+1,w
  2350  0045  00E1               	movwf	??___ftadd+1
  2351  0046  085F               	movf	___ftadd@f2+2,w
  2352  0047  00E2               	movwf	??___ftadd+2
  2353  0048  1003               	clrc
  2354  0049  0D61               	rlf	??___ftadd+1,w
  2355  004A  0D62               	rlf	??___ftadd+2,w
  2356  004B  00E3               	movwf	??___ftadd+3
  2357  004C  0863               	movf	??___ftadd+3,w
  2358  004D  00E5               	movwf	___ftadd@exp2
  2359  004E  0866               	movf	___ftadd@exp1,w
  2360  004F  1903               	btfsc	3,2
  2361  0050  285D               	goto	l2152
  2362  0051  0865               	movf	___ftadd@exp2,w
  2363  0052  0266               	subwf	___ftadd@exp1,w
  2364  0053  1803               	skipnc
  2365  0054  2864               	goto	l2156
  2366  0055  0366               	decf	___ftadd@exp1,w
  2367  0056  3AFF               	xorlw	255
  2368  0057  0765               	addwf	___ftadd@exp2,w
  2369  0058  00E0               	movwf	??___ftadd
  2370  0059  3019               	movlw	25
  2371  005A  0260               	subwf	??___ftadd,w
  2372  005B  1C03               	skipc
  2373  005C  2864               	goto	l2156
  2374  005D                     l2152:	
  2375  005D  085D               	movf	___ftadd@f2,w
  2376  005E  00DA               	movwf	?___ftadd
  2377  005F  085E               	movf	___ftadd@f2+1,w
  2378  0060  00DB               	movwf	?___ftadd+1
  2379  0061  085F               	movf	___ftadd@f2+2,w
  2380  0062  00DC               	movwf	?___ftadd+2
  2381  0063  0008               	return
  2382  0064                     l2156:	
  2383  0064  0865               	movf	___ftadd@exp2,w
  2384  0065  1903               	btfsc	3,2
  2385  0066  0008               	return
  2386  0067  0866               	movf	___ftadd@exp1,w
  2387  0068  0265               	subwf	___ftadd@exp2,w
  2388  0069  1803               	skipnc
  2389  006A  2873               	goto	l2162
  2390  006B  0365               	decf	___ftadd@exp2,w
  2391  006C  3AFF               	xorlw	255
  2392  006D  0766               	addwf	___ftadd@exp1,w
  2393  006E  00E0               	movwf	??___ftadd
  2394  006F  3019               	movlw	25
  2395  0070  0260               	subwf	??___ftadd,w
  2396  0071  1803               	btfsc	3,0
  2397  0072  0008               	return
  2398  0073                     l2162:	
  2399  0073  3006               	movlw	6
  2400  0074  00E0               	movwf	??___ftadd
  2401  0075  0860               	movf	??___ftadd,w
  2402  0076  00E4               	movwf	___ftadd@sign
  2403  0077  1BDC               	btfsc	___ftadd@f1+2,7
  2404  0078  17E4               	bsf	___ftadd@sign,7
  2405  0079  1BDF               	btfsc	___ftadd@f2+2,7
  2406  007A  1764               	bsf	___ftadd@sign,6
  2407  007B  17DB               	bsf	___ftadd@f1+1,7
  2408  007C  30FF               	movlw	255
  2409  007D  05DA               	andwf	___ftadd@f1,f
  2410  007E  30FF               	movlw	255
  2411  007F  05DB               	andwf	___ftadd@f1+1,f
  2412  0080  3000               	movlw	0
  2413  0081  05DC               	andwf	___ftadd@f1+2,f
  2414  0082  17DE               	bsf	___ftadd@f2+1,7
  2415  0083  30FF               	movlw	255
  2416  0084  05DD               	andwf	___ftadd@f2,f
  2417  0085  30FF               	movlw	255
  2418  0086  05DE               	andwf	___ftadd@f2+1,f
  2419  0087  3000               	movlw	0
  2420  0088  05DF               	andwf	___ftadd@f2+2,f
  2421  0089  0865               	movf	___ftadd@exp2,w
  2422  008A  0266               	subwf	___ftadd@exp1,w
  2423  008B  1803               	skipnc
  2424  008C  28B3               	goto	l2184
  2425  008D                     l2174:	
  2426  008D  3001               	movlw	1
  2427  008E                     u2515:	
  2428  008E  1003               	clrc
  2429  008F  0DDD               	rlf	___ftadd@f2,f
  2430  0090  0DDE               	rlf	___ftadd@f2+1,f
  2431  0091  0DDF               	rlf	___ftadd@f2+2,f
  2432  0092  3EFF               	addlw	-1
  2433  0093  1D03               	skipz
  2434  0094  288E               	goto	u2515
  2435  0095  3001               	movlw	1
  2436  0096  02E5               	subwf	___ftadd@exp2,f
  2437  0097  0865               	movf	___ftadd@exp2,w
  2438  0098  0666               	xorwf	___ftadd@exp1,w
  2439  0099  1903               	skipnz
  2440  009A  28AE               	goto	l2182
  2441  009B  3001               	movlw	1
  2442  009C  02E4               	subwf	___ftadd@sign,f
  2443  009D  0864               	movf	___ftadd@sign,w
  2444  009E  3907               	andlw	7
  2445  009F  1903               	btfsc	3,2
  2446  00A0  28AE               	goto	l2182
  2447  00A1  288D               	goto	l2174
  2448  00A2                     l2180:	
  2449  00A2  3001               	movlw	1
  2450  00A3                     u2545:	
  2451  00A3  1003               	clrc
  2452  00A4  0CDC               	rrf	___ftadd@f1+2,f
  2453  00A5  0CDB               	rrf	___ftadd@f1+1,f
  2454  00A6  0CDA               	rrf	___ftadd@f1,f
  2455  00A7  3EFF               	addlw	-1
  2456  00A8  1D03               	skipz
  2457  00A9  28A3               	goto	u2545
  2458  00AA  3001               	movlw	1
  2459  00AB  00E0               	movwf	??___ftadd
  2460  00AC  0860               	movf	??___ftadd,w
  2461  00AD  07E6               	addwf	___ftadd@exp1,f
  2462  00AE                     l2182:	
  2463  00AE  0866               	movf	___ftadd@exp1,w
  2464  00AF  0665               	xorwf	___ftadd@exp2,w
  2465  00B0  1903               	btfsc	3,2
  2466  00B1  28DC               	goto	l572
  2467  00B2  28A2               	goto	l2180
  2468  00B3                     l2184:	
  2469  00B3  0866               	movf	___ftadd@exp1,w
  2470  00B4  0265               	subwf	___ftadd@exp2,w
  2471  00B5  1803               	skipnc
  2472  00B6  28DC               	goto	l572
  2473  00B7                     l2186:	
  2474  00B7  3001               	movlw	1
  2475  00B8                     u2575:	
  2476  00B8  1003               	clrc
  2477  00B9  0DDA               	rlf	___ftadd@f1,f
  2478  00BA  0DDB               	rlf	___ftadd@f1+1,f
  2479  00BB  0DDC               	rlf	___ftadd@f1+2,f
  2480  00BC  3EFF               	addlw	-1
  2481  00BD  1D03               	skipz
  2482  00BE  28B8               	goto	u2575
  2483  00BF  3001               	movlw	1
  2484  00C0  02E6               	subwf	___ftadd@exp1,f
  2485  00C1  0865               	movf	___ftadd@exp2,w
  2486  00C2  0666               	xorwf	___ftadd@exp1,w
  2487  00C3  1903               	skipnz
  2488  00C4  28D8               	goto	l2194
  2489  00C5  3001               	movlw	1
  2490  00C6  02E4               	subwf	___ftadd@sign,f
  2491  00C7  0864               	movf	___ftadd@sign,w
  2492  00C8  3907               	andlw	7
  2493  00C9  1903               	btfsc	3,2
  2494  00CA  28D8               	goto	l2194
  2495  00CB  28B7               	goto	l2186
  2496  00CC                     l2192:	
  2497  00CC  3001               	movlw	1
  2498  00CD                     u2605:	
  2499  00CD  1003               	clrc
  2500  00CE  0CDF               	rrf	___ftadd@f2+2,f
  2501  00CF  0CDE               	rrf	___ftadd@f2+1,f
  2502  00D0  0CDD               	rrf	___ftadd@f2,f
  2503  00D1  3EFF               	addlw	-1
  2504  00D2  1D03               	skipz
  2505  00D3  28CD               	goto	u2605
  2506  00D4  3001               	movlw	1
  2507  00D5  00E0               	movwf	??___ftadd
  2508  00D6  0860               	movf	??___ftadd,w
  2509  00D7  07E5               	addwf	___ftadd@exp2,f
  2510  00D8                     l2194:	
  2511  00D8  0866               	movf	___ftadd@exp1,w
  2512  00D9  0665               	xorwf	___ftadd@exp2,w
  2513  00DA  1D03               	skipz
  2514  00DB  28CC               	goto	l2192
  2515  00DC                     l572:	
  2516  00DC  1FE4               	btfss	___ftadd@sign,7
  2517  00DD  28EE               	goto	l2198
  2518  00DE  30FF               	movlw	255
  2519  00DF  06DA               	xorwf	___ftadd@f1,f
  2520  00E0  30FF               	movlw	255
  2521  00E1  06DB               	xorwf	___ftadd@f1+1,f
  2522  00E2  30FF               	movlw	255
  2523  00E3  06DC               	xorwf	___ftadd@f1+2,f
  2524  00E4  3001               	movlw	1
  2525  00E5  07DA               	addwf	___ftadd@f1,f
  2526  00E6  3000               	movlw	0
  2527  00E7  1803               	skipnc
  2528  00E8  3001               	movlw	1
  2529  00E9  07DB               	addwf	___ftadd@f1+1,f
  2530  00EA  3000               	movlw	0
  2531  00EB  1803               	skipnc
  2532  00EC  3001               	movlw	1
  2533  00ED  07DC               	addwf	___ftadd@f1+2,f
  2534  00EE                     l2198:	
  2535  00EE  1F64               	btfss	___ftadd@sign,6
  2536  00EF  2900               	goto	l2202
  2537  00F0  30FF               	movlw	255
  2538  00F1  06DD               	xorwf	___ftadd@f2,f
  2539  00F2  30FF               	movlw	255
  2540  00F3  06DE               	xorwf	___ftadd@f2+1,f
  2541  00F4  30FF               	movlw	255
  2542  00F5  06DF               	xorwf	___ftadd@f2+2,f
  2543  00F6  3001               	movlw	1
  2544  00F7  07DD               	addwf	___ftadd@f2,f
  2545  00F8  3000               	movlw	0
  2546  00F9  1803               	skipnc
  2547  00FA  3001               	movlw	1
  2548  00FB  07DE               	addwf	___ftadd@f2+1,f
  2549  00FC  3000               	movlw	0
  2550  00FD  1803               	skipnc
  2551  00FE  3001               	movlw	1
  2552  00FF  07DF               	addwf	___ftadd@f2+2,f
  2553  0100                     l2202:	
  2554  0100  01E4               	clrf	___ftadd@sign
  2555  0101  085A               	movf	___ftadd@f1,w
  2556  0102  07DD               	addwf	___ftadd@f2,f
  2557  0103  085B               	movf	___ftadd@f1+1,w
  2558  0104  1103               	clrz
  2559  0105  1803               	skipnc
  2560  0106  0A5B               	incf	___ftadd@f1+1,w
  2561  0107  1D03               	btfss	3,2
  2562  0108  07DE               	addwf	___ftadd@f2+1,f
  2563  0109  085C               	movf	___ftadd@f1+2,w
  2564  010A  1103               	clrz
  2565  010B  1803               	skipnc
  2566  010C  0A5C               	incf	___ftadd@f1+2,w
  2567  010D  1D03               	btfss	3,2
  2568  010E  07DF               	addwf	___ftadd@f2+2,f
  2569  010F  1FDF               	btfss	___ftadd@f2+2,7
  2570  0110  2923               	goto	l2212
  2571  0111  30FF               	movlw	255
  2572  0112  06DD               	xorwf	___ftadd@f2,f
  2573  0113  30FF               	movlw	255
  2574  0114  06DE               	xorwf	___ftadd@f2+1,f
  2575  0115  30FF               	movlw	255
  2576  0116  06DF               	xorwf	___ftadd@f2+2,f
  2577  0117  3001               	movlw	1
  2578  0118  07DD               	addwf	___ftadd@f2,f
  2579  0119  3000               	movlw	0
  2580  011A  1803               	skipnc
  2581  011B  3001               	movlw	1
  2582  011C  07DE               	addwf	___ftadd@f2+1,f
  2583  011D  3000               	movlw	0
  2584  011E  1803               	skipnc
  2585  011F  3001               	movlw	1
  2586  0120  07DF               	addwf	___ftadd@f2+2,f
  2587  0121  01E4               	clrf	___ftadd@sign
  2588  0122  0AE4               	incf	___ftadd@sign,f
  2589  0123                     l2212:	
  2590  0123  085D               	movf	___ftadd@f2,w
  2591  0124  00A0               	movwf	___ftpack@arg
  2592  0125  085E               	movf	___ftadd@f2+1,w
  2593  0126  00A1               	movwf	___ftpack@arg+1
  2594  0127  085F               	movf	___ftadd@f2+2,w
  2595  0128  00A2               	movwf	___ftpack@arg+2
  2596  0129  0866               	movf	___ftadd@exp1,w
  2597  012A  00E0               	movwf	??___ftadd
  2598  012B  0860               	movf	??___ftadd,w
  2599  012C  00A3               	movwf	___ftpack@exp
  2600  012D  0864               	movf	___ftadd@sign,w
  2601  012E  00E1               	movwf	??___ftadd+1
  2602  012F  0861               	movf	??___ftadd+1,w
  2603  0130  00A4               	movwf	___ftpack@sign
  2604  0131  120A  118A  2516   	fcall	___ftpack
  2605  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0135  1303               	bcf	3,6	;RP1=0, select bank0
  2607  0136  0820               	movf	?___ftpack,w
  2608  0137  00DA               	movwf	?___ftadd
  2609  0138  0821               	movf	?___ftpack+1,w
  2610  0139  00DB               	movwf	?___ftadd+1
  2611  013A  0822               	movf	?___ftpack+2,w
  2612  013B  00DC               	movwf	?___ftadd+2
  2613  013C  0008               	return
  2614  013D                     __end_of___ftadd:	
  2615                           
  2616                           	psect	text12
  2617  0403                     __ptext12:	
  2618 ;; *************** function _move *****************
  2619 ;; Defined at:
  2620 ;;		line 25 in file "motor.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  steps           1    wreg     unsigned char 
  2623 ;;  direction       1   15[BANK0 ] unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  steps           1   18[BANK0 ] unsigned char 
  2626 ;;  i               1   19[BANK0 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2636 ;;      Params:         0       1       0       0       0
  2637 ;;      Locals:         0       2       0       0       0
  2638 ;;      Temps:          0       2       0       0       0
  2639 ;;      Totals:         0       5       0       0       0
  2640 ;;Total ram usage:        5 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    4
  2643 ;; This function calls:
  2644 ;;		_lcdSetCursor
  2645 ;;		_lcdWriteToDigitBCD
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;;		_moveDeg
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _move
  2654  0403                     _move:	
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2658                           ;move@steps stored from wreg
  2659  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0405  00B2               	movwf	move@steps
  2662                           
  2663                           ;motor.c: 26: for(char i = 0; i<steps; i++){
  2664  0406  01B3               	clrf	move@i
  2665  0407                     l2290:	
  2666  0407  0832               	movf	move@steps,w
  2667  0408  0233               	subwf	move@i,w
  2668  0409  1803               	btfsc	3,0
  2669  040A  0008               	return
  2670                           
  2671                           ;motor.c: 27: if(cstep == 7 && direction == 1){
  2672  040B  3007               	movlw	7
  2673  040C  0677               	xorwf	_cstep,w
  2674  040D  1D03               	btfss	3,2
  2675  040E  2C1A               	goto	l2252
  2676  040F  032F               	decf	move@direction,w
  2677  0410  1D03               	btfss	3,2
  2678  0411  2C1A               	goto	l2252
  2679                           
  2680                           ;motor.c: 28: PORTC = halfSteps[0];
  2681  0412  1683               	bsf	3,5	;RP0=1, select bank1
  2682  0413  1303               	bcf	3,6	;RP1=0, select bank1
  2683  0414  0820               	movf	_halfSteps^(0+128),w
  2684  0415  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0416  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0417  0087               	movwf	7	;volatile
  2687                           
  2688                           ;motor.c: 29: cstep = 0;
  2689  0418  01F7               	clrf	_cstep
  2690                           
  2691                           ;motor.c: 30: }
  2692  0419  2C52               	goto	l2274
  2693  041A                     l2252:	
  2694                           
  2695                           ;motor.c: 31: else if(cstep == 0 && direction == 0){
  2696  041A  0877               	movf	_cstep,w
  2697  041B  1D03               	btfss	3,2
  2698  041C  2C2B               	goto	l140
  2699  041D  082F               	movf	move@direction,w
  2700  041E  1D03               	btfss	3,2
  2701  041F  2C2B               	goto	l140
  2702                           
  2703                           ;motor.c: 32: PORTC = halfSteps[7];
  2704  0420  1683               	bsf	3,5	;RP0=1, select bank1
  2705  0421  1303               	bcf	3,6	;RP1=0, select bank1
  2706  0422  082E               	movf	(_halfSteps^(0+128)+14),w
  2707  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0425  0087               	movwf	7	;volatile
  2710                           
  2711                           ;motor.c: 33: cstep = 7;
  2712  0426  3007               	movlw	7
  2713  0427  00B0               	movwf	??_move
  2714  0428  0830               	movf	??_move,w
  2715  0429  00F7               	movwf	_cstep
  2716                           
  2717                           ;motor.c: 34: }
  2718  042A  2C52               	goto	l2274
  2719  042B                     l140:	
  2720                           
  2721                           ;motor.c: 35: else if (cstep >= 0 && cstep <= 7){
  2722  042B  1BF7               	btfsc	_cstep,7
  2723  042C  2C51               	goto	l2272
  2724  042D  0877               	movf	_cstep,w
  2725  042E  3A80               	xorlw	128
  2726  042F  3E78               	addlw	-136
  2727  0430  1803               	skipnc
  2728  0431  2C51               	goto	l2272
  2729                           
  2730                           ;motor.c: 36: if(direction == 1){
  2731  0432  032F               	decf	move@direction,w
  2732  0433  1D03               	btfss	3,2
  2733  0434  2C40               	goto	l2266
  2734                           
  2735                           ;motor.c: 37: PORTC = halfSteps[cstep+1];
  2736  0435  0877               	movf	_cstep,w
  2737  0436  00B0               	movwf	??_move
  2738  0437  0730               	addwf	??_move,w
  2739  0438  3E02               	addlw	2
  2740  0439  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2741  043A  0084               	movwf	4
  2742  043B  1383               	bcf	3,7	;select IRP bank1
  2743  043C  0800               	movf	0,w
  2744  043D  0087               	movwf	7	;volatile
  2745                           
  2746                           ;motor.c: 38: cstep++;
  2747  043E  3001               	movlw	1
  2748  043F  2C4D               	goto	L2
  2749  0440                     l2266:	
  2750                           ;motor.c: 39: }
  2751                           
  2752                           
  2753                           ;motor.c: 40: else if(direction == 0){
  2754  0440  082F               	movf	move@direction,w
  2755  0441  1D03               	btfss	3,2
  2756  0442  2C52               	goto	l2274
  2757                           
  2758                           ;motor.c: 41: PORTC = halfSteps[cstep-1];
  2759  0443  0877               	movf	_cstep,w
  2760  0444  00B0               	movwf	??_move
  2761  0445  0730               	addwf	??_move,w
  2762  0446  3EFE               	addlw	254
  2763  0447  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2764  0448  0084               	movwf	4
  2765  0449  1383               	bcf	3,7	;select IRP bank1
  2766  044A  0800               	movf	0,w
  2767  044B  0087               	movwf	7	;volatile
  2768                           
  2769                           ;motor.c: 42: cstep--;
  2770  044C  30FF               	movlw	255
  2771  044D                     L2:	
  2772  044D  00B0               	movwf	??_move
  2773  044E  0830               	movf	??_move,w
  2774  044F  07F7               	addwf	_cstep,f
  2775                           
  2776                           ;motor.c: 43: }
  2777                           ;motor.c: 45: }
  2778  0450  2C52               	goto	l2274
  2779  0451                     l2272:	
  2780                           
  2781                           ;motor.c: 46: else{
  2782                           ;motor.c: 47: PORTC = 0x00;
  2783  0451  0187               	clrf	7	;volatile
  2784  0452                     l2274:	
  2785                           
  2786                           ;motor.c: 48: }
  2787                           ;motor.c: 49: if(direction){
  2788  0452  082F               	movf	move@direction,w
  2789  0453  1903               	btfsc	3,2
  2790  0454  2C5D               	goto	l2282
  2791                           
  2792                           ;motor.c: 50: nrOfSteps--;
  2793  0455  30FF               	movlw	255
  2794  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2795  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0458  07C9               	addwf	_nrOfSteps^(0+128),f
  2797  0459  1803               	skipnc
  2798  045A  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2799  045B  30FF               	movlw	255
  2800  045C  2C64               	goto	L3
  2801  045D                     l2282:	
  2802                           ;motor.c: 53: }
  2803                           
  2804                           ;motor.c: 52: lcdWriteToDigitBCD(nrOfSteps);
  2805                           
  2806                           ;motor.c: 51: lcdSetCursor(0x40);
  2807                           
  2808                           
  2809                           ;motor.c: 54: else{
  2810                           ;motor.c: 55: nrOfSteps++;
  2811  045D  3001               	movlw	1
  2812  045E  1683               	bsf	3,5	;RP0=1, select bank1
  2813  045F  1303               	bcf	3,6	;RP1=0, select bank1
  2814  0460  07C9               	addwf	_nrOfSteps^(0+128),f
  2815  0461  1803               	skipnc
  2816  0462  0ACA               	incf	(_nrOfSteps+1)^(0+128),f
  2817  0463  3000               	movlw	0
  2818  0464                     L3:	
  2819  0464  07CA               	addwf	(_nrOfSteps+1)^(0+128),f
  2820                           
  2821                           ;motor.c: 56: lcdSetCursor(0x40);
  2822  0465  3040               	movlw	64
  2823  0466  120A  158A  275F  120A  118A  	fcall	_lcdSetCursor
  2824                           
  2825                           ;motor.c: 57: lcdWriteToDigitBCD(nrOfSteps);
  2826  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2827  046C  1303               	bcf	3,6	;RP1=0, select bank1
  2828  046D  084A               	movf	(_nrOfSteps+1)^(0+128),w
  2829  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2830  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0470  00A7               	movwf	lcdWriteToDigitBCD@data+1
  2832  0471  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0472  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0473  0849               	movf	_nrOfSteps^(0+128),w
  2835  0474  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0475  1303               	bcf	3,6	;RP1=0, select bank0
  2837  0476  00A6               	movwf	lcdWriteToDigitBCD@data
  2838  0477  120A  118A  248E  120A  118A  	fcall	_lcdWriteToDigitBCD
  2839                           
  2840                           ;motor.c: 58: }
  2841                           ;motor.c: 59: _delay((unsigned long)((20)*(20000000/4000.0)));
  2842  047C  3082               	movlw	130
  2843  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2844  047E  1303               	bcf	3,6	;RP1=0, select bank0
  2845  047F  00B1               	movwf	??_move+1
  2846  0480  30DD               	movlw	221
  2847  0481  00B0               	movwf	??_move
  2848  0482                     u2977:	
  2849  0482  0BB0               	decfsz	??_move,f
  2850  0483  2C82               	goto	u2977
  2851  0484  0BB1               	decfsz	??_move+1,f
  2852  0485  2C82               	goto	u2977
  2853  0486  2C87               	nop2
  2854  0487  3001               	movlw	1
  2855  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2857  048A  00B0               	movwf	??_move
  2858  048B  0830               	movf	??_move,w
  2859  048C  07B3               	addwf	move@i,f
  2860  048D  2C07               	goto	l2290
  2861  048E                     __end_of_move:	
  2862                           
  2863                           	psect	text13
  2864  05E4                     __ptext13:	
  2865 ;; *************** function ___ftge *****************
  2866 ;; Defined at:
  2867 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  ff1             3    0[BANK0 ] float 
  2870 ;;  ff2             3    3[BANK0 ] float 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;		None               void
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2882 ;;      Params:         0       6       0       0       0
  2883 ;;      Locals:         0       0       0       0       0
  2884 ;;      Temps:          0       6       0       0       0
  2885 ;;      Totals:         0      12       0       0       0
  2886 ;;Total ram usage:       12 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    2
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_moveDeg
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function ___ftge
  2898  05E4                     ___ftge:	
  2899                           
  2900                           ;incstack = 0
  2901                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2902  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2903  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2904  05E6  1FA2               	btfss	___ftge@ff1+2,7
  2905  05E7  2E0D               	goto	l1784
  2906  05E8  3000               	movlw	0
  2907  05E9  00A6               	movwf	??___ftge
  2908  05EA  3000               	movlw	0
  2909  05EB  00A7               	movwf	??___ftge+1
  2910  05EC  3080               	movlw	128
  2911  05ED  00A8               	movwf	??___ftge+2
  2912  05EE  0920               	comf	___ftge@ff1,w
  2913  05EF  00A9               	movwf	??___ftge+3
  2914  05F0  0921               	comf	___ftge@ff1+1,w
  2915  05F1  00AA               	movwf	??___ftge+4
  2916  05F2  0922               	comf	___ftge@ff1+2,w
  2917  05F3  00AB               	movwf	??___ftge+5
  2918  05F4  0AA9               	incf	??___ftge+3,f
  2919  05F5  1903               	skipnz
  2920  05F6  0AAA               	incf	??___ftge+4,f
  2921  05F7  1903               	skipnz
  2922  05F8  0AAB               	incf	??___ftge+5,f
  2923  05F9  0829               	movf	??___ftge+3,w
  2924  05FA  07A6               	addwf	??___ftge,f
  2925  05FB  082A               	movf	??___ftge+4,w
  2926  05FC  1803               	skipnc
  2927  05FD  0F2A               	incfsz	??___ftge+4,w
  2928  05FE  2E00               	goto	u1901
  2929  05FF  2E01               	goto	u1902
  2930  0600                     u1901:	
  2931  0600  07A7               	addwf	??___ftge+1,f
  2932  0601                     u1902:	
  2933  0601  082B               	movf	??___ftge+5,w
  2934  0602  1803               	skipnc
  2935  0603  0F2B               	incfsz	??___ftge+5,w
  2936  0604  2E06               	goto	u1903
  2937  0605  2E07               	goto	u1904
  2938  0606                     u1903:	
  2939  0606  07A8               	addwf	??___ftge+2,f
  2940  0607                     u1904:	
  2941  0607  0826               	movf	??___ftge,w
  2942  0608  00A0               	movwf	___ftge@ff1
  2943  0609  0827               	movf	??___ftge+1,w
  2944  060A  00A1               	movwf	___ftge@ff1+1
  2945  060B  0828               	movf	??___ftge+2,w
  2946  060C  00A2               	movwf	___ftge@ff1+2
  2947  060D                     l1784:	
  2948  060D  1FA5               	btfss	___ftge@ff2+2,7
  2949  060E  2E34               	goto	l1788
  2950  060F  3000               	movlw	0
  2951  0610  00A6               	movwf	??___ftge
  2952  0611  3000               	movlw	0
  2953  0612  00A7               	movwf	??___ftge+1
  2954  0613  3080               	movlw	128
  2955  0614  00A8               	movwf	??___ftge+2
  2956  0615  0923               	comf	___ftge@ff2,w
  2957  0616  00A9               	movwf	??___ftge+3
  2958  0617  0924               	comf	___ftge@ff2+1,w
  2959  0618  00AA               	movwf	??___ftge+4
  2960  0619  0925               	comf	___ftge@ff2+2,w
  2961  061A  00AB               	movwf	??___ftge+5
  2962  061B  0AA9               	incf	??___ftge+3,f
  2963  061C  1903               	skipnz
  2964  061D  0AAA               	incf	??___ftge+4,f
  2965  061E  1903               	skipnz
  2966  061F  0AAB               	incf	??___ftge+5,f
  2967  0620  0829               	movf	??___ftge+3,w
  2968  0621  07A6               	addwf	??___ftge,f
  2969  0622  082A               	movf	??___ftge+4,w
  2970  0623  1803               	skipnc
  2971  0624  0F2A               	incfsz	??___ftge+4,w
  2972  0625  2E27               	goto	u1921
  2973  0626  2E28               	goto	u1922
  2974  0627                     u1921:	
  2975  0627  07A7               	addwf	??___ftge+1,f
  2976  0628                     u1922:	
  2977  0628  082B               	movf	??___ftge+5,w
  2978  0629  1803               	skipnc
  2979  062A  0F2B               	incfsz	??___ftge+5,w
  2980  062B  2E2D               	goto	u1923
  2981  062C  2E2E               	goto	u1924
  2982  062D                     u1923:	
  2983  062D  07A8               	addwf	??___ftge+2,f
  2984  062E                     u1924:	
  2985  062E  0826               	movf	??___ftge,w
  2986  062F  00A3               	movwf	___ftge@ff2
  2987  0630  0827               	movf	??___ftge+1,w
  2988  0631  00A4               	movwf	___ftge@ff2+1
  2989  0632  0828               	movf	??___ftge+2,w
  2990  0633  00A5               	movwf	___ftge@ff2+2
  2991  0634                     l1788:	
  2992  0634  3080               	movlw	128
  2993  0635  06A2               	xorwf	___ftge@ff1+2,f
  2994  0636  3080               	movlw	128
  2995  0637  06A5               	xorwf	___ftge@ff2+2,f
  2996  0638  0825               	movf	___ftge@ff2+2,w
  2997  0639  0222               	subwf	___ftge@ff1+2,w
  2998  063A  1D03               	skipz
  2999  063B  0008               	return
  3000  063C  0824               	movf	___ftge@ff2+1,w
  3001  063D  0221               	subwf	___ftge@ff1+1,w
  3002  063E  1D03               	skipz
  3003  063F  0008               	return
  3004  0640  0823               	movf	___ftge@ff2,w
  3005  0641  0220               	subwf	___ftge@ff1,w
  3006  0642  0008               	return
  3007  0643                     __end_of___ftge:	
  3008                           
  3009                           	psect	text14
  3010  022C                     __ptext14:	
  3011 ;; *************** function ___ftdiv *****************
  3012 ;; Defined at:
  3013 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  f2              3   19[BANK0 ] float 
  3016 ;;  f1              3   22[BANK0 ] float 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  f3              3   30[BANK0 ] float 
  3019 ;;  sign            1   34[BANK0 ] unsigned char 
  3020 ;;  exp             1   33[BANK0 ] unsigned char 
  3021 ;;  cntr            1   29[BANK0 ] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  3   19[BANK0 ] float 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, pclath, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3031 ;;      Params:         0       6       0       0       0
  3032 ;;      Locals:         0       6       0       0       0
  3033 ;;      Temps:          0       4       0       0       0
  3034 ;;      Totals:         0      16       0       0       0
  3035 ;;Total ram usage:       16 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    3
  3038 ;; This function calls:
  3039 ;;		___ftpack
  3040 ;; This function is called by:
  3041 ;;		_moveDeg
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function ___ftdiv
  3047  022C                     ___ftdiv:	
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3051  022C  1283               	bcf	3,5	;RP0=0, select bank0
  3052  022D  1303               	bcf	3,6	;RP1=0, select bank0
  3053  022E  0836               	movf	___ftdiv@f1,w
  3054  022F  00B9               	movwf	??___ftdiv
  3055  0230  0837               	movf	___ftdiv@f1+1,w
  3056  0231  00BA               	movwf	??___ftdiv+1
  3057  0232  0838               	movf	___ftdiv@f1+2,w
  3058  0233  00BB               	movwf	??___ftdiv+2
  3059  0234  1003               	clrc
  3060  0235  0D3A               	rlf	??___ftdiv+1,w
  3061  0236  0D3B               	rlf	??___ftdiv+2,w
  3062  0237  00BC               	movwf	??___ftdiv+3
  3063  0238  083C               	movf	??___ftdiv+3,w
  3064  0239  00C1               	movwf	___ftdiv@exp
  3065  023A  0841               	movf	___ftdiv@exp,w
  3066  023B  1D03               	btfss	3,2
  3067  023C  2A44               	goto	l2306
  3068  023D  3000               	movlw	0
  3069  023E  00B3               	movwf	?___ftdiv
  3070  023F  3000               	movlw	0
  3071  0240  00B4               	movwf	?___ftdiv+1
  3072  0241  3000               	movlw	0
  3073  0242  00B5               	movwf	?___ftdiv+2
  3074  0243  0008               	return
  3075  0244                     l2306:	
  3076  0244  0833               	movf	___ftdiv@f2,w
  3077  0245  00B9               	movwf	??___ftdiv
  3078  0246  0834               	movf	___ftdiv@f2+1,w
  3079  0247  00BA               	movwf	??___ftdiv+1
  3080  0248  0835               	movf	___ftdiv@f2+2,w
  3081  0249  00BB               	movwf	??___ftdiv+2
  3082  024A  1003               	clrc
  3083  024B  0D3A               	rlf	??___ftdiv+1,w
  3084  024C  0D3B               	rlf	??___ftdiv+2,w
  3085  024D  00BC               	movwf	??___ftdiv+3
  3086  024E  083C               	movf	??___ftdiv+3,w
  3087  024F  00C2               	movwf	___ftdiv@sign
  3088  0250  0842               	movf	___ftdiv@sign,w
  3089  0251  1D03               	btfss	3,2
  3090  0252  2A5A               	goto	l2312
  3091  0253  3000               	movlw	0
  3092  0254  00B3               	movwf	?___ftdiv
  3093  0255  3000               	movlw	0
  3094  0256  00B4               	movwf	?___ftdiv+1
  3095  0257  3000               	movlw	0
  3096  0258  00B5               	movwf	?___ftdiv+2
  3097  0259  0008               	return
  3098  025A                     l2312:	
  3099  025A  3000               	movlw	0
  3100  025B  00BE               	movwf	___ftdiv@f3
  3101  025C  3000               	movlw	0
  3102  025D  00BF               	movwf	___ftdiv@f3+1
  3103  025E  3000               	movlw	0
  3104  025F  00C0               	movwf	___ftdiv@f3+2
  3105  0260  3089               	movlw	137
  3106  0261  0742               	addwf	___ftdiv@sign,w
  3107  0262  00B9               	movwf	??___ftdiv
  3108  0263  0839               	movf	??___ftdiv,w
  3109  0264  02C1               	subwf	___ftdiv@exp,f
  3110  0265  0836               	movf	___ftdiv@f1,w
  3111  0266  00B9               	movwf	??___ftdiv
  3112  0267  0837               	movf	___ftdiv@f1+1,w
  3113  0268  00BA               	movwf	??___ftdiv+1
  3114  0269  0838               	movf	___ftdiv@f1+2,w
  3115  026A  00BB               	movwf	??___ftdiv+2
  3116  026B  3010               	movlw	16
  3117  026C                     u2815:	
  3118  026C  1003               	clrc
  3119  026D  0CBB               	rrf	??___ftdiv+2,f
  3120  026E  0CBA               	rrf	??___ftdiv+1,f
  3121  026F  0CB9               	rrf	??___ftdiv,f
  3122  0270  3EFF               	addlw	-1
  3123  0271  1D03               	skipz
  3124  0272  2A6C               	goto	u2815
  3125  0273  0839               	movf	??___ftdiv,w
  3126  0274  00BC               	movwf	??___ftdiv+3
  3127  0275  083C               	movf	??___ftdiv+3,w
  3128  0276  00C2               	movwf	___ftdiv@sign
  3129  0277  0833               	movf	___ftdiv@f2,w
  3130  0278  00B9               	movwf	??___ftdiv
  3131  0279  0834               	movf	___ftdiv@f2+1,w
  3132  027A  00BA               	movwf	??___ftdiv+1
  3133  027B  0835               	movf	___ftdiv@f2+2,w
  3134  027C  00BB               	movwf	??___ftdiv+2
  3135  027D  3010               	movlw	16
  3136  027E                     u2825:	
  3137  027E  1003               	clrc
  3138  027F  0CBB               	rrf	??___ftdiv+2,f
  3139  0280  0CBA               	rrf	??___ftdiv+1,f
  3140  0281  0CB9               	rrf	??___ftdiv,f
  3141  0282  3EFF               	addlw	-1
  3142  0283  1D03               	skipz
  3143  0284  2A7E               	goto	u2825
  3144  0285  0839               	movf	??___ftdiv,w
  3145  0286  00BC               	movwf	??___ftdiv+3
  3146  0287  083C               	movf	??___ftdiv+3,w
  3147  0288  06C2               	xorwf	___ftdiv@sign,f
  3148  0289  3080               	movlw	128
  3149  028A  00B9               	movwf	??___ftdiv
  3150  028B  0839               	movf	??___ftdiv,w
  3151  028C  05C2               	andwf	___ftdiv@sign,f
  3152  028D  17B7               	bsf	___ftdiv@f1+1,7
  3153  028E  30FF               	movlw	255
  3154  028F  05B6               	andwf	___ftdiv@f1,f
  3155  0290  30FF               	movlw	255
  3156  0291  05B7               	andwf	___ftdiv@f1+1,f
  3157  0292  3000               	movlw	0
  3158  0293  05B8               	andwf	___ftdiv@f1+2,f
  3159  0294  17B4               	bsf	___ftdiv@f2+1,7
  3160  0295  30FF               	movlw	255
  3161  0296  05B3               	andwf	___ftdiv@f2,f
  3162  0297  30FF               	movlw	255
  3163  0298  05B4               	andwf	___ftdiv@f2+1,f
  3164  0299  3000               	movlw	0
  3165  029A  05B5               	andwf	___ftdiv@f2+2,f
  3166  029B  3018               	movlw	24
  3167  029C  00B9               	movwf	??___ftdiv
  3168  029D  0839               	movf	??___ftdiv,w
  3169  029E  00BD               	movwf	___ftdiv@cntr
  3170  029F                     l2326:	
  3171  029F  3001               	movlw	1
  3172  02A0                     u2835:	
  3173  02A0  1003               	clrc
  3174  02A1  0DBE               	rlf	___ftdiv@f3,f
  3175  02A2  0DBF               	rlf	___ftdiv@f3+1,f
  3176  02A3  0DC0               	rlf	___ftdiv@f3+2,f
  3177  02A4  3EFF               	addlw	-1
  3178  02A5  1D03               	skipz
  3179  02A6  2AA0               	goto	u2835
  3180  02A7  0835               	movf	___ftdiv@f2+2,w
  3181  02A8  0238               	subwf	___ftdiv@f1+2,w
  3182  02A9  1D03               	skipz
  3183  02AA  2AB1               	goto	u2845
  3184  02AB  0834               	movf	___ftdiv@f2+1,w
  3185  02AC  0237               	subwf	___ftdiv@f1+1,w
  3186  02AD  1D03               	skipz
  3187  02AE  2AB1               	goto	u2845
  3188  02AF  0833               	movf	___ftdiv@f2,w
  3189  02B0  0236               	subwf	___ftdiv@f1,w
  3190  02B1                     u2845:	
  3191  02B1  1C03               	skipc
  3192  02B2  2ABE               	goto	l2334
  3193  02B3  0833               	movf	___ftdiv@f2,w
  3194  02B4  02B6               	subwf	___ftdiv@f1,f
  3195  02B5  0834               	movf	___ftdiv@f2+1,w
  3196  02B6  1C03               	skipc
  3197  02B7  0F34               	incfsz	___ftdiv@f2+1,w
  3198  02B8  02B7               	subwf	___ftdiv@f1+1,f
  3199  02B9  0835               	movf	___ftdiv@f2+2,w
  3200  02BA  1C03               	skipc
  3201  02BB  0A35               	incf	___ftdiv@f2+2,w
  3202  02BC  02B8               	subwf	___ftdiv@f1+2,f
  3203  02BD  143E               	bsf	___ftdiv@f3,0
  3204  02BE                     l2334:	
  3205  02BE  3001               	movlw	1
  3206  02BF                     u2855:	
  3207  02BF  1003               	clrc
  3208  02C0  0DB6               	rlf	___ftdiv@f1,f
  3209  02C1  0DB7               	rlf	___ftdiv@f1+1,f
  3210  02C2  0DB8               	rlf	___ftdiv@f1+2,f
  3211  02C3  3EFF               	addlw	-1
  3212  02C4  1D03               	skipz
  3213  02C5  2ABF               	goto	u2855
  3214  02C6  3001               	movlw	1
  3215  02C7  02BD               	subwf	___ftdiv@cntr,f
  3216  02C8  1D03               	btfss	3,2
  3217  02C9  2A9F               	goto	l2326
  3218  02CA  083E               	movf	___ftdiv@f3,w
  3219  02CB  00A0               	movwf	___ftpack@arg
  3220  02CC  083F               	movf	___ftdiv@f3+1,w
  3221  02CD  00A1               	movwf	___ftpack@arg+1
  3222  02CE  0840               	movf	___ftdiv@f3+2,w
  3223  02CF  00A2               	movwf	___ftpack@arg+2
  3224  02D0  0841               	movf	___ftdiv@exp,w
  3225  02D1  00B9               	movwf	??___ftdiv
  3226  02D2  0839               	movf	??___ftdiv,w
  3227  02D3  00A3               	movwf	___ftpack@exp
  3228  02D4  0842               	movf	___ftdiv@sign,w
  3229  02D5  00BA               	movwf	??___ftdiv+1
  3230  02D6  083A               	movf	??___ftdiv+1,w
  3231  02D7  00A4               	movwf	___ftpack@sign
  3232  02D8  120A  118A  2516   	fcall	___ftpack
  3233  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3234  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  3235  02DD  0820               	movf	?___ftpack,w
  3236  02DE  00B3               	movwf	?___ftdiv
  3237  02DF  0821               	movf	?___ftpack+1,w
  3238  02E0  00B4               	movwf	?___ftdiv+1
  3239  02E1  0822               	movf	?___ftpack+2,w
  3240  02E2  00B5               	movwf	?___ftdiv+2
  3241  02E3  0008               	return
  3242  02E4                     __end_of___ftdiv:	
  3243                           
  3244                           	psect	text15
  3245  0516                     __ptext15:	
  3246 ;; *************** function ___ftpack *****************
  3247 ;; Defined at:
  3248 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  arg             3    0[BANK0 ] unsigned um
  3251 ;;  exp             1    3[BANK0 ] unsigned char 
  3252 ;;  sign            1    4[BANK0 ] unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  3    0[BANK0 ] float 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3264 ;;      Params:         0       5       0       0       0
  3265 ;;      Locals:         0       0       0       0       0
  3266 ;;      Temps:          0       3       0       0       0
  3267 ;;      Totals:         0       8       0       0       0
  3268 ;;Total ram usage:        8 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    2
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		___altoft
  3275 ;;		___ftadd
  3276 ;;		___ftdiv
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function ___ftpack
  3282  0516                     ___ftpack:	
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3286  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0518  0823               	movf	___ftpack@exp,w
  3289  0519  1903               	btfsc	3,2
  3290  051A  2D20               	goto	l2022
  3291  051B  0822               	movf	___ftpack@arg+2,w
  3292  051C  0421               	iorwf	___ftpack@arg+1,w
  3293  051D  0420               	iorwf	___ftpack@arg,w
  3294  051E  1D03               	skipz
  3295  051F  2D33               	goto	l2028
  3296  0520                     l2022:	
  3297  0520  3000               	movlw	0
  3298  0521  00A0               	movwf	?___ftpack
  3299  0522  3000               	movlw	0
  3300  0523  00A1               	movwf	?___ftpack+1
  3301  0524  3000               	movlw	0
  3302  0525  00A2               	movwf	?___ftpack+2
  3303  0526  0008               	return
  3304  0527                     l2026:	
  3305  0527  3001               	movlw	1
  3306  0528  00A5               	movwf	??___ftpack
  3307  0529  0825               	movf	??___ftpack,w
  3308  052A  07A3               	addwf	___ftpack@exp,f
  3309  052B  3001               	movlw	1
  3310  052C                     u2195:	
  3311  052C  1003               	clrc
  3312  052D  0CA2               	rrf	___ftpack@arg+2,f
  3313  052E  0CA1               	rrf	___ftpack@arg+1,f
  3314  052F  0CA0               	rrf	___ftpack@arg,f
  3315  0530  3EFF               	addlw	-1
  3316  0531  1D03               	skipz
  3317  0532  2D2C               	goto	u2195
  3318  0533                     l2028:	
  3319  0533  30FE               	movlw	254
  3320  0534  0522               	andwf	___ftpack@arg+2,w
  3321  0535  1903               	btfsc	3,2
  3322  0536  2D4E               	goto	l541
  3323  0537  2D27               	goto	l2026
  3324  0538                     l2030:	
  3325  0538  3001               	movlw	1
  3326  0539  00A5               	movwf	??___ftpack
  3327  053A  0825               	movf	??___ftpack,w
  3328  053B  07A3               	addwf	___ftpack@exp,f
  3329  053C  3001               	movlw	1
  3330  053D  07A0               	addwf	___ftpack@arg,f
  3331  053E  3000               	movlw	0
  3332  053F  1803               	skipnc
  3333  0540  3001               	movlw	1
  3334  0541  07A1               	addwf	___ftpack@arg+1,f
  3335  0542  3000               	movlw	0
  3336  0543  1803               	skipnc
  3337  0544  3001               	movlw	1
  3338  0545  07A2               	addwf	___ftpack@arg+2,f
  3339  0546  3001               	movlw	1
  3340  0547                     u2215:	
  3341  0547  1003               	clrc
  3342  0548  0CA2               	rrf	___ftpack@arg+2,f
  3343  0549  0CA1               	rrf	___ftpack@arg+1,f
  3344  054A  0CA0               	rrf	___ftpack@arg,f
  3345  054B  3EFF               	addlw	-1
  3346  054C  1D03               	skipz
  3347  054D  2D47               	goto	u2215
  3348  054E                     l541:	
  3349  054E  30FF               	movlw	255
  3350  054F  0522               	andwf	___ftpack@arg+2,w
  3351  0550  1903               	btfsc	3,2
  3352  0551  2D5D               	goto	l2038
  3353  0552  2D38               	goto	l2030
  3354  0553                     l2036:	
  3355  0553  3001               	movlw	1
  3356  0554  02A3               	subwf	___ftpack@exp,f
  3357  0555  3001               	movlw	1
  3358  0556                     u2235:	
  3359  0556  1003               	clrc
  3360  0557  0DA0               	rlf	___ftpack@arg,f
  3361  0558  0DA1               	rlf	___ftpack@arg+1,f
  3362  0559  0DA2               	rlf	___ftpack@arg+2,f
  3363  055A  3EFF               	addlw	-1
  3364  055B  1D03               	skipz
  3365  055C  2D56               	goto	u2235
  3366  055D                     l2038:	
  3367  055D  1BA1               	btfsc	___ftpack@arg+1,7
  3368  055E  2D63               	goto	l548
  3369  055F  3002               	movlw	2
  3370  0560  0223               	subwf	___ftpack@exp,w
  3371  0561  1803               	skipnc
  3372  0562  2D53               	goto	l2036
  3373  0563                     l548:	
  3374  0563  1823               	btfsc	___ftpack@exp,0
  3375  0564  2D6B               	goto	l549
  3376  0565  30FF               	movlw	255
  3377  0566  05A0               	andwf	___ftpack@arg,f
  3378  0567  307F               	movlw	127
  3379  0568  05A1               	andwf	___ftpack@arg+1,f
  3380  0569  30FF               	movlw	255
  3381  056A  05A2               	andwf	___ftpack@arg+2,f
  3382  056B                     l549:	
  3383  056B  1003               	clrc
  3384  056C  0CA3               	rrf	___ftpack@exp,f
  3385  056D  0823               	movf	___ftpack@exp,w
  3386  056E  00A5               	movwf	??___ftpack
  3387  056F  01A6               	clrf	??___ftpack+1
  3388  0570  01A7               	clrf	??___ftpack+2
  3389  0571  3010               	movlw	16
  3390  0572                     u2275:	
  3391  0572  1003               	clrc
  3392  0573  0DA5               	rlf	??___ftpack,f
  3393  0574  0DA6               	rlf	??___ftpack+1,f
  3394  0575  0DA7               	rlf	??___ftpack+2,f
  3395  0576  3EFF               	addlw	-1
  3396  0577  1D03               	skipz
  3397  0578  2D72               	goto	u2275
  3398  0579  0825               	movf	??___ftpack,w
  3399  057A  04A0               	iorwf	___ftpack@arg,f
  3400  057B  0826               	movf	??___ftpack+1,w
  3401  057C  04A1               	iorwf	___ftpack@arg+1,f
  3402  057D  0827               	movf	??___ftpack+2,w
  3403  057E  04A2               	iorwf	___ftpack@arg+2,f
  3404  057F  0824               	movf	___ftpack@sign,w
  3405  0580  1903               	btfsc	3,2
  3406  0581  0008               	return
  3407  0582  17A2               	bsf	___ftpack@arg+2,7
  3408  0583  0008               	return
  3409  0584                     __end_of___ftpack:	
  3410                           
  3411                           	psect	text16
  3412  07D9                     __ptext16:	
  3413 ;; *************** function _initializeMotor *****************
  3414 ;; Defined at:
  3415 ;;		line 19 in file "motor.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  2   40[None  ] int 
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0, pclath, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3429 ;;      Params:         0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0
  3431 ;;      Temps:          0       0       0       0       0
  3432 ;;      Totals:         0       0       0       0       0
  3433 ;;Total ram usage:        0 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    4
  3436 ;; This function calls:
  3437 ;;		_lcdSetCursor
  3438 ;;		_lcdWriteToDigitBCD
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _initializeMotor
  3446  07D9                     _initializeMotor:	
  3447                           
  3448                           ;motor.c: 20: PORTC = halfSteps[0];
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in _initializeMotor: [wreg+status,2+status,0+pclath+cstack]
  3452  07D9  1683               	bsf	3,5	;RP0=1, select bank1
  3453  07DA  1303               	bcf	3,6	;RP1=0, select bank1
  3454  07DB  0820               	movf	_halfSteps^(0+128),w
  3455  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  3456  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  3457  07DE  0087               	movwf	7	;volatile
  3458                           
  3459                           ;motor.c: 21: lcdSetCursor(0x40);
  3460  07DF  3040               	movlw	64
  3461  07E0  120A  158A  275F  120A  118A  	fcall	_lcdSetCursor
  3462                           
  3463                           ;motor.c: 22: lcdWriteToDigitBCD(nrOfSteps);
  3464  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  3465  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  3466  07E7  084A               	movf	(_nrOfSteps+1)^(0+128),w
  3467  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  3468  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  3469  07EA  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3470  07EB  1683               	bsf	3,5	;RP0=1, select bank1
  3471  07EC  1303               	bcf	3,6	;RP1=0, select bank1
  3472  07ED  0849               	movf	_nrOfSteps^(0+128),w
  3473  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  3474  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  3475  07F0  00A6               	movwf	lcdWriteToDigitBCD@data
  3476  07F1  120A  118A  248E   	fcall	_lcdWriteToDigitBCD
  3477  07F4  0008               	return
  3478  07F5                     __end_of_initializeMotor:	
  3479                           
  3480                           	psect	text17
  3481  048E                     __ptext17:	
  3482 ;; *************** function _lcdWriteToDigitBCD *****************
  3483 ;; Defined at:
  3484 ;;		line 39 in file "lcd.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  data            2    6[BANK0 ] int 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  3489 ;;  sign            1   12[BANK0 ] char 
  3490 ;;  ThousandDigi    1   11[BANK0 ] unsigned char 
  3491 ;;  HundredDigit    1   10[BANK0 ] unsigned char 
  3492 ;;  TensDigit       1    9[BANK0 ] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, pclath, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         0       2       0       0       0
  3503 ;;      Locals:         0       6       0       0       0
  3504 ;;      Temps:          0       1       0       0       0
  3505 ;;      Totals:         0       9       0       0       0
  3506 ;;Total ram usage:        9 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    3
  3509 ;; This function calls:
  3510 ;;		___wmul
  3511 ;;		_lcdWriteData
  3512 ;; This function is called by:
  3513 ;;		_main
  3514 ;;		_initializeMotor
  3515 ;;		_move
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _lcdWriteToDigitBCD
  3521  048E                     _lcdWriteToDigitBCD:	
  3522                           
  3523                           ;lcd.c: 40: unsigned int OnesDigit;
  3524                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  3525                           ;lcd.c: 42: signed char sign = 1;
  3526                           
  3527                           ;incstack = 0
  3528                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  3529  048E  1283               	bcf	3,5	;RP0=0, select bank0
  3530  048F  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0490  01AC               	clrf	lcdWriteToDigitBCD@sign
  3532  0491  0AAC               	incf	lcdWriteToDigitBCD@sign,f
  3533                           
  3534                           ;lcd.c: 43: if(data<0)
  3535  0492  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  3536  0493  2C96               	goto	l2120
  3537                           
  3538                           ;lcd.c: 44: sign = -1;
  3539  0494  01AC               	clrf	lcdWriteToDigitBCD@sign
  3540  0495  03AC               	decf	lcdWriteToDigitBCD@sign,f
  3541  0496                     l2120:	
  3542                           
  3543                           ;lcd.c: 46: OnesDigit = data*sign;
  3544  0496  082C               	movf	lcdWriteToDigitBCD@sign,w
  3545  0497  00A0               	movwf	___wmul@multiplier
  3546  0498  01A1               	clrf	___wmul@multiplier+1
  3547  0499  1BA0               	btfsc	___wmul@multiplier,7
  3548  049A  03A1               	decf	___wmul@multiplier+1,f
  3549  049B  0827               	movf	lcdWriteToDigitBCD@data+1,w
  3550  049C  00A3               	movwf	___wmul@multiplicand+1
  3551  049D  0826               	movf	lcdWriteToDigitBCD@data,w
  3552  049E  00A2               	movwf	___wmul@multiplicand
  3553  049F  120A  118A  27B6  120A  118A  	fcall	___wmul
  3554  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  3555  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  3556  04A6  0821               	movf	?___wmul+1,w
  3557  04A7  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3558  04A8  0820               	movf	?___wmul,w
  3559  04A9  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3560                           
  3561                           ;lcd.c: 47: ThousandDigit = 0;
  3562  04AA  01AB               	clrf	lcdWriteToDigitBCD@ThousandDigit
  3563                           
  3564                           ;lcd.c: 48: HundredDigit = 0;
  3565  04AB  01AA               	clrf	lcdWriteToDigitBCD@HundredDigit
  3566                           
  3567                           ;lcd.c: 49: TensDigit = 0;
  3568  04AC  01A9               	clrf	lcdWriteToDigitBCD@TensDigit
  3569  04AD                     l2130:	
  3570                           ;lcd.c: 53: while(OnesDigit >= 1000){
  3571                           
  3572  04AD  3003               	movlw	3
  3573  04AE  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3574  04AF  30E8               	movlw	232
  3575  04B0  1903               	skipnz
  3576  04B1  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3577  04B2  1C03               	btfss	3,0
  3578  04B3  2CCD               	goto	l2134
  3579                           
  3580                           ;lcd.c: 54: OnesDigit = OnesDigit - 1000;
  3581  04B4  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3582  04B5  3E18               	addlw	24
  3583  04B6  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3584  04B7  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3585  04B8  1803               	skipnc
  3586  04B9  3E01               	addlw	1
  3587  04BA  3EFC               	addlw	252
  3588  04BB  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3589                           
  3590                           ;lcd.c: 55: ThousandDigit++;
  3591  04BC  3001               	movlw	1
  3592  04BD  00A8               	movwf	??_lcdWriteToDigitBCD
  3593  04BE  0828               	movf	??_lcdWriteToDigitBCD,w
  3594  04BF  07AB               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  3595  04C0  2CAD               	goto	l2130
  3596  04C1                     l2132:	
  3597                           ;lcd.c: 56: }
  3598                           ;lcd.c: 57: while(OnesDigit >= 100){
  3599                           
  3600                           
  3601                           ;lcd.c: 58: OnesDigit = OnesDigit - 100;
  3602  04C1  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3603  04C2  3E9C               	addlw	156
  3604  04C3  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3605  04C4  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3606  04C5  1803               	skipnc
  3607  04C6  3E01               	addlw	1
  3608  04C7  3EFF               	addlw	255
  3609  04C8  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3610                           
  3611                           ;lcd.c: 59: HundredDigit++;
  3612  04C9  3001               	movlw	1
  3613  04CA  00A8               	movwf	??_lcdWriteToDigitBCD
  3614  04CB  0828               	movf	??_lcdWriteToDigitBCD,w
  3615  04CC  07AA               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  3616  04CD                     l2134:	
  3617  04CD  3000               	movlw	0
  3618  04CE  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3619  04CF  3064               	movlw	100
  3620  04D0  1903               	skipnz
  3621  04D1  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3622  04D2  1C03               	btfss	3,0
  3623  04D3  2CE1               	goto	l2138
  3624  04D4  2CC1               	goto	l2132
  3625  04D5                     l2136:	
  3626                           ;lcd.c: 60: }
  3627                           ;lcd.c: 61: while (OnesDigit >= 10){
  3628                           
  3629                           
  3630                           ;lcd.c: 62: OnesDigit = OnesDigit - 10;
  3631  04D5  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3632  04D6  3EF6               	addlw	246
  3633  04D7  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3634  04D8  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3635  04D9  1803               	skipnc
  3636  04DA  3E01               	addlw	1
  3637  04DB  3EFF               	addlw	255
  3638  04DC  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3639                           
  3640                           ;lcd.c: 63: TensDigit++;
  3641  04DD  3001               	movlw	1
  3642  04DE  00A8               	movwf	??_lcdWriteToDigitBCD
  3643  04DF  0828               	movf	??_lcdWriteToDigitBCD,w
  3644  04E0  07A9               	addwf	lcdWriteToDigitBCD@TensDigit,f
  3645  04E1                     l2138:	
  3646  04E1  3000               	movlw	0
  3647  04E2  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3648  04E3  300A               	movlw	10
  3649  04E4  1903               	skipnz
  3650  04E5  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3651  04E6  1803               	skipnc
  3652  04E7  2CD5               	goto	l2136
  3653                           
  3654                           ;lcd.c: 64: }
  3655                           ;lcd.c: 65: if(sign == -1)
  3656  04E8  0A2C               	incf	lcdWriteToDigitBCD@sign,w
  3657  04E9  1D03               	btfss	3,2
  3658  04EA  2CED               	goto	l2144
  3659                           
  3660                           ;lcd.c: 66: lcdWriteData((unsigned char)45);
  3661  04EB  302D               	movlw	45
  3662  04EC  2CEE               	goto	L5
  3663  04ED                     l2144:	
  3664                           
  3665                           ;lcd.c: 67: else{
  3666                           ;lcd.c: 68: lcdWriteData((unsigned char)43);
  3667  04ED  302B               	movlw	43
  3668  04EE                     L5:	
  3669  04EE  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3670                           
  3671                           ;lcd.c: 69: }
  3672                           ;lcd.c: 71: lcdWriteData((unsigned char)ThousandDigit + 48);
  3673  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  3674  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  3675  04F5  082B               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  3676  04F6  3E30               	addlw	48
  3677  04F7  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3678                           
  3679                           ;lcd.c: 72: lcdWriteData((unsigned char)HundredDigit + 48);
  3680  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  3681  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  3682  04FE  082A               	movf	lcdWriteToDigitBCD@HundredDigit,w
  3683  04FF  3E30               	addlw	48
  3684  0500  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3685                           
  3686                           ;lcd.c: 73: lcdWriteData((unsigned char)TensDigit + 48);
  3687  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3688  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3689  0507  0829               	movf	lcdWriteToDigitBCD@TensDigit,w
  3690  0508  3E30               	addlw	48
  3691  0509  120A  158A  2796  120A  118A  	fcall	_lcdWriteData
  3692                           
  3693                           ;lcd.c: 74: lcdWriteData((unsigned char)OnesDigit + 48);
  3694  050E  1283               	bcf	3,5	;RP0=0, select bank0
  3695  050F  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0510  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3697  0511  3E30               	addlw	48
  3698  0512  120A  158A  2796   	fcall	_lcdWriteData
  3699  0515  0008               	return
  3700  0516                     __end_of_lcdWriteToDigitBCD:	
  3701                           
  3702                           	psect	text18
  3703  0F96                     __ptext18:	
  3704 ;; *************** function _lcdWriteData *****************
  3705 ;; Defined at:
  3706 ;;		line 17 in file "lcd.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  databyte        1    wreg     unsigned char 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  databyte        1    2[BANK0 ] unsigned char 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3720 ;;      Params:         0       0       0       0       0
  3721 ;;      Locals:         0       1       0       0       0
  3722 ;;      Temps:          0       2       0       0       0
  3723 ;;      Totals:         0       3       0       0       0
  3724 ;;Total ram usage:        3 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    2
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_lcdWriteToDigitBCD
  3731 ;;		_lcdWriteString
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _lcdWriteData
  3737  0F96                     _lcdWriteData:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _lcdWriteData: [wreg]
  3741                           ;lcdWriteData@databyte stored from wreg
  3742  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0F98  00A2               	movwf	lcdWriteData@databyte
  3745                           
  3746                           ;lcd.c: 18: RE2 = 0;
  3747  0F99  1109               	bcf	9,2	;volatile
  3748                           
  3749                           ;lcd.c: 19: RE1 = 0;
  3750  0F9A  1089               	bcf	9,1	;volatile
  3751                           
  3752                           ;lcd.c: 20: RE0 = 1;
  3753  0F9B  1409               	bsf	9,0	;volatile
  3754                           
  3755                           ;lcd.c: 21: PORTD = databyte;
  3756  0F9C  0822               	movf	lcdWriteData@databyte,w
  3757  0F9D  0088               	movwf	8	;volatile
  3758                           
  3759                           ;lcd.c: 22: RE2 = 1;
  3760  0F9E  1509               	bsf	9,2	;volatile
  3761                           
  3762                           ;lcd.c: 23: RE2 = 0;
  3763  0F9F  1109               	bcf	9,2	;volatile
  3764                           
  3765                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  3766  0FA0  3007               	movlw	7
  3767  0FA1  00A1               	movwf	??_lcdWriteData+1
  3768  0FA2  307D               	movlw	125
  3769  0FA3  00A0               	movwf	??_lcdWriteData
  3770  0FA4                     u2987:	
  3771  0FA4  0BA0               	decfsz	??_lcdWriteData,f
  3772  0FA5  2FA4               	goto	u2987
  3773  0FA6  0BA1               	decfsz	??_lcdWriteData+1,f
  3774  0FA7  2FA4               	goto	u2987
  3775  0FA8  0008               	return
  3776  0FA9                     __end_of_lcdWriteData:	
  3777                           
  3778                           	psect	text19
  3779  07B6                     __ptext19:	
  3780 ;; *************** function ___wmul *****************
  3781 ;; Defined at:
  3782 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3785 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  product         2    4[BANK0 ] unsigned int 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  2    0[BANK0 ] unsigned int 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3797 ;;      Params:         0       4       0       0       0
  3798 ;;      Locals:         0       2       0       0       0
  3799 ;;      Temps:          0       0       0       0       0
  3800 ;;      Totals:         0       6       0       0       0
  3801 ;;Total ram usage:        6 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    2
  3804 ;; This function calls:
  3805 ;;		Nothing
  3806 ;; This function is called by:
  3807 ;;		_lcdWriteToDigitBCD
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function ___wmul
  3813  07B6                     ___wmul:	
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3817  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  3818  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  3819  07B8  01A4               	clrf	___wmul@product
  3820  07B9  01A5               	clrf	___wmul@product+1
  3821  07BA                     l2068:	
  3822  07BA  1C20               	btfss	___wmul@multiplier,0
  3823  07BB  2FC2               	goto	l380
  3824  07BC  0822               	movf	___wmul@multiplicand,w
  3825  07BD  07A4               	addwf	___wmul@product,f
  3826  07BE  1803               	skipnc
  3827  07BF  0AA5               	incf	___wmul@product+1,f
  3828  07C0  0823               	movf	___wmul@multiplicand+1,w
  3829  07C1  07A5               	addwf	___wmul@product+1,f
  3830  07C2                     l380:	
  3831  07C2  3001               	movlw	1
  3832  07C3                     u2305:	
  3833  07C3  1003               	clrc
  3834  07C4  0DA2               	rlf	___wmul@multiplicand,f
  3835  07C5  0DA3               	rlf	___wmul@multiplicand+1,f
  3836  07C6  3EFF               	addlw	-1
  3837  07C7  1D03               	skipz
  3838  07C8  2FC3               	goto	u2305
  3839  07C9  3001               	movlw	1
  3840  07CA                     u2315:	
  3841  07CA  1003               	clrc
  3842  07CB  0CA1               	rrf	___wmul@multiplier+1,f
  3843  07CC  0CA0               	rrf	___wmul@multiplier,f
  3844  07CD  3EFF               	addlw	-1
  3845  07CE  1D03               	skipz
  3846  07CF  2FCA               	goto	u2315
  3847  07D0  0820               	movf	___wmul@multiplier,w
  3848  07D1  0421               	iorwf	___wmul@multiplier+1,w
  3849  07D2  1D03               	btfss	3,2
  3850  07D3  2FBA               	goto	l2068
  3851  07D4  0825               	movf	___wmul@product+1,w
  3852  07D5  00A1               	movwf	?___wmul+1
  3853  07D6  0824               	movf	___wmul@product,w
  3854  07D7  00A0               	movwf	?___wmul
  3855  07D8  0008               	return
  3856  07D9                     __end_of___wmul:	
  3857                           
  3858                           	psect	text20
  3859  0F5F                     __ptext20:	
  3860 ;; *************** function _lcdSetCursor *****************
  3861 ;; Defined at:
  3862 ;;		line 28 in file "lcd.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  address         1    wreg     unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  address         1    3[BANK0 ] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3876 ;;      Params:         0       0       0       0       0
  3877 ;;      Locals:         0       1       0       0       0
  3878 ;;      Temps:          0       0       0       0       0
  3879 ;;      Totals:         0       1       0       0       0
  3880 ;;Total ram usage:        1 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    3
  3883 ;; This function calls:
  3884 ;;		_lcdWriteControl
  3885 ;; This function is called by:
  3886 ;;		_main
  3887 ;;		_initializeMotor
  3888 ;;		_move
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _lcdSetCursor
  3894  0F5F                     _lcdSetCursor:	
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3898                           ;lcdSetCursor@address stored from wreg
  3899  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  3901  0F61  00A3               	movwf	lcdSetCursor@address
  3902                           
  3903                           ;lcd.c: 29: address |= 0b10000000;
  3904  0F62  17A3               	bsf	lcdSetCursor@address,7
  3905                           
  3906                           ;lcd.c: 30: lcdWriteControl(address);
  3907  0F63  0823               	movf	lcdSetCursor@address,w
  3908  0F64  120A  158A  27A9   	fcall	_lcdWriteControl
  3909  0F67  0008               	return
  3910  0F68                     __end_of_lcdSetCursor:	
  3911                           
  3912                           	psect	text21
  3913  0FA9                     __ptext21:	
  3914 ;; *************** function _lcdWriteControl *****************
  3915 ;; Defined at:
  3916 ;;		line 6 in file "lcd.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  databyte        1    wreg     unsigned char 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  databyte        1    2[BANK0 ] unsigned char 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3930 ;;      Params:         0       0       0       0       0
  3931 ;;      Locals:         0       1       0       0       0
  3932 ;;      Temps:          0       2       0       0       0
  3933 ;;      Totals:         0       3       0       0       0
  3934 ;;Total ram usage:        3 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    2
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_lcdSetCursor
  3941 ;;		_setupLCD
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _lcdWriteControl
  3947  0FA9                     _lcdWriteControl:	
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _lcdWriteControl: [wreg]
  3951                           ;lcdWriteControl@databyte stored from wreg
  3952  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0FAB  00A2               	movwf	lcdWriteControl@databyte
  3955                           
  3956                           ;lcd.c: 7: RE2 = 0;
  3957  0FAC  1109               	bcf	9,2	;volatile
  3958                           
  3959                           ;lcd.c: 8: RE1 = 0;
  3960  0FAD  1089               	bcf	9,1	;volatile
  3961                           
  3962                           ;lcd.c: 9: RE0 = 0;
  3963  0FAE  1009               	bcf	9,0	;volatile
  3964                           
  3965                           ;lcd.c: 10: PORTD = databyte;
  3966  0FAF  0822               	movf	lcdWriteControl@databyte,w
  3967  0FB0  0088               	movwf	8	;volatile
  3968                           
  3969                           ;lcd.c: 11: RE2 = 1;
  3970  0FB1  1509               	bsf	9,2	;volatile
  3971                           
  3972                           ;lcd.c: 12: RE2 = 0;
  3973  0FB2  1109               	bcf	9,2	;volatile
  3974                           
  3975                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  3976  0FB3  300D               	movlw	13
  3977  0FB4  00A1               	movwf	??_lcdWriteControl+1
  3978  0FB5  30FB               	movlw	251
  3979  0FB6  00A0               	movwf	??_lcdWriteControl
  3980  0FB7                     u2997:	
  3981  0FB7  0BA0               	decfsz	??_lcdWriteControl,f
  3982  0FB8  2FB7               	goto	u2997
  3983  0FB9  0BA1               	decfsz	??_lcdWriteControl+1,f
  3984  0FBA  2FB7               	goto	u2997
  3985  0FBB  2FBC               	nop2
  3986  0FBC  0008               	return
  3987  0FBD                     __end_of_lcdWriteControl:	
  3988                           
  3989                           	psect	text22
  3990  0FBD                     __ptext22:	
  3991 ;; *************** function _initializeADC *****************
  3992 ;; Defined at:
  3993 ;;		line 4 in file "adConv.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4007 ;;      Params:         0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0
  4010 ;;      Totals:         0       0       0       0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    2
  4014 ;; This function calls:
  4015 ;;		Nothing
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _initializeADC
  4023  0FBD                     _initializeADC:	
  4024                           
  4025                           ;adConv.c: 5: TRISA = 0b11111111;
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _initializeADC: [wreg]
  4029  0FBD  30FF               	movlw	255
  4030  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  4031  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  4032  0FC0  0085               	movwf	5	;volatile
  4033                           
  4034                           ;adConv.c: 7: ADFM = 1;
  4035  0FC1  179F               	bsf	31,7	;volatile
  4036                           
  4037                           ;adConv.c: 9: ADCS2 = 0;
  4038  0FC2  131F               	bcf	31,6	;volatile
  4039                           
  4040                           ;adConv.c: 11: PCFG3 = 0;
  4041  0FC3  119F               	bcf	31,3	;volatile
  4042                           
  4043                           ;adConv.c: 12: PCFG2 = 0;
  4044  0FC4  111F               	bcf	31,2	;volatile
  4045                           
  4046                           ;adConv.c: 13: PCFG1 = 1;
  4047  0FC5  149F               	bsf	31,1	;volatile
  4048                           
  4049                           ;adConv.c: 14: PCFG0 = 1;
  4050  0FC6  141F               	bsf	31,0	;volatile
  4051                           
  4052                           ;adConv.c: 18: ADCON0 = 0b10000001;
  4053  0FC7  3081               	movlw	129
  4054  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0FCA  009F               	movwf	31	;volatile
  4057                           
  4058                           ;adConv.c: 22: ADIF = 0;
  4059  0FCB  130C               	bcf	12,6	;volatile
  4060                           
  4061                           ;adConv.c: 23: ADIE = 1;
  4062  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  4063  0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  4064  0FCE  170C               	bsf	12,6	;volatile
  4065                           
  4066                           ;adConv.c: 24: PEIE = 1;
  4067  0FCF  170B               	bsf	11,6	;volatile
  4068                           
  4069                           ;adConv.c: 25: GIE = 1;
  4070  0FD0  178B               	bsf	11,7	;volatile
  4071  0FD1  0008               	return
  4072  0FD2                     __end_of_initializeADC:	
  4073                           
  4074                           	psect	text23
  4075  0FD2                     __ptext23:	
  4076 ;; *************** function _initialise *****************
  4077 ;; Defined at:
  4078 ;;		line 29 in file "main.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      void 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4092 ;;      Params:         0       0       0       0       0
  4093 ;;      Locals:         0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0
  4095 ;;      Totals:         0       0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    2
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _initialise
  4108  0FD2                     _initialise:	
  4109                           
  4110                           ;main.c: 32: TRISB = 0b00001111;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _initialise: [wreg+status,2]
  4114  0FD2  300F               	movlw	15
  4115  0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  4116  0FD4  1303               	bcf	3,6	;RP1=0, select bank1
  4117  0FD5  0086               	movwf	6	;volatile
  4118                           
  4119                           ;main.c: 33: TRISC = 0;
  4120  0FD6  0187               	clrf	7	;volatile
  4121                           
  4122                           ;main.c: 35: RB4 = 1;
  4123  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  4124  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  4125  0FD9  1606               	bsf	6,4	;volatile
  4126                           
  4127                           ;main.c: 36: RB5 = 1;
  4128  0FDA  1686               	bsf	6,5	;volatile
  4129                           
  4130                           ;main.c: 40: TMR0 = 100;
  4131  0FDB  3064               	movlw	100
  4132  0FDC  0081               	movwf	1	;volatile
  4133                           
  4134                           ;main.c: 41: T0CS = 0;
  4135  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  4136  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  4137  0FDF  1281               	bcf	1,5	;volatile
  4138                           
  4139                           ;main.c: 42: T0SE = 0;
  4140  0FE0  1201               	bcf	1,4	;volatile
  4141                           
  4142                           ;main.c: 43: PSA = 0;
  4143  0FE1  1181               	bcf	1,3	;volatile
  4144                           
  4145                           ;main.c: 44: PS0 = 0;
  4146  0FE2  1001               	bcf	1,0	;volatile
  4147                           
  4148                           ;main.c: 45: PS1 = 0;
  4149  0FE3  1081               	bcf	1,1	;volatile
  4150                           
  4151                           ;main.c: 46: PS2 = 1;
  4152  0FE4  1501               	bsf	1,2	;volatile
  4153                           
  4154                           ;main.c: 48: TMR0IE = 1;
  4155  0FE5  168B               	bsf	11,5	;volatile
  4156                           
  4157                           ;main.c: 49: (GIE = 1);
  4158  0FE6  178B               	bsf	11,7	;volatile
  4159  0FE7  0008               	return
  4160  0FE8                     __end_of_initialise:	
  4161                           
  4162                           	psect	text24
  4163  0759                     __ptext24:	
  4164 ;; *************** function _isr *****************
  4165 ;; Defined at:
  4166 ;;		line 13 in file "main.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0
  4182 ;;      Temps:          4       0       0       0       0
  4183 ;;      Totals:         4       0       0       0       0
  4184 ;;Total ram usage:        4 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    1
  4187 ;; This function calls:
  4188 ;;		_debounceButtons
  4189 ;; This function is called by:
  4190 ;;		Interrupt level 1
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _isr
  4196  0759                     _isr:	
  4197                           
  4198                           ;main.c: 14: if (T0IF){
  4199  0759  1D0B               	btfss	11,2	;volatile
  4200  075A  2F7A               	goto	i1l1962
  4201                           
  4202                           ;main.c: 15: T0IF = 0;
  4203  075B  110B               	bcf	11,2	;volatile
  4204                           
  4205                           ;main.c: 16: TMR0 = 100;
  4206  075C  3064               	movlw	100
  4207  075D  0081               	movwf	1	;volatile
  4208                           
  4209                           ;main.c: 17: rtcCounter++;
  4210  075E  3001               	movlw	1
  4211  075F  1683               	bsf	3,5	;RP0=1, select bank1
  4212  0760  1303               	bcf	3,6	;RP1=0, select bank1
  4213  0761  07CB               	addwf	_rtcCounter^(0+128),f	;volatile
  4214  0762  1803               	skipnc
  4215  0763  0ACC               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  4216  0764  3000               	movlw	0
  4217  0765  07CC               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  4218                           
  4219                           ;main.c: 18: if(rtcCounter == 500){
  4220  0766  30F4               	movlw	244
  4221  0767  064B               	xorwf	_rtcCounter^(0+128),w	;volatile
  4222  0768  1D03               	skipz
  4223  0769  2F75               	goto	i1l1960
  4224  076A  034C               	decf	(_rtcCounter+1)^(0+128),w	;volatile
  4225  076B  1D03               	btfss	3,2
  4226  076C  2F75               	goto	i1l1960
  4227                           
  4228                           ;main.c: 19: RB5 = !RB5;
  4229  076D  3020               	movlw	32
  4230  076E  1283               	bcf	3,5	;RP0=0, select bank0
  4231  076F  1303               	bcf	3,6	;RP1=0, select bank0
  4232  0770  0686               	xorwf	6,f
  4233                           
  4234                           ;main.c: 20: rtcCounter = 0;
  4235  0771  1683               	bsf	3,5	;RP0=1, select bank1
  4236  0772  1303               	bcf	3,6	;RP1=0, select bank1
  4237  0773  01CB               	clrf	_rtcCounter^(0+128)	;volatile
  4238  0774  01CC               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  4239  0775                     i1l1960:	
  4240                           
  4241                           ;main.c: 21: }
  4242                           ;main.c: 22: debounceButtons();
  4243  0775  120A  118A  2643  120A  118A  	fcall	_debounceButtons
  4244  077A                     i1l1962:	
  4245                           
  4246                           ;main.c: 23: }
  4247                           ;main.c: 24: if(ADIF){
  4248  077A  1283               	bcf	3,5	;RP0=0, select bank0
  4249  077B  1303               	bcf	3,6	;RP1=0, select bank0
  4250  077C  1F0C               	btfss	12,6	;volatile
  4251  077D  2F80               	goto	i1l96
  4252                           
  4253                           ;main.c: 25: conversionDone = 1;
  4254  077E  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  4255                           
  4256                           ;main.c: 26: ADIF = 0;
  4257  077F  130C               	bcf	12,6	;volatile
  4258  0780                     i1l96:	
  4259  0780  0876               	movf	??_isr+3,w
  4260  0781  00FF               	movwf	127
  4261  0782  0875               	movf	??_isr+2,w
  4262  0783  008A               	movwf	10
  4263  0784  0874               	movf	??_isr+1,w
  4264  0785  0084               	movwf	4
  4265  0786  0E73               	swapf	??_isr^(0+-128),w
  4266  0787  0083               	movwf	3
  4267  0788  0EFE               	swapf	126,f
  4268  0789  0E7E               	swapf	126,w
  4269  078A  0009               	retfie
  4270  078B                     __end_of_isr:	
  4271                           
  4272                           	psect	intentry
  4273  0004                     __pintentry:	
  4274                           ;incstack = 0
  4275                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4276                           
  4277  0004                     interrupt_function:	
  4278  007E                     saved_w	set	btemp
  4279  0004  00FE               	movwf	btemp
  4280  0005  0E03               	swapf	3,w
  4281  0006  00F3               	movwf	??_isr
  4282  0007  0804               	movf	4,w
  4283  0008  00F4               	movwf	??_isr+1
  4284  0009  080A               	movf	10,w
  4285  000A  00F5               	movwf	??_isr+2
  4286  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4287  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4288  000D  087F               	movf	btemp+1,w
  4289  000E  00F6               	movwf	??_isr+3
  4290  000F  120A  118A  2F59   	ljmp	_isr
  4291                           
  4292                           	psect	text25
  4293  0643                     __ptext25:	
  4294 ;; *************** function _debounceButtons *****************
  4295 ;; Defined at:
  4296 ;;		line 7 in file "timer0.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4310 ;;      Params:         0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0
  4312 ;;      Temps:          1       0       0       0       0
  4313 ;;      Totals:         1       0       0       0       0
  4314 ;;Total ram usage:        1 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_isr
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _debounceButtons
  4325  0643                     _debounceButtons:	
  4326                           
  4327                           ;timer0.c: 9: if(!RB0) {
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  4331  0643  1283               	bcf	3,5	;RP0=0, select bank0
  4332  0644  1303               	bcf	3,6	;RP1=0, select bank0
  4333  0645  1806               	btfsc	6,0	;volatile
  4334  0646  2E53               	goto	i1l1810
  4335                           
  4336                           ;timer0.c: 10: pbCounter++;
  4337  0647  3001               	movlw	1
  4338  0648  00F2               	movwf	??_debounceButtons
  4339  0649  0872               	movf	??_debounceButtons,w
  4340  064A  07F8               	addwf	_pbCounter,f	;volatile
  4341                           
  4342                           ;timer0.c: 11: if(pbCounter >10 &&pb0Released){
  4343  064B  300B               	movlw	11
  4344  064C  0278               	subwf	_pbCounter,w	;volatile
  4345  064D  1803               	btfsc	3,0
  4346  064E  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4347  064F  2E55               	goto	i1l1814
  4348                           
  4349                           ;timer0.c: 12: pb0Pressed = 1;
  4350  0650  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  4351                           
  4352                           ;timer0.c: 13: pb0Released = 0;
  4353  0651  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4354                           
  4355                           ;timer0.c: 14: }
  4356                           ;timer0.c: 15: }
  4357  0652  2E55               	goto	i1l1814
  4358  0653                     i1l1810:	
  4359                           
  4360                           ;timer0.c: 16: else{
  4361                           ;timer0.c: 17: pbCounter = 0;
  4362  0653  01F8               	clrf	_pbCounter	;volatile
  4363                           
  4364                           ;timer0.c: 18: pb0Released = 1;
  4365  0654  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  4366  0655                     i1l1814:	
  4367                           
  4368                           ;timer0.c: 19: }
  4369                           ;timer0.c: 21: if(!RB1) {
  4370  0655  1886               	btfsc	6,1	;volatile
  4371  0656  2E63               	goto	i1l1824
  4372                           
  4373                           ;timer0.c: 22: pbCounter2++;
  4374  0657  3001               	movlw	1
  4375  0658  00F2               	movwf	??_debounceButtons
  4376  0659  0872               	movf	??_debounceButtons,w
  4377  065A  07F9               	addwf	_pbCounter2,f	;volatile
  4378                           
  4379                           ;timer0.c: 23: if(pbCounter2 >10 &&pb1Released){
  4380  065B  300B               	movlw	11
  4381  065C  0279               	subwf	_pbCounter2,w	;volatile
  4382  065D  1803               	btfsc	3,0
  4383  065E  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4384  065F  2E65               	goto	i1l1828
  4385                           
  4386                           ;timer0.c: 24: pb1Pressed = 1;
  4387  0660  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  4388                           
  4389                           ;timer0.c: 25: pb1Released = 0;
  4390  0661  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4391                           
  4392                           ;timer0.c: 26: }
  4393                           ;timer0.c: 27: }
  4394  0662  2E65               	goto	i1l1828
  4395  0663                     i1l1824:	
  4396                           
  4397                           ;timer0.c: 28: else{
  4398                           ;timer0.c: 29: pbCounter2 = 0;
  4399  0663  01F9               	clrf	_pbCounter2	;volatile
  4400                           
  4401                           ;timer0.c: 30: pb1Released = 1;
  4402  0664  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  4403  0665                     i1l1828:	
  4404                           
  4405                           ;timer0.c: 31: }
  4406                           ;timer0.c: 32: if(!RB2) {
  4407  0665  1906               	btfsc	6,2	;volatile
  4408  0666  2E75               	goto	i1l1838
  4409                           
  4410                           ;timer0.c: 33: pbCounter3++;
  4411  0667  3001               	movlw	1
  4412  0668  00F2               	movwf	??_debounceButtons
  4413  0669  0872               	movf	??_debounceButtons,w
  4414  066A  1683               	bsf	3,5	;RP0=1, select bank1
  4415  066B  1303               	bcf	3,6	;RP1=0, select bank1
  4416  066C  07CD               	addwf	_pbCounter3^(0+128),f	;volatile
  4417                           
  4418                           ;timer0.c: 34: if(pbCounter3 >10 &&pb2Released){
  4419  066D  300B               	movlw	11
  4420  066E  024D               	subwf	_pbCounter3^(0+128),w	;volatile
  4421  066F  1803               	btfsc	3,0
  4422  0670  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4423  0671  2E79               	goto	i1l1842
  4424                           
  4425                           ;timer0.c: 35: pb2Pressed = 1;
  4426  0672  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  4427                           
  4428                           ;timer0.c: 36: pb2Released = 0;
  4429  0673  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4430                           
  4431                           ;timer0.c: 37: }
  4432                           ;timer0.c: 38: }
  4433  0674  2E79               	goto	i1l1842
  4434  0675                     i1l1838:	
  4435                           
  4436                           ;timer0.c: 39: else{
  4437                           ;timer0.c: 40: pbCounter3 = 0;
  4438  0675  1683               	bsf	3,5	;RP0=1, select bank1
  4439  0676  1303               	bcf	3,6	;RP1=0, select bank1
  4440  0677  01CD               	clrf	_pbCounter3^(0+128)	;volatile
  4441                           
  4442                           ;timer0.c: 41: pb2Released = 1;
  4443  0678  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  4444  0679                     i1l1842:	
  4445                           
  4446                           ;timer0.c: 42: }
  4447                           ;timer0.c: 43: if(!RB3) {
  4448  0679  1283               	bcf	3,5	;RP0=0, select bank0
  4449  067A  1303               	bcf	3,6	;RP1=0, select bank0
  4450  067B  1986               	btfsc	6,3	;volatile
  4451  067C  2E8C               	goto	i1l1852
  4452                           
  4453                           ;timer0.c: 44: pbCounter4++;
  4454  067D  3001               	movlw	1
  4455  067E  00F2               	movwf	??_debounceButtons
  4456  067F  0872               	movf	??_debounceButtons,w
  4457  0680  1683               	bsf	3,5	;RP0=1, select bank1
  4458  0681  1303               	bcf	3,6	;RP1=0, select bank1
  4459  0682  07CE               	addwf	_pbCounter4^(0+128),f	;volatile
  4460                           
  4461                           ;timer0.c: 45: if(pbCounter4 >10 &&pb3Released){
  4462  0683  300B               	movlw	11
  4463  0684  024E               	subwf	_pbCounter4^(0+128),w	;volatile
  4464  0685  1C03               	skipc
  4465  0686  0008               	return
  4466  0687  1CF1               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4467  0688  0008               	return
  4468                           
  4469                           ;timer0.c: 46: pb3Pressed = 1;
  4470  0689  1471               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  4471                           
  4472                           ;timer0.c: 47: pb3Released = 0;
  4473  068A  10F1               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4474                           
  4475                           ;timer0.c: 48: }
  4476                           ;timer0.c: 49: }
  4477  068B  0008               	return
  4478  068C                     i1l1852:	
  4479                           
  4480                           ;timer0.c: 50: else{
  4481                           ;timer0.c: 51: pbCounter4 = 0;
  4482  068C  1683               	bsf	3,5	;RP0=1, select bank1
  4483  068D  1303               	bcf	3,6	;RP1=0, select bank1
  4484  068E  01CE               	clrf	_pbCounter4^(0+128)	;volatile
  4485                           
  4486                           ;timer0.c: 52: pb3Released = 1;
  4487  068F  14F1               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  4488  0690  0008               	return
  4489  0691                     __end_of_debounceButtons:	
  4490  007E                     btemp	set	126	;btemp
  4491  007E                     wtemp	set	126
  4492  007E                     wtemp0	set	126
  4493  0080                     wtemp1	set	128
  4494  0082                     wtemp2	set	130
  4495  0084                     wtemp3	set	132
  4496  0086                     wtemp4	set	134
  4497  0088                     wtemp5	set	136
  4498  007F                     wtemp6	set	127
  4499  007E                     ttemp	set	126
  4500  007E                     ttemp0	set	126
  4501  0081                     ttemp1	set	129
  4502  0084                     ttemp2	set	132
  4503  0087                     ttemp3	set	135
  4504  007F                     ttemp4	set	127
  4505  007E                     ltemp	set	126
  4506  007E                     ltemp0	set	126
  4507  0082                     ltemp1	set	130
  4508  0086                     ltemp2	set	134
  4509  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     15      47
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _setupLCD->_lcdWriteControl
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   17091
                                             11 BANK1      4     4      0
                         _initialise
                      _initializeADC
                    _initializeMotor
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                           _setupLCD
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _readADCData                                          4     2      2      34
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   13233
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7604
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    1575
                                             15 BANK0      5     4      1
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initializeMotor                                      0     0      0    1092
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                   9     7      2    1027
                                              6 BANK0      9     7      2
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _initializeADC
   _initializeMotor
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _setupLCD
     _lcdWriteControl
   _startADCConversion

 _isr (ROOT)
   _debounceButtons

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      F      2F       7       58.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Apr 06 22:25:02 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               _GO 00FA              ?_startADCConversion 0072  
                             fsr 0004              ___wmul@multiplicand 0022                     ___ftadd@exp1 0066  
                   ___ftadd@exp2 0065                     ___ftadd@sign 0064                              l140 042B  
                            l109 0369                              l380 07C2                              l541 054E  
                            l632 03E9                              l548 0563                              l572 00DC  
                            l549 056B                              _GIE 005F                              _RB0 0030  
                            _RB1 0031                              _RB2 0032                              _RB3 0033  
                            _RB4 0034                              _RB5 0035                              _RE0 0048  
                            _RE1 0049                              _RE2 004A                              _PS0 0408  
                            _PS1 0409                              _PS2 040A                     __CFG_CPD$OFF 0000  
                            _PSA 040B                              _isr 0759                              fsr0 0004  
                            indf 0000                     __CFG_FOSC$HS 0000                     ?_readADCData 0020  
                 ??_lcdWriteData 0020                     __CFG_LVP$OFF 0000                     ___ftdiv@cntr 003D  
                   ___ftdiv@sign 0042                             l2030 0538                             l2022 0520  
                           l2102 072B                             l2120 0496                             l2130 04AD  
                           l2026 0527                             l2202 0100                             l2132 04C1  
                           l2036 0553                             l2028 0533                             l2212 0123  
                           l2134 04CD                             l2038 055D                             l2144 04ED  
                           l2136 04D5                             l2312 025A                             l2152 005D  
                           l2232 06AD                             l2138 04E1                             l2306 0244  
                           l2162 0073                             l2090 06F1                             l1530 03FA  
                           l2068 07BA                             l2252 041A                             l2180 00A2  
                           l2156 0064                             l2092 0703                             l1524 03DE  
                           l1516 03C1                             l2334 02BE                             l2326 029F  
                           l2182 00AE                             l2174 008D                             l1526 03EC  
                           l1518 03D1                             l2272 0451                             l2192 00CC  
                           l2184 00B3                             l2282 045D                             l2266 0440  
                           l2274 0452                             l2290 0407                             l2194 00D8  
                           l2186 00B7                             l2428 01D2                             l2460 0346  
                           l2436 02FD                             l2198 00EE                             l2454 0339  
                           l2472 0362                             l2448 032D                             l1498 038F  
                           l2466 0352                             l1784 060D                             l1788 0634  
                           _ADIE 0466                             _ADIF 0066                             _ADFM 04FF  
                           ?_isr 0072             ??_startADCConversion 0020                             _T0IF 005A  
                           _T0CS 040D                             _T0SE 040C                             u1325 03C2  
                           u2215 0547                             u2305 07C3                             u2315 07CA  
                           u2235 0556                             u1355 03E0                             u1295 0396  
                           u2345 06F6                             u2275 0572                             u2195 052C  
                           u2515 008E                             u1901 0600                             u2605 00CD  
                           u1902 0601                             u1903 0606                             u1904 0607  
                           u1921 0627                             u2545 00A3                             u1922 0628  
                           u1923 062D                             u1924 062E                             u2815 026C  
                           u2575 00B8                             u2825 027E                             u2835 02A0  
                           _PEIE 005E                             u2845 02B1                             u2855 02BF  
                           u2957 036F                             u2967 0F6E                             u2977 0482  
                           u2987 0FA4                             u2997 0FB7                             i1l96 0780  
                           _TMR0 0001                     __CFG_WRT$OFF 0000                             _main 02E4  
                   ___ftpack@arg 0020                     ___ftpack@exp 0023                             _move 0403  
                           btemp 007E                             ltemp 007E                             start 0012  
                           ttemp 007E                             wtemp 007E                     ___fttol@exp1 0050  
                   ___fttol@lval 004C                            ??_isr 0073                            _ADCS2 04FE  
                          ?_main 0072                  __end_of___ftadd 013D                            ?_move 002F  
                  __CFG_WDTE$OFF 0000                  __end_of___ftdiv 02E4                  __end_of___ftneg 07FF  
                __end_of___fttol 0403                            _PCFG0 04F8                            _PCFG1 04F9  
                          _PCFG2 04FA                            _PCFG3 04FB                            _PORTC 0007  
                          _PORTD 0008                            _PORTE 0009                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _TRISD 0088  
                          _TRISE 0089                ??_initializeMotor 002F       __end_of_lcdWriteToDigitBCD 0516  
                          _cstep 0077                            _frexp 071D                            _errno 00C7  
              ??_debounceButtons 0072                    ___ftpack@sign 0024                            _round 0584  
                          _trunc 0691                  __end_of_moveDeg 022C                   __pbitbssCOMMON 0380  
                 __CFG_BOREN$OFF 0000                            pclath 000A                            ltemp0 007E  
                          ltemp1 0082                            ltemp2 0086                            ltemp3 0080  
                          move@i 0033                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F                  __initialization 0015  
                   __end_of_main 0375                     __end_of_move 048E         __size_of_lcdWriteControl 0014  
                         ??_main 00C3                    ___fttol@sign1 004B                           ??_move 0030  
           __end_of_lcdSetCursor 0F68                           _ADCON0 001F                           ?_frexp 0020  
               __end_of___altoft 071D                           _ADRESH 001E                           _ADRESL 009E  
               __end_of___ftpack 0584                           ?_round 0067                   _conversionDone 0380  
                         ?_trunc 0051                           i1l1810 0653                           i1l1814 0655  
                         i1l1824 0663                           i1l1842 0679                           i1l1852 068C  
                         i1l1828 0665                           i1l1838 0675                           i1l1960 0775  
                         i1l1962 077A                           _TMR0IE 005D                   __CFG_PWRTE$OFF 0000  
                         ___ftge 05E4                           ___wmul 07B6             __end_of_lcdWriteData 0FA9  
                      ??___ftadd 0060                        ??___ftdiv 0039                        ??___ftneg 0033  
                      ??___fttol 0047                 __end_of_setupLCD 07B6                        ??_moveDeg 00B8  
                         saved_w 007E           __size_of_initializeADC 0015                           round@f 006A  
                         round@x 0067                           trunc@i 0055                           trunc@x 0051  
           __size_of_readADCData 000F          __end_of__initialization 0030                       ___altoft@c 0028  
                     ___ftadd@f1 005A                       ___ftadd@f2 005D                       ___ftge@ff1 0020  
                     ___ftge@ff2 0023                       ___ftdiv@f1 0036                       ___ftdiv@f2 0033  
                     ___ftdiv@f3 003E                       ___ftneg@f1 0030                       ___fttol@f1 0043  
                 __pcstackCOMMON 0072                     __pidataBANK1 0FE8                       _pb0Pressed 0382  
                     _pb1Pressed 0384                    __end_of_frexp 0759                       _pb2Pressed 0386  
                  __end_of_round 05E4                       _pb3Pressed 0388                    __end_of_trunc 06DB  
              ??_lcdWriteControl 0020                          ??_frexp 0024                          ??_round 006A  
                        ??_trunc 0054                       __pbssBANK1 00C7             readADCData@ADCResult 0022  
            lcdSetCursor@address 0023                    _initializeADC 0FBD                       __pmaintext 02E4  
                        ?___ftge 0020                          ?___wmul 0020                  _initializeMotor 07D9  
                     __pintentry 0004            __size_of_lcdSetCursor 0009                        ?___altoft 0028  
                     _pbCounter2 0079                       _pbCounter3 00CD                       _pbCounter4 00CE  
                      ?___ftpack 0020                  _debounceButtons 0643      __size_of_startADCConversion 000E  
          __size_of_lcdWriteData 0013                     _lcdSetCursor 0F5F                   ?_initializeADC 0072  
             _lcdWriteToDigitBCD 048E                    move@direction 002F                        ?_setupLCD 0072  
                __size_of___ftge 005F                          ___ftadd 0034                          ___ftdiv 022C  
                        ___ftneg 07F5                  __size_of___wmul 0023                          ___fttol 0375  
                     ??___altoft 002C              ?_lcdWriteToDigitBCD 0026                       ??___ftpack 0025  
                     _initialise 0FD2                          __ptext1 0F68                          __ptext2 078B  
                        __ptext3 0F76                          __ptext4 013D                          __ptext5 0584  
                        __ptext6 0691                          __ptext7 071D                          __ptext8 0375  
                        __ptext9 06DB                     __size_of_isr 0032                          _moveDeg 013D  
                   _lcdWriteData 0F96             end_of_initialization 0030             ??_lcdWriteToDigitBCD 0028  
             moveDeg@stepsToMove 00C2          __end_of_initializeMotor 07F5                       _rtcCounter 00CB  
        __end_of_debounceButtons 0691                       ??_setupLCD 0023                       _wholeSteps 00B0  
                    ___ftdiv@exp 0041                  ??_initializeADC 0020                       main@result 00C5  
                    _pb0Released 0383                      _pb1Released 0385                   __end_of___ftge 0643  
                    _pb2Released 0387                  _lcdWriteControl 0FA9                   __end_of___wmul 07D9  
                    _pb3Released 0389                      ?_initialise 0072              start_initialization 0015  
                  ??_readADCData 0022                      __end_of_isr 078B                       frexp@value 0020  
               ?_initializeMotor 0072                 ?_debounceButtons 0072                         ??___ftge 0026  
                       ??___wmul 0024                       init_fetch0 0F85                      __pdataBANK1 00A0  
              __size_of___altoft 0042                __size_of___ftpack 006E                      __pbssCOMMON 0077  
                      ___latbits 0002                    __pcstackBANK0 0020                    __pcstackBANK1 00B8  
            __end_of_readADCData 0F85              __size_of_initialise 0016  lcdWriteToDigitBCD@ThousandDigit 002B  
        __end_of_lcdWriteControl 0FBD                        _halfSteps 00A0                       moveDeg@deg 006D  
                       ?___ftadd 005A                         ?___ftdiv 0033                         ?___ftneg 0030  
                      _pbCounter 0078                         ?___fttol 0043                __size_of_setupLCD 002B  
                       ?_moveDeg 006D                        _nrOfSteps 00C9       __end_of_startADCConversion 0F76  
                 __size_of_frexp 003C                   __size_of_round 0060                   __size_of_trunc 004A  
        lcdWriteControl@databyte 0022                interrupt_function 0004                   ___wmul@product 0024  
              ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002A                      _readADCData 0F76  
           lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 0088                        frexp@eptr 0023  
               ?_lcdWriteControl 0072                 __size_of___ftadd 0109                 __size_of___ftdiv 00B8  
               __size_of___ftneg 000A                         ___altoft 06DB                 __size_of___fttol 008E  
                   ??_initialise 0020                         ___ftpack 0516                 __size_of_moveDeg 00EF  
                       __ptext10 07F5                         __ptext11 0034                         __ptext20 0F5F  
                       __ptext12 0403                         __ptext21 0FA9                         __ptext13 05E4  
                       __ptext22 0FBD                         __ptext14 022C                         __ptext23 0FD2  
                       __ptext15 0516                         __ptext24 0759                         __ptext16 07D9  
                       __ptext25 0643                         __ptext17 048E                         __ptext18 0F96  
                       __ptext19 07B6                        move@steps 0032                       trunc@expon 0058  
                  __size_of_main 0091                    __size_of_move 008B               __end_of_initialise 0FE8  
          __end_of_initializeADC 0FD2                         _setupLCD 078B      lcdWriteToDigitBCD@OnesDigit 002D  
                    _moveDeg$640 00B9                      _moveDeg$641 00BC                      _moveDeg$642 00BF  
    lcdWriteToDigitBCD@TensDigit 0029                         init_ram0 0F89                         intlevel1 0000  
                  ?_lcdSetCursor 0072         __size_of_initializeMotor 001C                      _motorToggle 0381  
       __size_of_debounceButtons 004E                    ?_lcdWriteData 0072           lcdWriteToDigitBCD@data 0026  
         lcdWriteToDigitBCD@sign 002C                   ??_lcdSetCursor 0023               _startADCConversion 0F68  
