

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Apr 08 16:20:29 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009E                     	;# 
   341  009F                     	;# 
   342  010C                     	;# 
   343  010D                     	;# 
   344  010E                     	;# 
   345  010F                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348                           
   349                           	psect	idataBANK1
   350  0DCE                     __pidataBANK1:	
   351                           
   352                           ;initializer for _halfSteps
   353  0DCE  343C               	retlw	60
   354  0DCF  3400               	retlw	0
   355  0DD0  342E               	retlw	46
   356  0DD1  3400               	retlw	0
   357  0DD2  342B               	retlw	43
   358  0DD3  3400               	retlw	0
   359  0DD4  3427               	retlw	39
   360  0DD5  3400               	retlw	0
   361  0DD6  3435               	retlw	53
   362  0DD7  3400               	retlw	0
   363  0DD8  3417               	retlw	23
   364  0DD9  3400               	retlw	0
   365  0DDA  341B               	retlw	27
   366  0DDB  3400               	retlw	0
   367  0DDC  341E               	retlw	30
   368  0DDD  3400               	retlw	0
   369                           
   370                           ;initializer for _wholeSteps
   371  0DDE  343C               	retlw	60
   372  0DDF  3400               	retlw	0
   373  0DE0  342B               	retlw	43
   374  0DE1  3400               	retlw	0
   375  0DE2  3435               	retlw	53
   376  0DE3  3400               	retlw	0
   377  0DE4  341B               	retlw	27
   378  0DE5  3400               	retlw	0
   379  001F                     _ADCON0	set	31
   380  001E                     _ADRESH	set	30
   381  0007                     _PORTC	set	7
   382  0008                     _PORTD	set	8
   383  0009                     _PORTE	set	9
   384  0001                     _TMR0	set	1
   385  0066                     _ADIF	set	102
   386  005F                     _GIE	set	95
   387  00FA                     _GO	set	250
   388  005E                     _PEIE	set	94
   389  0030                     _RB0	set	48
   390  0031                     _RB1	set	49
   391  0032                     _RB2	set	50
   392  0033                     _RB3	set	51
   393  0034                     _RB4	set	52
   394  0035                     _RB5	set	53
   395  0048                     _RE0	set	72
   396  0049                     _RE1	set	73
   397  004A                     _RE2	set	74
   398  005A                     _T0IF	set	90
   399  005D                     _TMR0IE	set	93
   400  009E                     _ADRESL	set	158
   401  0085                     _TRISA	set	133
   402  0086                     _TRISB	set	134
   403  0087                     _TRISC	set	135
   404  0088                     _TRISD	set	136
   405  0089                     _TRISE	set	137
   406  04FE                     _ADCS2	set	1278
   407  04FF                     _ADFM	set	1279
   408  0466                     _ADIE	set	1126
   409  04F8                     _PCFG0	set	1272
   410  04F9                     _PCFG1	set	1273
   411  04FA                     _PCFG2	set	1274
   412  04FB                     _PCFG3	set	1275
   413  0408                     _PS0	set	1032
   414  0409                     _PS1	set	1033
   415  040A                     _PS2	set	1034
   416  040B                     _PSA	set	1035
   417  040D                     _T0CS	set	1037
   418  040C                     _T0SE	set	1036
   419                           
   420                           ; #config settings
   421  0000                     
   422                           	psect	cinit
   423  0015                     start_initialization:	
   424  0015                     __initialization:	
   425                           
   426                           ; Clear objects allocated to BITCOMMON
   427  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   428  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   429                           
   430                           ; Clear objects allocated to COMMON
   431  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   432  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   433  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   434                           
   435                           ; Clear objects allocated to BANK1
   436  001A  1683               	bsf	3,5	;RP0=1, select bank1
   437  001B  1303               	bcf	3,6	;RP1=0, select bank1
   438  001C  01D1               	clrf	__pbssBANK1& (0+127)
   439  001D  01D2               	clrf	(__pbssBANK1+1)& (0+127)
   440  001E  01D3               	clrf	(__pbssBANK1+2)& (0+127)
   441  001F  01D4               	clrf	(__pbssBANK1+3)& (0+127)
   442  0020  01D5               	clrf	(__pbssBANK1+4)& (0+127)
   443  0021  01D6               	clrf	(__pbssBANK1+5)& (0+127)
   444  0022  01D7               	clrf	(__pbssBANK1+6)& (0+127)
   445  0023  01D8               	clrf	(__pbssBANK1+7)& (0+127)
   446  0024  01D9               	clrf	(__pbssBANK1+8)& (0+127)
   447                           
   448                           ; Initialize objects allocated to BANK1
   449  0025  1383               	bcf	3,7	;select IRP bank0
   450  0026  30D1               	movlw	low (__pdataBANK1+24)
   451  0027  00FD               	movwf	btemp+-1
   452  0028  300D               	movlw	high __pidataBANK1
   453  0029  00FE               	movwf	btemp
   454  002A  30CE               	movlw	low __pidataBANK1
   455  002B  00FF               	movwf	btemp+1
   456  002C  30B9               	movlw	low __pdataBANK1
   457  002D  0084               	movwf	4
   458  002E  120A  158A  256D   	fcall	init_ram0
   459  0031                     end_of_initialization:	
   460                           ;End of C runtime variable initialization code
   461                           
   462  0031                     __end_of__initialization:	
   463  0031  0183               	clrf	3
   464  0032  120A  118A  2CB2   	ljmp	_main	;jump to C main() function
   465                           
   466                           	psect	bitbssCOMMON
   467  0380                     __pbitbssCOMMON:	
   468  0380                     _conversionDone:	
   469  0380                     	ds	1
   470  0381                     _motorToggle:	
   471  0381                     	ds	1
   472  0382                     _pb0Pressed:	
   473  0382                     	ds	1
   474  0383                     _pb0Released:	
   475  0383                     	ds	1
   476  0384                     _pb1Pressed:	
   477  0384                     	ds	1
   478  0385                     _pb1Released:	
   479  0385                     	ds	1
   480  0386                     _pb2Pressed:	
   481  0386                     	ds	1
   482  0387                     _pb2Released:	
   483  0387                     	ds	1
   484  0388                     _pb3Pressed:	
   485  0388                     	ds	1
   486  0389                     _pb3Released:	
   487  0389                     	ds	1
   488  038A                     _updateLcdIRData:	
   489  038A                     	ds	1
   490                           
   491                           	psect	bssCOMMON
   492  0077                     __pbssCOMMON:	
   493  0077                     _cstep:	
   494  0077                     	ds	1
   495  0078                     _pbCounter:	
   496  0078                     	ds	1
   497  0079                     _pbCounter2:	
   498  0079                     	ds	1
   499                           
   500                           	psect	bssBANK1
   501  00D1                     __pbssBANK1:	
   502  00D1                     _errno:	
   503  00D1                     	ds	2
   504  00D3                     _nrOfSteps:	
   505  00D3                     	ds	2
   506  00D5                     _rtcCounter:	
   507  00D5                     	ds	2
   508  00D7                     _irLcdCounter:	
   509  00D7                     	ds	1
   510  00D8                     _pbCounter3:	
   511  00D8                     	ds	1
   512  00D9                     _pbCounter4:	
   513  00D9                     	ds	1
   514                           
   515                           	psect	dataBANK1
   516  00B9                     __pdataBANK1:	
   517  00B9                     _halfSteps:	
   518  00B9                     	ds	16
   519  00C9                     _wholeSteps:	
   520  00C9                     	ds	8
   521                           
   522                           	psect	inittext
   523  0D69                     init_fetch0:	
   524                           ;	Called with low address in FSR and high address in W
   525                           
   526  0D69  087E               	movf	126,w
   527  0D6A  008A               	movwf	10
   528  0D6B  087F               	movf	127,w
   529  0D6C  0082               	movwf	2
   530  0D6D                     init_ram0:	
   531                           ;Called with:
   532                           ;	high address of idata address in btemp 
   533                           ;	low address of idata address in btemp+1 
   534                           ;	low address of data in FSR
   535                           ;	high address + 1 of data in btemp-1
   536                           
   537  0D6D  2569  120A  158A   	fcall	init_fetch0
   538  0D70  0080               	movwf	0
   539  0D71  0A84               	incf	4,f
   540  0D72  0804               	movf	4,w
   541  0D73  067D               	xorwf	125,w
   542  0D74  1903               	btfsc	3,2
   543  0D75  3400               	retlw	0
   544  0D76  0AFF               	incf	127,f
   545  0D77  1903               	btfsc	3,2
   546  0D78  0AFE               	incf	126,f
   547  0D79  2D6D               	goto	init_ram0
   548                           
   549                           	psect	cstackBANK1
   550  00A0                     __pcstackBANK1:	
   551  00A0                     ??_moveDeg:	
   552  00A0                     readADCMeter@rawInverted:	
   553                           ; 1 bytes @ 0x0
   554                           
   555                           
   556                           ; 3 bytes @ 0x0
   557  00A0                     	ds	1
   558  00A1                     _moveDeg$674:	
   559                           
   560                           ; 3 bytes @ 0x1
   561  00A1                     	ds	2
   562  00A3                     readADCMeter@k:	
   563                           
   564                           ; 3 bytes @ 0x3
   565  00A3                     	ds	1
   566  00A4                     _moveDeg$675:	
   567                           
   568                           ; 3 bytes @ 0x4
   569  00A4                     	ds	2
   570  00A6                     readADCMeter@m:	
   571                           
   572                           ; 3 bytes @ 0x6
   573  00A6                     	ds	1
   574  00A7                     _moveDeg$676:	
   575                           
   576                           ; 3 bytes @ 0x7
   577  00A7                     	ds	2
   578  00A9                     readADCMeter@result:	
   579                           
   580                           ; 3 bytes @ 0x9
   581  00A9                     	ds	1
   582  00AA                     moveDeg@stepsToMove:	
   583                           
   584                           ; 1 bytes @ 0xA
   585  00AA                     	ds	2
   586  00AC                     _readADCMeter$677:	
   587                           
   588                           ; 3 bytes @ 0xC
   589  00AC                     	ds	3
   590  00AF                     readADCMeter@raw:	
   591                           
   592                           ; 2 bytes @ 0xF
   593  00AF                     	ds	2
   594  00B1                     readADCMeter@resultInInt:	
   595                           
   596                           ; 2 bytes @ 0x11
   597  00B1                     	ds	2
   598  00B3                     ??_main:	
   599                           
   600                           ; 1 bytes @ 0x13
   601  00B3                     	ds	2
   602  00B5                     main@result:	
   603                           
   604                           ; 2 bytes @ 0x15
   605  00B5                     	ds	2
   606  00B7                     main@resultInMeters:	
   607                           
   608                           ; 2 bytes @ 0x17
   609  00B7                     	ds	2
   610                           
   611                           	psect	cstackCOMMON
   612  0072                     __pcstackCOMMON:	
   613  0072                     ?_flashLed:	
   614  0072                     ??_flashLed:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0072                     ?_debounceButtons:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0072                     ??_debounceButtons:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0072                     ?_lcdRefresh:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0072                     ??_lcdRefresh:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0072                     ?_initializeTimer0:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0072                     ?_initializeADC:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0072                     ?_setupLCD:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0072                     ?_startADCConversion:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0072                     ?_lcdSetCursor:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0072                     ?_isr:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0072                     ?_initialise:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0072                     ?_main:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0072                     ?_lcdWriteControl:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0072                     ?_lcdWriteData:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0072                     ?_initializeMotor:	
   660                           ; 1 bytes @ 0x0
   661                           
   662                           
   663                           ; 2 bytes @ 0x0
   664  0072                     	ds	1
   665  0073                     ??_isr:	
   666                           
   667                           ; 1 bytes @ 0x1
   668  0073                     	ds	4
   669                           
   670                           	psect	cstackBANK0
   671  0020                     __pcstackBANK0:	
   672  0020                     ?___ftge:	
   673  0020                     ??_initializeTimer0:	
   674                           ; 1 bit 
   675                           
   676  0020                     ??_initializeADC:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ??_startADCConversion:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     ??_lcdWriteControl:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0020                     ??_lcdWriteData:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0020                     ?_readADCData:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0020                     ?___wmul:	
   692                           ; 2 bytes @ 0x0
   693                           
   694  0020                     ?___ftpack:	
   695                           ; 2 bytes @ 0x0
   696                           
   697  0020                     ?_frexp:	
   698                           ; 3 bytes @ 0x0
   699                           
   700  0020                     ___wmul@multiplier:	
   701                           ; 3 bytes @ 0x0
   702                           
   703  0020                     ___ftpack@arg:	
   704                           ; 2 bytes @ 0x0
   705                           
   706  0020                     ___ftge@ff1:	
   707                           ; 3 bytes @ 0x0
   708                           
   709  0020                     frexp@value:	
   710                           ; 3 bytes @ 0x0
   711                           
   712                           
   713                           ; 3 bytes @ 0x0
   714  0020                     	ds	2
   715  0022                     ??_readADCData:	
   716  0022                     lcdWriteControl@databyte:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0022                     lcdWriteData@databyte:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0022                     readADCData@ADCResult:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0022                     ___wmul@multiplicand:	
   726                           ; 2 bytes @ 0x2
   727                           
   728                           
   729                           ; 2 bytes @ 0x2
   730  0022                     	ds	1
   731  0023                     ??_setupLCD:	
   732  0023                     ??_lcdSetCursor:	
   733                           ; 1 bytes @ 0x3
   734                           
   735  0023                     lcdSetCursor@address:	
   736                           ; 1 bytes @ 0x3
   737                           
   738  0023                     ___ftpack@exp:	
   739                           ; 1 bytes @ 0x3
   740                           
   741  0023                     frexp@eptr:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  0023                     ___ftge@ff2:	
   745                           ; 1 bytes @ 0x3
   746                           
   747                           
   748                           ; 3 bytes @ 0x3
   749  0023                     	ds	1
   750  0024                     ??_frexp:	
   751  0024                     ??___wmul:	
   752                           ; 1 bytes @ 0x4
   753                           
   754  0024                     ___ftpack@sign:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  0024                     ___wmul@product:	
   758                           ; 1 bytes @ 0x4
   759                           
   760                           
   761                           ; 2 bytes @ 0x4
   762  0024                     	ds	1
   763  0025                     ??___ftpack:	
   764                           
   765                           ; 1 bytes @ 0x5
   766  0025                     	ds	1
   767  0026                     ?_lcdWriteToDigitBCD:	
   768  0026                     ??___ftge:	
   769                           ; 1 bytes @ 0x6
   770                           
   771  0026                     lcdWriteToDigitBCD@data:	
   772                           ; 1 bytes @ 0x6
   773                           
   774                           
   775                           ; 2 bytes @ 0x6
   776  0026                     	ds	2
   777  0028                     ??_lcdWriteToDigitBCD:	
   778  0028                     ?___altoft:	
   779                           ; 1 bytes @ 0x8
   780                           
   781  0028                     ?___awtoft:	
   782                           ; 3 bytes @ 0x8
   783                           
   784  0028                     ?___ftmul:	
   785                           ; 3 bytes @ 0x8
   786                           
   787  0028                     ___awtoft@c:	
   788                           ; 3 bytes @ 0x8
   789                           
   790  0028                     ___ftmul@f1:	
   791                           ; 2 bytes @ 0x8
   792                           
   793  0028                     ___altoft@c:	
   794                           ; 3 bytes @ 0x8
   795                           
   796                           
   797                           ; 4 bytes @ 0x8
   798  0028                     	ds	1
   799  0029                     lcdWriteToDigitBCD@TensDigit:	
   800                           
   801                           ; 1 bytes @ 0x9
   802  0029                     	ds	1
   803  002A                     lcdWriteToDigitBCD@HundredDigit:	
   804                           
   805                           ; 1 bytes @ 0xA
   806  002A                     	ds	1
   807  002B                     ??___awtoft:	
   808  002B                     lcdWriteToDigitBCD@ThousandDigit:	
   809                           ; 1 bytes @ 0xB
   810                           
   811  002B                     ___ftmul@f2:	
   812                           ; 1 bytes @ 0xB
   813                           
   814                           
   815                           ; 3 bytes @ 0xB
   816  002B                     	ds	1
   817  002C                     ??___altoft:	
   818  002C                     lcdWriteToDigitBCD@sign:	
   819                           ; 1 bytes @ 0xC
   820                           
   821                           
   822                           ; 1 bytes @ 0xC
   823  002C                     	ds	1
   824  002D                     ___awtoft@sign:	
   825  002D                     lcdWriteToDigitBCD@OnesDigit:	
   826                           ; 1 bytes @ 0xD
   827                           
   828                           
   829                           ; 2 bytes @ 0xD
   830  002D                     	ds	1
   831  002E                     ??___ftmul:	
   832  002E                     ___altoft@exp:	
   833                           ; 1 bytes @ 0xE
   834                           
   835                           
   836                           ; 1 bytes @ 0xE
   837  002E                     	ds	1
   838  002F                     ??_initializeMotor:	
   839  002F                     ?_move:	
   840                           ; 1 bytes @ 0xF
   841                           
   842  002F                     ??_initialise:	
   843                           ; 1 bytes @ 0xF
   844                           
   845  002F                     move@direction:	
   846                           ; 1 bytes @ 0xF
   847                           
   848  002F                     ___altoft@sign:	
   849                           ; 1 bytes @ 0xF
   850                           
   851                           
   852                           ; 1 bytes @ 0xF
   853  002F                     	ds	1
   854  0030                     ??_move:	
   855  0030                     ?___ftneg:	
   856                           ; 1 bytes @ 0x10
   857                           
   858  0030                     ___ftneg@f1:	
   859                           ; 3 bytes @ 0x10
   860                           
   861                           
   862                           ; 3 bytes @ 0x10
   863  0030                     	ds	2
   864  0032                     move@steps:	
   865  0032                     ___ftmul@exp:	
   866                           ; 1 bytes @ 0x12
   867                           
   868                           
   869                           ; 1 bytes @ 0x12
   870  0032                     	ds	1
   871  0033                     ??___ftneg:	
   872  0033                     ?___ftdiv:	
   873                           ; 1 bytes @ 0x13
   874                           
   875  0033                     move@i:	
   876                           ; 3 bytes @ 0x13
   877                           
   878  0033                     ___ftdiv@f2:	
   879                           ; 1 bytes @ 0x13
   880                           
   881  0033                     ___ftmul@f3_as_product:	
   882                           ; 3 bytes @ 0x13
   883                           
   884                           
   885                           ; 3 bytes @ 0x13
   886  0033                     	ds	3
   887  0036                     ___ftmul@cntr:	
   888  0036                     ___ftdiv@f1:	
   889                           ; 1 bytes @ 0x16
   890                           
   891                           
   892                           ; 3 bytes @ 0x16
   893  0036                     	ds	1
   894  0037                     ___ftmul@sign:	
   895                           
   896                           ; 1 bytes @ 0x17
   897  0037                     	ds	2
   898  0039                     ??___ftdiv:	
   899                           
   900                           ; 1 bytes @ 0x19
   901  0039                     	ds	4
   902  003D                     ___ftdiv@cntr:	
   903                           
   904                           ; 1 bytes @ 0x1D
   905  003D                     	ds	1
   906  003E                     ___ftdiv@f3:	
   907                           
   908                           ; 3 bytes @ 0x1E
   909  003E                     	ds	3
   910  0041                     ___ftdiv@exp:	
   911                           
   912                           ; 1 bytes @ 0x21
   913  0041                     	ds	1
   914  0042                     ___ftdiv@sign:	
   915                           
   916                           ; 1 bytes @ 0x22
   917  0042                     	ds	1
   918  0043                     ?___fttol:	
   919  0043                     ___fttol@f1:	
   920                           ; 4 bytes @ 0x23
   921                           
   922                           
   923                           ; 3 bytes @ 0x23
   924  0043                     	ds	4
   925  0047                     ??___fttol:	
   926                           
   927                           ; 1 bytes @ 0x27
   928  0047                     	ds	4
   929  004B                     ___fttol@sign1:	
   930                           
   931                           ; 1 bytes @ 0x2B
   932  004B                     	ds	1
   933  004C                     ___fttol@lval:	
   934                           
   935                           ; 4 bytes @ 0x2C
   936  004C                     	ds	4
   937  0050                     ___fttol@exp1:	
   938                           
   939                           ; 1 bytes @ 0x30
   940  0050                     	ds	1
   941  0051                     ?_trunc:	
   942  0051                     trunc@x:	
   943                           ; 3 bytes @ 0x31
   944                           
   945                           
   946                           ; 3 bytes @ 0x31
   947  0051                     	ds	3
   948  0054                     ??_trunc:	
   949                           
   950                           ; 1 bytes @ 0x34
   951  0054                     	ds	1
   952  0055                     trunc@i:	
   953                           
   954                           ; 3 bytes @ 0x35
   955  0055                     	ds	3
   956  0058                     trunc@expon:	
   957                           
   958                           ; 2 bytes @ 0x38
   959  0058                     	ds	2
   960  005A                     ?___ftadd:	
   961  005A                     ___ftadd@f1:	
   962                           ; 3 bytes @ 0x3A
   963                           
   964                           
   965                           ; 3 bytes @ 0x3A
   966  005A                     	ds	3
   967  005D                     ___ftadd@f2:	
   968                           
   969                           ; 3 bytes @ 0x3D
   970  005D                     	ds	3
   971  0060                     ??___ftadd:	
   972                           
   973                           ; 1 bytes @ 0x40
   974  0060                     	ds	4
   975  0064                     ___ftadd@sign:	
   976                           
   977                           ; 1 bytes @ 0x44
   978  0064                     	ds	1
   979  0065                     ___ftadd@exp2:	
   980                           
   981                           ; 1 bytes @ 0x45
   982  0065                     	ds	1
   983  0066                     ___ftadd@exp1:	
   984                           
   985                           ; 1 bytes @ 0x46
   986  0066                     	ds	1
   987  0067                     ?_round:	
   988  0067                     round@x:	
   989                           ; 3 bytes @ 0x47
   990                           
   991                           
   992                           ; 3 bytes @ 0x47
   993  0067                     	ds	3
   994  006A                     ??_round:	
   995  006A                     round@f:	
   996                           ; 1 bytes @ 0x4A
   997                           
   998                           
   999                           ; 3 bytes @ 0x4A
  1000  006A                     	ds	3
  1001  006D                     ?_moveDeg:	
  1002  006D                     ?_readADCMeter:	
  1003                           ; 1 bytes @ 0x4D
  1004                           
  1005  006D                     moveDeg@deg:	
  1006                           ; 2 bytes @ 0x4D
  1007                           
  1008                           
  1009                           ; 3 bytes @ 0x4D
  1010  006D                     	ds	2
  1011  006F                     ??_readADCMeter:	
  1012                           
  1013                           ; 1 bytes @ 0x4F
  1014  006F                     	ds	1
  1015                           
  1016                           	psect	maintext
  1017  04B2                     __pmaintext:	
  1018 ;;
  1019 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1020 ;;
  1021 ;; *************** function _main *****************
  1022 ;; Defined at:
  1023 ;;		line 44 in file "main.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  resultInMete    2   23[BANK1 ] int 
  1028 ;;  result          2   21[BANK1 ] int 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : B00/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1038 ;;      Params:         0       0       0       0       0
  1039 ;;      Locals:         0       0       4       0       0
  1040 ;;      Temps:          0       0       2       0       0
  1041 ;;      Totals:         0       0       6       0       0
  1042 ;;Total ram usage:        6 bytes
  1043 ;; Hardware stack levels required when called:    7
  1044 ;; This function calls:
  1045 ;;		_initialise
  1046 ;;		_lcdSetCursor
  1047 ;;		_lcdWriteToDigitBCD
  1048 ;;		_move
  1049 ;;		_moveDeg
  1050 ;;		_readADCData
  1051 ;;		_readADCMeter
  1052 ;;		_startADCConversion
  1053 ;; This function is called by:
  1054 ;;		Startup code after reset
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           
  1059                           ;psect for function _main
  1060  04B2                     _main:	
  1061                           
  1062                           ;main.c: 46: initialise();
  1063                           
  1064                           ;incstack = 0
  1065                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1066  04B2  120A  158A  2602  120A  118A  	fcall	_initialise
  1067                           
  1068                           ;main.c: 47: startADCConversion();
  1069  04B7  120A  158A  253D  120A  118A  	fcall	_startADCConversion
  1070  04BC                     l2764:	
  1071                           ;main.c: 50: while(1){
  1072                           
  1073                           
  1074                           ;main.c: 53: if(conversionDone){
  1075  04BC  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1076  04BD  2D17               	goto	l2778
  1077                           
  1078                           ;main.c: 54: conversionDone = 0;
  1079  04BE  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1080                           
  1081                           ;main.c: 55: int result = readADCData();
  1082  04BF  120A  158A  255A  120A  118A  	fcall	_readADCData
  1083  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1084  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1085  04C6  0821               	movf	?_readADCData+1,w
  1086  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  1087  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  1088  04C9  00B6               	movwf	(main@result+1)^(0+128)
  1089  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  1090  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  1091  04CC  0820               	movf	?_readADCData,w
  1092  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  1093  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  1094  04CF  00B5               	movwf	main@result^(0+128)
  1095                           
  1096                           ;main.c: 56: int resultInMeters = readADCMeter();
  1097  04D0  120A  118A  213E  120A  118A  	fcall	_readADCMeter
  1098  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  1099  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  1100  04D7  086E               	movf	?_readADCMeter+1,w
  1101  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  1102  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  1103  04DA  00B8               	movwf	(main@resultInMeters+1)^(0+128)
  1104  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  1105  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  1106  04DD  086D               	movf	?_readADCMeter,w
  1107  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  1108  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  1109  04E0  00B7               	movwf	main@resultInMeters^(0+128)
  1110                           
  1111                           ;main.c: 57: if(updateLcdIRData){
  1112  04E1  1D71               	btfss	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1113  04E2  2D12               	goto	l99
  1114                           
  1115                           ;main.c: 58: lcdSetCursor(0x00);
  1116  04E3  3000               	movlw	0
  1117  04E4  120A  158A  251D  120A  118A  	fcall	_lcdSetCursor
  1118                           
  1119                           ;main.c: 59: lcdWriteToDigitBCD(result);
  1120  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  1121  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  1122  04EB  0836               	movf	(main@result+1)^(0+128),w
  1123  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1124  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1125  04EE  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1126  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  1127  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  1128  04F1  0835               	movf	main@result^(0+128),w
  1129  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1130  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1131  04F4  00A6               	movwf	lcdWriteToDigitBCD@data
  1132  04F5  120A  118A  2678  120A  118A  	fcall	_lcdWriteToDigitBCD
  1133                           
  1134                           ;main.c: 60: lcdSetCursor(0x0B);
  1135  04FA  300B               	movlw	11
  1136  04FB  120A  158A  251D  120A  118A  	fcall	_lcdSetCursor
  1137                           
  1138                           ;main.c: 61: lcdWriteToDigitBCD(resultInMeters);
  1139  0500  1683               	bsf	3,5	;RP0=1, select bank1
  1140  0501  1303               	bcf	3,6	;RP1=0, select bank1
  1141  0502  0838               	movf	(main@resultInMeters+1)^(0+128),w
  1142  0503  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0504  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0505  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1145  0506  1683               	bsf	3,5	;RP0=1, select bank1
  1146  0507  1303               	bcf	3,6	;RP1=0, select bank1
  1147  0508  0837               	movf	main@resultInMeters^(0+128),w
  1148  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1149  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1150  050B  00A6               	movwf	lcdWriteToDigitBCD@data
  1151  050C  120A  118A  2678  120A  118A  	fcall	_lcdWriteToDigitBCD
  1152                           
  1153                           ;main.c: 62: updateLcdIRData = 0;
  1154  0511  1171               	bcf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1155  0512                     l99:	
  1156                           
  1157                           ;main.c: 63: }
  1158                           ;main.c: 65: startADCConversion();
  1159  0512  120A  158A  253D  120A  118A  	fcall	_startADCConversion
  1160  0517                     l2778:	
  1161                           
  1162                           ;main.c: 67: }
  1163                           ;main.c: 68: if(pb0Pressed){
  1164  0517  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1165  0518  2D24               	goto	l2784
  1166                           
  1167                           ;main.c: 69: move(1,1);
  1168  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1169  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1170  051B  01AF               	clrf	move@direction
  1171  051C  0AAF               	incf	move@direction,f
  1172  051D  3001               	movlw	1
  1173  051E  120A  118A  25ED  120A  118A  	fcall	_move
  1174                           
  1175                           ;main.c: 70: pb0Pressed = 0;
  1176  0523  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1177  0524                     l2784:	
  1178                           
  1179                           ;main.c: 71: }
  1180                           ;main.c: 72: if(pb1Pressed){
  1181  0524  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1182  0525  2D30               	goto	l2790
  1183                           
  1184                           ;main.c: 73: move(1,0);
  1185  0526  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0527  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0528  01AF               	clrf	move@direction
  1188  0529  3001               	movlw	1
  1189  052A  120A  118A  25ED  120A  118A  	fcall	_move
  1190                           
  1191                           ;main.c: 74: pb1Pressed = 0;
  1192  052F  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1193  0530                     l2790:	
  1194                           
  1195                           ;main.c: 75: }
  1196                           ;main.c: 76: if(pb2Pressed){
  1197  0530  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1198  0531  2D4C               	goto	l2802
  1199                           
  1200                           ;main.c: 77: if(motorToggle){
  1201  0532  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1202  0533  2D3C               	goto	l2796
  1203                           
  1204                           ;main.c: 78: moveDeg(-180);
  1205  0534  3000               	movlw	0
  1206  0535  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0536  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0537  00ED               	movwf	moveDeg@deg
  1209  0538  3034               	movlw	52
  1210  0539  00EE               	movwf	moveDeg@deg+1
  1211  053A  30C3               	movlw	195
  1212  053B  2D43               	goto	L1
  1213  053C                     l2796:	
  1214                           ;main.c: 79: }
  1215                           
  1216                           
  1217                           ;main.c: 80: else{
  1218                           ;main.c: 81: moveDeg(180);
  1219  053C  3000               	movlw	0
  1220  053D  1283               	bcf	3,5	;RP0=0, select bank0
  1221  053E  1303               	bcf	3,6	;RP1=0, select bank0
  1222  053F  00ED               	movwf	moveDeg@deg
  1223  0540  3034               	movlw	52
  1224  0541  00EE               	movwf	moveDeg@deg+1
  1225  0542  3043               	movlw	67
  1226  0543                     L1:	
  1227  0543  00EF               	movwf	moveDeg@deg+2
  1228  0544  120A  118A  2238  120A  118A  	fcall	_moveDeg
  1229                           
  1230                           ;main.c: 82: }
  1231                           ;main.c: 83: motorToggle = !motorToggle;
  1232  0549  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1233  054A  06F0               	xorwf	_motorToggle/(0+8),f
  1234                           
  1235                           ;main.c: 84: pb2Pressed = 0;
  1236  054B  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1237  054C                     l2802:	
  1238                           
  1239                           ;main.c: 85: }
  1240                           ;main.c: 86: if(pb3Pressed){
  1241  054C  1C71               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1242  054D  2D53               	goto	l105
  1243                           
  1244                           ;main.c: 87: RB4 = !RB4;
  1245  054E  3010               	movlw	16
  1246  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1247  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1248  0551  0686               	xorwf	6,f
  1249                           
  1250                           ;main.c: 88: pb3Pressed = 0;
  1251  0552  1071               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1252  0553                     l105:	
  1253                           
  1254                           ;main.c: 89: }
  1255                           ;main.c: 91: _delay((unsigned long)((20)*(20000000/4000.0)));
  1256  0553  3082               	movlw	130
  1257  0554  1683               	bsf	3,5	;RP0=1, select bank1
  1258  0555  1303               	bcf	3,6	;RP1=0, select bank1
  1259  0556  00B4               	movwf	(??_main^(0+128)+1)
  1260  0557  30DD               	movlw	221
  1261  0558  00B3               	movwf	??_main^(0+128)
  1262  0559                     u3457:	
  1263  0559  0BB3               	decfsz	??_main^(0+128),f
  1264  055A  2D59               	goto	u3457
  1265  055B  0BB4               	decfsz	(??_main^(0+128)+1),f
  1266  055C  2D59               	goto	u3457
  1267  055D  2D5E               	nop2
  1268  055E  2CBC               	goto	l2764
  1269  055F                     __end_of_main:	
  1270                           
  1271                           	psect	text1
  1272  0D3D                     __ptext1:	
  1273 ;; *************** function _startADCConversion *****************
  1274 ;; Defined at:
  1275 ;;		line 43 in file "adConv.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1289 ;;      Params:         0       0       0       0       0
  1290 ;;      Locals:         0       0       0       0       0
  1291 ;;      Temps:          0       2       0       0       0
  1292 ;;      Totals:         0       2       0       0       0
  1293 ;;Total ram usage:        2 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    2
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _startADCConversion
  1305  0D3D                     _startADCConversion:	
  1306                           
  1307                           ;adConv.c: 45: _delay((unsigned long)((1)*(20000000/4000.0)));
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _startADCConversion: [wreg]
  1311  0D3D  3007               	movlw	7
  1312  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  1313  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  1314  0D40  00A1               	movwf	??_startADCConversion+1
  1315  0D41  307D               	movlw	125
  1316  0D42  00A0               	movwf	??_startADCConversion
  1317  0D43                     u3467:	
  1318  0D43  0BA0               	decfsz	??_startADCConversion,f
  1319  0D44  2D43               	goto	u3467
  1320  0D45  0BA1               	decfsz	??_startADCConversion+1,f
  1321  0D46  2D43               	goto	u3467
  1322                           
  1323                           ;adConv.c: 47: GO = 1;
  1324  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  1325  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  1326  0D49  151F               	bsf	31,2	;volatile
  1327  0D4A  0008               	return
  1328  0D4B                     __end_of_startADCConversion:	
  1329                           
  1330                           	psect	text2
  1331  013E                     __ptext2:	
  1332 ;; *************** function _readADCMeter *****************
  1333 ;; Defined at:
  1334 ;;		line 34 in file "adConv.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  result          3    9[BANK1 ] void 
  1339 ;;  m               3    6[BANK1 ] void 
  1340 ;;  k               3    3[BANK1 ] void 
  1341 ;;  rawInverted     3    0[BANK1 ] void 
  1342 ;;  resultInInt     2   17[BANK1 ] int 
  1343 ;;  raw             2   15[BANK1 ] int 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   77[BANK0 ] int 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1353 ;;      Params:         0       2       0       0       0
  1354 ;;      Locals:         0       0      19       0       0
  1355 ;;      Temps:          0       0       0       0       0
  1356 ;;      Totals:         0       2      19       0       0
  1357 ;;Total ram usage:       21 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    6
  1360 ;; This function calls:
  1361 ;;		___awtoft
  1362 ;;		___ftadd
  1363 ;;		___ftdiv
  1364 ;;		___ftmul
  1365 ;;		___fttol
  1366 ;;		_readADCData
  1367 ;;		_round
  1368 ;; This function is called by:
  1369 ;;		_main
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           
  1374                           ;psect for function _readADCMeter
  1375  013E                     _readADCMeter:	
  1376                           
  1377                           ;adConv.c: 35: int raw = readADCData();
  1378                           
  1379                           ;incstack = 0
  1380                           ; Regs used in _readADCMeter: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1381  013E  120A  158A  255A  120A  118A  	fcall	_readADCData
  1382  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0145  0821               	movf	?_readADCData+1,w
  1385  0146  1683               	bsf	3,5	;RP0=1, select bank1
  1386  0147  1303               	bcf	3,6	;RP1=0, select bank1
  1387  0148  00B0               	movwf	(readADCMeter@raw+1)^(0+128)
  1388  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1389  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1390  014B  0820               	movf	?_readADCData,w
  1391  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1392  014D  1303               	bcf	3,6	;RP1=0, select bank1
  1393  014E  00AF               	movwf	readADCMeter@raw^(0+128)
  1394                           
  1395                           ;adConv.c: 36: double rawInverted = 1.0/((double) raw);
  1396  014F  0830               	movf	(readADCMeter@raw+1)^(0+128),w
  1397  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0152  00A9               	movwf	___awtoft@c+1
  1400  0153  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0154  1303               	bcf	3,6	;RP1=0, select bank1
  1402  0155  082F               	movf	readADCMeter@raw^(0+128),w
  1403  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0158  00A8               	movwf	___awtoft@c
  1406  0159  120A  158A  2666  120A  118A  	fcall	___awtoft
  1407  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1408  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0160  0828               	movf	?___awtoft,w
  1410  0161  00B3               	movwf	___ftdiv@f2
  1411  0162  0829               	movf	?___awtoft+1,w
  1412  0163  00B4               	movwf	___ftdiv@f2+1
  1413  0164  082A               	movf	?___awtoft+2,w
  1414  0165  00B5               	movwf	___ftdiv@f2+2
  1415  0166  3000               	movlw	0
  1416  0167  00B6               	movwf	___ftdiv@f1
  1417  0168  3080               	movlw	128
  1418  0169  00B7               	movwf	___ftdiv@f1+1
  1419  016A  303F               	movlw	63
  1420  016B  00B8               	movwf	___ftdiv@f1+2
  1421  016C  120A  118A  23FA  120A  118A  	fcall	___ftdiv
  1422  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0173  0833               	movf	?___ftdiv,w
  1425  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1426  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1427  0176  00A0               	movwf	readADCMeter@rawInverted^(0+128)
  1428  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0179  0834               	movf	?___ftdiv+1,w
  1431  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1432  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1433  017C  00A1               	movwf	(readADCMeter@rawInverted+1)^(0+128)
  1434  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1435  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1436  017F  0835               	movf	?___ftdiv+2,w
  1437  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1438  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1439  0182  00A2               	movwf	(readADCMeter@rawInverted+2)^(0+128)
  1440                           
  1441                           ;adConv.c: 37: double k = 18609;
  1442  0183  3062               	movlw	98
  1443  0184  00A3               	movwf	readADCMeter@k^(0+128)
  1444  0185  3091               	movlw	145
  1445  0186  00A4               	movwf	(readADCMeter@k+1)^(0+128)
  1446  0187  3046               	movlw	70
  1447  0188  00A5               	movwf	(readADCMeter@k+2)^(0+128)
  1448                           
  1449                           ;adConv.c: 38: double m = -0.0002;
  1450  0189  30B7               	movlw	183
  1451  018A  00A6               	movwf	readADCMeter@m^(0+128)
  1452  018B  3051               	movlw	81
  1453  018C  00A7               	movwf	(readADCMeter@m+1)^(0+128)
  1454  018D  30B9               	movlw	185
  1455  018E  00A8               	movwf	(readADCMeter@m+2)^(0+128)
  1456                           
  1457                           ;adConv.c: 39: double result = rawInverted*k + m;
  1458  018F  0826               	movf	readADCMeter@m^(0+128),w
  1459  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0192  00DA               	movwf	___ftadd@f1
  1462  0193  1683               	bsf	3,5	;RP0=1, select bank1
  1463  0194  1303               	bcf	3,6	;RP1=0, select bank1
  1464  0195  0827               	movf	(readADCMeter@m+1)^(0+128),w
  1465  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1466  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1467  0198  00DB               	movwf	___ftadd@f1+1
  1468  0199  1683               	bsf	3,5	;RP0=1, select bank1
  1469  019A  1303               	bcf	3,6	;RP1=0, select bank1
  1470  019B  0828               	movf	(readADCMeter@m+2)^(0+128),w
  1471  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1472  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1473  019E  00DC               	movwf	___ftadd@f1+2
  1474  019F  1683               	bsf	3,5	;RP0=1, select bank1
  1475  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  1476  01A1  0823               	movf	readADCMeter@k^(0+128),w
  1477  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1478  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1479  01A4  00A8               	movwf	___ftmul@f1
  1480  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1481  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1482  01A7  0824               	movf	(readADCMeter@k+1)^(0+128),w
  1483  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1484  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1485  01AA  00A9               	movwf	___ftmul@f1+1
  1486  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1487  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  1488  01AD  0825               	movf	(readADCMeter@k+2)^(0+128),w
  1489  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1490  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1491  01B0  00AA               	movwf	___ftmul@f1+2
  1492  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1493  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  1494  01B3  0820               	movf	readADCMeter@rawInverted^(0+128),w
  1495  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1496  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1497  01B6  00AB               	movwf	___ftmul@f2
  1498  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1499  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  1500  01B9  0821               	movf	(readADCMeter@rawInverted+1)^(0+128),w
  1501  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1502  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1503  01BC  00AC               	movwf	___ftmul@f2+1
  1504  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1505  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1506  01BF  0822               	movf	(readADCMeter@rawInverted+2)^(0+128),w
  1507  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1508  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1509  01C2  00AD               	movwf	___ftmul@f2+2
  1510  01C3  120A  118A  2327  120A  118A  	fcall	___ftmul
  1511  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1512  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1513  01CA  0828               	movf	?___ftmul,w
  1514  01CB  00DD               	movwf	___ftadd@f2
  1515  01CC  0829               	movf	?___ftmul+1,w
  1516  01CD  00DE               	movwf	___ftadd@f2+1
  1517  01CE  082A               	movf	?___ftmul+2,w
  1518  01CF  00DF               	movwf	___ftadd@f2+2
  1519  01D0  120A  118A  2035  120A  118A  	fcall	___ftadd
  1520  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1521  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1522  01D7  085A               	movf	?___ftadd,w
  1523  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  1524  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1525  01DA  00A9               	movwf	readADCMeter@result^(0+128)
  1526  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1527  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1528  01DD  085B               	movf	?___ftadd+1,w
  1529  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  1530  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  1531  01E0  00AA               	movwf	(readADCMeter@result+1)^(0+128)
  1532  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1533  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1534  01E3  085C               	movf	?___ftadd+2,w
  1535  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1536  01E5  1303               	bcf	3,6	;RP1=0, select bank1
  1537  01E6  00AB               	movwf	(readADCMeter@result+2)^(0+128)
  1538                           
  1539                           ;adConv.c: 40: int resultInInt = (int) round(result);
  1540  01E7  0829               	movf	readADCMeter@result^(0+128),w
  1541  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1542  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1543  01EA  00E7               	movwf	round@x
  1544  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1545  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1546  01ED  082A               	movf	(readADCMeter@result+1)^(0+128),w
  1547  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1548  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1549  01F0  00E8               	movwf	round@x+1
  1550  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  1551  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  1552  01F3  082B               	movf	(readADCMeter@result+2)^(0+128),w
  1553  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1554  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1555  01F6  00E9               	movwf	round@x+2
  1556  01F7  120A  118A  276E  120A  118A  	fcall	_round
  1557  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1558  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1559  01FE  0867               	movf	?_round,w
  1560  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1561  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1562  0201  00AC               	movwf	_readADCMeter$677^(0+128)
  1563  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0204  0868               	movf	?_round+1,w
  1566  0205  1683               	bsf	3,5	;RP0=1, select bank1
  1567  0206  1303               	bcf	3,6	;RP1=0, select bank1
  1568  0207  00AD               	movwf	(_readADCMeter$677+1)^(0+128)
  1569  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1570  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1571  020A  0869               	movf	?_round+2,w
  1572  020B  1683               	bsf	3,5	;RP0=1, select bank1
  1573  020C  1303               	bcf	3,6	;RP1=0, select bank1
  1574  020D  00AE               	movwf	(_readADCMeter$677+2)^(0+128)
  1575                           
  1576                           ;adConv.c: 40: int resultInInt = (int) round(result);
  1577  020E  082C               	movf	_readADCMeter$677^(0+128),w
  1578  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0211  00C3               	movwf	___fttol@f1
  1581  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1582  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1583  0214  082D               	movf	(_readADCMeter$677+1)^(0+128),w
  1584  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0217  00C4               	movwf	___fttol@f1+1
  1587  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1588  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1589  021A  082E               	movf	(_readADCMeter$677+2)^(0+128),w
  1590  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1591  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1592  021D  00C5               	movwf	___fttol@f1+2
  1593  021E  120A  118A  255F   	fcall	___fttol
  1594  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1596  0223  0844               	movf	?___fttol+1,w
  1597  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1598  0225  1303               	bcf	3,6	;RP1=0, select bank1
  1599  0226  00B2               	movwf	(readADCMeter@resultInInt+1)^(0+128)
  1600  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0229  0843               	movf	?___fttol,w
  1603  022A  1683               	bsf	3,5	;RP0=1, select bank1
  1604  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1605  022C  00B1               	movwf	readADCMeter@resultInInt^(0+128)
  1606                           
  1607                           ;adConv.c: 41: return resultInInt;
  1608  022D  0832               	movf	(readADCMeter@resultInInt+1)^(0+128),w
  1609  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1610  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0230  00EE               	movwf	?_readADCMeter+1
  1612  0231  1683               	bsf	3,5	;RP0=1, select bank1
  1613  0232  1303               	bcf	3,6	;RP1=0, select bank1
  1614  0233  0831               	movf	readADCMeter@resultInInt^(0+128),w
  1615  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0236  00ED               	movwf	?_readADCMeter
  1618  0237  0008               	return
  1619  0238                     __end_of_readADCMeter:	
  1620                           
  1621                           	psect	text3
  1622  0D5A                     __ptext3:	
  1623 ;; *************** function _readADCData *****************
  1624 ;; Defined at:
  1625 ;;		line 28 in file "adConv.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  ADCResult       2    2[BANK0 ] int 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2    0[BANK0 ] int 
  1632 ;; Registers used:
  1633 ;;		wreg
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         0       2       0       0       0
  1640 ;;      Locals:         0       2       0       0       0
  1641 ;;      Temps:          0       0       0       0       0
  1642 ;;      Totals:         0       4       0       0       0
  1643 ;;Total ram usage:        4 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    2
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;;		_readADCMeter
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           
  1655                           ;psect for function _readADCData
  1656  0D5A                     _readADCData:	
  1657                           
  1658                           ;adConv.c: 30: int ADCResult = (ADRESH<<8) + ADRESL ;
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in _readADCData: [wreg]
  1662  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0D5C  081E               	movf	30,w	;volatile
  1665  0D5D  00A3               	movwf	readADCData@ADCResult+1
  1666  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  1667  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  1668  0D60  081E               	movf	30,w	;volatile
  1669  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  1670  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  1671  0D63  00A2               	movwf	readADCData@ADCResult
  1672                           
  1673                           ;adConv.c: 31: return ADCResult;
  1674  0D64  0823               	movf	readADCData@ADCResult+1,w
  1675  0D65  00A1               	movwf	?_readADCData+1
  1676  0D66  0822               	movf	readADCData@ADCResult,w
  1677  0D67  00A0               	movwf	?_readADCData
  1678  0D68  0008               	return
  1679  0D69                     __end_of_readADCData:	
  1680                           
  1681                           	psect	text4
  1682  0327                     __ptext4:	
  1683 ;; *************** function ___ftmul *****************
  1684 ;; Defined at:
  1685 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  f1              3    8[BANK0 ] float 
  1688 ;;  f2              3   11[BANK0 ] float 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  1691 ;;  sign            1   23[BANK0 ] unsigned char 
  1692 ;;  cntr            1   22[BANK0 ] unsigned char 
  1693 ;;  exp             1   18[BANK0 ] unsigned char 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  3    8[BANK0 ] float 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0, pclath, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1703 ;;      Params:         0       6       0       0       0
  1704 ;;      Locals:         0       6       0       0       0
  1705 ;;      Temps:          0       4       0       0       0
  1706 ;;      Totals:         0      16       0       0       0
  1707 ;;Total ram usage:       16 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    3
  1710 ;; This function calls:
  1711 ;;		___ftpack
  1712 ;; This function is called by:
  1713 ;;		_readADCMeter
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           
  1718                           ;psect for function ___ftmul
  1719  0327                     ___ftmul:	
  1720                           
  1721                           ;incstack = 0
  1722                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1723  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1725  0329  0828               	movf	___ftmul@f1,w
  1726  032A  00AE               	movwf	??___ftmul
  1727  032B  0829               	movf	___ftmul@f1+1,w
  1728  032C  00AF               	movwf	??___ftmul+1
  1729  032D  082A               	movf	___ftmul@f1+2,w
  1730  032E  00B0               	movwf	??___ftmul+2
  1731  032F  1003               	clrc
  1732  0330  0D2F               	rlf	??___ftmul+1,w
  1733  0331  0D30               	rlf	??___ftmul+2,w
  1734  0332  00B1               	movwf	??___ftmul+3
  1735  0333  0831               	movf	??___ftmul+3,w
  1736  0334  00B2               	movwf	___ftmul@exp
  1737  0335  0832               	movf	___ftmul@exp,w
  1738  0336  1D03               	btfss	3,2
  1739  0337  2B3F               	goto	l2664
  1740  0338  3000               	movlw	0
  1741  0339  00A8               	movwf	?___ftmul
  1742  033A  3000               	movlw	0
  1743  033B  00A9               	movwf	?___ftmul+1
  1744  033C  3000               	movlw	0
  1745  033D  00AA               	movwf	?___ftmul+2
  1746  033E  0008               	return
  1747  033F                     l2664:	
  1748  033F  082B               	movf	___ftmul@f2,w
  1749  0340  00AE               	movwf	??___ftmul
  1750  0341  082C               	movf	___ftmul@f2+1,w
  1751  0342  00AF               	movwf	??___ftmul+1
  1752  0343  082D               	movf	___ftmul@f2+2,w
  1753  0344  00B0               	movwf	??___ftmul+2
  1754  0345  1003               	clrc
  1755  0346  0D2F               	rlf	??___ftmul+1,w
  1756  0347  0D30               	rlf	??___ftmul+2,w
  1757  0348  00B1               	movwf	??___ftmul+3
  1758  0349  0831               	movf	??___ftmul+3,w
  1759  034A  00B7               	movwf	___ftmul@sign
  1760  034B  0837               	movf	___ftmul@sign,w
  1761  034C  1D03               	btfss	3,2
  1762  034D  2B55               	goto	l2670
  1763  034E  3000               	movlw	0
  1764  034F  00A8               	movwf	?___ftmul
  1765  0350  3000               	movlw	0
  1766  0351  00A9               	movwf	?___ftmul+1
  1767  0352  3000               	movlw	0
  1768  0353  00AA               	movwf	?___ftmul+2
  1769  0354  0008               	return
  1770  0355                     l2670:	
  1771  0355  0837               	movf	___ftmul@sign,w
  1772  0356  3E7B               	addlw	123
  1773  0357  00AE               	movwf	??___ftmul
  1774  0358  082E               	movf	??___ftmul,w
  1775  0359  07B2               	addwf	___ftmul@exp,f
  1776  035A  0828               	movf	___ftmul@f1,w
  1777  035B  00AE               	movwf	??___ftmul
  1778  035C  0829               	movf	___ftmul@f1+1,w
  1779  035D  00AF               	movwf	??___ftmul+1
  1780  035E  082A               	movf	___ftmul@f1+2,w
  1781  035F  00B0               	movwf	??___ftmul+2
  1782  0360  3010               	movlw	16
  1783  0361                     u3245:	
  1784  0361  1003               	clrc
  1785  0362  0CB0               	rrf	??___ftmul+2,f
  1786  0363  0CAF               	rrf	??___ftmul+1,f
  1787  0364  0CAE               	rrf	??___ftmul,f
  1788  0365  3EFF               	addlw	-1
  1789  0366  1D03               	skipz
  1790  0367  2B61               	goto	u3245
  1791  0368  082E               	movf	??___ftmul,w
  1792  0369  00B1               	movwf	??___ftmul+3
  1793  036A  0831               	movf	??___ftmul+3,w
  1794  036B  00B7               	movwf	___ftmul@sign
  1795  036C  082B               	movf	___ftmul@f2,w
  1796  036D  00AE               	movwf	??___ftmul
  1797  036E  082C               	movf	___ftmul@f2+1,w
  1798  036F  00AF               	movwf	??___ftmul+1
  1799  0370  082D               	movf	___ftmul@f2+2,w
  1800  0371  00B0               	movwf	??___ftmul+2
  1801  0372  3010               	movlw	16
  1802  0373                     u3255:	
  1803  0373  1003               	clrc
  1804  0374  0CB0               	rrf	??___ftmul+2,f
  1805  0375  0CAF               	rrf	??___ftmul+1,f
  1806  0376  0CAE               	rrf	??___ftmul,f
  1807  0377  3EFF               	addlw	-1
  1808  0378  1D03               	skipz
  1809  0379  2B73               	goto	u3255
  1810  037A  082E               	movf	??___ftmul,w
  1811  037B  00B1               	movwf	??___ftmul+3
  1812  037C  0831               	movf	??___ftmul+3,w
  1813  037D  06B7               	xorwf	___ftmul@sign,f
  1814  037E  3080               	movlw	128
  1815  037F  00AE               	movwf	??___ftmul
  1816  0380  082E               	movf	??___ftmul,w
  1817  0381  05B7               	andwf	___ftmul@sign,f
  1818  0382  17A9               	bsf	___ftmul@f1+1,7
  1819  0383  17AC               	bsf	___ftmul@f2+1,7
  1820  0384  30FF               	movlw	255
  1821  0385  05AB               	andwf	___ftmul@f2,f
  1822  0386  30FF               	movlw	255
  1823  0387  05AC               	andwf	___ftmul@f2+1,f
  1824  0388  3000               	movlw	0
  1825  0389  05AD               	andwf	___ftmul@f2+2,f
  1826  038A  3000               	movlw	0
  1827  038B  00B3               	movwf	___ftmul@f3_as_product
  1828  038C  3000               	movlw	0
  1829  038D  00B4               	movwf	___ftmul@f3_as_product+1
  1830  038E  3000               	movlw	0
  1831  038F  00B5               	movwf	___ftmul@f3_as_product+2
  1832  0390  3007               	movlw	7
  1833  0391  00AE               	movwf	??___ftmul
  1834  0392  082E               	movf	??___ftmul,w
  1835  0393  00B6               	movwf	___ftmul@cntr
  1836  0394                     l2682:	
  1837  0394  1C28               	btfss	___ftmul@f1,0
  1838  0395  2BA4               	goto	l2686
  1839  0396  082B               	movf	___ftmul@f2,w
  1840  0397  07B3               	addwf	___ftmul@f3_as_product,f
  1841  0398  082C               	movf	___ftmul@f2+1,w
  1842  0399  1103               	clrz
  1843  039A  1803               	skipnc
  1844  039B  0A2C               	incf	___ftmul@f2+1,w
  1845  039C  1D03               	btfss	3,2
  1846  039D  07B4               	addwf	___ftmul@f3_as_product+1,f
  1847  039E  082D               	movf	___ftmul@f2+2,w
  1848  039F  1103               	clrz
  1849  03A0  1803               	skipnc
  1850  03A1  0A2D               	incf	___ftmul@f2+2,w
  1851  03A2  1D03               	btfss	3,2
  1852  03A3  07B5               	addwf	___ftmul@f3_as_product+2,f
  1853  03A4                     l2686:	
  1854  03A4  3001               	movlw	1
  1855  03A5                     u3285:	
  1856  03A5  1003               	clrc
  1857  03A6  0CAA               	rrf	___ftmul@f1+2,f
  1858  03A7  0CA9               	rrf	___ftmul@f1+1,f
  1859  03A8  0CA8               	rrf	___ftmul@f1,f
  1860  03A9  3EFF               	addlw	-1
  1861  03AA  1D03               	skipz
  1862  03AB  2BA5               	goto	u3285
  1863  03AC  3001               	movlw	1
  1864  03AD                     u3295:	
  1865  03AD  1003               	clrc
  1866  03AE  0DAB               	rlf	___ftmul@f2,f
  1867  03AF  0DAC               	rlf	___ftmul@f2+1,f
  1868  03B0  0DAD               	rlf	___ftmul@f2+2,f
  1869  03B1  3EFF               	addlw	-1
  1870  03B2  1D03               	skipz
  1871  03B3  2BAD               	goto	u3295
  1872  03B4  3001               	movlw	1
  1873  03B5  02B6               	subwf	___ftmul@cntr,f
  1874  03B6  1D03               	btfss	3,2
  1875  03B7  2B94               	goto	l2682
  1876  03B8  3009               	movlw	9
  1877  03B9  00AE               	movwf	??___ftmul
  1878  03BA  082E               	movf	??___ftmul,w
  1879  03BB  00B6               	movwf	___ftmul@cntr
  1880  03BC                     l2694:	
  1881  03BC  1C28               	btfss	___ftmul@f1,0
  1882  03BD  2BCC               	goto	l2698
  1883  03BE  082B               	movf	___ftmul@f2,w
  1884  03BF  07B3               	addwf	___ftmul@f3_as_product,f
  1885  03C0  082C               	movf	___ftmul@f2+1,w
  1886  03C1  1103               	clrz
  1887  03C2  1803               	skipnc
  1888  03C3  0A2C               	incf	___ftmul@f2+1,w
  1889  03C4  1D03               	btfss	3,2
  1890  03C5  07B4               	addwf	___ftmul@f3_as_product+1,f
  1891  03C6  082D               	movf	___ftmul@f2+2,w
  1892  03C7  1103               	clrz
  1893  03C8  1803               	skipnc
  1894  03C9  0A2D               	incf	___ftmul@f2+2,w
  1895  03CA  1D03               	btfss	3,2
  1896  03CB  07B5               	addwf	___ftmul@f3_as_product+2,f
  1897  03CC                     l2698:	
  1898  03CC  3001               	movlw	1
  1899  03CD                     u3335:	
  1900  03CD  1003               	clrc
  1901  03CE  0CAA               	rrf	___ftmul@f1+2,f
  1902  03CF  0CA9               	rrf	___ftmul@f1+1,f
  1903  03D0  0CA8               	rrf	___ftmul@f1,f
  1904  03D1  3EFF               	addlw	-1
  1905  03D2  1D03               	skipz
  1906  03D3  2BCD               	goto	u3335
  1907  03D4  3001               	movlw	1
  1908  03D5                     u3345:	
  1909  03D5  1003               	clrc
  1910  03D6  0CB5               	rrf	___ftmul@f3_as_product+2,f
  1911  03D7  0CB4               	rrf	___ftmul@f3_as_product+1,f
  1912  03D8  0CB3               	rrf	___ftmul@f3_as_product,f
  1913  03D9  3EFF               	addlw	-1
  1914  03DA  1D03               	skipz
  1915  03DB  2BD5               	goto	u3345
  1916  03DC  3001               	movlw	1
  1917  03DD  02B6               	subwf	___ftmul@cntr,f
  1918  03DE  1D03               	btfss	3,2
  1919  03DF  2BBC               	goto	l2694
  1920  03E0  0833               	movf	___ftmul@f3_as_product,w
  1921  03E1  00A0               	movwf	___ftpack@arg
  1922  03E2  0834               	movf	___ftmul@f3_as_product+1,w
  1923  03E3  00A1               	movwf	___ftpack@arg+1
  1924  03E4  0835               	movf	___ftmul@f3_as_product+2,w
  1925  03E5  00A2               	movwf	___ftpack@arg+2
  1926  03E6  0832               	movf	___ftmul@exp,w
  1927  03E7  00AE               	movwf	??___ftmul
  1928  03E8  082E               	movf	??___ftmul,w
  1929  03E9  00A3               	movwf	___ftpack@exp
  1930  03EA  0837               	movf	___ftmul@sign,w
  1931  03EB  00AF               	movwf	??___ftmul+1
  1932  03EC  082F               	movf	??___ftmul+1,w
  1933  03ED  00A4               	movwf	___ftpack@sign
  1934  03EE  120A  118A  2700   	fcall	___ftpack
  1935  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1936  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1937  03F3  0820               	movf	?___ftpack,w
  1938  03F4  00A8               	movwf	?___ftmul
  1939  03F5  0821               	movf	?___ftpack+1,w
  1940  03F6  00A9               	movwf	?___ftmul+1
  1941  03F7  0822               	movf	?___ftpack+2,w
  1942  03F8  00AA               	movwf	?___ftmul+2
  1943  03F9  0008               	return
  1944  03FA                     __end_of___ftmul:	
  1945                           
  1946                           	psect	text5
  1947  0E66                     __ptext5:	
  1948 ;; *************** function ___awtoft *****************
  1949 ;; Defined at:
  1950 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  c               2    8[BANK0 ] int 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  sign            1   13[BANK0 ] unsigned char 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  3    8[BANK0 ] float 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0, pclath, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1964 ;;      Params:         0       3       0       0       0
  1965 ;;      Locals:         0       1       0       0       0
  1966 ;;      Temps:          0       2       0       0       0
  1967 ;;      Totals:         0       6       0       0       0
  1968 ;;Total ram usage:        6 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    3
  1971 ;; This function calls:
  1972 ;;		___ftpack
  1973 ;; This function is called by:
  1974 ;;		_readADCMeter
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           
  1979                           ;psect for function ___awtoft
  1980  0E66                     ___awtoft:	
  1981                           
  1982                           ;incstack = 0
  1983                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  1984  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0E68  01AD               	clrf	___awtoft@sign
  1987  0E69  1FA9               	btfss	___awtoft@c+1,7
  1988  0E6A  2E72               	goto	l2612
  1989  0E6B  09A8               	comf	___awtoft@c,f
  1990  0E6C  09A9               	comf	___awtoft@c+1,f
  1991  0E6D  0AA8               	incf	___awtoft@c,f
  1992  0E6E  1903               	skipnz
  1993  0E6F  0AA9               	incf	___awtoft@c+1,f
  1994  0E70  01AD               	clrf	___awtoft@sign
  1995  0E71  0AAD               	incf	___awtoft@sign,f
  1996  0E72                     l2612:	
  1997  0E72  0828               	movf	___awtoft@c,w
  1998  0E73  00A0               	movwf	___ftpack@arg
  1999  0E74  0829               	movf	___awtoft@c+1,w
  2000  0E75  00A1               	movwf	___ftpack@arg+1
  2001  0E76  01A2               	clrf	___ftpack@arg+2
  2002  0E77  308E               	movlw	142
  2003  0E78  00AB               	movwf	??___awtoft
  2004  0E79  082B               	movf	??___awtoft,w
  2005  0E7A  00A3               	movwf	___ftpack@exp
  2006  0E7B  082D               	movf	___awtoft@sign,w
  2007  0E7C  00AC               	movwf	??___awtoft+1
  2008  0E7D  082C               	movf	??___awtoft+1,w
  2009  0E7E  00A4               	movwf	___ftpack@sign
  2010  0E7F  120A  118A  2700   	fcall	___ftpack
  2011  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0E84  0820               	movf	?___ftpack,w
  2014  0E85  00A8               	movwf	?___awtoft
  2015  0E86  0821               	movf	?___ftpack+1,w
  2016  0E87  00A9               	movwf	?___awtoft+1
  2017  0E88  0822               	movf	?___ftpack+2,w
  2018  0E89  00AA               	movwf	?___awtoft+2
  2019  0E8A  0008               	return
  2020  0E8B                     __end_of___awtoft:	
  2021                           
  2022                           	psect	text6
  2023  0238                     __ptext6:	
  2024 ;; *************** function _moveDeg *****************
  2025 ;; Defined at:
  2026 ;;		line 63 in file "motor.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  deg             3   77[BANK0 ] float 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       3       0       0       0
  2041 ;;      Locals:         0       0      10       0       0
  2042 ;;      Temps:          0       0       1       0       0
  2043 ;;      Totals:         0       3      11       0       0
  2044 ;;Total ram usage:       14 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    6
  2047 ;; This function calls:
  2048 ;;		___ftdiv
  2049 ;;		___ftge
  2050 ;;		___ftneg
  2051 ;;		___fttol
  2052 ;;		_move
  2053 ;;		_round
  2054 ;; This function is called by:
  2055 ;;		_main
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           
  2060                           ;psect for function _moveDeg
  2061  0238                     _moveDeg:	
  2062                           
  2063                           ;motor.c: 64: char stepsToMove;
  2064                           ;motor.c: 65: if(deg<0){
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2068  0238  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0239  1303               	bcf	3,6	;RP1=0, select bank0
  2070  023A  086D               	movf	moveDeg@deg,w
  2071  023B  00A0               	movwf	___ftge@ff1
  2072  023C  086E               	movf	moveDeg@deg+1,w
  2073  023D  00A1               	movwf	___ftge@ff1+1
  2074  023E  086F               	movf	moveDeg@deg+2,w
  2075  023F  00A2               	movwf	___ftge@ff1+2
  2076  0240  3000               	movlw	0
  2077  0241  00A3               	movwf	___ftge@ff2
  2078  0242  3000               	movlw	0
  2079  0243  00A4               	movwf	___ftge@ff2+1
  2080  0244  3000               	movlw	0
  2081  0245  00A5               	movwf	___ftge@ff2+2
  2082  0246  120A  158A  27A1  120A  118A  	fcall	___ftge
  2083  024B  1803               	btfsc	3,0
  2084  024C  2ACD               	goto	l2756
  2085                           
  2086                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2087  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2088  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2089  024F  086D               	movf	moveDeg@deg,w
  2090  0250  00B0               	movwf	___ftneg@f1
  2091  0251  086E               	movf	moveDeg@deg+1,w
  2092  0252  00B1               	movwf	___ftneg@f1+1
  2093  0253  086F               	movf	moveDeg@deg+2,w
  2094  0254  00B2               	movwf	___ftneg@f1+2
  2095  0255  120A  158A  2526  120A  118A  	fcall	___ftneg
  2096  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2097  025B  1303               	bcf	3,6	;RP1=0, select bank0
  2098  025C  0830               	movf	?___ftneg,w
  2099  025D  00B6               	movwf	___ftdiv@f1
  2100  025E  0831               	movf	?___ftneg+1,w
  2101  025F  00B7               	movwf	___ftdiv@f1+1
  2102  0260  0832               	movf	?___ftneg+2,w
  2103  0261  00B8               	movwf	___ftdiv@f1+2
  2104  0262  3000               	movlw	0
  2105  0263  00B3               	movwf	___ftdiv@f2
  2106  0264  3070               	movlw	112
  2107  0265  00B4               	movwf	___ftdiv@f2+1
  2108  0266  3040               	movlw	64
  2109  0267  00B5               	movwf	___ftdiv@f2+2
  2110  0268  120A  118A  23FA  120A  118A  	fcall	___ftdiv
  2111  026D  1283               	bcf	3,5	;RP0=0, select bank0
  2112  026E  1303               	bcf	3,6	;RP1=0, select bank0
  2113  026F  0833               	movf	?___ftdiv,w
  2114  0270  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0271  1303               	bcf	3,6	;RP1=0, select bank1
  2116  0272  00A1               	movwf	_moveDeg$674^(0+128)
  2117  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0275  0834               	movf	?___ftdiv+1,w
  2120  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2121  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2122  0278  00A2               	movwf	(_moveDeg$674+1)^(0+128)
  2123  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2124  027A  1303               	bcf	3,6	;RP1=0, select bank0
  2125  027B  0835               	movf	?___ftdiv+2,w
  2126  027C  1683               	bsf	3,5	;RP0=1, select bank1
  2127  027D  1303               	bcf	3,6	;RP1=0, select bank1
  2128  027E  00A3               	movwf	(_moveDeg$674+2)^(0+128)
  2129                           
  2130                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2131  027F  0821               	movf	_moveDeg$674^(0+128),w
  2132  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2133  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2134  0282  00E7               	movwf	round@x
  2135  0283  1683               	bsf	3,5	;RP0=1, select bank1
  2136  0284  1303               	bcf	3,6	;RP1=0, select bank1
  2137  0285  0822               	movf	(_moveDeg$674+1)^(0+128),w
  2138  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0288  00E8               	movwf	round@x+1
  2141  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2142  028A  1303               	bcf	3,6	;RP1=0, select bank1
  2143  028B  0823               	movf	(_moveDeg$674+2)^(0+128),w
  2144  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2145  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2146  028E  00E9               	movwf	round@x+2
  2147  028F  120A  118A  276E  120A  118A  	fcall	_round
  2148  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0295  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0296  0867               	movf	?_round,w
  2151  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2152  0298  1303               	bcf	3,6	;RP1=0, select bank1
  2153  0299  00A4               	movwf	_moveDeg$675^(0+128)
  2154  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2155  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2156  029C  0868               	movf	?_round+1,w
  2157  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2158  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2159  029F  00A5               	movwf	(_moveDeg$675+1)^(0+128)
  2160  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2161  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2162  02A2  0869               	movf	?_round+2,w
  2163  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2164  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2165  02A5  00A6               	movwf	(_moveDeg$675+2)^(0+128)
  2166                           
  2167                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2168  02A6  0824               	movf	_moveDeg$675^(0+128),w
  2169  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2170  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2171  02A9  00C3               	movwf	___fttol@f1
  2172  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2173  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  2174  02AC  0825               	movf	(_moveDeg$675+1)^(0+128),w
  2175  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2176  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2177  02AF  00C4               	movwf	___fttol@f1+1
  2178  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  2179  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  2180  02B2  0826               	movf	(_moveDeg$675+2)^(0+128),w
  2181  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2182  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2183  02B5  00C5               	movwf	___fttol@f1+2
  2184  02B6  120A  118A  255F  120A  118A  	fcall	___fttol
  2185  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2186  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2187  02BD  0843               	movf	?___fttol,w
  2188  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2189  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2190  02C0  00A0               	movwf	??_moveDeg^(0+128)
  2191  02C1  0820               	movf	??_moveDeg^(0+128),w
  2192  02C2  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2193                           
  2194                           ;motor.c: 67: move(stepsToMove,0);
  2195  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2196  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2197  02C5  01AF               	clrf	move@direction
  2198  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  2199  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  2200  02C8  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2201  02C9  120A  118A  25ED   	fcall	_move
  2202                           
  2203                           ;motor.c: 68: }
  2204  02CC  0008               	return
  2205  02CD                     l2756:	
  2206                           
  2207                           ;motor.c: 69: else{
  2208                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  2209  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2210  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2211  02CF  086D               	movf	moveDeg@deg,w
  2212  02D0  00B6               	movwf	___ftdiv@f1
  2213  02D1  086E               	movf	moveDeg@deg+1,w
  2214  02D2  00B7               	movwf	___ftdiv@f1+1
  2215  02D3  086F               	movf	moveDeg@deg+2,w
  2216  02D4  00B8               	movwf	___ftdiv@f1+2
  2217  02D5  3000               	movlw	0
  2218  02D6  00B3               	movwf	___ftdiv@f2
  2219  02D7  3070               	movlw	112
  2220  02D8  00B4               	movwf	___ftdiv@f2+1
  2221  02D9  3040               	movlw	64
  2222  02DA  00B5               	movwf	___ftdiv@f2+2
  2223  02DB  120A  118A  23FA  120A  118A  	fcall	___ftdiv
  2224  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2225  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2226  02E2  0833               	movf	?___ftdiv,w
  2227  02E3  00E7               	movwf	round@x
  2228  02E4  0834               	movf	?___ftdiv+1,w
  2229  02E5  00E8               	movwf	round@x+1
  2230  02E6  0835               	movf	?___ftdiv+2,w
  2231  02E7  00E9               	movwf	round@x+2
  2232  02E8  120A  118A  276E  120A  118A  	fcall	_round
  2233  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2234  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2235  02EF  0867               	movf	?_round,w
  2236  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2237  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2238  02F2  00A7               	movwf	_moveDeg$676^(0+128)
  2239  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2240  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2241  02F5  0868               	movf	?_round+1,w
  2242  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2243  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  2244  02F8  00A8               	movwf	(_moveDeg$676+1)^(0+128)
  2245  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2246  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2247  02FB  0869               	movf	?_round+2,w
  2248  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2249  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  2250  02FE  00A9               	movwf	(_moveDeg$676+2)^(0+128)
  2251                           
  2252                           ;motor.c: 69: else{
  2253                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  2254  02FF  0827               	movf	_moveDeg$676^(0+128),w
  2255  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0302  00C3               	movwf	___fttol@f1
  2258  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2259  0304  1303               	bcf	3,6	;RP1=0, select bank1
  2260  0305  0828               	movf	(_moveDeg$676+1)^(0+128),w
  2261  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0308  00C4               	movwf	___fttol@f1+1
  2264  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2265  030A  1303               	bcf	3,6	;RP1=0, select bank1
  2266  030B  0829               	movf	(_moveDeg$676+2)^(0+128),w
  2267  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2268  030D  1303               	bcf	3,6	;RP1=0, select bank0
  2269  030E  00C5               	movwf	___fttol@f1+2
  2270  030F  120A  118A  255F  120A  118A  	fcall	___fttol
  2271  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0316  0843               	movf	?___fttol,w
  2274  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2275  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2276  0319  00A0               	movwf	??_moveDeg^(0+128)
  2277  031A  0820               	movf	??_moveDeg^(0+128),w
  2278  031B  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2279                           
  2280                           ;motor.c: 71: move(stepsToMove,1);
  2281  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2282  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2283  031E  01AF               	clrf	move@direction
  2284  031F  0AAF               	incf	move@direction,f
  2285  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2286  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2287  0322  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2288  0323  120A  118A  25ED   	fcall	_move
  2289  0326  0008               	return
  2290  0327                     __end_of_moveDeg:	
  2291                           
  2292                           	psect	text7
  2293  076E                     __ptext7:	
  2294 ;; *************** function _round *****************
  2295 ;; Defined at:
  2296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  x               3   71[BANK0 ] void 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  f               3   74[BANK0 ] void 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  3   71[BANK0 ] void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2310 ;;      Params:         0       3       0       0       0
  2311 ;;      Locals:         0       3       0       0       0
  2312 ;;      Temps:          0       0       0       0       0
  2313 ;;      Totals:         0       6       0       0       0
  2314 ;;Total ram usage:        6 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    5
  2317 ;; This function calls:
  2318 ;;		___ftadd
  2319 ;;		___ftneg
  2320 ;;		_trunc
  2321 ;; This function is called by:
  2322 ;;		_moveDeg
  2323 ;;		_readADCMeter
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _round
  2329  076E                     _round:	
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2333  076E  1283               	bcf	3,5	;RP0=0, select bank0
  2334  076F  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0770  0867               	movf	round@x,w
  2336  0771  00DA               	movwf	___ftadd@f1
  2337  0772  0868               	movf	round@x+1,w
  2338  0773  00DB               	movwf	___ftadd@f1+1
  2339  0774  0869               	movf	round@x+2,w
  2340  0775  00DC               	movwf	___ftadd@f1+2
  2341  0776  0867               	movf	round@x,w
  2342  0777  00D1               	movwf	trunc@x
  2343  0778  0868               	movf	round@x+1,w
  2344  0779  00D2               	movwf	trunc@x+1
  2345  077A  0869               	movf	round@x+2,w
  2346  077B  00D3               	movwf	trunc@x+2
  2347  077C  120A  158A  2709  120A  118A  	fcall	_trunc
  2348  0781  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0782  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0783  0851               	movf	?_trunc,w
  2351  0784  00B0               	movwf	___ftneg@f1
  2352  0785  0852               	movf	?_trunc+1,w
  2353  0786  00B1               	movwf	___ftneg@f1+1
  2354  0787  0853               	movf	?_trunc+2,w
  2355  0788  00B2               	movwf	___ftneg@f1+2
  2356  0789  120A  158A  2526  120A  118A  	fcall	___ftneg
  2357  078E  1283               	bcf	3,5	;RP0=0, select bank0
  2358  078F  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0790  0830               	movf	?___ftneg,w
  2360  0791  00DD               	movwf	___ftadd@f2
  2361  0792  0831               	movf	?___ftneg+1,w
  2362  0793  00DE               	movwf	___ftadd@f2+1
  2363  0794  0832               	movf	?___ftneg+2,w
  2364  0795  00DF               	movwf	___ftadd@f2+2
  2365  0796  120A  118A  2035  120A  118A  	fcall	___ftadd
  2366  079B  1283               	bcf	3,5	;RP0=0, select bank0
  2367  079C  1303               	bcf	3,6	;RP1=0, select bank0
  2368  079D  085A               	movf	?___ftadd,w
  2369  079E  00EA               	movwf	round@f
  2370  079F  085B               	movf	?___ftadd+1,w
  2371  07A0  00EB               	movwf	round@f+1
  2372  07A1  085C               	movf	?___ftadd+2,w
  2373  07A2  00EC               	movwf	round@f+2
  2374  07A3  086A               	movf	round@f,w
  2375  07A4  00DA               	movwf	___ftadd@f1
  2376  07A5  086B               	movf	round@f+1,w
  2377  07A6  00DB               	movwf	___ftadd@f1+1
  2378  07A7  086C               	movf	round@f+2,w
  2379  07A8  00DC               	movwf	___ftadd@f1+2
  2380  07A9  0867               	movf	round@x,w
  2381  07AA  00DD               	movwf	___ftadd@f2
  2382  07AB  0868               	movf	round@x+1,w
  2383  07AC  00DE               	movwf	___ftadd@f2+1
  2384  07AD  0869               	movf	round@x+2,w
  2385  07AE  00DF               	movwf	___ftadd@f2+2
  2386  07AF  120A  118A  2035  120A  118A  	fcall	___ftadd
  2387  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  2388  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  2389  07B6  085A               	movf	?___ftadd,w
  2390  07B7  00E7               	movwf	round@x
  2391  07B8  085B               	movf	?___ftadd+1,w
  2392  07B9  00E8               	movwf	round@x+1
  2393  07BA  085C               	movf	?___ftadd+2,w
  2394  07BB  00E9               	movwf	round@x+2
  2395  07BC  0867               	movf	round@x,w
  2396  07BD  00D1               	movwf	trunc@x
  2397  07BE  0868               	movf	round@x+1,w
  2398  07BF  00D2               	movwf	trunc@x+1
  2399  07C0  0869               	movf	round@x+2,w
  2400  07C1  00D3               	movwf	trunc@x+2
  2401  07C2  120A  158A  2709   	fcall	_trunc
  2402  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  2403  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  2404  07C7  0851               	movf	?_trunc,w
  2405  07C8  00E7               	movwf	?_round
  2406  07C9  0852               	movf	?_trunc+1,w
  2407  07CA  00E8               	movwf	?_round+1
  2408  07CB  0853               	movf	?_trunc+2,w
  2409  07CC  00E9               	movwf	?_round+2
  2410  07CD  0008               	return
  2411  07CE                     __end_of_round:	
  2412                           
  2413                           	psect	text8
  2414  0F09                     __ptext8:	
  2415 ;; *************** function _trunc *****************
  2416 ;; Defined at:
  2417 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  x               3   49[BANK0 ] void 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  i               3   53[BANK0 ] void 
  2422 ;;  expon           2   56[BANK0 ] int 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  3   49[BANK0 ] int 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         0       3       0       0       0
  2433 ;;      Locals:         0       5       0       0       0
  2434 ;;      Temps:          0       1       0       0       0
  2435 ;;      Totals:         0       9       0       0       0
  2436 ;;Total ram usage:        9 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    4
  2439 ;; This function calls:
  2440 ;;		___altoft
  2441 ;;		___fttol
  2442 ;;		_frexp
  2443 ;; This function is called by:
  2444 ;;		_round
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _trunc
  2450  0F09                     _trunc:	
  2451                           
  2452                           ;incstack = 0
  2453                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2454  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0F0B  0851               	movf	trunc@x,w
  2457  0F0C  00A0               	movwf	frexp@value
  2458  0F0D  0852               	movf	trunc@x+1,w
  2459  0F0E  00A1               	movwf	frexp@value+1
  2460  0F0F  0853               	movf	trunc@x+2,w
  2461  0F10  00A2               	movwf	frexp@value+2
  2462  0F11  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  2463  0F12  00D4               	movwf	??_trunc
  2464  0F13  0854               	movf	??_trunc,w
  2465  0F14  00A3               	movwf	frexp@eptr
  2466  0F15  120A  158A  268B  120A  158A  	fcall	_frexp
  2467  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  2468  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0F1C  1FD9               	btfss	trunc@expon+1,7
  2470  0F1D  2F25               	goto	l2472
  2471  0F1E  3000               	movlw	0
  2472  0F1F  00D1               	movwf	?_trunc
  2473  0F20  3000               	movlw	0
  2474  0F21  00D2               	movwf	?_trunc+1
  2475  0F22  3000               	movlw	0
  2476  0F23  00D3               	movwf	?_trunc+2
  2477  0F24  0008               	return
  2478  0F25                     l2472:	
  2479  0F25  3000               	movlw	0
  2480  0F26  0259               	subwf	trunc@expon+1,w
  2481  0F27  3015               	movlw	21
  2482  0F28  1903               	skipnz
  2483  0F29  0258               	subwf	trunc@expon,w
  2484  0F2A  1803               	btfsc	3,0
  2485  0F2B  0008               	return
  2486  0F2C  0851               	movf	trunc@x,w
  2487  0F2D  00C3               	movwf	___fttol@f1
  2488  0F2E  0852               	movf	trunc@x+1,w
  2489  0F2F  00C4               	movwf	___fttol@f1+1
  2490  0F30  0853               	movf	trunc@x+2,w
  2491  0F31  00C5               	movwf	___fttol@f1+2
  2492  0F32  120A  118A  255F  120A  158A  	fcall	___fttol
  2493  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  2494  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  2495  0F39  0846               	movf	?___fttol+3,w
  2496  0F3A  00AB               	movwf	___altoft@c+3
  2497  0F3B  0845               	movf	?___fttol+2,w
  2498  0F3C  00AA               	movwf	___altoft@c+2
  2499  0F3D  0844               	movf	?___fttol+1,w
  2500  0F3E  00A9               	movwf	___altoft@c+1
  2501  0F3F  0843               	movf	?___fttol,w
  2502  0F40  00A8               	movwf	___altoft@c
  2503  0F41  120A  158A  26C7   	fcall	___altoft
  2504  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0F46  0828               	movf	?___altoft,w
  2507  0F47  00D5               	movwf	trunc@i
  2508  0F48  0829               	movf	?___altoft+1,w
  2509  0F49  00D6               	movwf	trunc@i+1
  2510  0F4A  082A               	movf	?___altoft+2,w
  2511  0F4B  00D7               	movwf	trunc@i+2
  2512  0F4C  0855               	movf	trunc@i,w
  2513  0F4D  00D1               	movwf	?_trunc
  2514  0F4E  0856               	movf	trunc@i+1,w
  2515  0F4F  00D2               	movwf	?_trunc+1
  2516  0F50  0857               	movf	trunc@i+2,w
  2517  0F51  00D3               	movwf	?_trunc+2
  2518  0F52  0008               	return
  2519  0F53                     __end_of_trunc:	
  2520                           
  2521                           	psect	text9
  2522  0E8B                     __ptext9:	
  2523 ;; *************** function _frexp *****************
  2524 ;; Defined at:
  2525 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  value           3    0[BANK0 ] int 
  2528 ;;  eptr            1    3[BANK0 ] PTR int 
  2529 ;;		 -> trunc@expon(2), 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  3    0[BANK0 ] PTR int 
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       4       0       0       0
  2542 ;;      Locals:         0       0       0       0       0
  2543 ;;      Temps:          0       2       0       0       0
  2544 ;;      Totals:         0       6       0       0       0
  2545 ;;Total ram usage:        6 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    2
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_trunc
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _frexp
  2557  0E8B                     _frexp:	
  2558                           
  2559                           ;incstack = 0
  2560                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  2561  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0E8D  0822               	movf	frexp@value+2,w
  2564  0E8E  0421               	iorwf	frexp@value+1,w
  2565  0E8F  0420               	iorwf	frexp@value,w
  2566  0E90  1D03               	skipz
  2567  0E91  2E99               	goto	l2342
  2568  0E92  0823               	movf	frexp@eptr,w
  2569  0E93  0084               	movwf	4
  2570  0E94  1383               	bcf	3,7	;select IRP bank0
  2571  0E95  0180               	clrf	0
  2572  0E96  0A84               	incf	4,f
  2573  0E97  0180               	clrf	0
  2574                           
  2575                           ;	Return value of _frexp is never used
  2576  0E98  0008               	return
  2577  0E99                     l2342:	
  2578  0E99  0822               	movf	frexp@value+2,w
  2579  0E9A  397F               	andlw	127
  2580  0E9B  00A4               	movwf	??_frexp
  2581  0E9C  01A5               	clrf	??_frexp+1
  2582  0E9D  1003               	clrc
  2583  0E9E  0DA4               	rlf	??_frexp,f
  2584  0E9F  0DA5               	rlf	??_frexp+1,f
  2585  0EA0  0823               	movf	frexp@eptr,w
  2586  0EA1  0084               	movwf	4
  2587  0EA2  0824               	movf	??_frexp,w
  2588  0EA3  1383               	bcf	3,7	;select IRP bank0
  2589  0EA4  0080               	movwf	0
  2590  0EA5  0A84               	incf	4,f
  2591  0EA6  0825               	movf	??_frexp+1,w
  2592  0EA7  0080               	movwf	0
  2593  0EA8  0D21               	rlf	frexp@value+1,w
  2594  0EA9  0D21               	rlf	frexp@value+1,w
  2595  0EAA  3901               	andlw	1
  2596  0EAB  00A4               	movwf	??_frexp
  2597  0EAC  01A5               	clrf	??_frexp+1
  2598  0EAD  0823               	movf	frexp@eptr,w
  2599  0EAE  0084               	movwf	4
  2600  0EAF  0824               	movf	??_frexp,w
  2601  0EB0  0480               	iorwf	0,f
  2602  0EB1  0A84               	incf	4,f
  2603  0EB2  0825               	movf	??_frexp+1,w
  2604  0EB3  0480               	iorwf	0,f
  2605  0EB4  0823               	movf	frexp@eptr,w
  2606  0EB5  0084               	movwf	4
  2607  0EB6  3082               	movlw	130
  2608  0EB7  0780               	addwf	0,f
  2609  0EB8  0F84               	incfsz	4,f
  2610  0EB9  0800               	movf	0,w
  2611  0EBA  1803               	skipnc
  2612  0EBB  0A00               	incf	0,w
  2613  0EBC  00FF               	movwf	127
  2614  0EBD  30FF               	movlw	255
  2615  0EBE  077F               	addwf	127,w
  2616  0EBF  0080               	movwf	0
  2617  0EC0  0384               	decf	4,f
  2618  0EC1  0822               	movf	frexp@value+2,w
  2619  0EC2  3980               	andlw	-128
  2620  0EC3  383F               	iorlw	63
  2621  0EC4  00A2               	movwf	frexp@value+2
  2622  0EC5  13A1               	bcf	frexp@value+1,7
  2623  0EC6  0008               	return
  2624  0EC7                     __end_of_frexp:	
  2625                           ;	Return value of _frexp is never used
  2626                           
  2627                           
  2628                           	psect	text10
  2629  055F                     __ptext10:	
  2630 ;; *************** function ___fttol *****************
  2631 ;; Defined at:
  2632 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  f1              3   35[BANK0 ] float 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  lval            4   44[BANK0 ] unsigned long 
  2637 ;;  exp1            1   48[BANK0 ] unsigned char 
  2638 ;;  sign1           1   43[BANK0 ] unsigned char 
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  4   35[BANK0 ] long 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2, status,0
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2648 ;;      Params:         0       4       0       0       0
  2649 ;;      Locals:         0       6       0       0       0
  2650 ;;      Temps:          0       4       0       0       0
  2651 ;;      Totals:         0      14       0       0       0
  2652 ;;Total ram usage:       14 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    2
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_moveDeg
  2659 ;;		_readADCMeter
  2660 ;;		_trunc
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function ___fttol
  2666  055F                     ___fttol:	
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2670  055F  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0560  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0561  0843               	movf	___fttol@f1,w
  2673  0562  00C7               	movwf	??___fttol
  2674  0563  0844               	movf	___fttol@f1+1,w
  2675  0564  00C8               	movwf	??___fttol+1
  2676  0565  0845               	movf	___fttol@f1+2,w
  2677  0566  00C9               	movwf	??___fttol+2
  2678  0567  1003               	clrc
  2679  0568  0D48               	rlf	??___fttol+1,w
  2680  0569  0D49               	rlf	??___fttol+2,w
  2681  056A  00CA               	movwf	??___fttol+3
  2682  056B  084A               	movf	??___fttol+3,w
  2683  056C  00D0               	movwf	___fttol@exp1
  2684  056D  0850               	movf	___fttol@exp1,w
  2685  056E  1D03               	btfss	3,2
  2686  056F  2D79               	goto	l1636
  2687  0570  3000               	movlw	0
  2688  0571  00C6               	movwf	?___fttol+3
  2689  0572  3000               	movlw	0
  2690  0573  00C5               	movwf	?___fttol+2
  2691  0574  3000               	movlw	0
  2692  0575  00C4               	movwf	?___fttol+1
  2693  0576  3000               	movlw	0
  2694  0577  00C3               	movwf	?___fttol
  2695  0578  0008               	return
  2696  0579                     l1636:	
  2697  0579  0843               	movf	___fttol@f1,w
  2698  057A  00C7               	movwf	??___fttol
  2699  057B  0844               	movf	___fttol@f1+1,w
  2700  057C  00C8               	movwf	??___fttol+1
  2701  057D  0845               	movf	___fttol@f1+2,w
  2702  057E  00C9               	movwf	??___fttol+2
  2703  057F  3017               	movlw	23
  2704  0580                     u1465:	
  2705  0580  1003               	clrc
  2706  0581  0CC9               	rrf	??___fttol+2,f
  2707  0582  0CC8               	rrf	??___fttol+1,f
  2708  0583  0CC7               	rrf	??___fttol,f
  2709  0584  3EFF               	addlw	-1
  2710  0585  1D03               	skipz
  2711  0586  2D80               	goto	u1465
  2712  0587  0847               	movf	??___fttol,w
  2713  0588  00CA               	movwf	??___fttol+3
  2714  0589  084A               	movf	??___fttol+3,w
  2715  058A  00CB               	movwf	___fttol@sign1
  2716  058B  17C4               	bsf	___fttol@f1+1,7
  2717  058C  30FF               	movlw	255
  2718  058D  05C3               	andwf	___fttol@f1,f
  2719  058E  30FF               	movlw	255
  2720  058F  05C4               	andwf	___fttol@f1+1,f
  2721  0590  3000               	movlw	0
  2722  0591  05C5               	andwf	___fttol@f1+2,f
  2723  0592  0843               	movf	___fttol@f1,w
  2724  0593  00CC               	movwf	___fttol@lval
  2725  0594  0844               	movf	___fttol@f1+1,w
  2726  0595  00CD               	movwf	___fttol@lval+1
  2727  0596  0845               	movf	___fttol@f1+2,w
  2728  0597  00CE               	movwf	___fttol@lval+2
  2729  0598  01CF               	clrf	___fttol@lval+3
  2730  0599  308E               	movlw	142
  2731  059A  02D0               	subwf	___fttol@exp1,f
  2732  059B  1FD0               	btfss	___fttol@exp1,7
  2733  059C  2DBB               	goto	l1656
  2734  059D  0850               	movf	___fttol@exp1,w
  2735  059E  3A80               	xorlw	128
  2736  059F  3E8F               	addlw	143
  2737  05A0  1803               	skipnc
  2738  05A1  2DAB               	goto	l1654
  2739  05A2  3000               	movlw	0
  2740  05A3  00C6               	movwf	?___fttol+3
  2741  05A4  3000               	movlw	0
  2742  05A5  00C5               	movwf	?___fttol+2
  2743  05A6  3000               	movlw	0
  2744  05A7  00C4               	movwf	?___fttol+1
  2745  05A8  3000               	movlw	0
  2746  05A9  00C3               	movwf	?___fttol
  2747  05AA  0008               	return
  2748  05AB                     l1654:	
  2749  05AB  3001               	movlw	1
  2750  05AC                     u1495:	
  2751  05AC  1003               	clrc
  2752  05AD  0CCF               	rrf	___fttol@lval+3,f
  2753  05AE  0CCE               	rrf	___fttol@lval+2,f
  2754  05AF  0CCD               	rrf	___fttol@lval+1,f
  2755  05B0  0CCC               	rrf	___fttol@lval,f
  2756  05B1  3EFF               	addlw	-1
  2757  05B2  1D03               	skipz
  2758  05B3  2DAC               	goto	u1495
  2759  05B4  3001               	movlw	1
  2760  05B5  00C7               	movwf	??___fttol
  2761  05B6  0847               	movf	??___fttol,w
  2762  05B7  07D0               	addwf	___fttol@exp1,f
  2763  05B8  1903               	btfsc	3,2
  2764  05B9  2DD6               	goto	l1664
  2765  05BA  2DAB               	goto	l1654
  2766  05BB                     l1656:	
  2767  05BB  3018               	movlw	24
  2768  05BC  0250               	subwf	___fttol@exp1,w
  2769  05BD  1C03               	skipc
  2770  05BE  2DD3               	goto	l668
  2771  05BF  3000               	movlw	0
  2772  05C0  00C6               	movwf	?___fttol+3
  2773  05C1  3000               	movlw	0
  2774  05C2  00C5               	movwf	?___fttol+2
  2775  05C3  3000               	movlw	0
  2776  05C4  00C4               	movwf	?___fttol+1
  2777  05C5  3000               	movlw	0
  2778  05C6  00C3               	movwf	?___fttol
  2779  05C7  0008               	return
  2780  05C8                     l1662:	
  2781  05C8  3001               	movlw	1
  2782  05C9  00C7               	movwf	??___fttol
  2783  05CA                     u1525:	
  2784  05CA  1003               	clrc
  2785  05CB  0DCC               	rlf	___fttol@lval,f
  2786  05CC  0DCD               	rlf	___fttol@lval+1,f
  2787  05CD  0DCE               	rlf	___fttol@lval+2,f
  2788  05CE  0DCF               	rlf	___fttol@lval+3,f
  2789  05CF  0BC7               	decfsz	??___fttol,f
  2790  05D0  2DCA               	goto	u1525
  2791  05D1  3001               	movlw	1
  2792  05D2  02D0               	subwf	___fttol@exp1,f
  2793  05D3                     l668:	
  2794  05D3  0850               	movf	___fttol@exp1,w
  2795  05D4  1D03               	btfss	3,2
  2796  05D5  2DC8               	goto	l1662
  2797  05D6                     l1664:	
  2798  05D6  084B               	movf	___fttol@sign1,w
  2799  05D7  1903               	btfsc	3,2
  2800  05D8  2DE4               	goto	l1668
  2801  05D9  09CC               	comf	___fttol@lval,f
  2802  05DA  09CD               	comf	___fttol@lval+1,f
  2803  05DB  09CE               	comf	___fttol@lval+2,f
  2804  05DC  09CF               	comf	___fttol@lval+3,f
  2805  05DD  0ACC               	incf	___fttol@lval,f
  2806  05DE  1903               	skipnz
  2807  05DF  0ACD               	incf	___fttol@lval+1,f
  2808  05E0  1903               	skipnz
  2809  05E1  0ACE               	incf	___fttol@lval+2,f
  2810  05E2  1903               	skipnz
  2811  05E3  0ACF               	incf	___fttol@lval+3,f
  2812  05E4                     l1668:	
  2813  05E4  084F               	movf	___fttol@lval+3,w
  2814  05E5  00C6               	movwf	?___fttol+3
  2815  05E6  084E               	movf	___fttol@lval+2,w
  2816  05E7  00C5               	movwf	?___fttol+2
  2817  05E8  084D               	movf	___fttol@lval+1,w
  2818  05E9  00C4               	movwf	?___fttol+1
  2819  05EA  084C               	movf	___fttol@lval,w
  2820  05EB  00C3               	movwf	?___fttol
  2821  05EC  0008               	return
  2822  05ED                     __end_of___fttol:	
  2823                           
  2824                           	psect	text11
  2825  0EC7                     __ptext11:	
  2826 ;; *************** function ___altoft *****************
  2827 ;; Defined at:
  2828 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  c               4    8[BANK0 ] long 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  sign            1   15[BANK0 ] unsigned char 
  2833 ;;  exp             1   14[BANK0 ] unsigned char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  3    8[BANK0 ] float 
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0, pclath, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2843 ;;      Params:         0       4       0       0       0
  2844 ;;      Locals:         0       2       0       0       0
  2845 ;;      Temps:          0       2       0       0       0
  2846 ;;      Totals:         0       8       0       0       0
  2847 ;;Total ram usage:        8 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    3
  2850 ;; This function calls:
  2851 ;;		___ftpack
  2852 ;; This function is called by:
  2853 ;;		_trunc
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           
  2858                           ;psect for function ___altoft
  2859  0EC7                     ___altoft:	
  2860                           
  2861                           ;incstack = 0
  2862                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2863  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0EC9  01AF               	clrf	___altoft@sign
  2866  0ECA  308E               	movlw	142
  2867  0ECB  00AC               	movwf	??___altoft
  2868  0ECC  082C               	movf	??___altoft,w
  2869  0ECD  00AE               	movwf	___altoft@exp
  2870  0ECE  1FAB               	btfss	___altoft@c+3,7
  2871  0ECF  2EDD               	goto	l2330
  2872  0ED0  09A8               	comf	___altoft@c,f
  2873  0ED1  09A9               	comf	___altoft@c+1,f
  2874  0ED2  09AA               	comf	___altoft@c+2,f
  2875  0ED3  09AB               	comf	___altoft@c+3,f
  2876  0ED4  0AA8               	incf	___altoft@c,f
  2877  0ED5  1903               	skipnz
  2878  0ED6  0AA9               	incf	___altoft@c+1,f
  2879  0ED7  1903               	skipnz
  2880  0ED8  0AAA               	incf	___altoft@c+2,f
  2881  0ED9  1903               	skipnz
  2882  0EDA  0AAB               	incf	___altoft@c+3,f
  2883  0EDB  01AF               	clrf	___altoft@sign
  2884  0EDC  0AAF               	incf	___altoft@sign,f
  2885  0EDD                     l2330:	
  2886  0EDD  30FF               	movlw	255
  2887  0EDE  052B               	andwf	___altoft@c+3,w
  2888  0EDF  1903               	btfsc	3,2
  2889  0EE0  2EEF               	goto	l2332
  2890  0EE1  3001               	movlw	1
  2891  0EE2                     u2685:	
  2892  0EE2  1003               	clrc
  2893  0EE3  0CAB               	rrf	___altoft@c+3,f
  2894  0EE4  0CAA               	rrf	___altoft@c+2,f
  2895  0EE5  0CA9               	rrf	___altoft@c+1,f
  2896  0EE6  0CA8               	rrf	___altoft@c,f
  2897  0EE7  3EFF               	addlw	-1
  2898  0EE8  1D03               	skipz
  2899  0EE9  2EE2               	goto	u2685
  2900  0EEA  3001               	movlw	1
  2901  0EEB  00AC               	movwf	??___altoft
  2902  0EEC  082C               	movf	??___altoft,w
  2903  0EED  07AE               	addwf	___altoft@exp,f
  2904  0EEE  2EDD               	goto	l2330
  2905  0EEF                     l2332:	
  2906  0EEF  0828               	movf	___altoft@c,w
  2907  0EF0  00A0               	movwf	___ftpack@arg
  2908  0EF1  0829               	movf	___altoft@c+1,w
  2909  0EF2  00A1               	movwf	___ftpack@arg+1
  2910  0EF3  082A               	movf	___altoft@c+2,w
  2911  0EF4  00A2               	movwf	___ftpack@arg+2
  2912  0EF5  082E               	movf	___altoft@exp,w
  2913  0EF6  00AC               	movwf	??___altoft
  2914  0EF7  082C               	movf	??___altoft,w
  2915  0EF8  00A3               	movwf	___ftpack@exp
  2916  0EF9  082F               	movf	___altoft@sign,w
  2917  0EFA  00AD               	movwf	??___altoft+1
  2918  0EFB  082D               	movf	??___altoft+1,w
  2919  0EFC  00A4               	movwf	___ftpack@sign
  2920  0EFD  120A  118A  2700   	fcall	___ftpack
  2921  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0F02  0820               	movf	?___ftpack,w
  2924  0F03  00A8               	movwf	?___altoft
  2925  0F04  0821               	movf	?___ftpack+1,w
  2926  0F05  00A9               	movwf	?___altoft+1
  2927  0F06  0822               	movf	?___ftpack+2,w
  2928  0F07  00AA               	movwf	?___altoft+2
  2929  0F08  0008               	return
  2930  0F09                     __end_of___altoft:	
  2931                           
  2932                           	psect	text12
  2933  0D26                     __ptext12:	
  2934 ;; *************** function ___ftneg *****************
  2935 ;; Defined at:
  2936 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  f1              3   16[BANK0 ] float 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  3   16[BANK0 ] float 
  2943 ;; Registers used:
  2944 ;;		wreg
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2950 ;;      Params:         0       3       0       0       0
  2951 ;;      Locals:         0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0
  2953 ;;      Totals:         0       3       0       0       0
  2954 ;;Total ram usage:        3 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    2
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_moveDeg
  2961 ;;		_round
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           
  2966                           ;psect for function ___ftneg
  2967  0D26                     ___ftneg:	
  2968                           
  2969                           ;incstack = 0
  2970                           ; Regs used in ___ftneg: [wreg]
  2971  0D26  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0D27  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0D28  0832               	movf	___ftneg@f1+2,w
  2974  0D29  0431               	iorwf	___ftneg@f1+1,w
  2975  0D2A  0430               	iorwf	___ftneg@f1,w
  2976  0D2B  1903               	skipnz
  2977  0D2C  0008               	return
  2978  0D2D  3080               	movlw	128
  2979  0D2E  06B2               	xorwf	___ftneg@f1+2,f
  2980  0D2F  0008               	return
  2981  0D30                     __end_of___ftneg:	
  2982                           
  2983                           	psect	text13
  2984  0035                     __ptext13:	
  2985 ;; *************** function ___ftadd *****************
  2986 ;; Defined at:
  2987 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  f1              3   58[BANK0 ] float 
  2990 ;;  f2              3   61[BANK0 ] float 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  exp1            1   70[BANK0 ] unsigned char 
  2993 ;;  exp2            1   69[BANK0 ] unsigned char 
  2994 ;;  sign            1   68[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  3   58[BANK0 ] float 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0, pclath, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3004 ;;      Params:         0       6       0       0       0
  3005 ;;      Locals:         0       3       0       0       0
  3006 ;;      Temps:          0       4       0       0       0
  3007 ;;      Totals:         0      13       0       0       0
  3008 ;;Total ram usage:       13 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    3
  3011 ;; This function calls:
  3012 ;;		___ftpack
  3013 ;; This function is called by:
  3014 ;;		_readADCMeter
  3015 ;;		_round
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function ___ftadd
  3021  0035                     ___ftadd:	
  3022                           
  3023                           ;incstack = 0
  3024                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3025  0035  1283               	bcf	3,5	;RP0=0, select bank0
  3026  0036  1303               	bcf	3,6	;RP1=0, select bank0
  3027  0037  085A               	movf	___ftadd@f1,w
  3028  0038  00E0               	movwf	??___ftadd
  3029  0039  085B               	movf	___ftadd@f1+1,w
  3030  003A  00E1               	movwf	??___ftadd+1
  3031  003B  085C               	movf	___ftadd@f1+2,w
  3032  003C  00E2               	movwf	??___ftadd+2
  3033  003D  1003               	clrc
  3034  003E  0D61               	rlf	??___ftadd+1,w
  3035  003F  0D62               	rlf	??___ftadd+2,w
  3036  0040  00E3               	movwf	??___ftadd+3
  3037  0041  0863               	movf	??___ftadd+3,w
  3038  0042  00E6               	movwf	___ftadd@exp1
  3039  0043  085D               	movf	___ftadd@f2,w
  3040  0044  00E0               	movwf	??___ftadd
  3041  0045  085E               	movf	___ftadd@f2+1,w
  3042  0046  00E1               	movwf	??___ftadd+1
  3043  0047  085F               	movf	___ftadd@f2+2,w
  3044  0048  00E2               	movwf	??___ftadd+2
  3045  0049  1003               	clrc
  3046  004A  0D61               	rlf	??___ftadd+1,w
  3047  004B  0D62               	rlf	??___ftadd+2,w
  3048  004C  00E3               	movwf	??___ftadd+3
  3049  004D  0863               	movf	??___ftadd+3,w
  3050  004E  00E5               	movwf	___ftadd@exp2
  3051  004F  0866               	movf	___ftadd@exp1,w
  3052  0050  1903               	btfsc	3,2
  3053  0051  285E               	goto	l2392
  3054  0052  0865               	movf	___ftadd@exp2,w
  3055  0053  0266               	subwf	___ftadd@exp1,w
  3056  0054  1803               	skipnc
  3057  0055  2865               	goto	l2396
  3058  0056  0366               	decf	___ftadd@exp1,w
  3059  0057  3AFF               	xorlw	255
  3060  0058  0765               	addwf	___ftadd@exp2,w
  3061  0059  00E0               	movwf	??___ftadd
  3062  005A  3019               	movlw	25
  3063  005B  0260               	subwf	??___ftadd,w
  3064  005C  1C03               	skipc
  3065  005D  2865               	goto	l2396
  3066  005E                     l2392:	
  3067  005E  085D               	movf	___ftadd@f2,w
  3068  005F  00DA               	movwf	?___ftadd
  3069  0060  085E               	movf	___ftadd@f2+1,w
  3070  0061  00DB               	movwf	?___ftadd+1
  3071  0062  085F               	movf	___ftadd@f2+2,w
  3072  0063  00DC               	movwf	?___ftadd+2
  3073  0064  0008               	return
  3074  0065                     l2396:	
  3075  0065  0865               	movf	___ftadd@exp2,w
  3076  0066  1903               	btfsc	3,2
  3077  0067  0008               	return
  3078  0068  0866               	movf	___ftadd@exp1,w
  3079  0069  0265               	subwf	___ftadd@exp2,w
  3080  006A  1803               	skipnc
  3081  006B  2874               	goto	l2402
  3082  006C  0365               	decf	___ftadd@exp2,w
  3083  006D  3AFF               	xorlw	255
  3084  006E  0766               	addwf	___ftadd@exp1,w
  3085  006F  00E0               	movwf	??___ftadd
  3086  0070  3019               	movlw	25
  3087  0071  0260               	subwf	??___ftadd,w
  3088  0072  1803               	btfsc	3,0
  3089  0073  0008               	return
  3090  0074                     l2402:	
  3091  0074  3006               	movlw	6
  3092  0075  00E0               	movwf	??___ftadd
  3093  0076  0860               	movf	??___ftadd,w
  3094  0077  00E4               	movwf	___ftadd@sign
  3095  0078  1BDC               	btfsc	___ftadd@f1+2,7
  3096  0079  17E4               	bsf	___ftadd@sign,7
  3097  007A  1BDF               	btfsc	___ftadd@f2+2,7
  3098  007B  1764               	bsf	___ftadd@sign,6
  3099  007C  17DB               	bsf	___ftadd@f1+1,7
  3100  007D  30FF               	movlw	255
  3101  007E  05DA               	andwf	___ftadd@f1,f
  3102  007F  30FF               	movlw	255
  3103  0080  05DB               	andwf	___ftadd@f1+1,f
  3104  0081  3000               	movlw	0
  3105  0082  05DC               	andwf	___ftadd@f1+2,f
  3106  0083  17DE               	bsf	___ftadd@f2+1,7
  3107  0084  30FF               	movlw	255
  3108  0085  05DD               	andwf	___ftadd@f2,f
  3109  0086  30FF               	movlw	255
  3110  0087  05DE               	andwf	___ftadd@f2+1,f
  3111  0088  3000               	movlw	0
  3112  0089  05DF               	andwf	___ftadd@f2+2,f
  3113  008A  0865               	movf	___ftadd@exp2,w
  3114  008B  0266               	subwf	___ftadd@exp1,w
  3115  008C  1803               	skipnc
  3116  008D  28B4               	goto	l2424
  3117  008E                     l2414:	
  3118  008E  3001               	movlw	1
  3119  008F                     u2855:	
  3120  008F  1003               	clrc
  3121  0090  0DDD               	rlf	___ftadd@f2,f
  3122  0091  0DDE               	rlf	___ftadd@f2+1,f
  3123  0092  0DDF               	rlf	___ftadd@f2+2,f
  3124  0093  3EFF               	addlw	-1
  3125  0094  1D03               	skipz
  3126  0095  288F               	goto	u2855
  3127  0096  3001               	movlw	1
  3128  0097  02E5               	subwf	___ftadd@exp2,f
  3129  0098  0865               	movf	___ftadd@exp2,w
  3130  0099  0666               	xorwf	___ftadd@exp1,w
  3131  009A  1903               	skipnz
  3132  009B  28AF               	goto	l2422
  3133  009C  3001               	movlw	1
  3134  009D  02E4               	subwf	___ftadd@sign,f
  3135  009E  0864               	movf	___ftadd@sign,w
  3136  009F  3907               	andlw	7
  3137  00A0  1903               	btfsc	3,2
  3138  00A1  28AF               	goto	l2422
  3139  00A2  288E               	goto	l2414
  3140  00A3                     l2420:	
  3141  00A3  3001               	movlw	1
  3142  00A4                     u2885:	
  3143  00A4  1003               	clrc
  3144  00A5  0CDC               	rrf	___ftadd@f1+2,f
  3145  00A6  0CDB               	rrf	___ftadd@f1+1,f
  3146  00A7  0CDA               	rrf	___ftadd@f1,f
  3147  00A8  3EFF               	addlw	-1
  3148  00A9  1D03               	skipz
  3149  00AA  28A4               	goto	u2885
  3150  00AB  3001               	movlw	1
  3151  00AC  00E0               	movwf	??___ftadd
  3152  00AD  0860               	movf	??___ftadd,w
  3153  00AE  07E6               	addwf	___ftadd@exp1,f
  3154  00AF                     l2422:	
  3155  00AF  0866               	movf	___ftadd@exp1,w
  3156  00B0  0665               	xorwf	___ftadd@exp2,w
  3157  00B1  1903               	btfsc	3,2
  3158  00B2  28DD               	goto	l608
  3159  00B3  28A3               	goto	l2420
  3160  00B4                     l2424:	
  3161  00B4  0866               	movf	___ftadd@exp1,w
  3162  00B5  0265               	subwf	___ftadd@exp2,w
  3163  00B6  1803               	skipnc
  3164  00B7  28DD               	goto	l608
  3165  00B8                     l2426:	
  3166  00B8  3001               	movlw	1
  3167  00B9                     u2915:	
  3168  00B9  1003               	clrc
  3169  00BA  0DDA               	rlf	___ftadd@f1,f
  3170  00BB  0DDB               	rlf	___ftadd@f1+1,f
  3171  00BC  0DDC               	rlf	___ftadd@f1+2,f
  3172  00BD  3EFF               	addlw	-1
  3173  00BE  1D03               	skipz
  3174  00BF  28B9               	goto	u2915
  3175  00C0  3001               	movlw	1
  3176  00C1  02E6               	subwf	___ftadd@exp1,f
  3177  00C2  0865               	movf	___ftadd@exp2,w
  3178  00C3  0666               	xorwf	___ftadd@exp1,w
  3179  00C4  1903               	skipnz
  3180  00C5  28D9               	goto	l2434
  3181  00C6  3001               	movlw	1
  3182  00C7  02E4               	subwf	___ftadd@sign,f
  3183  00C8  0864               	movf	___ftadd@sign,w
  3184  00C9  3907               	andlw	7
  3185  00CA  1903               	btfsc	3,2
  3186  00CB  28D9               	goto	l2434
  3187  00CC  28B8               	goto	l2426
  3188  00CD                     l2432:	
  3189  00CD  3001               	movlw	1
  3190  00CE                     u2945:	
  3191  00CE  1003               	clrc
  3192  00CF  0CDF               	rrf	___ftadd@f2+2,f
  3193  00D0  0CDE               	rrf	___ftadd@f2+1,f
  3194  00D1  0CDD               	rrf	___ftadd@f2,f
  3195  00D2  3EFF               	addlw	-1
  3196  00D3  1D03               	skipz
  3197  00D4  28CE               	goto	u2945
  3198  00D5  3001               	movlw	1
  3199  00D6  00E0               	movwf	??___ftadd
  3200  00D7  0860               	movf	??___ftadd,w
  3201  00D8  07E5               	addwf	___ftadd@exp2,f
  3202  00D9                     l2434:	
  3203  00D9  0866               	movf	___ftadd@exp1,w
  3204  00DA  0665               	xorwf	___ftadd@exp2,w
  3205  00DB  1D03               	skipz
  3206  00DC  28CD               	goto	l2432
  3207  00DD                     l608:	
  3208  00DD  1FE4               	btfss	___ftadd@sign,7
  3209  00DE  28EF               	goto	l2438
  3210  00DF  30FF               	movlw	255
  3211  00E0  06DA               	xorwf	___ftadd@f1,f
  3212  00E1  30FF               	movlw	255
  3213  00E2  06DB               	xorwf	___ftadd@f1+1,f
  3214  00E3  30FF               	movlw	255
  3215  00E4  06DC               	xorwf	___ftadd@f1+2,f
  3216  00E5  3001               	movlw	1
  3217  00E6  07DA               	addwf	___ftadd@f1,f
  3218  00E7  3000               	movlw	0
  3219  00E8  1803               	skipnc
  3220  00E9  3001               	movlw	1
  3221  00EA  07DB               	addwf	___ftadd@f1+1,f
  3222  00EB  3000               	movlw	0
  3223  00EC  1803               	skipnc
  3224  00ED  3001               	movlw	1
  3225  00EE  07DC               	addwf	___ftadd@f1+2,f
  3226  00EF                     l2438:	
  3227  00EF  1F64               	btfss	___ftadd@sign,6
  3228  00F0  2901               	goto	l2442
  3229  00F1  30FF               	movlw	255
  3230  00F2  06DD               	xorwf	___ftadd@f2,f
  3231  00F3  30FF               	movlw	255
  3232  00F4  06DE               	xorwf	___ftadd@f2+1,f
  3233  00F5  30FF               	movlw	255
  3234  00F6  06DF               	xorwf	___ftadd@f2+2,f
  3235  00F7  3001               	movlw	1
  3236  00F8  07DD               	addwf	___ftadd@f2,f
  3237  00F9  3000               	movlw	0
  3238  00FA  1803               	skipnc
  3239  00FB  3001               	movlw	1
  3240  00FC  07DE               	addwf	___ftadd@f2+1,f
  3241  00FD  3000               	movlw	0
  3242  00FE  1803               	skipnc
  3243  00FF  3001               	movlw	1
  3244  0100  07DF               	addwf	___ftadd@f2+2,f
  3245  0101                     l2442:	
  3246  0101  01E4               	clrf	___ftadd@sign
  3247  0102  085A               	movf	___ftadd@f1,w
  3248  0103  07DD               	addwf	___ftadd@f2,f
  3249  0104  085B               	movf	___ftadd@f1+1,w
  3250  0105  1103               	clrz
  3251  0106  1803               	skipnc
  3252  0107  0A5B               	incf	___ftadd@f1+1,w
  3253  0108  1D03               	btfss	3,2
  3254  0109  07DE               	addwf	___ftadd@f2+1,f
  3255  010A  085C               	movf	___ftadd@f1+2,w
  3256  010B  1103               	clrz
  3257  010C  1803               	skipnc
  3258  010D  0A5C               	incf	___ftadd@f1+2,w
  3259  010E  1D03               	btfss	3,2
  3260  010F  07DF               	addwf	___ftadd@f2+2,f
  3261  0110  1FDF               	btfss	___ftadd@f2+2,7
  3262  0111  2924               	goto	l2452
  3263  0112  30FF               	movlw	255
  3264  0113  06DD               	xorwf	___ftadd@f2,f
  3265  0114  30FF               	movlw	255
  3266  0115  06DE               	xorwf	___ftadd@f2+1,f
  3267  0116  30FF               	movlw	255
  3268  0117  06DF               	xorwf	___ftadd@f2+2,f
  3269  0118  3001               	movlw	1
  3270  0119  07DD               	addwf	___ftadd@f2,f
  3271  011A  3000               	movlw	0
  3272  011B  1803               	skipnc
  3273  011C  3001               	movlw	1
  3274  011D  07DE               	addwf	___ftadd@f2+1,f
  3275  011E  3000               	movlw	0
  3276  011F  1803               	skipnc
  3277  0120  3001               	movlw	1
  3278  0121  07DF               	addwf	___ftadd@f2+2,f
  3279  0122  01E4               	clrf	___ftadd@sign
  3280  0123  0AE4               	incf	___ftadd@sign,f
  3281  0124                     l2452:	
  3282  0124  085D               	movf	___ftadd@f2,w
  3283  0125  00A0               	movwf	___ftpack@arg
  3284  0126  085E               	movf	___ftadd@f2+1,w
  3285  0127  00A1               	movwf	___ftpack@arg+1
  3286  0128  085F               	movf	___ftadd@f2+2,w
  3287  0129  00A2               	movwf	___ftpack@arg+2
  3288  012A  0866               	movf	___ftadd@exp1,w
  3289  012B  00E0               	movwf	??___ftadd
  3290  012C  0860               	movf	??___ftadd,w
  3291  012D  00A3               	movwf	___ftpack@exp
  3292  012E  0864               	movf	___ftadd@sign,w
  3293  012F  00E1               	movwf	??___ftadd+1
  3294  0130  0861               	movf	??___ftadd+1,w
  3295  0131  00A4               	movwf	___ftpack@sign
  3296  0132  120A  118A  2700   	fcall	___ftpack
  3297  0135  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0136  1303               	bcf	3,6	;RP1=0, select bank0
  3299  0137  0820               	movf	?___ftpack,w
  3300  0138  00DA               	movwf	?___ftadd
  3301  0139  0821               	movf	?___ftpack+1,w
  3302  013A  00DB               	movwf	?___ftadd+1
  3303  013B  0822               	movf	?___ftpack+2,w
  3304  013C  00DC               	movwf	?___ftadd+2
  3305  013D  0008               	return
  3306  013E                     __end_of___ftadd:	
  3307                           
  3308                           	psect	text14
  3309  05ED                     __ptext14:	
  3310 ;; *************** function _move *****************
  3311 ;; Defined at:
  3312 ;;		line 25 in file "motor.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  steps           1    wreg     unsigned char 
  3315 ;;  direction       1   15[BANK0 ] unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  steps           1   18[BANK0 ] unsigned char 
  3318 ;;  i               1   19[BANK0 ] unsigned char 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  1    wreg      void 
  3321 ;; Registers used:
  3322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3328 ;;      Params:         0       1       0       0       0
  3329 ;;      Locals:         0       2       0       0       0
  3330 ;;      Temps:          0       2       0       0       0
  3331 ;;      Totals:         0       5       0       0       0
  3332 ;;Total ram usage:        5 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    4
  3335 ;; This function calls:
  3336 ;;		_lcdSetCursor
  3337 ;;		_lcdWriteToDigitBCD
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;;		_moveDeg
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function _move
  3346  05ED                     _move:	
  3347                           
  3348                           ;incstack = 0
  3349                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3350                           ;move@steps stored from wreg
  3351  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3352  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3353  05EF  00B2               	movwf	move@steps
  3354                           
  3355                           ;motor.c: 26: for(char i = 0; i<steps; i++){
  3356  05F0  01B3               	clrf	move@i
  3357  05F1                     l2594:	
  3358  05F1  0832               	movf	move@steps,w
  3359  05F2  0233               	subwf	move@i,w
  3360  05F3  1803               	btfsc	3,0
  3361  05F4  0008               	return
  3362                           
  3363                           ;motor.c: 27: if(cstep == 7 && direction == 1){
  3364  05F5  3007               	movlw	7
  3365  05F6  0677               	xorwf	_cstep,w
  3366  05F7  1D03               	btfss	3,2
  3367  05F8  2E04               	goto	l2556
  3368  05F9  032F               	decf	move@direction,w
  3369  05FA  1D03               	btfss	3,2
  3370  05FB  2E04               	goto	l2556
  3371                           
  3372                           ;motor.c: 28: PORTC = halfSteps[0];
  3373  05FC  1683               	bsf	3,5	;RP0=1, select bank1
  3374  05FD  1303               	bcf	3,6	;RP1=0, select bank1
  3375  05FE  0839               	movf	_halfSteps^(0+128),w
  3376  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0600  1303               	bcf	3,6	;RP1=0, select bank0
  3378  0601  0087               	movwf	7	;volatile
  3379                           
  3380                           ;motor.c: 29: cstep = 0;
  3381  0602  01F7               	clrf	_cstep
  3382                           
  3383                           ;motor.c: 30: }
  3384  0603  2E3C               	goto	l2578
  3385  0604                     l2556:	
  3386                           
  3387                           ;motor.c: 31: else if(cstep == 0 && direction == 0){
  3388  0604  0877               	movf	_cstep,w
  3389  0605  1D03               	btfss	3,2
  3390  0606  2E15               	goto	l136
  3391  0607  082F               	movf	move@direction,w
  3392  0608  1D03               	btfss	3,2
  3393  0609  2E15               	goto	l136
  3394                           
  3395                           ;motor.c: 32: PORTC = halfSteps[7];
  3396  060A  1683               	bsf	3,5	;RP0=1, select bank1
  3397  060B  1303               	bcf	3,6	;RP1=0, select bank1
  3398  060C  0847               	movf	(_halfSteps^(0+128)+14),w
  3399  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3400  060E  1303               	bcf	3,6	;RP1=0, select bank0
  3401  060F  0087               	movwf	7	;volatile
  3402                           
  3403                           ;motor.c: 33: cstep = 7;
  3404  0610  3007               	movlw	7
  3405  0611  00B0               	movwf	??_move
  3406  0612  0830               	movf	??_move,w
  3407  0613  00F7               	movwf	_cstep
  3408                           
  3409                           ;motor.c: 34: }
  3410  0614  2E3C               	goto	l2578
  3411  0615                     l136:	
  3412                           
  3413                           ;motor.c: 35: else if (cstep >= 0 && cstep <= 7){
  3414  0615  1BF7               	btfsc	_cstep,7
  3415  0616  2E3B               	goto	l2576
  3416  0617  0877               	movf	_cstep,w
  3417  0618  3A80               	xorlw	128
  3418  0619  3E78               	addlw	-136
  3419  061A  1803               	skipnc
  3420  061B  2E3B               	goto	l2576
  3421                           
  3422                           ;motor.c: 36: if(direction == 1){
  3423  061C  032F               	decf	move@direction,w
  3424  061D  1D03               	btfss	3,2
  3425  061E  2E2A               	goto	l2570
  3426                           
  3427                           ;motor.c: 37: PORTC = halfSteps[cstep+1];
  3428  061F  0877               	movf	_cstep,w
  3429  0620  00B0               	movwf	??_move
  3430  0621  0730               	addwf	??_move,w
  3431  0622  3E02               	addlw	2
  3432  0623  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3433  0624  0084               	movwf	4
  3434  0625  1383               	bcf	3,7	;select IRP bank1
  3435  0626  0800               	movf	0,w
  3436  0627  0087               	movwf	7	;volatile
  3437                           
  3438                           ;motor.c: 38: cstep++;
  3439  0628  3001               	movlw	1
  3440  0629  2E37               	goto	L2
  3441  062A                     l2570:	
  3442                           ;motor.c: 39: }
  3443                           
  3444                           
  3445                           ;motor.c: 40: else if(direction == 0){
  3446  062A  082F               	movf	move@direction,w
  3447  062B  1D03               	btfss	3,2
  3448  062C  2E3C               	goto	l2578
  3449                           
  3450                           ;motor.c: 41: PORTC = halfSteps[cstep-1];
  3451  062D  0877               	movf	_cstep,w
  3452  062E  00B0               	movwf	??_move
  3453  062F  0730               	addwf	??_move,w
  3454  0630  3EFE               	addlw	254
  3455  0631  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3456  0632  0084               	movwf	4
  3457  0633  1383               	bcf	3,7	;select IRP bank1
  3458  0634  0800               	movf	0,w
  3459  0635  0087               	movwf	7	;volatile
  3460                           
  3461                           ;motor.c: 42: cstep--;
  3462  0636  30FF               	movlw	255
  3463  0637                     L2:	
  3464  0637  00B0               	movwf	??_move
  3465  0638  0830               	movf	??_move,w
  3466  0639  07F7               	addwf	_cstep,f
  3467                           
  3468                           ;motor.c: 43: }
  3469                           ;motor.c: 45: }
  3470  063A  2E3C               	goto	l2578
  3471  063B                     l2576:	
  3472                           
  3473                           ;motor.c: 46: else{
  3474                           ;motor.c: 47: PORTC = 0x00;
  3475  063B  0187               	clrf	7	;volatile
  3476  063C                     l2578:	
  3477                           
  3478                           ;motor.c: 48: }
  3479                           ;motor.c: 50: lcdSetCursor(0x40);
  3480  063C  3040               	movlw	64
  3481  063D  120A  158A  251D  120A  118A  	fcall	_lcdSetCursor
  3482                           
  3483                           ;motor.c: 51: if(direction==1){
  3484  0642  1283               	bcf	3,5	;RP0=0, select bank0
  3485  0643  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0644  032F               	decf	move@direction,w
  3487  0645  1D03               	btfss	3,2
  3488  0646  2E4F               	goto	l2586
  3489                           
  3490                           ;motor.c: 52: nrOfSteps++;
  3491  0647  3001               	movlw	1
  3492  0648  1683               	bsf	3,5	;RP0=1, select bank1
  3493  0649  1303               	bcf	3,6	;RP1=0, select bank1
  3494  064A  07D3               	addwf	_nrOfSteps^(0+128),f
  3495  064B  1803               	skipnc
  3496  064C  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3497  064D  3000               	movlw	0
  3498  064E  2E56               	goto	L3
  3499  064F                     l2586:	
  3500                           ;motor.c: 54: }
  3501                           
  3502                           ;motor.c: 53: lcdWriteToDigitBCD(nrOfSteps);
  3503                           
  3504                           
  3505                           ;motor.c: 55: else{
  3506                           ;motor.c: 56: nrOfSteps--;
  3507  064F  30FF               	movlw	255
  3508  0650  1683               	bsf	3,5	;RP0=1, select bank1
  3509  0651  1303               	bcf	3,6	;RP1=0, select bank1
  3510  0652  07D3               	addwf	_nrOfSteps^(0+128),f
  3511  0653  1803               	skipnc
  3512  0654  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3513  0655  30FF               	movlw	255
  3514  0656                     L3:	
  3515  0656  07D4               	addwf	(_nrOfSteps+1)^(0+128),f
  3516                           
  3517                           ;motor.c: 57: lcdWriteToDigitBCD(nrOfSteps);
  3518  0657  0854               	movf	(_nrOfSteps+1)^(0+128),w
  3519  0658  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0659  1303               	bcf	3,6	;RP1=0, select bank0
  3521  065A  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3522  065B  1683               	bsf	3,5	;RP0=1, select bank1
  3523  065C  1303               	bcf	3,6	;RP1=0, select bank1
  3524  065D  0853               	movf	_nrOfSteps^(0+128),w
  3525  065E  1283               	bcf	3,5	;RP0=0, select bank0
  3526  065F  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0660  00A6               	movwf	lcdWriteToDigitBCD@data
  3528  0661  120A  118A  2678  120A  118A  	fcall	_lcdWriteToDigitBCD
  3529                           
  3530                           ;motor.c: 58: }
  3531                           ;motor.c: 59: _delay((unsigned long)((20)*(20000000/4000.0)));
  3532  0666  3082               	movlw	130
  3533  0667  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0668  1303               	bcf	3,6	;RP1=0, select bank0
  3535  0669  00B1               	movwf	??_move+1
  3536  066A  30DD               	movlw	221
  3537  066B  00B0               	movwf	??_move
  3538  066C                     u3477:	
  3539  066C  0BB0               	decfsz	??_move,f
  3540  066D  2E6C               	goto	u3477
  3541  066E  0BB1               	decfsz	??_move+1,f
  3542  066F  2E6C               	goto	u3477
  3543  0670  2E71               	nop2
  3544  0671  3001               	movlw	1
  3545  0672  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0673  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0674  00B0               	movwf	??_move
  3548  0675  0830               	movf	??_move,w
  3549  0676  07B3               	addwf	move@i,f
  3550  0677  2DF1               	goto	l2594
  3551  0678                     __end_of_move:	
  3552                           
  3553                           	psect	text15
  3554  0FA1                     __ptext15:	
  3555 ;; *************** function ___ftge *****************
  3556 ;; Defined at:
  3557 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  ff1             3    0[BANK0 ] float 
  3560 ;;  ff2             3    3[BANK0 ] float 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3572 ;;      Params:         0       6       0       0       0
  3573 ;;      Locals:         0       0       0       0       0
  3574 ;;      Temps:          0       6       0       0       0
  3575 ;;      Totals:         0      12       0       0       0
  3576 ;;Total ram usage:       12 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_moveDeg
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function ___ftge
  3588  0FA1                     ___ftge:	
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3592  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0FA3  1FA2               	btfss	___ftge@ff1+2,7
  3595  0FA4  2FCA               	goto	l1998
  3596  0FA5  3000               	movlw	0
  3597  0FA6  00A6               	movwf	??___ftge
  3598  0FA7  3000               	movlw	0
  3599  0FA8  00A7               	movwf	??___ftge+1
  3600  0FA9  3080               	movlw	128
  3601  0FAA  00A8               	movwf	??___ftge+2
  3602  0FAB  0920               	comf	___ftge@ff1,w
  3603  0FAC  00A9               	movwf	??___ftge+3
  3604  0FAD  0921               	comf	___ftge@ff1+1,w
  3605  0FAE  00AA               	movwf	??___ftge+4
  3606  0FAF  0922               	comf	___ftge@ff1+2,w
  3607  0FB0  00AB               	movwf	??___ftge+5
  3608  0FB1  0AA9               	incf	??___ftge+3,f
  3609  0FB2  1903               	skipnz
  3610  0FB3  0AAA               	incf	??___ftge+4,f
  3611  0FB4  1903               	skipnz
  3612  0FB5  0AAB               	incf	??___ftge+5,f
  3613  0FB6  0829               	movf	??___ftge+3,w
  3614  0FB7  07A6               	addwf	??___ftge,f
  3615  0FB8  082A               	movf	??___ftge+4,w
  3616  0FB9  1803               	skipnc
  3617  0FBA  0F2A               	incfsz	??___ftge+4,w
  3618  0FBB  2FBD               	goto	u2081
  3619  0FBC  2FBE               	goto	u2082
  3620  0FBD                     u2081:	
  3621  0FBD  07A7               	addwf	??___ftge+1,f
  3622  0FBE                     u2082:	
  3623  0FBE  082B               	movf	??___ftge+5,w
  3624  0FBF  1803               	skipnc
  3625  0FC0  0F2B               	incfsz	??___ftge+5,w
  3626  0FC1  2FC3               	goto	u2083
  3627  0FC2  2FC4               	goto	u2084
  3628  0FC3                     u2083:	
  3629  0FC3  07A8               	addwf	??___ftge+2,f
  3630  0FC4                     u2084:	
  3631  0FC4  0826               	movf	??___ftge,w
  3632  0FC5  00A0               	movwf	___ftge@ff1
  3633  0FC6  0827               	movf	??___ftge+1,w
  3634  0FC7  00A1               	movwf	___ftge@ff1+1
  3635  0FC8  0828               	movf	??___ftge+2,w
  3636  0FC9  00A2               	movwf	___ftge@ff1+2
  3637  0FCA                     l1998:	
  3638  0FCA  1FA5               	btfss	___ftge@ff2+2,7
  3639  0FCB  2FF1               	goto	l2002
  3640  0FCC  3000               	movlw	0
  3641  0FCD  00A6               	movwf	??___ftge
  3642  0FCE  3000               	movlw	0
  3643  0FCF  00A7               	movwf	??___ftge+1
  3644  0FD0  3080               	movlw	128
  3645  0FD1  00A8               	movwf	??___ftge+2
  3646  0FD2  0923               	comf	___ftge@ff2,w
  3647  0FD3  00A9               	movwf	??___ftge+3
  3648  0FD4  0924               	comf	___ftge@ff2+1,w
  3649  0FD5  00AA               	movwf	??___ftge+4
  3650  0FD6  0925               	comf	___ftge@ff2+2,w
  3651  0FD7  00AB               	movwf	??___ftge+5
  3652  0FD8  0AA9               	incf	??___ftge+3,f
  3653  0FD9  1903               	skipnz
  3654  0FDA  0AAA               	incf	??___ftge+4,f
  3655  0FDB  1903               	skipnz
  3656  0FDC  0AAB               	incf	??___ftge+5,f
  3657  0FDD  0829               	movf	??___ftge+3,w
  3658  0FDE  07A6               	addwf	??___ftge,f
  3659  0FDF  082A               	movf	??___ftge+4,w
  3660  0FE0  1803               	skipnc
  3661  0FE1  0F2A               	incfsz	??___ftge+4,w
  3662  0FE2  2FE4               	goto	u2101
  3663  0FE3  2FE5               	goto	u2102
  3664  0FE4                     u2101:	
  3665  0FE4  07A7               	addwf	??___ftge+1,f
  3666  0FE5                     u2102:	
  3667  0FE5  082B               	movf	??___ftge+5,w
  3668  0FE6  1803               	skipnc
  3669  0FE7  0F2B               	incfsz	??___ftge+5,w
  3670  0FE8  2FEA               	goto	u2103
  3671  0FE9  2FEB               	goto	u2104
  3672  0FEA                     u2103:	
  3673  0FEA  07A8               	addwf	??___ftge+2,f
  3674  0FEB                     u2104:	
  3675  0FEB  0826               	movf	??___ftge,w
  3676  0FEC  00A3               	movwf	___ftge@ff2
  3677  0FED  0827               	movf	??___ftge+1,w
  3678  0FEE  00A4               	movwf	___ftge@ff2+1
  3679  0FEF  0828               	movf	??___ftge+2,w
  3680  0FF0  00A5               	movwf	___ftge@ff2+2
  3681  0FF1                     l2002:	
  3682  0FF1  3080               	movlw	128
  3683  0FF2  06A2               	xorwf	___ftge@ff1+2,f
  3684  0FF3  3080               	movlw	128
  3685  0FF4  06A5               	xorwf	___ftge@ff2+2,f
  3686  0FF5  0825               	movf	___ftge@ff2+2,w
  3687  0FF6  0222               	subwf	___ftge@ff1+2,w
  3688  0FF7  1D03               	skipz
  3689  0FF8  0008               	return
  3690  0FF9  0824               	movf	___ftge@ff2+1,w
  3691  0FFA  0221               	subwf	___ftge@ff1+1,w
  3692  0FFB  1D03               	skipz
  3693  0FFC  0008               	return
  3694  0FFD  0823               	movf	___ftge@ff2,w
  3695  0FFE  0220               	subwf	___ftge@ff1,w
  3696  0FFF  0008               	return
  3697  1000                     __end_of___ftge:	
  3698                           
  3699                           	psect	text16
  3700  03FA                     __ptext16:	
  3701 ;; *************** function ___ftdiv *****************
  3702 ;; Defined at:
  3703 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  f2              3   19[BANK0 ] float 
  3706 ;;  f1              3   22[BANK0 ] float 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  f3              3   30[BANK0 ] float 
  3709 ;;  sign            1   34[BANK0 ] unsigned char 
  3710 ;;  exp             1   33[BANK0 ] unsigned char 
  3711 ;;  cntr            1   29[BANK0 ] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  3   19[BANK0 ] float 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3721 ;;      Params:         0       6       0       0       0
  3722 ;;      Locals:         0       6       0       0       0
  3723 ;;      Temps:          0       4       0       0       0
  3724 ;;      Totals:         0      16       0       0       0
  3725 ;;Total ram usage:       16 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    3
  3728 ;; This function calls:
  3729 ;;		___ftpack
  3730 ;; This function is called by:
  3731 ;;		_moveDeg
  3732 ;;		_readADCMeter
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function ___ftdiv
  3738  03FA                     ___ftdiv:	
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3742  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3743  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3744  03FC  0836               	movf	___ftdiv@f1,w
  3745  03FD  00B9               	movwf	??___ftdiv
  3746  03FE  0837               	movf	___ftdiv@f1+1,w
  3747  03FF  00BA               	movwf	??___ftdiv+1
  3748  0400  0838               	movf	___ftdiv@f1+2,w
  3749  0401  00BB               	movwf	??___ftdiv+2
  3750  0402  1003               	clrc
  3751  0403  0D3A               	rlf	??___ftdiv+1,w
  3752  0404  0D3B               	rlf	??___ftdiv+2,w
  3753  0405  00BC               	movwf	??___ftdiv+3
  3754  0406  083C               	movf	??___ftdiv+3,w
  3755  0407  00C1               	movwf	___ftdiv@exp
  3756  0408  0841               	movf	___ftdiv@exp,w
  3757  0409  1D03               	btfss	3,2
  3758  040A  2C12               	goto	l2622
  3759  040B  3000               	movlw	0
  3760  040C  00B3               	movwf	?___ftdiv
  3761  040D  3000               	movlw	0
  3762  040E  00B4               	movwf	?___ftdiv+1
  3763  040F  3000               	movlw	0
  3764  0410  00B5               	movwf	?___ftdiv+2
  3765  0411  0008               	return
  3766  0412                     l2622:	
  3767  0412  0833               	movf	___ftdiv@f2,w
  3768  0413  00B9               	movwf	??___ftdiv
  3769  0414  0834               	movf	___ftdiv@f2+1,w
  3770  0415  00BA               	movwf	??___ftdiv+1
  3771  0416  0835               	movf	___ftdiv@f2+2,w
  3772  0417  00BB               	movwf	??___ftdiv+2
  3773  0418  1003               	clrc
  3774  0419  0D3A               	rlf	??___ftdiv+1,w
  3775  041A  0D3B               	rlf	??___ftdiv+2,w
  3776  041B  00BC               	movwf	??___ftdiv+3
  3777  041C  083C               	movf	??___ftdiv+3,w
  3778  041D  00C2               	movwf	___ftdiv@sign
  3779  041E  0842               	movf	___ftdiv@sign,w
  3780  041F  1D03               	btfss	3,2
  3781  0420  2C28               	goto	l2628
  3782  0421  3000               	movlw	0
  3783  0422  00B3               	movwf	?___ftdiv
  3784  0423  3000               	movlw	0
  3785  0424  00B4               	movwf	?___ftdiv+1
  3786  0425  3000               	movlw	0
  3787  0426  00B5               	movwf	?___ftdiv+2
  3788  0427  0008               	return
  3789  0428                     l2628:	
  3790  0428  3000               	movlw	0
  3791  0429  00BE               	movwf	___ftdiv@f3
  3792  042A  3000               	movlw	0
  3793  042B  00BF               	movwf	___ftdiv@f3+1
  3794  042C  3000               	movlw	0
  3795  042D  00C0               	movwf	___ftdiv@f3+2
  3796  042E  3089               	movlw	137
  3797  042F  0742               	addwf	___ftdiv@sign,w
  3798  0430  00B9               	movwf	??___ftdiv
  3799  0431  0839               	movf	??___ftdiv,w
  3800  0432  02C1               	subwf	___ftdiv@exp,f
  3801  0433  0836               	movf	___ftdiv@f1,w
  3802  0434  00B9               	movwf	??___ftdiv
  3803  0435  0837               	movf	___ftdiv@f1+1,w
  3804  0436  00BA               	movwf	??___ftdiv+1
  3805  0437  0838               	movf	___ftdiv@f1+2,w
  3806  0438  00BB               	movwf	??___ftdiv+2
  3807  0439  3010               	movlw	16
  3808  043A                     u3165:	
  3809  043A  1003               	clrc
  3810  043B  0CBB               	rrf	??___ftdiv+2,f
  3811  043C  0CBA               	rrf	??___ftdiv+1,f
  3812  043D  0CB9               	rrf	??___ftdiv,f
  3813  043E  3EFF               	addlw	-1
  3814  043F  1D03               	skipz
  3815  0440  2C3A               	goto	u3165
  3816  0441  0839               	movf	??___ftdiv,w
  3817  0442  00BC               	movwf	??___ftdiv+3
  3818  0443  083C               	movf	??___ftdiv+3,w
  3819  0444  00C2               	movwf	___ftdiv@sign
  3820  0445  0833               	movf	___ftdiv@f2,w
  3821  0446  00B9               	movwf	??___ftdiv
  3822  0447  0834               	movf	___ftdiv@f2+1,w
  3823  0448  00BA               	movwf	??___ftdiv+1
  3824  0449  0835               	movf	___ftdiv@f2+2,w
  3825  044A  00BB               	movwf	??___ftdiv+2
  3826  044B  3010               	movlw	16
  3827  044C                     u3175:	
  3828  044C  1003               	clrc
  3829  044D  0CBB               	rrf	??___ftdiv+2,f
  3830  044E  0CBA               	rrf	??___ftdiv+1,f
  3831  044F  0CB9               	rrf	??___ftdiv,f
  3832  0450  3EFF               	addlw	-1
  3833  0451  1D03               	skipz
  3834  0452  2C4C               	goto	u3175
  3835  0453  0839               	movf	??___ftdiv,w
  3836  0454  00BC               	movwf	??___ftdiv+3
  3837  0455  083C               	movf	??___ftdiv+3,w
  3838  0456  06C2               	xorwf	___ftdiv@sign,f
  3839  0457  3080               	movlw	128
  3840  0458  00B9               	movwf	??___ftdiv
  3841  0459  0839               	movf	??___ftdiv,w
  3842  045A  05C2               	andwf	___ftdiv@sign,f
  3843  045B  17B7               	bsf	___ftdiv@f1+1,7
  3844  045C  30FF               	movlw	255
  3845  045D  05B6               	andwf	___ftdiv@f1,f
  3846  045E  30FF               	movlw	255
  3847  045F  05B7               	andwf	___ftdiv@f1+1,f
  3848  0460  3000               	movlw	0
  3849  0461  05B8               	andwf	___ftdiv@f1+2,f
  3850  0462  17B4               	bsf	___ftdiv@f2+1,7
  3851  0463  30FF               	movlw	255
  3852  0464  05B3               	andwf	___ftdiv@f2,f
  3853  0465  30FF               	movlw	255
  3854  0466  05B4               	andwf	___ftdiv@f2+1,f
  3855  0467  3000               	movlw	0
  3856  0468  05B5               	andwf	___ftdiv@f2+2,f
  3857  0469  3018               	movlw	24
  3858  046A  00B9               	movwf	??___ftdiv
  3859  046B  0839               	movf	??___ftdiv,w
  3860  046C  00BD               	movwf	___ftdiv@cntr
  3861  046D                     l2642:	
  3862  046D  3001               	movlw	1
  3863  046E                     u3185:	
  3864  046E  1003               	clrc
  3865  046F  0DBE               	rlf	___ftdiv@f3,f
  3866  0470  0DBF               	rlf	___ftdiv@f3+1,f
  3867  0471  0DC0               	rlf	___ftdiv@f3+2,f
  3868  0472  3EFF               	addlw	-1
  3869  0473  1D03               	skipz
  3870  0474  2C6E               	goto	u3185
  3871  0475  0835               	movf	___ftdiv@f2+2,w
  3872  0476  0238               	subwf	___ftdiv@f1+2,w
  3873  0477  1D03               	skipz
  3874  0478  2C7F               	goto	u3195
  3875  0479  0834               	movf	___ftdiv@f2+1,w
  3876  047A  0237               	subwf	___ftdiv@f1+1,w
  3877  047B  1D03               	skipz
  3878  047C  2C7F               	goto	u3195
  3879  047D  0833               	movf	___ftdiv@f2,w
  3880  047E  0236               	subwf	___ftdiv@f1,w
  3881  047F                     u3195:	
  3882  047F  1C03               	skipc
  3883  0480  2C8C               	goto	l2650
  3884  0481  0833               	movf	___ftdiv@f2,w
  3885  0482  02B6               	subwf	___ftdiv@f1,f
  3886  0483  0834               	movf	___ftdiv@f2+1,w
  3887  0484  1C03               	skipc
  3888  0485  0F34               	incfsz	___ftdiv@f2+1,w
  3889  0486  02B7               	subwf	___ftdiv@f1+1,f
  3890  0487  0835               	movf	___ftdiv@f2+2,w
  3891  0488  1C03               	skipc
  3892  0489  0A35               	incf	___ftdiv@f2+2,w
  3893  048A  02B8               	subwf	___ftdiv@f1+2,f
  3894  048B  143E               	bsf	___ftdiv@f3,0
  3895  048C                     l2650:	
  3896  048C  3001               	movlw	1
  3897  048D                     u3205:	
  3898  048D  1003               	clrc
  3899  048E  0DB6               	rlf	___ftdiv@f1,f
  3900  048F  0DB7               	rlf	___ftdiv@f1+1,f
  3901  0490  0DB8               	rlf	___ftdiv@f1+2,f
  3902  0491  3EFF               	addlw	-1
  3903  0492  1D03               	skipz
  3904  0493  2C8D               	goto	u3205
  3905  0494  3001               	movlw	1
  3906  0495  02BD               	subwf	___ftdiv@cntr,f
  3907  0496  1D03               	btfss	3,2
  3908  0497  2C6D               	goto	l2642
  3909  0498  083E               	movf	___ftdiv@f3,w
  3910  0499  00A0               	movwf	___ftpack@arg
  3911  049A  083F               	movf	___ftdiv@f3+1,w
  3912  049B  00A1               	movwf	___ftpack@arg+1
  3913  049C  0840               	movf	___ftdiv@f3+2,w
  3914  049D  00A2               	movwf	___ftpack@arg+2
  3915  049E  0841               	movf	___ftdiv@exp,w
  3916  049F  00B9               	movwf	??___ftdiv
  3917  04A0  0839               	movf	??___ftdiv,w
  3918  04A1  00A3               	movwf	___ftpack@exp
  3919  04A2  0842               	movf	___ftdiv@sign,w
  3920  04A3  00BA               	movwf	??___ftdiv+1
  3921  04A4  083A               	movf	??___ftdiv+1,w
  3922  04A5  00A4               	movwf	___ftpack@sign
  3923  04A6  120A  118A  2700   	fcall	___ftpack
  3924  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3925  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3926  04AB  0820               	movf	?___ftpack,w
  3927  04AC  00B3               	movwf	?___ftdiv
  3928  04AD  0821               	movf	?___ftpack+1,w
  3929  04AE  00B4               	movwf	?___ftdiv+1
  3930  04AF  0822               	movf	?___ftpack+2,w
  3931  04B0  00B5               	movwf	?___ftdiv+2
  3932  04B1  0008               	return
  3933  04B2                     __end_of___ftdiv:	
  3934                           
  3935                           	psect	text17
  3936  0700                     __ptext17:	
  3937 ;; *************** function ___ftpack *****************
  3938 ;; Defined at:
  3939 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  arg             3    0[BANK0 ] unsigned um
  3942 ;;  exp             1    3[BANK0 ] unsigned char 
  3943 ;;  sign            1    4[BANK0 ] unsigned char 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  3    0[BANK0 ] float 
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3955 ;;      Params:         0       5       0       0       0
  3956 ;;      Locals:         0       0       0       0       0
  3957 ;;      Temps:          0       3       0       0       0
  3958 ;;      Totals:         0       8       0       0       0
  3959 ;;Total ram usage:        8 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    2
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		___altoft
  3966 ;;		___awtoft
  3967 ;;		___ftadd
  3968 ;;		___ftdiv
  3969 ;;		___ftmul
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function ___ftpack
  3975  0700                     ___ftpack:	
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3979  0700  1283               	bcf	3,5	;RP0=0, select bank0
  3980  0701  1303               	bcf	3,6	;RP1=0, select bank0
  3981  0702  0823               	movf	___ftpack@exp,w
  3982  0703  1903               	btfsc	3,2
  3983  0704  2F0A               	goto	l2262
  3984  0705  0822               	movf	___ftpack@arg+2,w
  3985  0706  0421               	iorwf	___ftpack@arg+1,w
  3986  0707  0420               	iorwf	___ftpack@arg,w
  3987  0708  1D03               	skipz
  3988  0709  2F1D               	goto	l2268
  3989  070A                     l2262:	
  3990  070A  3000               	movlw	0
  3991  070B  00A0               	movwf	?___ftpack
  3992  070C  3000               	movlw	0
  3993  070D  00A1               	movwf	?___ftpack+1
  3994  070E  3000               	movlw	0
  3995  070F  00A2               	movwf	?___ftpack+2
  3996  0710  0008               	return
  3997  0711                     l2266:	
  3998  0711  3001               	movlw	1
  3999  0712  00A5               	movwf	??___ftpack
  4000  0713  0825               	movf	??___ftpack,w
  4001  0714  07A3               	addwf	___ftpack@exp,f
  4002  0715  3001               	movlw	1
  4003  0716                     u2535:	
  4004  0716  1003               	clrc
  4005  0717  0CA2               	rrf	___ftpack@arg+2,f
  4006  0718  0CA1               	rrf	___ftpack@arg+1,f
  4007  0719  0CA0               	rrf	___ftpack@arg,f
  4008  071A  3EFF               	addlw	-1
  4009  071B  1D03               	skipz
  4010  071C  2F16               	goto	u2535
  4011  071D                     l2268:	
  4012  071D  30FE               	movlw	254
  4013  071E  0522               	andwf	___ftpack@arg+2,w
  4014  071F  1903               	btfsc	3,2
  4015  0720  2F38               	goto	l577
  4016  0721  2F11               	goto	l2266
  4017  0722                     l2270:	
  4018  0722  3001               	movlw	1
  4019  0723  00A5               	movwf	??___ftpack
  4020  0724  0825               	movf	??___ftpack,w
  4021  0725  07A3               	addwf	___ftpack@exp,f
  4022  0726  3001               	movlw	1
  4023  0727  07A0               	addwf	___ftpack@arg,f
  4024  0728  3000               	movlw	0
  4025  0729  1803               	skipnc
  4026  072A  3001               	movlw	1
  4027  072B  07A1               	addwf	___ftpack@arg+1,f
  4028  072C  3000               	movlw	0
  4029  072D  1803               	skipnc
  4030  072E  3001               	movlw	1
  4031  072F  07A2               	addwf	___ftpack@arg+2,f
  4032  0730  3001               	movlw	1
  4033  0731                     u2555:	
  4034  0731  1003               	clrc
  4035  0732  0CA2               	rrf	___ftpack@arg+2,f
  4036  0733  0CA1               	rrf	___ftpack@arg+1,f
  4037  0734  0CA0               	rrf	___ftpack@arg,f
  4038  0735  3EFF               	addlw	-1
  4039  0736  1D03               	skipz
  4040  0737  2F31               	goto	u2555
  4041  0738                     l577:	
  4042  0738  30FF               	movlw	255
  4043  0739  0522               	andwf	___ftpack@arg+2,w
  4044  073A  1903               	btfsc	3,2
  4045  073B  2F47               	goto	l2278
  4046  073C  2F22               	goto	l2270
  4047  073D                     l2276:	
  4048  073D  3001               	movlw	1
  4049  073E  02A3               	subwf	___ftpack@exp,f
  4050  073F  3001               	movlw	1
  4051  0740                     u2575:	
  4052  0740  1003               	clrc
  4053  0741  0DA0               	rlf	___ftpack@arg,f
  4054  0742  0DA1               	rlf	___ftpack@arg+1,f
  4055  0743  0DA2               	rlf	___ftpack@arg+2,f
  4056  0744  3EFF               	addlw	-1
  4057  0745  1D03               	skipz
  4058  0746  2F40               	goto	u2575
  4059  0747                     l2278:	
  4060  0747  1BA1               	btfsc	___ftpack@arg+1,7
  4061  0748  2F4D               	goto	l584
  4062  0749  3002               	movlw	2
  4063  074A  0223               	subwf	___ftpack@exp,w
  4064  074B  1803               	skipnc
  4065  074C  2F3D               	goto	l2276
  4066  074D                     l584:	
  4067  074D  1823               	btfsc	___ftpack@exp,0
  4068  074E  2F55               	goto	l585
  4069  074F  30FF               	movlw	255
  4070  0750  05A0               	andwf	___ftpack@arg,f
  4071  0751  307F               	movlw	127
  4072  0752  05A1               	andwf	___ftpack@arg+1,f
  4073  0753  30FF               	movlw	255
  4074  0754  05A2               	andwf	___ftpack@arg+2,f
  4075  0755                     l585:	
  4076  0755  1003               	clrc
  4077  0756  0CA3               	rrf	___ftpack@exp,f
  4078  0757  0823               	movf	___ftpack@exp,w
  4079  0758  00A5               	movwf	??___ftpack
  4080  0759  01A6               	clrf	??___ftpack+1
  4081  075A  01A7               	clrf	??___ftpack+2
  4082  075B  3010               	movlw	16
  4083  075C                     u2615:	
  4084  075C  1003               	clrc
  4085  075D  0DA5               	rlf	??___ftpack,f
  4086  075E  0DA6               	rlf	??___ftpack+1,f
  4087  075F  0DA7               	rlf	??___ftpack+2,f
  4088  0760  3EFF               	addlw	-1
  4089  0761  1D03               	skipz
  4090  0762  2F5C               	goto	u2615
  4091  0763  0825               	movf	??___ftpack,w
  4092  0764  04A0               	iorwf	___ftpack@arg,f
  4093  0765  0826               	movf	??___ftpack+1,w
  4094  0766  04A1               	iorwf	___ftpack@arg+1,f
  4095  0767  0827               	movf	??___ftpack+2,w
  4096  0768  04A2               	iorwf	___ftpack@arg+2,f
  4097  0769  0824               	movf	___ftpack@sign,w
  4098  076A  1903               	btfsc	3,2
  4099  076B  0008               	return
  4100  076C  17A2               	bsf	___ftpack@arg+2,7
  4101  076D  0008               	return
  4102  076E                     __end_of___ftpack:	
  4103                           
  4104                           	psect	text18
  4105  0E02                     __ptext18:	
  4106 ;; *************** function _initialise *****************
  4107 ;; Defined at:
  4108 ;;		line 26 in file "main.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0, pclath, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4122 ;;      Params:         0       0       0       0       0
  4123 ;;      Locals:         0       0       0       0       0
  4124 ;;      Temps:          0       0       0       0       0
  4125 ;;      Totals:         0       0       0       0       0
  4126 ;;Total ram usage:        0 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    5
  4129 ;; This function calls:
  4130 ;;		_initializeADC
  4131 ;;		_initializeMotor
  4132 ;;		_initializeTimer0
  4133 ;;		_setupLCD
  4134 ;; This function is called by:
  4135 ;;		_main
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _initialise
  4141  0E02                     _initialise:	
  4142                           
  4143                           ;main.c: 29: TRISB = 0b00001111;
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _initialise: [wreg+status,2+status,0+pclath+cstack]
  4147  0E02  300F               	movlw	15
  4148  0E03  1683               	bsf	3,5	;RP0=1, select bank1
  4149  0E04  1303               	bcf	3,6	;RP1=0, select bank1
  4150  0E05  0086               	movwf	6	;volatile
  4151                           
  4152                           ;main.c: 30: TRISC = 0;
  4153  0E06  0187               	clrf	7	;volatile
  4154                           
  4155                           ;main.c: 32: RB4 = 1;
  4156  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  4157  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  4158  0E09  1606               	bsf	6,4	;volatile
  4159                           
  4160                           ;main.c: 33: RB5 = 1;
  4161  0E0A  1686               	bsf	6,5	;volatile
  4162                           
  4163                           ;main.c: 35: initializeTimer0();
  4164  0E0B  120A  158A  254B  120A  158A  	fcall	_initializeTimer0
  4165                           
  4166                           ;main.c: 36: initializeADC();
  4167  0E10  120A  158A  25A1  120A  158A  	fcall	_initializeADC
  4168                           
  4169                           ;main.c: 37: setupLCD();
  4170  0E15  120A  118A  27CE  120A  158A  	fcall	_setupLCD
  4171                           
  4172                           ;main.c: 38: initializeMotor();
  4173  0E1A  120A  158A  25E6   	fcall	_initializeMotor
  4174  0E1D  0008               	return
  4175  0E1E                     __end_of_initialise:	
  4176                           
  4177                           	psect	text19
  4178  07CE                     __ptext19:	
  4179 ;; *************** function _setupLCD *****************
  4180 ;; Defined at:
  4181 ;;		line 78 in file "lcd.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;		None
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4195 ;;      Params:         0       0       0       0       0
  4196 ;;      Locals:         0       0       0       0       0
  4197 ;;      Temps:          0       0       0       0       0
  4198 ;;      Totals:         0       0       0       0       0
  4199 ;;Total ram usage:        0 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    3
  4202 ;; This function calls:
  4203 ;;		_lcdWriteControl
  4204 ;; This function is called by:
  4205 ;;		_initialise
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _setupLCD
  4211  07CE                     _setupLCD:	
  4212                           
  4213                           ;lcd.c: 81: PORTD = 0;
  4214                           
  4215                           ;incstack = 0
  4216                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  4217  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  4218  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  4219  07D0  0188               	clrf	8	;volatile
  4220                           
  4221                           ;lcd.c: 82: PORTE = 0;
  4222  07D1  0189               	clrf	9	;volatile
  4223                           
  4224                           ;lcd.c: 84: TRISD = 0b00000000;
  4225  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  4226  07D3  1303               	bcf	3,6	;RP1=0, select bank1
  4227  07D4  0188               	clrf	8	;volatile
  4228                           
  4229                           ;lcd.c: 85: TRISE = 0b00000000;
  4230  07D5  0189               	clrf	9	;volatile
  4231                           
  4232                           ;lcd.c: 88: lcdWriteControl(0b00000001);
  4233  07D6  3001               	movlw	1
  4234  07D7  120A  158A  258D  120A  118A  	fcall	_lcdWriteControl
  4235                           
  4236                           ;lcd.c: 89: lcdWriteControl(0b00111000);
  4237  07DC  3038               	movlw	56
  4238  07DD  120A  158A  258D  120A  118A  	fcall	_lcdWriteControl
  4239                           
  4240                           ;lcd.c: 90: lcdWriteControl(0b00001100);
  4241  07E2  300C               	movlw	12
  4242  07E3  120A  158A  258D  120A  118A  	fcall	_lcdWriteControl
  4243                           
  4244                           ;lcd.c: 91: lcdWriteControl(0b00000110);
  4245  07E8  3006               	movlw	6
  4246  07E9  120A  158A  258D  120A  118A  	fcall	_lcdWriteControl
  4247                           
  4248                           ;lcd.c: 92: lcdWriteControl(0b00000010);
  4249  07EE  3002               	movlw	2
  4250  07EF  120A  158A  258D  120A  118A  	fcall	_lcdWriteControl
  4251                           
  4252                           ;lcd.c: 96: lcdWriteControl(0b00000001);
  4253  07F4  3001               	movlw	1
  4254  07F5  120A  158A  258D   	fcall	_lcdWriteControl
  4255  07F8  0008               	return
  4256  07F9                     __end_of_setupLCD:	
  4257                           
  4258                           	psect	text20
  4259  0D4B                     __ptext20:	
  4260 ;; *************** function _initializeTimer0 *****************
  4261 ;; Defined at:
  4262 ;;		line 7 in file "timer0.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4276 ;;      Params:         0       0       0       0       0
  4277 ;;      Locals:         0       0       0       0       0
  4278 ;;      Temps:          0       0       0       0       0
  4279 ;;      Totals:         0       0       0       0       0
  4280 ;;Total ram usage:        0 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    2
  4283 ;; This function calls:
  4284 ;;		Nothing
  4285 ;; This function is called by:
  4286 ;;		_initialise
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           
  4291                           ;psect for function _initializeTimer0
  4292  0D4B                     _initializeTimer0:	
  4293                           
  4294                           ;timer0.c: 10: TMR0 = 100;
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _initializeTimer0: [wreg]
  4298  0D4B  3064               	movlw	100
  4299  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  4300  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  4301  0D4E  0081               	movwf	1	;volatile
  4302                           
  4303                           ;timer0.c: 11: T0CS = 0;
  4304  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  4305  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  4306  0D51  1281               	bcf	1,5	;volatile
  4307                           
  4308                           ;timer0.c: 12: T0SE = 0;
  4309  0D52  1201               	bcf	1,4	;volatile
  4310                           
  4311                           ;timer0.c: 13: PSA = 0;
  4312  0D53  1181               	bcf	1,3	;volatile
  4313                           
  4314                           ;timer0.c: 14: PS0 = 0;
  4315  0D54  1001               	bcf	1,0	;volatile
  4316                           
  4317                           ;timer0.c: 15: PS1 = 0;
  4318  0D55  1081               	bcf	1,1	;volatile
  4319                           
  4320                           ;timer0.c: 16: PS2 = 1;
  4321  0D56  1501               	bsf	1,2	;volatile
  4322                           
  4323                           ;timer0.c: 18: TMR0IE = 1;
  4324  0D57  168B               	bsf	11,5	;volatile
  4325                           
  4326                           ;timer0.c: 19: (GIE = 1);
  4327  0D58  178B               	bsf	11,7	;volatile
  4328  0D59  0008               	return
  4329  0D5A                     __end_of_initializeTimer0:	
  4330                           
  4331                           	psect	text21
  4332  0DE6                     __ptext21:	
  4333 ;; *************** function _initializeMotor *****************
  4334 ;; Defined at:
  4335 ;;		line 19 in file "motor.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2   28[None  ] int 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0
  4352 ;;      Totals:         0       0       0       0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    4
  4356 ;; This function calls:
  4357 ;;		_lcdSetCursor
  4358 ;;		_lcdWriteToDigitBCD
  4359 ;; This function is called by:
  4360 ;;		_initialise
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _initializeMotor
  4366  0DE6                     _initializeMotor:	
  4367                           
  4368                           ;motor.c: 20: PORTC = halfSteps[0];
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _initializeMotor: [wreg+status,2+status,0+pclath+cstack]
  4372  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  4373  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  4374  0DE8  0839               	movf	_halfSteps^(0+128),w
  4375  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  4376  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  4377  0DEB  0087               	movwf	7	;volatile
  4378                           
  4379                           ;motor.c: 21: lcdSetCursor(0x40);
  4380  0DEC  3040               	movlw	64
  4381  0DED  120A  158A  251D  120A  158A  	fcall	_lcdSetCursor
  4382                           
  4383                           ;motor.c: 22: lcdWriteToDigitBCD(nrOfSteps);
  4384  0DF2  1683               	bsf	3,5	;RP0=1, select bank1
  4385  0DF3  1303               	bcf	3,6	;RP1=0, select bank1
  4386  0DF4  0854               	movf	(_nrOfSteps+1)^(0+128),w
  4387  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  4388  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  4389  0DF7  00A7               	movwf	lcdWriteToDigitBCD@data+1
  4390  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  4391  0DF9  1303               	bcf	3,6	;RP1=0, select bank1
  4392  0DFA  0853               	movf	_nrOfSteps^(0+128),w
  4393  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0DFD  00A6               	movwf	lcdWriteToDigitBCD@data
  4396  0DFE  120A  118A  2678   	fcall	_lcdWriteToDigitBCD
  4397  0E01  0008               	return
  4398  0E02                     __end_of_initializeMotor:	
  4399                           
  4400                           	psect	text22
  4401  0678                     __ptext22:	
  4402 ;; *************** function _lcdWriteToDigitBCD *****************
  4403 ;; Defined at:
  4404 ;;		line 39 in file "lcd.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  data            2    6[BANK0 ] int 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  4409 ;;  sign            1   12[BANK0 ] char 
  4410 ;;  ThousandDigi    1   11[BANK0 ] unsigned char 
  4411 ;;  HundredDigit    1   10[BANK0 ] unsigned char 
  4412 ;;  TensDigit       1    9[BANK0 ] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4422 ;;      Params:         0       2       0       0       0
  4423 ;;      Locals:         0       6       0       0       0
  4424 ;;      Temps:          0       1       0       0       0
  4425 ;;      Totals:         0       9       0       0       0
  4426 ;;Total ram usage:        9 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    3
  4429 ;; This function calls:
  4430 ;;		___wmul
  4431 ;;		_lcdWriteData
  4432 ;; This function is called by:
  4433 ;;		_main
  4434 ;;		_initializeMotor
  4435 ;;		_move
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           
  4440                           ;psect for function _lcdWriteToDigitBCD
  4441  0678                     _lcdWriteToDigitBCD:	
  4442                           
  4443                           ;lcd.c: 40: unsigned int OnesDigit;
  4444                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  4445                           ;lcd.c: 42: signed char sign = 1;
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  4449  0678  1283               	bcf	3,5	;RP0=0, select bank0
  4450  0679  1303               	bcf	3,6	;RP1=0, select bank0
  4451  067A  01AC               	clrf	lcdWriteToDigitBCD@sign
  4452  067B  0AAC               	incf	lcdWriteToDigitBCD@sign,f
  4453                           
  4454                           ;lcd.c: 43: if(data<0)
  4455  067C  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  4456  067D  2E80               	goto	l2360
  4457                           
  4458                           ;lcd.c: 44: sign = -1;
  4459  067E  01AC               	clrf	lcdWriteToDigitBCD@sign
  4460  067F  03AC               	decf	lcdWriteToDigitBCD@sign,f
  4461  0680                     l2360:	
  4462                           
  4463                           ;lcd.c: 46: OnesDigit = data*sign;
  4464  0680  082C               	movf	lcdWriteToDigitBCD@sign,w
  4465  0681  00A0               	movwf	___wmul@multiplier
  4466  0682  01A1               	clrf	___wmul@multiplier+1
  4467  0683  1BA0               	btfsc	___wmul@multiplier,7
  4468  0684  03A1               	decf	___wmul@multiplier+1,f
  4469  0685  0827               	movf	lcdWriteToDigitBCD@data+1,w
  4470  0686  00A3               	movwf	___wmul@multiplicand+1
  4471  0687  0826               	movf	lcdWriteToDigitBCD@data,w
  4472  0688  00A2               	movwf	___wmul@multiplicand
  4473  0689  120A  158A  261E  120A  118A  	fcall	___wmul
  4474  068E  1283               	bcf	3,5	;RP0=0, select bank0
  4475  068F  1303               	bcf	3,6	;RP1=0, select bank0
  4476  0690  0821               	movf	?___wmul+1,w
  4477  0691  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4478  0692  0820               	movf	?___wmul,w
  4479  0693  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4480                           
  4481                           ;lcd.c: 47: ThousandDigit = 0;
  4482  0694  01AB               	clrf	lcdWriteToDigitBCD@ThousandDigit
  4483                           
  4484                           ;lcd.c: 48: HundredDigit = 0;
  4485  0695  01AA               	clrf	lcdWriteToDigitBCD@HundredDigit
  4486                           
  4487                           ;lcd.c: 49: TensDigit = 0;
  4488  0696  01A9               	clrf	lcdWriteToDigitBCD@TensDigit
  4489  0697                     l2370:	
  4490                           ;lcd.c: 53: while(OnesDigit >= 1000){
  4491                           
  4492  0697  3003               	movlw	3
  4493  0698  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4494  0699  30E8               	movlw	232
  4495  069A  1903               	skipnz
  4496  069B  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4497  069C  1C03               	btfss	3,0
  4498  069D  2EB7               	goto	l2374
  4499                           
  4500                           ;lcd.c: 54: OnesDigit = OnesDigit - 1000;
  4501  069E  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4502  069F  3E18               	addlw	24
  4503  06A0  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4504  06A1  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4505  06A2  1803               	skipnc
  4506  06A3  3E01               	addlw	1
  4507  06A4  3EFC               	addlw	252
  4508  06A5  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4509                           
  4510                           ;lcd.c: 55: ThousandDigit++;
  4511  06A6  3001               	movlw	1
  4512  06A7  00A8               	movwf	??_lcdWriteToDigitBCD
  4513  06A8  0828               	movf	??_lcdWriteToDigitBCD,w
  4514  06A9  07AB               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  4515  06AA  2E97               	goto	l2370
  4516  06AB                     l2372:	
  4517                           ;lcd.c: 56: }
  4518                           ;lcd.c: 57: while(OnesDigit >= 100){
  4519                           
  4520                           
  4521                           ;lcd.c: 58: OnesDigit = OnesDigit - 100;
  4522  06AB  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4523  06AC  3E9C               	addlw	156
  4524  06AD  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4525  06AE  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4526  06AF  1803               	skipnc
  4527  06B0  3E01               	addlw	1
  4528  06B1  3EFF               	addlw	255
  4529  06B2  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4530                           
  4531                           ;lcd.c: 59: HundredDigit++;
  4532  06B3  3001               	movlw	1
  4533  06B4  00A8               	movwf	??_lcdWriteToDigitBCD
  4534  06B5  0828               	movf	??_lcdWriteToDigitBCD,w
  4535  06B6  07AA               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  4536  06B7                     l2374:	
  4537  06B7  3000               	movlw	0
  4538  06B8  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4539  06B9  3064               	movlw	100
  4540  06BA  1903               	skipnz
  4541  06BB  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4542  06BC  1C03               	btfss	3,0
  4543  06BD  2ECB               	goto	l2378
  4544  06BE  2EAB               	goto	l2372
  4545  06BF                     l2376:	
  4546                           ;lcd.c: 60: }
  4547                           ;lcd.c: 61: while (OnesDigit >= 10){
  4548                           
  4549                           
  4550                           ;lcd.c: 62: OnesDigit = OnesDigit - 10;
  4551  06BF  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4552  06C0  3EF6               	addlw	246
  4553  06C1  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  4554  06C2  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4555  06C3  1803               	skipnc
  4556  06C4  3E01               	addlw	1
  4557  06C5  3EFF               	addlw	255
  4558  06C6  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4559                           
  4560                           ;lcd.c: 63: TensDigit++;
  4561  06C7  3001               	movlw	1
  4562  06C8  00A8               	movwf	??_lcdWriteToDigitBCD
  4563  06C9  0828               	movf	??_lcdWriteToDigitBCD,w
  4564  06CA  07A9               	addwf	lcdWriteToDigitBCD@TensDigit,f
  4565  06CB                     l2378:	
  4566  06CB  3000               	movlw	0
  4567  06CC  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4568  06CD  300A               	movlw	10
  4569  06CE  1903               	skipnz
  4570  06CF  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4571  06D0  1803               	skipnc
  4572  06D1  2EBF               	goto	l2376
  4573                           
  4574                           ;lcd.c: 64: }
  4575                           ;lcd.c: 65: if(sign == -1)
  4576  06D2  0A2C               	incf	lcdWriteToDigitBCD@sign,w
  4577  06D3  1D03               	btfss	3,2
  4578  06D4  2ED7               	goto	l2384
  4579                           
  4580                           ;lcd.c: 66: lcdWriteData((unsigned char)45);
  4581  06D5  302D               	movlw	45
  4582  06D6  2ED8               	goto	L5
  4583  06D7                     l2384:	
  4584                           
  4585                           ;lcd.c: 67: else{
  4586                           ;lcd.c: 68: lcdWriteData((unsigned char)43);
  4587  06D7  302B               	movlw	43
  4588  06D8                     L5:	
  4589  06D8  120A  158A  257A  120A  118A  	fcall	_lcdWriteData
  4590                           
  4591                           ;lcd.c: 69: }
  4592                           ;lcd.c: 71: lcdWriteData((unsigned char)ThousandDigit + 48);
  4593  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  4594  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  4595  06DF  082B               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  4596  06E0  3E30               	addlw	48
  4597  06E1  120A  158A  257A  120A  118A  	fcall	_lcdWriteData
  4598                           
  4599                           ;lcd.c: 72: lcdWriteData((unsigned char)HundredDigit + 48);
  4600  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  4601  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  4602  06E8  082A               	movf	lcdWriteToDigitBCD@HundredDigit,w
  4603  06E9  3E30               	addlw	48
  4604  06EA  120A  158A  257A  120A  118A  	fcall	_lcdWriteData
  4605                           
  4606                           ;lcd.c: 73: lcdWriteData((unsigned char)TensDigit + 48);
  4607  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  4608  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  4609  06F1  0829               	movf	lcdWriteToDigitBCD@TensDigit,w
  4610  06F2  3E30               	addlw	48
  4611  06F3  120A  158A  257A  120A  118A  	fcall	_lcdWriteData
  4612                           
  4613                           ;lcd.c: 74: lcdWriteData((unsigned char)OnesDigit + 48);
  4614  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  4615  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  4616  06FA  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4617  06FB  3E30               	addlw	48
  4618  06FC  120A  158A  257A   	fcall	_lcdWriteData
  4619  06FF  0008               	return
  4620  0700                     __end_of_lcdWriteToDigitBCD:	
  4621                           
  4622                           	psect	text23
  4623  0D7A                     __ptext23:	
  4624 ;; *************** function _lcdWriteData *****************
  4625 ;; Defined at:
  4626 ;;		line 17 in file "lcd.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  databyte        1    wreg     unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  databyte        1    2[BANK0 ] unsigned char 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4640 ;;      Params:         0       0       0       0       0
  4641 ;;      Locals:         0       1       0       0       0
  4642 ;;      Temps:          0       2       0       0       0
  4643 ;;      Totals:         0       3       0       0       0
  4644 ;;Total ram usage:        3 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_lcdWriteToDigitBCD
  4651 ;;		_lcdWriteString
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function _lcdWriteData
  4657  0D7A                     _lcdWriteData:	
  4658                           
  4659                           ;incstack = 0
  4660                           ; Regs used in _lcdWriteData: [wreg]
  4661                           ;lcdWriteData@databyte stored from wreg
  4662  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  4663  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  4664  0D7C  00A2               	movwf	lcdWriteData@databyte
  4665                           
  4666                           ;lcd.c: 18: RE2 = 0;
  4667  0D7D  1109               	bcf	9,2	;volatile
  4668                           
  4669                           ;lcd.c: 19: RE1 = 0;
  4670  0D7E  1089               	bcf	9,1	;volatile
  4671                           
  4672                           ;lcd.c: 20: RE0 = 1;
  4673  0D7F  1409               	bsf	9,0	;volatile
  4674                           
  4675                           ;lcd.c: 21: PORTD = databyte;
  4676  0D80  0822               	movf	lcdWriteData@databyte,w
  4677  0D81  0088               	movwf	8	;volatile
  4678                           
  4679                           ;lcd.c: 22: RE2 = 1;
  4680  0D82  1509               	bsf	9,2	;volatile
  4681                           
  4682                           ;lcd.c: 23: RE2 = 0;
  4683  0D83  1109               	bcf	9,2	;volatile
  4684                           
  4685                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  4686  0D84  3007               	movlw	7
  4687  0D85  00A1               	movwf	??_lcdWriteData+1
  4688  0D86  307D               	movlw	125
  4689  0D87  00A0               	movwf	??_lcdWriteData
  4690  0D88                     u3487:	
  4691  0D88  0BA0               	decfsz	??_lcdWriteData,f
  4692  0D89  2D88               	goto	u3487
  4693  0D8A  0BA1               	decfsz	??_lcdWriteData+1,f
  4694  0D8B  2D88               	goto	u3487
  4695  0D8C  0008               	return
  4696  0D8D                     __end_of_lcdWriteData:	
  4697                           
  4698                           	psect	text24
  4699  0E1E                     __ptext24:	
  4700 ;; *************** function ___wmul *****************
  4701 ;; Defined at:
  4702 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4705 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  product         2    4[BANK0 ] unsigned int 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  2    0[BANK0 ] unsigned int 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4717 ;;      Params:         0       4       0       0       0
  4718 ;;      Locals:         0       2       0       0       0
  4719 ;;      Temps:          0       0       0       0       0
  4720 ;;      Totals:         0       6       0       0       0
  4721 ;;Total ram usage:        6 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    2
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_lcdWriteToDigitBCD
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function ___wmul
  4733  0E1E                     ___wmul:	
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4737  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  4738  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  4739  0E20  01A4               	clrf	___wmul@product
  4740  0E21  01A5               	clrf	___wmul@product+1
  4741  0E22                     l2308:	
  4742  0E22  1C20               	btfss	___wmul@multiplier,0
  4743  0E23  2E2A               	goto	l416
  4744  0E24  0822               	movf	___wmul@multiplicand,w
  4745  0E25  07A4               	addwf	___wmul@product,f
  4746  0E26  1803               	skipnc
  4747  0E27  0AA5               	incf	___wmul@product+1,f
  4748  0E28  0823               	movf	___wmul@multiplicand+1,w
  4749  0E29  07A5               	addwf	___wmul@product+1,f
  4750  0E2A                     l416:	
  4751  0E2A  3001               	movlw	1
  4752  0E2B                     u2645:	
  4753  0E2B  1003               	clrc
  4754  0E2C  0DA2               	rlf	___wmul@multiplicand,f
  4755  0E2D  0DA3               	rlf	___wmul@multiplicand+1,f
  4756  0E2E  3EFF               	addlw	-1
  4757  0E2F  1D03               	skipz
  4758  0E30  2E2B               	goto	u2645
  4759  0E31  3001               	movlw	1
  4760  0E32                     u2655:	
  4761  0E32  1003               	clrc
  4762  0E33  0CA1               	rrf	___wmul@multiplier+1,f
  4763  0E34  0CA0               	rrf	___wmul@multiplier,f
  4764  0E35  3EFF               	addlw	-1
  4765  0E36  1D03               	skipz
  4766  0E37  2E32               	goto	u2655
  4767  0E38  0820               	movf	___wmul@multiplier,w
  4768  0E39  0421               	iorwf	___wmul@multiplier+1,w
  4769  0E3A  1D03               	btfss	3,2
  4770  0E3B  2E22               	goto	l2308
  4771  0E3C  0825               	movf	___wmul@product+1,w
  4772  0E3D  00A1               	movwf	?___wmul+1
  4773  0E3E  0824               	movf	___wmul@product,w
  4774  0E3F  00A0               	movwf	?___wmul
  4775  0E40  0008               	return
  4776  0E41                     __end_of___wmul:	
  4777                           
  4778                           	psect	text25
  4779  0D1D                     __ptext25:	
  4780 ;; *************** function _lcdSetCursor *****************
  4781 ;; Defined at:
  4782 ;;		line 28 in file "lcd.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  address         1    wreg     unsigned char 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  address         1    3[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, pclath, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4796 ;;      Params:         0       0       0       0       0
  4797 ;;      Locals:         0       1       0       0       0
  4798 ;;      Temps:          0       0       0       0       0
  4799 ;;      Totals:         0       1       0       0       0
  4800 ;;Total ram usage:        1 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		_lcdWriteControl
  4805 ;; This function is called by:
  4806 ;;		_main
  4807 ;;		_initializeMotor
  4808 ;;		_move
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _lcdSetCursor
  4814  0D1D                     _lcdSetCursor:	
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4818                           ;lcdSetCursor@address stored from wreg
  4819  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  4820  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  4821  0D1F  00A3               	movwf	lcdSetCursor@address
  4822                           
  4823                           ;lcd.c: 29: address |= 0b10000000;
  4824  0D20  17A3               	bsf	lcdSetCursor@address,7
  4825                           
  4826                           ;lcd.c: 30: lcdWriteControl(address);
  4827  0D21  0823               	movf	lcdSetCursor@address,w
  4828  0D22  120A  158A  258D   	fcall	_lcdWriteControl
  4829  0D25  0008               	return
  4830  0D26                     __end_of_lcdSetCursor:	
  4831                           
  4832                           	psect	text26
  4833  0D8D                     __ptext26:	
  4834 ;; *************** function _lcdWriteControl *****************
  4835 ;; Defined at:
  4836 ;;		line 6 in file "lcd.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  databyte        1    wreg     unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  databyte        1    2[BANK0 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		wreg
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4850 ;;      Params:         0       0       0       0       0
  4851 ;;      Locals:         0       1       0       0       0
  4852 ;;      Temps:          0       2       0       0       0
  4853 ;;      Totals:         0       3       0       0       0
  4854 ;;Total ram usage:        3 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    2
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_lcdSetCursor
  4861 ;;		_setupLCD
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _lcdWriteControl
  4867  0D8D                     _lcdWriteControl:	
  4868                           
  4869                           ;incstack = 0
  4870                           ; Regs used in _lcdWriteControl: [wreg]
  4871                           ;lcdWriteControl@databyte stored from wreg
  4872  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  4873  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  4874  0D8F  00A2               	movwf	lcdWriteControl@databyte
  4875                           
  4876                           ;lcd.c: 7: RE2 = 0;
  4877  0D90  1109               	bcf	9,2	;volatile
  4878                           
  4879                           ;lcd.c: 8: RE1 = 0;
  4880  0D91  1089               	bcf	9,1	;volatile
  4881                           
  4882                           ;lcd.c: 9: RE0 = 0;
  4883  0D92  1009               	bcf	9,0	;volatile
  4884                           
  4885                           ;lcd.c: 10: PORTD = databyte;
  4886  0D93  0822               	movf	lcdWriteControl@databyte,w
  4887  0D94  0088               	movwf	8	;volatile
  4888                           
  4889                           ;lcd.c: 11: RE2 = 1;
  4890  0D95  1509               	bsf	9,2	;volatile
  4891                           
  4892                           ;lcd.c: 12: RE2 = 0;
  4893  0D96  1109               	bcf	9,2	;volatile
  4894                           
  4895                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  4896  0D97  300D               	movlw	13
  4897  0D98  00A1               	movwf	??_lcdWriteControl+1
  4898  0D99  30FB               	movlw	251
  4899  0D9A  00A0               	movwf	??_lcdWriteControl
  4900  0D9B                     u3497:	
  4901  0D9B  0BA0               	decfsz	??_lcdWriteControl,f
  4902  0D9C  2D9B               	goto	u3497
  4903  0D9D  0BA1               	decfsz	??_lcdWriteControl+1,f
  4904  0D9E  2D9B               	goto	u3497
  4905  0D9F  2DA0               	nop2
  4906  0DA0  0008               	return
  4907  0DA1                     __end_of_lcdWriteControl:	
  4908                           
  4909                           	psect	text27
  4910  0DA1                     __ptext27:	
  4911 ;; *************** function _initializeADC *****************
  4912 ;; Defined at:
  4913 ;;		line 5 in file "adConv.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;		None
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;		None
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4927 ;;      Params:         0       0       0       0       0
  4928 ;;      Locals:         0       0       0       0       0
  4929 ;;      Temps:          0       0       0       0       0
  4930 ;;      Totals:         0       0       0       0       0
  4931 ;;Total ram usage:        0 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    2
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_initialise
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           
  4942                           ;psect for function _initializeADC
  4943  0DA1                     _initializeADC:	
  4944                           
  4945                           ;adConv.c: 6: TRISA = 0b11111111;
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _initializeADC: [wreg]
  4949  0DA1  30FF               	movlw	255
  4950  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  4951  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  4952  0DA4  0085               	movwf	5	;volatile
  4953                           
  4954                           ;adConv.c: 8: ADFM = 1;
  4955  0DA5  179F               	bsf	31,7	;volatile
  4956                           
  4957                           ;adConv.c: 10: ADCS2 = 0;
  4958  0DA6  131F               	bcf	31,6	;volatile
  4959                           
  4960                           ;adConv.c: 12: PCFG3 = 0;
  4961  0DA7  119F               	bcf	31,3	;volatile
  4962                           
  4963                           ;adConv.c: 13: PCFG2 = 0;
  4964  0DA8  111F               	bcf	31,2	;volatile
  4965                           
  4966                           ;adConv.c: 14: PCFG1 = 1;
  4967  0DA9  149F               	bsf	31,1	;volatile
  4968                           
  4969                           ;adConv.c: 15: PCFG0 = 1;
  4970  0DAA  141F               	bsf	31,0	;volatile
  4971                           
  4972                           ;adConv.c: 19: ADCON0 = 0b10000001;
  4973  0DAB  3081               	movlw	129
  4974  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  4975  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  4976  0DAE  009F               	movwf	31	;volatile
  4977                           
  4978                           ;adConv.c: 23: ADIF = 0;
  4979  0DAF  130C               	bcf	12,6	;volatile
  4980                           
  4981                           ;adConv.c: 24: ADIE = 1;
  4982  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  4983  0DB1  1303               	bcf	3,6	;RP1=0, select bank1
  4984  0DB2  170C               	bsf	12,6	;volatile
  4985                           
  4986                           ;adConv.c: 25: PEIE = 1;
  4987  0DB3  170B               	bsf	11,6	;volatile
  4988                           
  4989                           ;adConv.c: 26: GIE = 1;
  4990  0DB4  178B               	bsf	11,7	;volatile
  4991  0DB5  0008               	return
  4992  0DB6                     __end_of_initializeADC:	
  4993                           
  4994                           	psect	text28
  4995  0E41                     __ptext28:	
  4996 ;; *************** function _isr *****************
  4997 ;; Defined at:
  4998 ;;		line 13 in file "main.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;		None
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  1    wreg      void 
  5005 ;; Registers used:
  5006 ;;		wreg, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5012 ;;      Params:         0       0       0       0       0
  5013 ;;      Locals:         0       0       0       0       0
  5014 ;;      Temps:          4       0       0       0       0
  5015 ;;      Totals:         4       0       0       0       0
  5016 ;;Total ram usage:        4 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    1
  5019 ;; This function calls:
  5020 ;;		_debounceButtons
  5021 ;;		_flashLed
  5022 ;;		_lcdRefresh
  5023 ;; This function is called by:
  5024 ;;		Interrupt level 1
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _isr
  5030  0E41                     _isr:	
  5031                           
  5032                           ;main.c: 14: if (T0IF){
  5033  0E41  1D0B               	btfss	11,2	;volatile
  5034  0E42  2E55               	goto	i1l2200
  5035                           
  5036                           ;main.c: 15: T0IF = 0;
  5037  0E43  110B               	bcf	11,2	;volatile
  5038                           
  5039                           ;main.c: 16: TMR0 = 100;
  5040  0E44  3064               	movlw	100
  5041  0E45  0081               	movwf	1	;volatile
  5042                           
  5043                           ;main.c: 17: flashLed();
  5044  0E46  120A  158A  25B6  120A  158A  	fcall	_flashLed
  5045                           
  5046                           ;main.c: 18: debounceButtons();
  5047  0E4B  120A  158A  2753  120A  158A  	fcall	_debounceButtons
  5048                           
  5049                           ;main.c: 19: lcdRefresh();
  5050  0E50  120A  158A  2530  120A  158A  	fcall	_lcdRefresh
  5051  0E55                     i1l2200:	
  5052                           
  5053                           ;main.c: 20: }
  5054                           ;main.c: 21: if(ADIF){
  5055  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5056  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5057  0E57  1F0C               	btfss	12,6	;volatile
  5058  0E58  2E5B               	goto	i1l91
  5059                           
  5060                           ;main.c: 22: conversionDone = 1;
  5061  0E59  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  5062                           
  5063                           ;main.c: 23: ADIF = 0;
  5064  0E5A  130C               	bcf	12,6	;volatile
  5065  0E5B                     i1l91:	
  5066  0E5B  0876               	movf	??_isr+3,w
  5067  0E5C  00FF               	movwf	127
  5068  0E5D  0875               	movf	??_isr+2,w
  5069  0E5E  008A               	movwf	10
  5070  0E5F  0874               	movf	??_isr+1,w
  5071  0E60  0084               	movwf	4
  5072  0E61  0E73               	swapf	??_isr^(0+-128),w
  5073  0E62  0083               	movwf	3
  5074  0E63  0EFE               	swapf	126,f
  5075  0E64  0E7E               	swapf	126,w
  5076  0E65  0009               	retfie
  5077  0E66                     __end_of_isr:	
  5078                           
  5079                           	psect	intentry
  5080  0004                     __pintentry:	
  5081                           ;incstack = 0
  5082                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  5083                           
  5084  0004                     interrupt_function:	
  5085  007E                     saved_w	set	btemp
  5086  0004  00FE               	movwf	btemp
  5087  0005  0E03               	swapf	3,w
  5088  0006  00F3               	movwf	??_isr
  5089  0007  0804               	movf	4,w
  5090  0008  00F4               	movwf	??_isr+1
  5091  0009  080A               	movf	10,w
  5092  000A  00F5               	movwf	??_isr+2
  5093  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5094  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5095  000D  087F               	movf	btemp+1,w
  5096  000E  00F6               	movwf	??_isr+3
  5097  000F  120A  158A  2E41   	ljmp	_isr
  5098                           
  5099                           	psect	text29
  5100  0D30                     __ptext29:	
  5101 ;; *************** function _lcdRefresh *****************
  5102 ;; Defined at:
  5103 ;;		line 22 in file "timer0.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5117 ;;      Params:         0       0       0       0       0
  5118 ;;      Locals:         0       0       0       0       0
  5119 ;;      Temps:          1       0       0       0       0
  5120 ;;      Totals:         1       0       0       0       0
  5121 ;;Total ram usage:        1 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_isr
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _lcdRefresh
  5132  0D30                     _lcdRefresh:	
  5133                           
  5134                           ;timer0.c: 23: irLcdCounter++;
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in _lcdRefresh: [wreg+status,2+status,0]
  5138  0D30  3001               	movlw	1
  5139  0D31  00F2               	movwf	??_lcdRefresh
  5140  0D32  0872               	movf	??_lcdRefresh,w
  5141  0D33  1683               	bsf	3,5	;RP0=1, select bank1
  5142  0D34  1303               	bcf	3,6	;RP1=0, select bank1
  5143  0D35  07D7               	addwf	_irLcdCounter^(0+128),f	;volatile
  5144                           
  5145                           ;timer0.c: 24: if(irLcdCounter==250){
  5146  0D36  30FA               	movlw	250
  5147  0D37  0657               	xorwf	_irLcdCounter^(0+128),w	;volatile
  5148  0D38  1D03               	btfss	3,2
  5149  0D39  0008               	return
  5150                           
  5151                           ;timer0.c: 25: updateLcdIRData = 1;
  5152  0D3A  1571               	bsf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  5153                           
  5154                           ;timer0.c: 26: irLcdCounter = 0;
  5155  0D3B  01D7               	clrf	_irLcdCounter^(0+128)	;volatile
  5156  0D3C  0008               	return
  5157  0D3D                     __end_of_lcdRefresh:	
  5158                           
  5159                           	psect	text30
  5160  0DB6                     __ptext30:	
  5161 ;; *************** function _flashLed *****************
  5162 ;; Defined at:
  5163 ;;		line 30 in file "timer0.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5177 ;;      Params:         0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0
  5180 ;;      Totals:         0       0       0       0       0
  5181 ;;Total ram usage:        0 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_isr
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _flashLed
  5192  0DB6                     _flashLed:	
  5193                           
  5194                           ;timer0.c: 31: rtcCounter++;
  5195                           
  5196                           ;incstack = 0
  5197                           ; Regs used in _flashLed: [wreg+status,2+status,0]
  5198  0DB6  3001               	movlw	1
  5199  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  5200  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  5201  0DB9  07D5               	addwf	_rtcCounter^(0+128),f	;volatile
  5202  0DBA  1803               	skipnc
  5203  0DBB  0AD6               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  5204  0DBC  3000               	movlw	0
  5205  0DBD  07D6               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  5206                           
  5207                           ;timer0.c: 32: if(rtcCounter == 500){
  5208  0DBE  30F4               	movlw	244
  5209  0DBF  0655               	xorwf	_rtcCounter^(0+128),w	;volatile
  5210  0DC0  1D03               	skipz
  5211  0DC1  0008               	return
  5212  0DC2  0356               	decf	(_rtcCounter+1)^(0+128),w	;volatile
  5213  0DC3  1D03               	btfss	3,2
  5214  0DC4  0008               	return
  5215                           
  5216                           ;timer0.c: 33: RB5 = !RB5;
  5217  0DC5  3020               	movlw	32
  5218  0DC6  1283               	bcf	3,5	;RP0=0, select bank0
  5219  0DC7  1303               	bcf	3,6	;RP1=0, select bank0
  5220  0DC8  0686               	xorwf	6,f
  5221                           
  5222                           ;timer0.c: 34: rtcCounter = 0;
  5223  0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  5224  0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  5225  0DCB  01D5               	clrf	_rtcCounter^(0+128)	;volatile
  5226  0DCC  01D6               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  5227  0DCD  0008               	return
  5228  0DCE                     __end_of_flashLed:	
  5229                           
  5230                           	psect	text31
  5231  0F53                     __ptext31:	
  5232 ;; *************** function _debounceButtons *****************
  5233 ;; Defined at:
  5234 ;;		line 38 in file "timer0.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5248 ;;      Params:         0       0       0       0       0
  5249 ;;      Locals:         0       0       0       0       0
  5250 ;;      Temps:          1       0       0       0       0
  5251 ;;      Totals:         1       0       0       0       0
  5252 ;;Total ram usage:        1 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_isr
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _debounceButtons
  5263  0F53                     _debounceButtons:	
  5264                           
  5265                           ;timer0.c: 40: if(!RB0) {
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  5269  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5270  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5271  0F55  1806               	btfsc	6,0	;volatile
  5272  0F56  2F63               	goto	i1l2082
  5273                           
  5274                           ;timer0.c: 41: pbCounter++;
  5275  0F57  3001               	movlw	1
  5276  0F58  00F2               	movwf	??_debounceButtons
  5277  0F59  0872               	movf	??_debounceButtons,w
  5278  0F5A  07F8               	addwf	_pbCounter,f	;volatile
  5279                           
  5280                           ;timer0.c: 42: if(pbCounter >10 &&pb0Released){
  5281  0F5B  300B               	movlw	11
  5282  0F5C  0278               	subwf	_pbCounter,w	;volatile
  5283  0F5D  1803               	btfsc	3,0
  5284  0F5E  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5285  0F5F  2F65               	goto	i1l2086
  5286                           
  5287                           ;timer0.c: 43: pb0Pressed = 1;
  5288  0F60  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  5289                           
  5290                           ;timer0.c: 44: pb0Released = 0;
  5291  0F61  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5292                           
  5293                           ;timer0.c: 45: }
  5294                           ;timer0.c: 46: }
  5295  0F62  2F65               	goto	i1l2086
  5296  0F63                     i1l2082:	
  5297                           
  5298                           ;timer0.c: 47: else{
  5299                           ;timer0.c: 48: pbCounter = 0;
  5300  0F63  01F8               	clrf	_pbCounter	;volatile
  5301                           
  5302                           ;timer0.c: 49: pb0Released = 1;
  5303  0F64  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5304  0F65                     i1l2086:	
  5305                           
  5306                           ;timer0.c: 50: }
  5307                           ;timer0.c: 52: if(!RB1) {
  5308  0F65  1886               	btfsc	6,1	;volatile
  5309  0F66  2F73               	goto	i1l2096
  5310                           
  5311                           ;timer0.c: 53: pbCounter2++;
  5312  0F67  3001               	movlw	1
  5313  0F68  00F2               	movwf	??_debounceButtons
  5314  0F69  0872               	movf	??_debounceButtons,w
  5315  0F6A  07F9               	addwf	_pbCounter2,f	;volatile
  5316                           
  5317                           ;timer0.c: 54: if(pbCounter2 >10 &&pb1Released){
  5318  0F6B  300B               	movlw	11
  5319  0F6C  0279               	subwf	_pbCounter2,w	;volatile
  5320  0F6D  1803               	btfsc	3,0
  5321  0F6E  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5322  0F6F  2F75               	goto	i1l2100
  5323                           
  5324                           ;timer0.c: 55: pb1Pressed = 1;
  5325  0F70  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  5326                           
  5327                           ;timer0.c: 56: pb1Released = 0;
  5328  0F71  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5329                           
  5330                           ;timer0.c: 57: }
  5331                           ;timer0.c: 58: }
  5332  0F72  2F75               	goto	i1l2100
  5333  0F73                     i1l2096:	
  5334                           
  5335                           ;timer0.c: 59: else{
  5336                           ;timer0.c: 60: pbCounter2 = 0;
  5337  0F73  01F9               	clrf	_pbCounter2	;volatile
  5338                           
  5339                           ;timer0.c: 61: pb1Released = 1;
  5340  0F74  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5341  0F75                     i1l2100:	
  5342                           
  5343                           ;timer0.c: 62: }
  5344                           ;timer0.c: 63: if(!RB2) {
  5345  0F75  1906               	btfsc	6,2	;volatile
  5346  0F76  2F85               	goto	i1l2110
  5347                           
  5348                           ;timer0.c: 64: pbCounter3++;
  5349  0F77  3001               	movlw	1
  5350  0F78  00F2               	movwf	??_debounceButtons
  5351  0F79  0872               	movf	??_debounceButtons,w
  5352  0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  5353  0F7B  1303               	bcf	3,6	;RP1=0, select bank1
  5354  0F7C  07D8               	addwf	_pbCounter3^(0+128),f	;volatile
  5355                           
  5356                           ;timer0.c: 65: if(pbCounter3 >10 &&pb2Released){
  5357  0F7D  300B               	movlw	11
  5358  0F7E  0258               	subwf	_pbCounter3^(0+128),w	;volatile
  5359  0F7F  1803               	btfsc	3,0
  5360  0F80  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5361  0F81  2F89               	goto	i1l2114
  5362                           
  5363                           ;timer0.c: 66: pb2Pressed = 1;
  5364  0F82  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  5365                           
  5366                           ;timer0.c: 67: pb2Released = 0;
  5367  0F83  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5368                           
  5369                           ;timer0.c: 68: }
  5370                           ;timer0.c: 69: }
  5371  0F84  2F89               	goto	i1l2114
  5372  0F85                     i1l2110:	
  5373                           
  5374                           ;timer0.c: 70: else{
  5375                           ;timer0.c: 71: pbCounter3 = 0;
  5376  0F85  1683               	bsf	3,5	;RP0=1, select bank1
  5377  0F86  1303               	bcf	3,6	;RP1=0, select bank1
  5378  0F87  01D8               	clrf	_pbCounter3^(0+128)	;volatile
  5379                           
  5380                           ;timer0.c: 72: pb2Released = 1;
  5381  0F88  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5382  0F89                     i1l2114:	
  5383                           
  5384                           ;timer0.c: 73: }
  5385                           ;timer0.c: 74: if(!RB3) {
  5386  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  5387  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  5388  0F8B  1986               	btfsc	6,3	;volatile
  5389  0F8C  2F9C               	goto	i1l2124
  5390                           
  5391                           ;timer0.c: 75: pbCounter4++;
  5392  0F8D  3001               	movlw	1
  5393  0F8E  00F2               	movwf	??_debounceButtons
  5394  0F8F  0872               	movf	??_debounceButtons,w
  5395  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  5396  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  5397  0F92  07D9               	addwf	_pbCounter4^(0+128),f	;volatile
  5398                           
  5399                           ;timer0.c: 76: if(pbCounter4 >10 &&pb3Released){
  5400  0F93  300B               	movlw	11
  5401  0F94  0259               	subwf	_pbCounter4^(0+128),w	;volatile
  5402  0F95  1C03               	skipc
  5403  0F96  0008               	return
  5404  0F97  1CF1               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5405  0F98  0008               	return
  5406                           
  5407                           ;timer0.c: 77: pb3Pressed = 1;
  5408  0F99  1471               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  5409                           
  5410                           ;timer0.c: 78: pb3Released = 0;
  5411  0F9A  10F1               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5412                           
  5413                           ;timer0.c: 79: }
  5414                           ;timer0.c: 80: }
  5415  0F9B  0008               	return
  5416  0F9C                     i1l2124:	
  5417                           
  5418                           ;timer0.c: 81: else{
  5419                           ;timer0.c: 82: pbCounter4 = 0;
  5420  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  5421  0F9D  1303               	bcf	3,6	;RP1=0, select bank1
  5422  0F9E  01D9               	clrf	_pbCounter4^(0+128)	;volatile
  5423                           
  5424                           ;timer0.c: 83: pb3Released = 1;
  5425  0F9F  14F1               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5426  0FA0  0008               	return
  5427  0FA1                     __end_of_debounceButtons:	
  5428  007E                     btemp	set	126	;btemp
  5429  007E                     wtemp	set	126
  5430  007E                     wtemp0	set	126
  5431  0080                     wtemp1	set	128
  5432  0082                     wtemp2	set	130
  5433  0084                     wtemp3	set	132
  5434  0086                     wtemp4	set	134
  5435  0088                     wtemp5	set	136
  5436  007F                     wtemp6	set	127
  5437  007E                     ttemp	set	126
  5438  007E                     ttemp0	set	126
  5439  0081                     ttemp1	set	129
  5440  0084                     ttemp2	set	132
  5441  0087                     ttemp3	set	135
  5442  007F                     ttemp4	set	127
  5443  007E                     ltemp	set	126
  5444  007E                     ltemp0	set	126
  5445  0082                     ltemp1	set	130
  5446  0086                     ltemp2	set	134
  5447  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     25      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons
    _isr->_lcdRefresh

Critical Paths under _main in BANK0

    _main->_moveDeg
    _readADCMeter->_round
    ___ftmul->___ftpack
    ___awtoft->___ftpack
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _setupLCD->_lcdWriteControl
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readADCMeter

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   38847
                                             19 BANK1      6     6      0
                         _initialise
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                       _readADCMeter
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCMeter                                        21    19      2   20671
                                             77 BANK0      2     0      2
                                              0 BANK1     19    19      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _readADCData
                              _round
 ---------------------------------------------------------------------------------
 (2) _readADCData                                          4     2      2      34
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2746
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2326
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   14089
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    8092
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3663
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     464
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2397
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3833
                                             58 BANK0     13     7      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    1640
                                             15 BANK0      5     4      1
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2938
                                             19 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2128
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0    1188
                      _initializeADC
                    _initializeMotor
                   _initializeTimer0
                           _setupLCD
 ---------------------------------------------------------------------------------
 (2) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeMotor                                      0     0      0    1157
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                   9     7      2    1092
                                              6 BANK0      9     7      2
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (4) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
                           _flashLed
                         _lcdRefresh
 ---------------------------------------------------------------------------------
 (7) _lcdRefresh                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _flashLed                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
     _initializeADC
     _initializeMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _initializeTimer0
     _setupLCD
       _lcdWriteControl
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _readADCMeter
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _readADCData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _startADCConversion

 _isr (ROOT)
   _debounceButtons
   _flashLed
   _lcdRefresh

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     19      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      94      12        0.0%
ABS                  0      0      94       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Apr 08 16:20:29 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               _GO 00FA                               l99 0512  
            ?_startADCConversion 0072                               fsr 0004              ___wmul@multiplicand 0022  
                   ___ftadd@exp1 0066                     ___ftadd@exp2 0065                     ___ftadd@sign 0064  
                            l105 0553                              l136 0615                              l416 0E2A  
                            l608 00DD                              l584 074D                              l585 0755  
                            l577 0738                              l668 05D3                              _GIE 005F  
                            _RB0 0030                              _RB1 0031                              _RB2 0032  
                            _RB3 0033                              _RB4 0034                              _RB5 0035  
                            _RE0 0048                              _RE1 0049                              _RE2 004A  
                            _PS0 0408                              _PS1 0409                              _PS2 040A  
                   __CFG_CPD$OFF 0000                              _PSA 040B                              _isr 0E41  
                            fsr0 0004                              indf 0000                     __CFG_FOSC$HS 0000  
                   ?_readADCData 0020                   ??_lcdWriteData 0020                     __CFG_LVP$OFF 0000  
                   ___ftdiv@cntr 003D                     ___ftdiv@sign 0042                             l2002 0FF1  
                           l2402 0074                             l2330 0EDD                             l2308 0E22  
                           l2420 00A3                             l2332 0EEF                             l2270 0722  
                           l2262 070A                             l2422 00AF                             l2414 008E  
                           l2342 0E99                             l2360 0680                             l2432 00CD  
                           l2424 00B4                             l2370 0697                             l2266 0711  
                           l2442 0101                             l2434 00D9                             l2426 00B8  
                           l2372 06AB                             l2276 073D                             l2268 071D  
                           l2452 0124                             l1636 0579                             l2612 0E72  
                           l2374 06B7                             l2278 0747                             l2622 0412  
                           l2438 00EF                             l1662 05C8                             l1654 05AB  
                           l2384 06D7                             l2376 06BF                             l2392 005E  
                           l1664 05D6                             l1656 05BB                             l2472 0F25  
                           l2378 06CB                             l2650 048C                             l2642 046D  
                           l2570 062A                             l2802 054C                             l2628 0428  
                           l2556 0604                             l2396 0065                             l1668 05E4  
                           l2670 0355                             l2576 063B                             l2664 033F  
                           l2586 064F                             l2578 063C                             l2594 05F1  
                           l2682 0394                             l2756 02CD                             l2764 04BC  
                           l2694 03BC                             l2686 03A4                             l2790 0530  
                           l2784 0524                             l2698 03CC                             l2778 0517  
                           l2796 053C                             l1998 0FCA                             _ADIE 0466  
                           _ADIF 0066                             _ADFM 04FF                             ?_isr 0072  
           ??_startADCConversion 0020                             _T0IF 005A                             _T0CS 040D  
                           u2101 0FE4                             u2102 0FE5                             u2103 0FEA  
                           u2104 0FEB                             _T0SE 040C                             u2081 0FBD  
                           u2082 0FBE                             u2083 0FC3                             u2084 0FC4  
                           u3205 048D                             u1525 05CA                             u1465 0580  
                           u3165 043A                             u3245 0361                             u2615 075C  
                           u2535 0716                             u3175 044C                             u1495 05AC  
                           u3335 03CD                             u3255 0373                             u3185 046E  
                           u3345 03D5                             u2555 0731                             u3195 047F  
                           u2645 0E2B                             u3285 03A5                             u2655 0E32  
                           u2575 0740                             u3295 03AD                             u3457 0559  
                           u2915 00B9                             u3467 0D43                             _PEIE 005E  
                           u3477 066C                             u2685 0EE2                             u3487 0D88  
                           u2855 008F                             u3497 0D9B                             u2945 00CE  
                           u2885 00A4                             i1l91 0E5B                             _TMR0 0001  
                   __CFG_WRT$OFF 0000                             _main 04B2                     ___ftpack@arg 0020  
                   ___ftpack@exp 0023                             _move 05ED                             btemp 007E  
                           ltemp 007E                             start 0012                             ttemp 007E  
                           wtemp 007E                     ___ftmul@cntr 0036                     ___ftmul@sign 0037  
                  ?_readADCMeter 006D                     ___fttol@exp1 0050                     ___fttol@lval 004C  
                          ??_isr 0073                            _ADCS2 04FE                            ?_main 0072  
                __end_of___ftadd 013E                            ?_move 002F                    __CFG_WDTE$OFF 0000  
                __end_of___ftdiv 04B2                  __end_of___ftneg 0D30                  __end_of___ftmul 03FA  
                __end_of___fttol 05ED                            _PCFG0 04F8                            _PCFG1 04F9  
                          _PCFG2 04FA                            _PCFG3 04FB                            _PORTC 0007  
                          _PORTD 0008                            _PORTE 0009                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _TRISD 0088  
                          _TRISE 0089                ??_initializeMotor 002F                    ___awtoft@sign 002D  
     __end_of_lcdWriteToDigitBCD 0700                            _cstep 0077                            _frexp 0E8B  
                          _errno 00D1                ??_debounceButtons 0072                    ___ftpack@sign 0024  
                          _round 076E                            _trunc 0F09                  __end_of_moveDeg 0327  
                 __pbitbssCOMMON 0380                   __CFG_BOREN$OFF 0000                            pclath 000A  
                          ltemp0 007E                            ltemp1 0082                            ltemp2 0086  
                          ltemp3 0080                            move@i 0033               main@resultInMeters 00B7  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F                   ??_readADCMeter 006F                  __initialization 0015  
                   __end_of_main 055F                     __end_of_move 0678         __size_of_lcdWriteControl 0014  
                         ??_main 00B3                    ___fttol@sign1 004B                           ??_move 0030  
           __end_of_lcdSetCursor 0D26                           _ADCON0 001F                           ?_frexp 0020  
               __end_of___altoft 0F09                           _ADRESH 001E                           _ADRESL 009E  
               __end_of___awtoft 0E8B                 __end_of___ftpack 076E                           ?_round 0067  
                 _conversionDone 0380                           ?_trunc 0051                           i1l2100 0F75  
                         i1l2110 0F85                           i1l2200 0E55                           i1l2114 0F89  
                         i1l2124 0F9C                           i1l2082 0F63                           i1l2086 0F65  
                         i1l2096 0F73                           _TMR0IE 005D                ?_initializeTimer0 0072  
             ??_initializeTimer0 0020                   __CFG_PWRTE$OFF 0000                 __end_of_flashLed 0DCE  
                         ___ftge 0FA1                           ___wmul 0E1E             __end_of_lcdWriteData 0D8D  
                      ??___ftadd 0060                        ??___ftdiv 0039                        ??___ftneg 0033  
                      ??___ftmul 002E                        ??___fttol 0047            ___ftmul@f3_as_product 0033  
               __end_of_setupLCD 07F9                        ??_moveDeg 00A0                           saved_w 007E  
         __size_of_initializeADC 0015                           round@f 006A                           round@x 0067  
                         trunc@i 0055                           trunc@x 0051             __size_of_readADCData 000F  
        __end_of__initialization 0031                       ___altoft@c 0028                       ___ftadd@f1 005A  
                     ___ftadd@f2 005D                       ___ftge@ff1 0020                       ___ftge@ff2 0023  
                     ___ftdiv@f1 0036                       ___ftdiv@f2 0033                       ___ftdiv@f3 003E  
                     ___ftneg@f1 0030                       ___awtoft@c 0028                       ___ftmul@f1 0028  
                     ___ftmul@f2 002B                       ___fttol@f1 0043                   __pcstackCOMMON 0072  
                   __pidataBANK1 0DCE                       _pb0Pressed 0382                       _pb1Pressed 0384  
                  __end_of_frexp 0EC7                       _pb2Pressed 0386                    __end_of_round 07CE  
                     _pb3Pressed 0388                    __end_of_trunc 0F53                ??_lcdWriteControl 0020  
           __end_of_readADCMeter 0238                          ??_frexp 0024                          ??_round 006A  
                        ??_trunc 0054                       __pbssBANK1 00D1             readADCData@ADCResult 0022  
            lcdSetCursor@address 0023                    _initializeADC 0DA1                       __pmaintext 04B2  
                        ?___ftge 0020                          ?___wmul 0020                  _initializeMotor 0DE6  
                     __pintentry 0004            __size_of_lcdSetCursor 0009                        ?___altoft 0028  
                     _lcdRefresh 0D30                        ?___awtoft 0028                       _pbCounter2 0079  
                     _pbCounter3 00D8                       _pbCounter4 00D9                        ?___ftpack 0020  
                _debounceButtons 0F53                        ?_flashLed 0072      __size_of_startADCConversion 000E  
                   _irLcdCounter 00D7            __size_of_lcdWriteData 0013                     _lcdSetCursor 0D1D  
                 ?_initializeADC 0072               _lcdWriteToDigitBCD 0678                    move@direction 002F  
                      ?_setupLCD 0072                  __size_of___ftge 005F                          ___ftadd 0035  
                        ___ftdiv 03FA                          ___ftneg 0D26                  __size_of___wmul 0023  
                        ___ftmul 0327                          ___fttol 055F                       ??___altoft 002C  
            ?_lcdWriteToDigitBCD 0026                       ??___awtoft 002B                       ??___ftpack 0025  
                     _initialise 0E02                          __ptext1 0D3D                          __ptext2 013E  
                        __ptext3 0D5A                          __ptext4 0327                          __ptext5 0E66  
                        __ptext6 0238                          __ptext7 076E                          __ptext8 0F09  
                        __ptext9 0E8B                    readADCMeter@k 00A3                    readADCMeter@m 00A6  
                   __size_of_isr 0025                          _moveDeg 0238          readADCMeter@rawInverted 00A0  
                     ??_flashLed 0072                     _lcdWriteData 0D7A             end_of_initialization 0031  
           ??_lcdWriteToDigitBCD 0028               moveDeg@stepsToMove 00AA          __end_of_initializeMotor 0E02  
                     _rtcCounter 00D5          __end_of_debounceButtons 0FA1                       ??_setupLCD 0023  
                    ?_lcdRefresh 0072        __size_of_initializeTimer0 000F            __size_of_readADCMeter 00FA  
                     _wholeSteps 00C9                      ___ftdiv@exp 0041                  ??_initializeADC 0020  
                     main@result 00B5          readADCMeter@resultInInt 00B1                      ___ftmul@exp 0032  
                    _pb0Released 0383                     _readADCMeter 013E                      _pb1Released 0385  
                 __end_of___ftge 1000                      _pb2Released 0387                  _lcdWriteControl 0D8D  
                 __end_of___wmul 0E41                      _pb3Released 0389                      ?_initialise 0072  
            start_initialization 0015                    ??_readADCData 0022                      __end_of_isr 0E66  
                     frexp@value 0020              __size_of_lcdRefresh 000D                 ?_initializeMotor 0072  
               ?_debounceButtons 0072                         ??___ftge 0026                         ??___wmul 0024  
                     init_fetch0 0D69               readADCMeter@result 00A9                 _readADCMeter$677 00AC  
                    __pdataBANK1 00B9                __size_of___altoft 0042                __size_of___awtoft 0025  
              __size_of___ftpack 006E                      __pbssCOMMON 0077                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                __size_of_flashLed 0018  
            __end_of_readADCData 0D69              __size_of_initialise 001C  lcdWriteToDigitBCD@ThousandDigit 002B  
        __end_of_lcdWriteControl 0DA1                        _halfSteps 00B9                       moveDeg@deg 006D  
                       ?___ftadd 005A                         ?___ftdiv 0033                         ?___ftneg 0030  
                      _pbCounter 0078                         ?___ftmul 0028                         ?___fttol 0043  
              __size_of_setupLCD 002B                 _initializeTimer0 0D4B                         ?_moveDeg 006D  
                      _nrOfSteps 00D3                  readADCMeter@raw 00AF       __end_of_startADCConversion 0D4B  
                 __size_of_frexp 003C                   __size_of_round 0060                   __size_of_trunc 004A  
        lcdWriteControl@databyte 0022                interrupt_function 0004                   ___wmul@product 0024  
                   ??_lcdRefresh 0072                ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002A  
                    _readADCData 0D5A             lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 0088  
             __end_of_lcdRefresh 0D3D                        frexp@eptr 0023                 ?_lcdWriteControl 0072  
               __size_of___ftadd 0109                 __size_of___ftdiv 00B8                 __size_of___ftneg 000A  
                       ___altoft 0EC7                 __size_of___ftmul 00D3                 __size_of___fttol 008E  
                   ??_initialise 002F                         ___awtoft 0E66                         ___ftpack 0700  
               __size_of_moveDeg 00EF                         __ptext10 055F                         __ptext11 0EC7  
                       __ptext20 0D4B                         __ptext12 0D26                         __ptext21 0DE6  
                       __ptext13 0035                         __ptext30 0DB6                         __ptext22 0678  
                       __ptext14 05ED                         __ptext31 0F53                         __ptext23 0D7A  
                       __ptext15 0FA1                         __ptext24 0E1E                         __ptext16 03FA  
                       __ptext25 0D1D                         __ptext17 0700                         __ptext26 0D8D  
                       __ptext18 0E02                         __ptext27 0DA1                         __ptext19 07CE  
                       __ptext28 0E41                         __ptext29 0D30                         _flashLed 0DB6  
                      move@steps 0032                       trunc@expon 0058                    __size_of_main 00AD  
                  __size_of_move 008B               __end_of_initialise 0E1E            __end_of_initializeADC 0DB6  
                       _setupLCD 07CE      lcdWriteToDigitBCD@OnesDigit 002D                      _moveDeg$674 00A1  
                    _moveDeg$675 00A4                      _moveDeg$676 00A7      lcdWriteToDigitBCD@TensDigit 0029  
                       init_ram0 0D6D                  _updateLcdIRData 038A                         intlevel1 0000  
       __end_of_initializeTimer0 0D5A                    ?_lcdSetCursor 0072         __size_of_initializeMotor 001C  
                    _motorToggle 0381         __size_of_debounceButtons 004E                    ?_lcdWriteData 0072  
         lcdWriteToDigitBCD@data 0026           lcdWriteToDigitBCD@sign 002C                   ??_lcdSetCursor 0023  
             _startADCConversion 0D3D  
