

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Apr 01 20:48:35 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0013                     	;# 
    52  0014                     	;# 
    53  0015                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  001D                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0087                     	;# 
    70  0088                     	;# 
    71  0089                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0091                     	;# 
    76  0092                     	;# 
    77  0093                     	;# 
    78  0094                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  010C                     	;# 
    86  010D                     	;# 
    87  010E                     	;# 
    88  010F                     	;# 
    89  018C                     	;# 
    90  018D                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  0087                     	;# 
   130  0088                     	;# 
   131  0089                     	;# 
   132  008C                     	;# 
   133  008D                     	;# 
   134  008E                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151                           
   152                           	psect	idataBANK1
   153  064B                     __pidataBANK1:	
   154                           
   155                           ;initializer for _allSteps
   156  064B  343C               	retlw	60
   157  064C  3400               	retlw	0
   158  064D  342E               	retlw	46
   159  064E  3400               	retlw	0
   160  064F  342B               	retlw	43
   161  0650  3400               	retlw	0
   162  0651  3427               	retlw	39
   163  0652  3400               	retlw	0
   164  0653  3435               	retlw	53
   165  0654  3400               	retlw	0
   166  0655  3417               	retlw	23
   167  0656  3400               	retlw	0
   168  0657  341B               	retlw	27
   169  0658  3400               	retlw	0
   170  0659  341E               	retlw	30
   171  065A  3400               	retlw	0
   172  0007                     _PORTC	set	7
   173  0001                     _TMR0	set	1
   174  005F                     _GIE	set	95
   175  0030                     _RB0	set	48
   176  0031                     _RB1	set	49
   177  0032                     _RB2	set	50
   178  0033                     _RB3	set	51
   179  005A                     _T0IF	set	90
   180  005D                     _TMR0IE	set	93
   181  0086                     _TRISB	set	134
   182  0087                     _TRISC	set	135
   183  0408                     _PS0	set	1032
   184  0409                     _PS1	set	1033
   185  040A                     _PS2	set	1034
   186  040B                     _PSA	set	1035
   187  040D                     _T0CS	set	1037
   188  040C                     _T0SE	set	1036
   189                           
   190                           ; #config settings
   191  0000                     
   192                           	psect	cinit
   193  0015                     start_initialization:	
   194  0015                     __initialization:	
   195                           
   196                           ; Clear objects allocated to BITCOMMON
   197  0015  01F5               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   198                           
   199                           ; Clear objects allocated to COMMON
   200  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   201  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   202  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   203                           
   204                           ; Clear objects allocated to BANK1
   205  0019  1683               	bsf	3,5	;RP0=1, select bank1
   206  001A  1303               	bcf	3,6	;RP1=0, select bank1
   207  001B  01BD               	clrf	__pbssBANK1& (0+127)
   208  001C  01BE               	clrf	(__pbssBANK1+1)& (0+127)
   209                           
   210                           ; Initialize objects allocated to BANK1
   211  001D  1383               	bcf	3,7	;select IRP bank0
   212  001E  30B0               	movlw	low (__pdataBANK1+16)
   213  001F  00FD               	movwf	btemp+-1
   214  0020  3006               	movlw	high __pidataBANK1
   215  0021  00FE               	movwf	btemp
   216  0022  304B               	movlw	low __pidataBANK1
   217  0023  00FF               	movwf	btemp+1
   218  0024  30A0               	movlw	low __pdataBANK1
   219  0025  0084               	movwf	4
   220  0026  120A  118A  263E   	fcall	init_ram0
   221  0029                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224  0029                     __end_of__initialization:	
   225  0029  0183               	clrf	3
   226  002A  120A  118A  2DBF   	ljmp	_main	;jump to C main() function
   227                           
   228                           	psect	bitbssCOMMON
   229  03A8                     __pbitbssCOMMON:	
   230  03A8                     _pb0Pressed:	
   231  03A8                     	ds	1
   232  03A9                     _pb0Released:	
   233  03A9                     	ds	1
   234  03AA                     _pb1Pressed:	
   235  03AA                     	ds	1
   236  03AB                     _pb1Released:	
   237  03AB                     	ds	1
   238                           
   239                           	psect	bssCOMMON
   240  0076                     __pbssCOMMON:	
   241  0076                     _cstep:	
   242  0076                     	ds	1
   243  0077                     _rtcCounter:	
   244  0077                     	ds	1
   245  0078                     _rtcCounter2:	
   246  0078                     	ds	1
   247                           
   248                           	psect	bssBANK1
   249  00BD                     __pbssBANK1:	
   250  00BD                     _errno:	
   251  00BD                     	ds	2
   252                           
   253                           	psect	dataBANK1
   254  00A0                     __pdataBANK1:	
   255  00A0                     _allSteps:	
   256  00A0                     	ds	16
   257                           
   258                           	psect	inittext
   259  063A                     init_fetch0:	
   260                           ;	Called with low address in FSR and high address in W
   261                           
   262  063A  087E               	movf	126,w
   263  063B  008A               	movwf	10
   264  063C  087F               	movf	127,w
   265  063D  0082               	movwf	2
   266  063E                     init_ram0:	
   267                           ;Called with:
   268                           ;	high address of idata address in btemp 
   269                           ;	low address of idata address in btemp+1 
   270                           ;	low address of data in FSR
   271                           ;	high address + 1 of data in btemp-1
   272                           
   273  063E  263A  120A  118A   	fcall	init_fetch0
   274  0641  0080               	movwf	0
   275  0642  0A84               	incf	4,f
   276  0643  0804               	movf	4,w
   277  0644  067D               	xorwf	125,w
   278  0645  1903               	btfsc	3,2
   279  0646  3400               	retlw	0
   280  0647  0AFF               	incf	127,f
   281  0648  1903               	btfsc	3,2
   282  0649  0AFE               	incf	126,f
   283  064A  2E3E               	goto	init_ram0
   284                           
   285                           	psect	cstackBANK1
   286  00B0                     __pcstackBANK1:	
   287  00B0                     ??_moveDeg:	
   288                           
   289                           ; 1 bytes @ 0x0
   290  00B0                     	ds	1
   291  00B1                     _moveDeg$513:	
   292                           
   293                           ; 3 bytes @ 0x1
   294  00B1                     	ds	3
   295  00B4                     _moveDeg$514:	
   296                           
   297                           ; 3 bytes @ 0x4
   298  00B4                     	ds	3
   299  00B7                     _moveDeg$515:	
   300                           
   301                           ; 3 bytes @ 0x7
   302  00B7                     	ds	3
   303  00BA                     moveDeg@stepsToMove:	
   304                           
   305                           ; 1 bytes @ 0xA
   306  00BA                     	ds	1
   307  00BB                     ??_main:	
   308                           
   309                           ; 1 bytes @ 0xB
   310  00BB                     	ds	2
   311                           
   312                           	psect	cstackCOMMON
   313  0070                     __pcstackCOMMON:	
   314  0070                     ?_isr:	
   315  0070                     ??_isr:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_initialise:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_main:	
   322                           ; 1 bytes @ 0x0
   323                           
   324                           
   325                           ; 1 bytes @ 0x0
   326  0070                     	ds	5
   327  0075                     ??_round:	
   328  0075                     ??_initialise:	
   329                           ; 1 bytes @ 0x5
   330                           
   331  0075                     ??___ftneg:	
   332                           ; 1 bytes @ 0x5
   333                           
   334                           
   335                           	psect	cstackBANK0
   336  0020                     __pcstackBANK0:	
   337                           ; 1 bytes @ 0x5
   338                           
   339  0020                     ?___ftge:	
   340  0020                     ?_move:	
   341                           ; 1 bit 
   342                           
   343  0020                     ?___ftpack:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0020                     ?_frexp:	
   347                           ; 3 bytes @ 0x0
   348                           
   349  0020                     move@direction:	
   350                           ; 3 bytes @ 0x0
   351                           
   352  0020                     ___ftpack@arg:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0020                     ___ftge@ff1:	
   356                           ; 3 bytes @ 0x0
   357                           
   358  0020                     frexp@value:	
   359                           ; 3 bytes @ 0x0
   360                           
   361                           
   362                           ; 3 bytes @ 0x0
   363  0020                     	ds	1
   364  0021                     ??_move:	
   365                           
   366                           ; 1 bytes @ 0x1
   367  0021                     	ds	2
   368  0023                     move@steps:	
   369  0023                     ___ftpack@exp:	
   370                           ; 1 bytes @ 0x3
   371                           
   372  0023                     frexp@eptr:	
   373                           ; 1 bytes @ 0x3
   374                           
   375  0023                     ___ftge@ff2:	
   376                           ; 1 bytes @ 0x3
   377                           
   378                           
   379                           ; 3 bytes @ 0x3
   380  0023                     	ds	1
   381  0024                     ??_frexp:	
   382  0024                     move@i:	
   383                           ; 1 bytes @ 0x4
   384                           
   385  0024                     ___ftpack@sign:	
   386                           ; 1 bytes @ 0x4
   387                           
   388                           
   389                           ; 1 bytes @ 0x4
   390  0024                     	ds	1
   391  0025                     ??___ftpack:	
   392                           
   393                           ; 1 bytes @ 0x5
   394  0025                     	ds	1
   395  0026                     ??___ftge:	
   396                           
   397                           ; 1 bytes @ 0x6
   398  0026                     	ds	2
   399  0028                     ?___altoft:	
   400  0028                     ___altoft@c:	
   401                           ; 3 bytes @ 0x8
   402                           
   403                           
   404                           ; 4 bytes @ 0x8
   405  0028                     	ds	4
   406  002C                     ??___altoft:	
   407                           
   408                           ; 1 bytes @ 0xC
   409  002C                     	ds	2
   410  002E                     ___altoft@exp:	
   411                           
   412                           ; 1 bytes @ 0xE
   413  002E                     	ds	1
   414  002F                     ___altoft@sign:	
   415                           
   416                           ; 1 bytes @ 0xF
   417  002F                     	ds	1
   418  0030                     ?___ftneg:	
   419  0030                     ___ftneg@f1:	
   420                           ; 3 bytes @ 0x10
   421                           
   422                           
   423                           ; 3 bytes @ 0x10
   424  0030                     	ds	3
   425  0033                     ?___ftdiv:	
   426  0033                     ___ftdiv@f2:	
   427                           ; 3 bytes @ 0x13
   428                           
   429                           
   430                           ; 3 bytes @ 0x13
   431  0033                     	ds	3
   432  0036                     ___ftdiv@f1:	
   433                           
   434                           ; 3 bytes @ 0x16
   435  0036                     	ds	3
   436  0039                     ??___ftdiv:	
   437                           
   438                           ; 1 bytes @ 0x19
   439  0039                     	ds	4
   440  003D                     ___ftdiv@cntr:	
   441                           
   442                           ; 1 bytes @ 0x1D
   443  003D                     	ds	1
   444  003E                     ___ftdiv@f3:	
   445                           
   446                           ; 3 bytes @ 0x1E
   447  003E                     	ds	3
   448  0041                     ___ftdiv@exp:	
   449                           
   450                           ; 1 bytes @ 0x21
   451  0041                     	ds	1
   452  0042                     ___ftdiv@sign:	
   453                           
   454                           ; 1 bytes @ 0x22
   455  0042                     	ds	1
   456  0043                     ?___fttol:	
   457  0043                     ___fttol@f1:	
   458                           ; 4 bytes @ 0x23
   459                           
   460                           
   461                           ; 3 bytes @ 0x23
   462  0043                     	ds	4
   463  0047                     ??___fttol:	
   464                           
   465                           ; 1 bytes @ 0x27
   466  0047                     	ds	4
   467  004B                     ___fttol@sign1:	
   468                           
   469                           ; 1 bytes @ 0x2B
   470  004B                     	ds	1
   471  004C                     ___fttol@lval:	
   472                           
   473                           ; 4 bytes @ 0x2C
   474  004C                     	ds	4
   475  0050                     ___fttol@exp1:	
   476                           
   477                           ; 1 bytes @ 0x30
   478  0050                     	ds	1
   479  0051                     ?_trunc:	
   480  0051                     trunc@x:	
   481                           ; 3 bytes @ 0x31
   482                           
   483                           
   484                           ; 3 bytes @ 0x31
   485  0051                     	ds	3
   486  0054                     ??_trunc:	
   487                           
   488                           ; 1 bytes @ 0x34
   489  0054                     	ds	1
   490  0055                     trunc@i:	
   491                           
   492                           ; 3 bytes @ 0x35
   493  0055                     	ds	3
   494  0058                     trunc@expon:	
   495                           
   496                           ; 2 bytes @ 0x38
   497  0058                     	ds	2
   498  005A                     ?___ftadd:	
   499  005A                     ___ftadd@f1:	
   500                           ; 3 bytes @ 0x3A
   501                           
   502                           
   503                           ; 3 bytes @ 0x3A
   504  005A                     	ds	3
   505  005D                     ___ftadd@f2:	
   506                           
   507                           ; 3 bytes @ 0x3D
   508  005D                     	ds	3
   509  0060                     ??___ftadd:	
   510                           
   511                           ; 1 bytes @ 0x40
   512  0060                     	ds	4
   513  0064                     ___ftadd@sign:	
   514                           
   515                           ; 1 bytes @ 0x44
   516  0064                     	ds	1
   517  0065                     ___ftadd@exp2:	
   518                           
   519                           ; 1 bytes @ 0x45
   520  0065                     	ds	1
   521  0066                     ___ftadd@exp1:	
   522                           
   523                           ; 1 bytes @ 0x46
   524  0066                     	ds	1
   525  0067                     ?_round:	
   526  0067                     round@x:	
   527                           ; 3 bytes @ 0x47
   528                           
   529                           
   530                           ; 3 bytes @ 0x47
   531  0067                     	ds	3
   532  006A                     round@f:	
   533                           
   534                           ; 3 bytes @ 0x4A
   535  006A                     	ds	3
   536  006D                     ?_moveDeg:	
   537  006D                     moveDeg@deg:	
   538                           ; 1 bytes @ 0x4D
   539                           
   540                           
   541                           ; 3 bytes @ 0x4D
   542  006D                     	ds	3
   543                           
   544                           	psect	maintext
   545  05BF                     __pmaintext:	
   546 ;;
   547 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   548 ;;
   549 ;; *************** function _main *****************
   550 ;; Defined at:
   551 ;;		line 78 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;		None
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : B00/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   565 ;;      Params:         0       0       0       0       0
   566 ;;      Locals:         0       0       0       0       0
   567 ;;      Temps:          0       0       2       0       0
   568 ;;      Totals:         0       0       2       0       0
   569 ;;Total ram usage:        2 bytes
   570 ;; Hardware stack levels required when called:    6
   571 ;; This function calls:
   572 ;;		_initialise
   573 ;;		_moveDeg
   574 ;; This function is called by:
   575 ;;		Startup code after reset
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           
   580                           ;psect for function _main
   581  05BF                     _main:	
   582                           
   583                           ;main.c: 80: initialise();
   584                           
   585                           ;incstack = 0
   586                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   587  05BF  120A  118A  2624  120A  118A  	fcall	_initialise
   588  05C4                     l1627:	
   589                           ;main.c: 82: while(1){
   590                           
   591                           
   592                           ;main.c: 83: if(pb0Pressed){
   593  05C4  1C75               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   594  05C5  2DD6               	goto	l1635
   595                           
   596                           ;main.c: 84: RB2 = !RB2;
   597  05C6  3004               	movlw	4
   598  05C7  1283               	bcf	3,5	;RP0=0, select bank0
   599  05C8  1303               	bcf	3,6	;RP1=0, select bank0
   600  05C9  0686               	xorwf	6,f
   601                           
   602                           ;main.c: 85: moveDeg(3.75);
   603  05CA  3000               	movlw	0
   604  05CB  00ED               	movwf	moveDeg@deg
   605  05CC  3070               	movlw	112
   606  05CD  00EE               	movwf	moveDeg@deg+1
   607  05CE  3040               	movlw	64
   608  05CF  00EF               	movwf	moveDeg@deg+2
   609  05D0  120A  118A  2136  120A  118A  	fcall	_moveDeg
   610                           
   611                           ;main.c: 86: pb0Pressed = 0;
   612  05D5  1075               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   613  05D6                     l1635:	
   614                           
   615                           ;main.c: 87: }
   616                           ;main.c: 88: if(pb1Pressed){
   617  05D6  1D75               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   618  05D7  2DE8               	goto	l1643
   619                           
   620                           ;main.c: 89: RB3 = !RB3;
   621  05D8  3008               	movlw	8
   622  05D9  1283               	bcf	3,5	;RP0=0, select bank0
   623  05DA  1303               	bcf	3,6	;RP1=0, select bank0
   624  05DB  0686               	xorwf	6,f
   625                           
   626                           ;main.c: 90: moveDeg(180);
   627  05DC  3000               	movlw	0
   628  05DD  00ED               	movwf	moveDeg@deg
   629  05DE  3034               	movlw	52
   630  05DF  00EE               	movwf	moveDeg@deg+1
   631  05E0  3043               	movlw	67
   632  05E1  00EF               	movwf	moveDeg@deg+2
   633  05E2  120A  118A  2136  120A  118A  	fcall	_moveDeg
   634                           
   635                           ;main.c: 91: pb1Pressed = 0;
   636  05E7  1175               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   637  05E8                     l1643:	
   638                           
   639                           ;main.c: 92: }
   640                           ;main.c: 93: _delay((unsigned long)((20)*(20000000/4000.0)));
   641  05E8  3082               	movlw	130
   642  05E9  1683               	bsf	3,5	;RP0=1, select bank1
   643  05EA  1303               	bcf	3,6	;RP1=0, select bank1
   644  05EB  00BC               	movwf	(??_main^(0+128)+1)
   645  05EC  30DD               	movlw	221
   646  05ED  00BB               	movwf	??_main^(0+128)
   647  05EE                     u2267:	
   648  05EE  0BBB               	decfsz	??_main^(0+128),f
   649  05EF  2DEE               	goto	u2267
   650  05F0  0BBC               	decfsz	(??_main^(0+128)+1),f
   651  05F1  2DEE               	goto	u2267
   652  05F2  2DF3               	nop2
   653  05F3  2DC4               	goto	l1627
   654  05F4                     __end_of_main:	
   655                           
   656                           	psect	text1
   657  0136                     __ptext1:	
   658 ;; *************** function _moveDeg *****************
   659 ;; Defined at:
   660 ;;		line 46 in file "motor.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  deg             3   77[BANK0 ] void 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   674 ;;      Params:         0       3       0       0       0
   675 ;;      Locals:         0       0      10       0       0
   676 ;;      Temps:          0       0       1       0       0
   677 ;;      Totals:         0       3      11       0       0
   678 ;;Total ram usage:       14 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    5
   681 ;; This function calls:
   682 ;;		___ftdiv
   683 ;;		___ftge
   684 ;;		___ftneg
   685 ;;		___fttol
   686 ;;		_move
   687 ;;		_round
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           
   694                           ;psect for function _moveDeg
   695  0136                     _moveDeg:	
   696                           
   697                           ;motor.c: 47: char stepsToMove;
   698                           ;motor.c: 48: if(deg<0){
   699                           
   700                           ;incstack = 0
   701                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   702  0136  1283               	bcf	3,5	;RP0=0, select bank0
   703  0137  1303               	bcf	3,6	;RP1=0, select bank0
   704  0138  086D               	movf	moveDeg@deg,w
   705  0139  00A0               	movwf	___ftge@ff1
   706  013A  086E               	movf	moveDeg@deg+1,w
   707  013B  00A1               	movwf	___ftge@ff1+1
   708  013C  086F               	movf	moveDeg@deg+2,w
   709  013D  00A2               	movwf	___ftge@ff1+2
   710  013E  3000               	movlw	0
   711  013F  00A3               	movwf	___ftge@ff2
   712  0140  3000               	movlw	0
   713  0141  00A4               	movwf	___ftge@ff2+1
   714  0142  3000               	movlw	0
   715  0143  00A5               	movwf	___ftge@ff2+2
   716  0144  120A  118A  2498  120A  118A  	fcall	___ftge
   717  0149  1803               	btfsc	3,0
   718  014A  29CB               	goto	l1619
   719                           
   720                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
   721  014B  1283               	bcf	3,5	;RP0=0, select bank0
   722  014C  1303               	bcf	3,6	;RP1=0, select bank0
   723  014D  086D               	movf	moveDeg@deg,w
   724  014E  00B0               	movwf	___ftneg@f1
   725  014F  086E               	movf	moveDeg@deg+1,w
   726  0150  00B1               	movwf	___ftneg@f1+1
   727  0151  086F               	movf	moveDeg@deg+2,w
   728  0152  00B2               	movwf	___ftneg@f1+2
   729  0153  120A  118A  265B  120A  118A  	fcall	___ftneg
   730  0158  1283               	bcf	3,5	;RP0=0, select bank0
   731  0159  1303               	bcf	3,6	;RP1=0, select bank0
   732  015A  0830               	movf	?___ftneg,w
   733  015B  00B6               	movwf	___ftdiv@f1
   734  015C  0831               	movf	?___ftneg+1,w
   735  015D  00B7               	movwf	___ftdiv@f1+1
   736  015E  0832               	movf	?___ftneg+2,w
   737  015F  00B8               	movwf	___ftdiv@f1+2
   738  0160  3000               	movlw	0
   739  0161  00B3               	movwf	___ftdiv@f2
   740  0162  3070               	movlw	112
   741  0163  00B4               	movwf	___ftdiv@f2+1
   742  0164  3040               	movlw	64
   743  0165  00B5               	movwf	___ftdiv@f2+2
   744  0166  120A  118A  2225  120A  118A  	fcall	___ftdiv
   745  016B  1283               	bcf	3,5	;RP0=0, select bank0
   746  016C  1303               	bcf	3,6	;RP1=0, select bank0
   747  016D  0833               	movf	?___ftdiv,w
   748  016E  1683               	bsf	3,5	;RP0=1, select bank1
   749  016F  1303               	bcf	3,6	;RP1=0, select bank1
   750  0170  00B1               	movwf	_moveDeg$513^(0+128)
   751  0171  1283               	bcf	3,5	;RP0=0, select bank0
   752  0172  1303               	bcf	3,6	;RP1=0, select bank0
   753  0173  0834               	movf	?___ftdiv+1,w
   754  0174  1683               	bsf	3,5	;RP0=1, select bank1
   755  0175  1303               	bcf	3,6	;RP1=0, select bank1
   756  0176  00B2               	movwf	(_moveDeg$513+1)^(0+128)
   757  0177  1283               	bcf	3,5	;RP0=0, select bank0
   758  0178  1303               	bcf	3,6	;RP1=0, select bank0
   759  0179  0835               	movf	?___ftdiv+2,w
   760  017A  1683               	bsf	3,5	;RP0=1, select bank1
   761  017B  1303               	bcf	3,6	;RP1=0, select bank1
   762  017C  00B3               	movwf	(_moveDeg$513+2)^(0+128)
   763                           
   764                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
   765  017D  0831               	movf	_moveDeg$513^(0+128),w
   766  017E  1283               	bcf	3,5	;RP0=0, select bank0
   767  017F  1303               	bcf	3,6	;RP1=0, select bank0
   768  0180  00E7               	movwf	round@x
   769  0181  1683               	bsf	3,5	;RP0=1, select bank1
   770  0182  1303               	bcf	3,6	;RP1=0, select bank1
   771  0183  0832               	movf	(_moveDeg$513+1)^(0+128),w
   772  0184  1283               	bcf	3,5	;RP0=0, select bank0
   773  0185  1303               	bcf	3,6	;RP1=0, select bank0
   774  0186  00E8               	movwf	round@x+1
   775  0187  1683               	bsf	3,5	;RP0=1, select bank1
   776  0188  1303               	bcf	3,6	;RP1=0, select bank1
   777  0189  0833               	movf	(_moveDeg$513+2)^(0+128),w
   778  018A  1283               	bcf	3,5	;RP0=0, select bank0
   779  018B  1303               	bcf	3,6	;RP1=0, select bank0
   780  018C  00E9               	movwf	round@x+2
   781  018D  120A  118A  23D9  120A  118A  	fcall	_round
   782  0192  1283               	bcf	3,5	;RP0=0, select bank0
   783  0193  1303               	bcf	3,6	;RP1=0, select bank0
   784  0194  0867               	movf	?_round,w
   785  0195  1683               	bsf	3,5	;RP0=1, select bank1
   786  0196  1303               	bcf	3,6	;RP1=0, select bank1
   787  0197  00B4               	movwf	_moveDeg$514^(0+128)
   788  0198  1283               	bcf	3,5	;RP0=0, select bank0
   789  0199  1303               	bcf	3,6	;RP1=0, select bank0
   790  019A  0868               	movf	?_round+1,w
   791  019B  1683               	bsf	3,5	;RP0=1, select bank1
   792  019C  1303               	bcf	3,6	;RP1=0, select bank1
   793  019D  00B5               	movwf	(_moveDeg$514+1)^(0+128)
   794  019E  1283               	bcf	3,5	;RP0=0, select bank0
   795  019F  1303               	bcf	3,6	;RP1=0, select bank0
   796  01A0  0869               	movf	?_round+2,w
   797  01A1  1683               	bsf	3,5	;RP0=1, select bank1
   798  01A2  1303               	bcf	3,6	;RP1=0, select bank1
   799  01A3  00B6               	movwf	(_moveDeg$514+2)^(0+128)
   800                           
   801                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
   802  01A4  0834               	movf	_moveDeg$514^(0+128),w
   803  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   804  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   805  01A7  00C3               	movwf	___fttol@f1
   806  01A8  1683               	bsf	3,5	;RP0=1, select bank1
   807  01A9  1303               	bcf	3,6	;RP1=0, select bank1
   808  01AA  0835               	movf	(_moveDeg$514+1)^(0+128),w
   809  01AB  1283               	bcf	3,5	;RP0=0, select bank0
   810  01AC  1303               	bcf	3,6	;RP1=0, select bank0
   811  01AD  00C4               	movwf	___fttol@f1+1
   812  01AE  1683               	bsf	3,5	;RP0=1, select bank1
   813  01AF  1303               	bcf	3,6	;RP1=0, select bank1
   814  01B0  0836               	movf	(_moveDeg$514+2)^(0+128),w
   815  01B1  1283               	bcf	3,5	;RP0=0, select bank0
   816  01B2  1303               	bcf	3,6	;RP1=0, select bank0
   817  01B3  00C5               	movwf	___fttol@f1+2
   818  01B4  120A  118A  22DD  120A  118A  	fcall	___fttol
   819  01B9  1283               	bcf	3,5	;RP0=0, select bank0
   820  01BA  1303               	bcf	3,6	;RP1=0, select bank0
   821  01BB  0843               	movf	?___fttol,w
   822  01BC  1683               	bsf	3,5	;RP0=1, select bank1
   823  01BD  1303               	bcf	3,6	;RP1=0, select bank1
   824  01BE  00B0               	movwf	??_moveDeg^(0+128)
   825  01BF  0830               	movf	??_moveDeg^(0+128),w
   826  01C0  00BA               	movwf	moveDeg@stepsToMove^(0+128)
   827                           
   828                           ;motor.c: 50: move(stepsToMove,0);
   829  01C1  1283               	bcf	3,5	;RP0=0, select bank0
   830  01C2  1303               	bcf	3,6	;RP1=0, select bank0
   831  01C3  01A0               	clrf	move@direction
   832  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   833  01C5  1303               	bcf	3,6	;RP1=0, select bank1
   834  01C6  083A               	movf	moveDeg@stepsToMove^(0+128),w
   835  01C7  120A  118A  2439   	fcall	_move
   836                           
   837                           ;motor.c: 51: }
   838  01CA  0008               	return
   839  01CB                     l1619:	
   840                           
   841                           ;motor.c: 52: else{
   842                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
   843  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   844  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   845  01CD  086D               	movf	moveDeg@deg,w
   846  01CE  00B6               	movwf	___ftdiv@f1
   847  01CF  086E               	movf	moveDeg@deg+1,w
   848  01D0  00B7               	movwf	___ftdiv@f1+1
   849  01D1  086F               	movf	moveDeg@deg+2,w
   850  01D2  00B8               	movwf	___ftdiv@f1+2
   851  01D3  3000               	movlw	0
   852  01D4  00B3               	movwf	___ftdiv@f2
   853  01D5  3070               	movlw	112
   854  01D6  00B4               	movwf	___ftdiv@f2+1
   855  01D7  3040               	movlw	64
   856  01D8  00B5               	movwf	___ftdiv@f2+2
   857  01D9  120A  118A  2225  120A  118A  	fcall	___ftdiv
   858  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   859  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   860  01E0  0833               	movf	?___ftdiv,w
   861  01E1  00E7               	movwf	round@x
   862  01E2  0834               	movf	?___ftdiv+1,w
   863  01E3  00E8               	movwf	round@x+1
   864  01E4  0835               	movf	?___ftdiv+2,w
   865  01E5  00E9               	movwf	round@x+2
   866  01E6  120A  118A  23D9  120A  118A  	fcall	_round
   867  01EB  1283               	bcf	3,5	;RP0=0, select bank0
   868  01EC  1303               	bcf	3,6	;RP1=0, select bank0
   869  01ED  0867               	movf	?_round,w
   870  01EE  1683               	bsf	3,5	;RP0=1, select bank1
   871  01EF  1303               	bcf	3,6	;RP1=0, select bank1
   872  01F0  00B7               	movwf	_moveDeg$515^(0+128)
   873  01F1  1283               	bcf	3,5	;RP0=0, select bank0
   874  01F2  1303               	bcf	3,6	;RP1=0, select bank0
   875  01F3  0868               	movf	?_round+1,w
   876  01F4  1683               	bsf	3,5	;RP0=1, select bank1
   877  01F5  1303               	bcf	3,6	;RP1=0, select bank1
   878  01F6  00B8               	movwf	(_moveDeg$515+1)^(0+128)
   879  01F7  1283               	bcf	3,5	;RP0=0, select bank0
   880  01F8  1303               	bcf	3,6	;RP1=0, select bank0
   881  01F9  0869               	movf	?_round+2,w
   882  01FA  1683               	bsf	3,5	;RP0=1, select bank1
   883  01FB  1303               	bcf	3,6	;RP1=0, select bank1
   884  01FC  00B9               	movwf	(_moveDeg$515+2)^(0+128)
   885                           
   886                           ;motor.c: 52: else{
   887                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
   888  01FD  0837               	movf	_moveDeg$515^(0+128),w
   889  01FE  1283               	bcf	3,5	;RP0=0, select bank0
   890  01FF  1303               	bcf	3,6	;RP1=0, select bank0
   891  0200  00C3               	movwf	___fttol@f1
   892  0201  1683               	bsf	3,5	;RP0=1, select bank1
   893  0202  1303               	bcf	3,6	;RP1=0, select bank1
   894  0203  0838               	movf	(_moveDeg$515+1)^(0+128),w
   895  0204  1283               	bcf	3,5	;RP0=0, select bank0
   896  0205  1303               	bcf	3,6	;RP1=0, select bank0
   897  0206  00C4               	movwf	___fttol@f1+1
   898  0207  1683               	bsf	3,5	;RP0=1, select bank1
   899  0208  1303               	bcf	3,6	;RP1=0, select bank1
   900  0209  0839               	movf	(_moveDeg$515+2)^(0+128),w
   901  020A  1283               	bcf	3,5	;RP0=0, select bank0
   902  020B  1303               	bcf	3,6	;RP1=0, select bank0
   903  020C  00C5               	movwf	___fttol@f1+2
   904  020D  120A  118A  22DD  120A  118A  	fcall	___fttol
   905  0212  1283               	bcf	3,5	;RP0=0, select bank0
   906  0213  1303               	bcf	3,6	;RP1=0, select bank0
   907  0214  0843               	movf	?___fttol,w
   908  0215  1683               	bsf	3,5	;RP0=1, select bank1
   909  0216  1303               	bcf	3,6	;RP1=0, select bank1
   910  0217  00B0               	movwf	??_moveDeg^(0+128)
   911  0218  0830               	movf	??_moveDeg^(0+128),w
   912  0219  00BA               	movwf	moveDeg@stepsToMove^(0+128)
   913                           
   914                           ;motor.c: 54: move(stepsToMove,1);
   915  021A  1283               	bcf	3,5	;RP0=0, select bank0
   916  021B  1303               	bcf	3,6	;RP1=0, select bank0
   917  021C  01A0               	clrf	move@direction
   918  021D  0AA0               	incf	move@direction,f
   919  021E  1683               	bsf	3,5	;RP0=1, select bank1
   920  021F  1303               	bcf	3,6	;RP1=0, select bank1
   921  0220  083A               	movf	moveDeg@stepsToMove^(0+128),w
   922  0221  120A  118A  2439   	fcall	_move
   923  0224  0008               	return
   924  0225                     __end_of_moveDeg:	
   925                           
   926                           	psect	text2
   927  03D9                     __ptext2:	
   928 ;; *************** function _round *****************
   929 ;; Defined at:
   930 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  x               3   71[BANK0 ] void 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  f               3   74[BANK0 ] void 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  3   71[BANK0 ] void 
   937 ;; Registers used:
   938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   944 ;;      Params:         0       3       0       0       0
   945 ;;      Locals:         0       3       0       0       0
   946 ;;      Temps:          0       0       0       0       0
   947 ;;      Totals:         0       6       0       0       0
   948 ;;Total ram usage:        6 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:    4
   951 ;; This function calls:
   952 ;;		___ftadd
   953 ;;		___ftneg
   954 ;;		_trunc
   955 ;; This function is called by:
   956 ;;		_moveDeg
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           
   961                           ;psect for function _round
   962  03D9                     _round:	
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   966  03D9  1283               	bcf	3,5	;RP0=0, select bank0
   967  03DA  1303               	bcf	3,6	;RP1=0, select bank0
   968  03DB  0867               	movf	round@x,w
   969  03DC  00DA               	movwf	___ftadd@f1
   970  03DD  0868               	movf	round@x+1,w
   971  03DE  00DB               	movwf	___ftadd@f1+1
   972  03DF  0869               	movf	round@x+2,w
   973  03E0  00DC               	movwf	___ftadd@f1+2
   974  03E1  0867               	movf	round@x,w
   975  03E2  00D1               	movwf	trunc@x
   976  03E3  0868               	movf	round@x+1,w
   977  03E4  00D2               	movwf	trunc@x+1
   978  03E5  0869               	movf	round@x+2,w
   979  03E6  00D3               	movwf	trunc@x+2
   980  03E7  120A  118A  24F7  120A  118A  	fcall	_trunc
   981  03EC  1283               	bcf	3,5	;RP0=0, select bank0
   982  03ED  1303               	bcf	3,6	;RP1=0, select bank0
   983  03EE  0851               	movf	?_trunc,w
   984  03EF  00B0               	movwf	___ftneg@f1
   985  03F0  0852               	movf	?_trunc+1,w
   986  03F1  00B1               	movwf	___ftneg@f1+1
   987  03F2  0853               	movf	?_trunc+2,w
   988  03F3  00B2               	movwf	___ftneg@f1+2
   989  03F4  120A  118A  265B  120A  118A  	fcall	___ftneg
   990  03F9  1283               	bcf	3,5	;RP0=0, select bank0
   991  03FA  1303               	bcf	3,6	;RP1=0, select bank0
   992  03FB  0830               	movf	?___ftneg,w
   993  03FC  00DD               	movwf	___ftadd@f2
   994  03FD  0831               	movf	?___ftneg+1,w
   995  03FE  00DE               	movwf	___ftadd@f2+1
   996  03FF  0832               	movf	?___ftneg+2,w
   997  0400  00DF               	movwf	___ftadd@f2+2
   998  0401  120A  118A  202D  120A  118A  	fcall	___ftadd
   999  0406  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0407  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0408  085A               	movf	?___ftadd,w
  1002  0409  00EA               	movwf	round@f
  1003  040A  085B               	movf	?___ftadd+1,w
  1004  040B  00EB               	movwf	round@f+1
  1005  040C  085C               	movf	?___ftadd+2,w
  1006  040D  00EC               	movwf	round@f+2
  1007  040E  086A               	movf	round@f,w
  1008  040F  00DA               	movwf	___ftadd@f1
  1009  0410  086B               	movf	round@f+1,w
  1010  0411  00DB               	movwf	___ftadd@f1+1
  1011  0412  086C               	movf	round@f+2,w
  1012  0413  00DC               	movwf	___ftadd@f1+2
  1013  0414  0867               	movf	round@x,w
  1014  0415  00DD               	movwf	___ftadd@f2
  1015  0416  0868               	movf	round@x+1,w
  1016  0417  00DE               	movwf	___ftadd@f2+1
  1017  0418  0869               	movf	round@x+2,w
  1018  0419  00DF               	movwf	___ftadd@f2+2
  1019  041A  120A  118A  202D  120A  118A  	fcall	___ftadd
  1020  041F  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0420  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0421  085A               	movf	?___ftadd,w
  1023  0422  00E7               	movwf	round@x
  1024  0423  085B               	movf	?___ftadd+1,w
  1025  0424  00E8               	movwf	round@x+1
  1026  0425  085C               	movf	?___ftadd+2,w
  1027  0426  00E9               	movwf	round@x+2
  1028  0427  0867               	movf	round@x,w
  1029  0428  00D1               	movwf	trunc@x
  1030  0429  0868               	movf	round@x+1,w
  1031  042A  00D2               	movwf	trunc@x+1
  1032  042B  0869               	movf	round@x+2,w
  1033  042C  00D3               	movwf	trunc@x+2
  1034  042D  120A  118A  24F7   	fcall	_trunc
  1035  0430  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0431  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0432  0851               	movf	?_trunc,w
  1038  0433  00E7               	movwf	?_round
  1039  0434  0852               	movf	?_trunc+1,w
  1040  0435  00E8               	movwf	?_round+1
  1041  0436  0853               	movf	?_trunc+2,w
  1042  0437  00E9               	movwf	?_round+2
  1043  0438  0008               	return
  1044  0439                     __end_of_round:	
  1045                           
  1046                           	psect	text3
  1047  04F7                     __ptext3:	
  1048 ;; *************** function _trunc *****************
  1049 ;; Defined at:
  1050 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  x               3   49[BANK0 ] void 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  i               3   53[BANK0 ] void 
  1055 ;;  expon           2   56[BANK0 ] int 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  3   49[BANK0 ] int 
  1058 ;; Registers used:
  1059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         0       3       0       0       0
  1066 ;;      Locals:         0       5       0       0       0
  1067 ;;      Temps:          0       1       0       0       0
  1068 ;;      Totals:         0       9       0       0       0
  1069 ;;Total ram usage:        9 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    3
  1072 ;; This function calls:
  1073 ;;		___altoft
  1074 ;;		___fttol
  1075 ;;		_frexp
  1076 ;; This function is called by:
  1077 ;;		_round
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _trunc
  1083  04F7                     _trunc:	
  1084                           
  1085                           ;incstack = 0
  1086                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1087  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1088  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1089  04F9  0851               	movf	trunc@x,w
  1090  04FA  00A0               	movwf	frexp@value
  1091  04FB  0852               	movf	trunc@x+1,w
  1092  04FC  00A1               	movwf	frexp@value+1
  1093  04FD  0853               	movf	trunc@x+2,w
  1094  04FE  00A2               	movwf	frexp@value+2
  1095  04FF  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1096  0500  00D4               	movwf	??_trunc
  1097  0501  0854               	movf	??_trunc,w
  1098  0502  00A3               	movwf	frexp@eptr
  1099  0503  120A  118A  2583  120A  118A  	fcall	_frexp
  1100  0508  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0509  1303               	bcf	3,6	;RP1=0, select bank0
  1102  050A  1FD9               	btfss	trunc@expon+1,7
  1103  050B  2D13               	goto	l1511
  1104  050C  3000               	movlw	0
  1105  050D  00D1               	movwf	?_trunc
  1106  050E  3000               	movlw	0
  1107  050F  00D2               	movwf	?_trunc+1
  1108  0510  3000               	movlw	0
  1109  0511  00D3               	movwf	?_trunc+2
  1110  0512  0008               	return
  1111  0513                     l1511:	
  1112  0513  3000               	movlw	0
  1113  0514  0259               	subwf	trunc@expon+1,w
  1114  0515  3015               	movlw	21
  1115  0516  1903               	skipnz
  1116  0517  0258               	subwf	trunc@expon,w
  1117  0518  1803               	btfsc	3,0
  1118  0519  0008               	return
  1119  051A  0851               	movf	trunc@x,w
  1120  051B  00C3               	movwf	___fttol@f1
  1121  051C  0852               	movf	trunc@x+1,w
  1122  051D  00C4               	movwf	___fttol@f1+1
  1123  051E  0853               	movf	trunc@x+2,w
  1124  051F  00C5               	movwf	___fttol@f1+2
  1125  0520  120A  118A  22DD  120A  118A  	fcall	___fttol
  1126  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0527  0846               	movf	?___fttol+3,w
  1129  0528  00AB               	movwf	___altoft@c+3
  1130  0529  0845               	movf	?___fttol+2,w
  1131  052A  00AA               	movwf	___altoft@c+2
  1132  052B  0844               	movf	?___fttol+1,w
  1133  052C  00A9               	movwf	___altoft@c+1
  1134  052D  0843               	movf	?___fttol,w
  1135  052E  00A8               	movwf	___altoft@c
  1136  052F  120A  118A  2541   	fcall	___altoft
  1137  0532  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0533  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0534  0828               	movf	?___altoft,w
  1140  0535  00D5               	movwf	trunc@i
  1141  0536  0829               	movf	?___altoft+1,w
  1142  0537  00D6               	movwf	trunc@i+1
  1143  0538  082A               	movf	?___altoft+2,w
  1144  0539  00D7               	movwf	trunc@i+2
  1145  053A  0855               	movf	trunc@i,w
  1146  053B  00D1               	movwf	?_trunc
  1147  053C  0856               	movf	trunc@i+1,w
  1148  053D  00D2               	movwf	?_trunc+1
  1149  053E  0857               	movf	trunc@i+2,w
  1150  053F  00D3               	movwf	?_trunc+2
  1151  0540  0008               	return
  1152  0541                     __end_of_trunc:	
  1153                           
  1154                           	psect	text4
  1155  0583                     __ptext4:	
  1156 ;; *************** function _frexp *****************
  1157 ;; Defined at:
  1158 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  value           3    0[BANK0 ] int 
  1161 ;;  eptr            1    3[BANK0 ] PTR int 
  1162 ;;		 -> trunc@expon(2), 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  3    0[BANK0 ] PTR int 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         0       4       0       0       0
  1175 ;;      Locals:         0       0       0       0       0
  1176 ;;      Temps:          0       2       0       0       0
  1177 ;;      Totals:         0       6       0       0       0
  1178 ;;Total ram usage:        6 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_trunc
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _frexp
  1190  0583                     _frexp:	
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1194  0583  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0584  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0585  0822               	movf	frexp@value+2,w
  1197  0586  0421               	iorwf	frexp@value+1,w
  1198  0587  0420               	iorwf	frexp@value,w
  1199  0588  1D03               	skipz
  1200  0589  2D91               	goto	l1423
  1201  058A  0823               	movf	frexp@eptr,w
  1202  058B  0084               	movwf	4
  1203  058C  1383               	bcf	3,7	;select IRP bank0
  1204  058D  0180               	clrf	0
  1205  058E  0A84               	incf	4,f
  1206  058F  0180               	clrf	0
  1207                           
  1208                           ;	Return value of _frexp is never used
  1209  0590  0008               	return
  1210  0591                     l1423:	
  1211  0591  0822               	movf	frexp@value+2,w
  1212  0592  397F               	andlw	127
  1213  0593  00A4               	movwf	??_frexp
  1214  0594  01A5               	clrf	??_frexp+1
  1215  0595  1003               	clrc
  1216  0596  0DA4               	rlf	??_frexp,f
  1217  0597  0DA5               	rlf	??_frexp+1,f
  1218  0598  0823               	movf	frexp@eptr,w
  1219  0599  0084               	movwf	4
  1220  059A  0824               	movf	??_frexp,w
  1221  059B  1383               	bcf	3,7	;select IRP bank0
  1222  059C  0080               	movwf	0
  1223  059D  0A84               	incf	4,f
  1224  059E  0825               	movf	??_frexp+1,w
  1225  059F  0080               	movwf	0
  1226  05A0  0D21               	rlf	frexp@value+1,w
  1227  05A1  0D21               	rlf	frexp@value+1,w
  1228  05A2  3901               	andlw	1
  1229  05A3  00A4               	movwf	??_frexp
  1230  05A4  01A5               	clrf	??_frexp+1
  1231  05A5  0823               	movf	frexp@eptr,w
  1232  05A6  0084               	movwf	4
  1233  05A7  0824               	movf	??_frexp,w
  1234  05A8  0480               	iorwf	0,f
  1235  05A9  0A84               	incf	4,f
  1236  05AA  0825               	movf	??_frexp+1,w
  1237  05AB  0480               	iorwf	0,f
  1238  05AC  0823               	movf	frexp@eptr,w
  1239  05AD  0084               	movwf	4
  1240  05AE  3082               	movlw	130
  1241  05AF  0780               	addwf	0,f
  1242  05B0  0F84               	incfsz	4,f
  1243  05B1  0800               	movf	0,w
  1244  05B2  1803               	skipnc
  1245  05B3  0A00               	incf	0,w
  1246  05B4  00FF               	movwf	127
  1247  05B5  30FF               	movlw	255
  1248  05B6  077F               	addwf	127,w
  1249  05B7  0080               	movwf	0
  1250  05B8  0384               	decf	4,f
  1251  05B9  0822               	movf	frexp@value+2,w
  1252  05BA  3980               	andlw	-128
  1253  05BB  383F               	iorlw	63
  1254  05BC  00A2               	movwf	frexp@value+2
  1255  05BD  13A1               	bcf	frexp@value+1,7
  1256  05BE  0008               	return
  1257  05BF                     __end_of_frexp:	
  1258                           ;	Return value of _frexp is never used
  1259                           
  1260                           
  1261                           	psect	text5
  1262  02DD                     __ptext5:	
  1263 ;; *************** function ___fttol *****************
  1264 ;; Defined at:
  1265 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  f1              3   35[BANK0 ] float 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  lval            4   44[BANK0 ] unsigned long 
  1270 ;;  exp1            1   48[BANK0 ] unsigned char 
  1271 ;;  sign1           1   43[BANK0 ] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  4   35[BANK0 ] long 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1281 ;;      Params:         0       4       0       0       0
  1282 ;;      Locals:         0       6       0       0       0
  1283 ;;      Temps:          0       4       0       0       0
  1284 ;;      Totals:         0      14       0       0       0
  1285 ;;Total ram usage:       14 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    1
  1288 ;; This function calls:
  1289 ;;		Nothing
  1290 ;; This function is called by:
  1291 ;;		_moveDeg
  1292 ;;		_trunc
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           
  1297                           ;psect for function ___fttol
  1298  02DD                     ___fttol:	
  1299                           
  1300                           ;incstack = 0
  1301                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1302  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1303  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1304  02DF  0843               	movf	___fttol@f1,w
  1305  02E0  00C7               	movwf	??___fttol
  1306  02E1  0844               	movf	___fttol@f1+1,w
  1307  02E2  00C8               	movwf	??___fttol+1
  1308  02E3  0845               	movf	___fttol@f1+2,w
  1309  02E4  00C9               	movwf	??___fttol+2
  1310  02E5  1003               	clrc
  1311  02E6  0D48               	rlf	??___fttol+1,w
  1312  02E7  0D49               	rlf	??___fttol+2,w
  1313  02E8  00CA               	movwf	??___fttol+3
  1314  02E9  084A               	movf	??___fttol+3,w
  1315  02EA  00D0               	movwf	___fttol@exp1
  1316  02EB  0850               	movf	___fttol@exp1,w
  1317  02EC  1D03               	btfss	3,2
  1318  02ED  2AF7               	goto	l1077
  1319  02EE  3000               	movlw	0
  1320  02EF  00C6               	movwf	?___fttol+3
  1321  02F0  3000               	movlw	0
  1322  02F1  00C5               	movwf	?___fttol+2
  1323  02F2  3000               	movlw	0
  1324  02F3  00C4               	movwf	?___fttol+1
  1325  02F4  3000               	movlw	0
  1326  02F5  00C3               	movwf	?___fttol
  1327  02F6  0008               	return
  1328  02F7                     l1077:	
  1329  02F7  0843               	movf	___fttol@f1,w
  1330  02F8  00C7               	movwf	??___fttol
  1331  02F9  0844               	movf	___fttol@f1+1,w
  1332  02FA  00C8               	movwf	??___fttol+1
  1333  02FB  0845               	movf	___fttol@f1+2,w
  1334  02FC  00C9               	movwf	??___fttol+2
  1335  02FD  3017               	movlw	23
  1336  02FE                     u1025:	
  1337  02FE  1003               	clrc
  1338  02FF  0CC9               	rrf	??___fttol+2,f
  1339  0300  0CC8               	rrf	??___fttol+1,f
  1340  0301  0CC7               	rrf	??___fttol,f
  1341  0302  3EFF               	addlw	-1
  1342  0303  1D03               	skipz
  1343  0304  2AFE               	goto	u1025
  1344  0305  0847               	movf	??___fttol,w
  1345  0306  00CA               	movwf	??___fttol+3
  1346  0307  084A               	movf	??___fttol+3,w
  1347  0308  00CB               	movwf	___fttol@sign1
  1348  0309  17C4               	bsf	___fttol@f1+1,7
  1349  030A  30FF               	movlw	255
  1350  030B  05C3               	andwf	___fttol@f1,f
  1351  030C  30FF               	movlw	255
  1352  030D  05C4               	andwf	___fttol@f1+1,f
  1353  030E  3000               	movlw	0
  1354  030F  05C5               	andwf	___fttol@f1+2,f
  1355  0310  0843               	movf	___fttol@f1,w
  1356  0311  00CC               	movwf	___fttol@lval
  1357  0312  0844               	movf	___fttol@f1+1,w
  1358  0313  00CD               	movwf	___fttol@lval+1
  1359  0314  0845               	movf	___fttol@f1+2,w
  1360  0315  00CE               	movwf	___fttol@lval+2
  1361  0316  01CF               	clrf	___fttol@lval+3
  1362  0317  308E               	movlw	142
  1363  0318  02D0               	subwf	___fttol@exp1,f
  1364  0319  1FD0               	btfss	___fttol@exp1,7
  1365  031A  2B39               	goto	l1097
  1366  031B  0850               	movf	___fttol@exp1,w
  1367  031C  3A80               	xorlw	128
  1368  031D  3E8F               	addlw	143
  1369  031E  1803               	skipnc
  1370  031F  2B29               	goto	l1095
  1371  0320  3000               	movlw	0
  1372  0321  00C6               	movwf	?___fttol+3
  1373  0322  3000               	movlw	0
  1374  0323  00C5               	movwf	?___fttol+2
  1375  0324  3000               	movlw	0
  1376  0325  00C4               	movwf	?___fttol+1
  1377  0326  3000               	movlw	0
  1378  0327  00C3               	movwf	?___fttol
  1379  0328  0008               	return
  1380  0329                     l1095:	
  1381  0329  3001               	movlw	1
  1382  032A                     u1055:	
  1383  032A  1003               	clrc
  1384  032B  0CCF               	rrf	___fttol@lval+3,f
  1385  032C  0CCE               	rrf	___fttol@lval+2,f
  1386  032D  0CCD               	rrf	___fttol@lval+1,f
  1387  032E  0CCC               	rrf	___fttol@lval,f
  1388  032F  3EFF               	addlw	-1
  1389  0330  1D03               	skipz
  1390  0331  2B2A               	goto	u1055
  1391  0332  3001               	movlw	1
  1392  0333  00C7               	movwf	??___fttol
  1393  0334  0847               	movf	??___fttol,w
  1394  0335  07D0               	addwf	___fttol@exp1,f
  1395  0336  1903               	btfsc	3,2
  1396  0337  2B54               	goto	l1105
  1397  0338  2B29               	goto	l1095
  1398  0339                     l1097:	
  1399  0339  3018               	movlw	24
  1400  033A  0250               	subwf	___fttol@exp1,w
  1401  033B  1C03               	skipc
  1402  033C  2B51               	goto	l439
  1403  033D  3000               	movlw	0
  1404  033E  00C6               	movwf	?___fttol+3
  1405  033F  3000               	movlw	0
  1406  0340  00C5               	movwf	?___fttol+2
  1407  0341  3000               	movlw	0
  1408  0342  00C4               	movwf	?___fttol+1
  1409  0343  3000               	movlw	0
  1410  0344  00C3               	movwf	?___fttol
  1411  0345  0008               	return
  1412  0346                     l1103:	
  1413  0346  3001               	movlw	1
  1414  0347  00C7               	movwf	??___fttol
  1415  0348                     u1085:	
  1416  0348  1003               	clrc
  1417  0349  0DCC               	rlf	___fttol@lval,f
  1418  034A  0DCD               	rlf	___fttol@lval+1,f
  1419  034B  0DCE               	rlf	___fttol@lval+2,f
  1420  034C  0DCF               	rlf	___fttol@lval+3,f
  1421  034D  0BC7               	decfsz	??___fttol,f
  1422  034E  2B48               	goto	u1085
  1423  034F  3001               	movlw	1
  1424  0350  02D0               	subwf	___fttol@exp1,f
  1425  0351                     l439:	
  1426  0351  0850               	movf	___fttol@exp1,w
  1427  0352  1D03               	btfss	3,2
  1428  0353  2B46               	goto	l1103
  1429  0354                     l1105:	
  1430  0354  084B               	movf	___fttol@sign1,w
  1431  0355  1903               	btfsc	3,2
  1432  0356  2B62               	goto	l1109
  1433  0357  09CC               	comf	___fttol@lval,f
  1434  0358  09CD               	comf	___fttol@lval+1,f
  1435  0359  09CE               	comf	___fttol@lval+2,f
  1436  035A  09CF               	comf	___fttol@lval+3,f
  1437  035B  0ACC               	incf	___fttol@lval,f
  1438  035C  1903               	skipnz
  1439  035D  0ACD               	incf	___fttol@lval+1,f
  1440  035E  1903               	skipnz
  1441  035F  0ACE               	incf	___fttol@lval+2,f
  1442  0360  1903               	skipnz
  1443  0361  0ACF               	incf	___fttol@lval+3,f
  1444  0362                     l1109:	
  1445  0362  084F               	movf	___fttol@lval+3,w
  1446  0363  00C6               	movwf	?___fttol+3
  1447  0364  084E               	movf	___fttol@lval+2,w
  1448  0365  00C5               	movwf	?___fttol+2
  1449  0366  084D               	movf	___fttol@lval+1,w
  1450  0367  00C4               	movwf	?___fttol+1
  1451  0368  084C               	movf	___fttol@lval,w
  1452  0369  00C3               	movwf	?___fttol
  1453  036A  0008               	return
  1454  036B                     __end_of___fttol:	
  1455                           
  1456                           	psect	text6
  1457  0541                     __ptext6:	
  1458 ;; *************** function ___altoft *****************
  1459 ;; Defined at:
  1460 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  c               4    8[BANK0 ] long 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  sign            1   15[BANK0 ] unsigned char 
  1465 ;;  exp             1   14[BANK0 ] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  3    8[BANK0 ] float 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, pclath, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1475 ;;      Params:         0       4       0       0       0
  1476 ;;      Locals:         0       2       0       0       0
  1477 ;;      Temps:          0       2       0       0       0
  1478 ;;      Totals:         0       8       0       0       0
  1479 ;;Total ram usage:        8 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    2
  1482 ;; This function calls:
  1483 ;;		___ftpack
  1484 ;; This function is called by:
  1485 ;;		_trunc
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function ___altoft
  1491  0541                     ___altoft:	
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  1495  0541  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0542  1303               	bcf	3,6	;RP1=0, select bank0
  1497  0543  01AF               	clrf	___altoft@sign
  1498  0544  308E               	movlw	142
  1499  0545  00AC               	movwf	??___altoft
  1500  0546  082C               	movf	??___altoft,w
  1501  0547  00AE               	movwf	___altoft@exp
  1502  0548  1FAB               	btfss	___altoft@c+3,7
  1503  0549  2D57               	goto	l1411
  1504  054A  09A8               	comf	___altoft@c,f
  1505  054B  09A9               	comf	___altoft@c+1,f
  1506  054C  09AA               	comf	___altoft@c+2,f
  1507  054D  09AB               	comf	___altoft@c+3,f
  1508  054E  0AA8               	incf	___altoft@c,f
  1509  054F  1903               	skipnz
  1510  0550  0AA9               	incf	___altoft@c+1,f
  1511  0551  1903               	skipnz
  1512  0552  0AAA               	incf	___altoft@c+2,f
  1513  0553  1903               	skipnz
  1514  0554  0AAB               	incf	___altoft@c+3,f
  1515  0555  01AF               	clrf	___altoft@sign
  1516  0556  0AAF               	incf	___altoft@sign,f
  1517  0557                     l1411:	
  1518  0557  30FF               	movlw	255
  1519  0558  052B               	andwf	___altoft@c+3,w
  1520  0559  1903               	btfsc	3,2
  1521  055A  2D69               	goto	l1413
  1522  055B  3001               	movlw	1
  1523  055C                     u1775:	
  1524  055C  1003               	clrc
  1525  055D  0CAB               	rrf	___altoft@c+3,f
  1526  055E  0CAA               	rrf	___altoft@c+2,f
  1527  055F  0CA9               	rrf	___altoft@c+1,f
  1528  0560  0CA8               	rrf	___altoft@c,f
  1529  0561  3EFF               	addlw	-1
  1530  0562  1D03               	skipz
  1531  0563  2D5C               	goto	u1775
  1532  0564  3001               	movlw	1
  1533  0565  00AC               	movwf	??___altoft
  1534  0566  082C               	movf	??___altoft,w
  1535  0567  07AE               	addwf	___altoft@exp,f
  1536  0568  2D57               	goto	l1411
  1537  0569                     l1413:	
  1538  0569  0828               	movf	___altoft@c,w
  1539  056A  00A0               	movwf	___ftpack@arg
  1540  056B  0829               	movf	___altoft@c+1,w
  1541  056C  00A1               	movwf	___ftpack@arg+1
  1542  056D  082A               	movf	___altoft@c+2,w
  1543  056E  00A2               	movwf	___ftpack@arg+2
  1544  056F  082E               	movf	___altoft@exp,w
  1545  0570  00AC               	movwf	??___altoft
  1546  0571  082C               	movf	??___altoft,w
  1547  0572  00A3               	movwf	___ftpack@exp
  1548  0573  082F               	movf	___altoft@sign,w
  1549  0574  00AD               	movwf	??___altoft+1
  1550  0575  082D               	movf	??___altoft+1,w
  1551  0576  00A4               	movwf	___ftpack@sign
  1552  0577  120A  118A  236B   	fcall	___ftpack
  1553  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1554  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1555  057C  0820               	movf	?___ftpack,w
  1556  057D  00A8               	movwf	?___altoft
  1557  057E  0821               	movf	?___ftpack+1,w
  1558  057F  00A9               	movwf	?___altoft+1
  1559  0580  0822               	movf	?___ftpack+2,w
  1560  0581  00AA               	movwf	?___altoft+2
  1561  0582  0008               	return
  1562  0583                     __end_of___altoft:	
  1563                           
  1564                           	psect	text7
  1565  065B                     __ptext7:	
  1566 ;; *************** function ___ftneg *****************
  1567 ;; Defined at:
  1568 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  f1              3   16[BANK0 ] float 
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  3   16[BANK0 ] float 
  1575 ;; Registers used:
  1576 ;;		wreg
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1582 ;;      Params:         0       3       0       0       0
  1583 ;;      Locals:         0       0       0       0       0
  1584 ;;      Temps:          0       0       0       0       0
  1585 ;;      Totals:         0       3       0       0       0
  1586 ;;Total ram usage:        3 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    1
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_moveDeg
  1593 ;;		_round
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           
  1598                           ;psect for function ___ftneg
  1599  065B                     ___ftneg:	
  1600                           
  1601                           ;incstack = 0
  1602                           ; Regs used in ___ftneg: [wreg]
  1603  065B  1283               	bcf	3,5	;RP0=0, select bank0
  1604  065C  1303               	bcf	3,6	;RP1=0, select bank0
  1605  065D  0832               	movf	___ftneg@f1+2,w
  1606  065E  0431               	iorwf	___ftneg@f1+1,w
  1607  065F  0430               	iorwf	___ftneg@f1,w
  1608  0660  1903               	skipnz
  1609  0661  0008               	return
  1610  0662  3080               	movlw	128
  1611  0663  06B2               	xorwf	___ftneg@f1+2,f
  1612  0664  0008               	return
  1613  0665                     __end_of___ftneg:	
  1614                           
  1615                           	psect	text8
  1616  002D                     __ptext8:	
  1617 ;; *************** function ___ftadd *****************
  1618 ;; Defined at:
  1619 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  f1              3   58[BANK0 ] float 
  1622 ;;  f2              3   61[BANK0 ] float 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  exp1            1   70[BANK0 ] unsigned char 
  1625 ;;  exp2            1   69[BANK0 ] unsigned char 
  1626 ;;  sign            1   68[BANK0 ] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  3   58[BANK0 ] float 
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0, pclath, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1636 ;;      Params:         0       6       0       0       0
  1637 ;;      Locals:         0       3       0       0       0
  1638 ;;      Temps:          0       4       0       0       0
  1639 ;;      Totals:         0      13       0       0       0
  1640 ;;Total ram usage:       13 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    2
  1643 ;; This function calls:
  1644 ;;		___ftpack
  1645 ;; This function is called by:
  1646 ;;		_round
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           
  1651                           ;psect for function ___ftadd
  1652  002D                     ___ftadd:	
  1653                           
  1654                           ;incstack = 0
  1655                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  1656  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1657  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1658  002F  085A               	movf	___ftadd@f1,w
  1659  0030  00E0               	movwf	??___ftadd
  1660  0031  085B               	movf	___ftadd@f1+1,w
  1661  0032  00E1               	movwf	??___ftadd+1
  1662  0033  085C               	movf	___ftadd@f1+2,w
  1663  0034  00E2               	movwf	??___ftadd+2
  1664  0035  1003               	clrc
  1665  0036  0D61               	rlf	??___ftadd+1,w
  1666  0037  0D62               	rlf	??___ftadd+2,w
  1667  0038  00E3               	movwf	??___ftadd+3
  1668  0039  0863               	movf	??___ftadd+3,w
  1669  003A  00E6               	movwf	___ftadd@exp1
  1670  003B  085D               	movf	___ftadd@f2,w
  1671  003C  00E0               	movwf	??___ftadd
  1672  003D  085E               	movf	___ftadd@f2+1,w
  1673  003E  00E1               	movwf	??___ftadd+1
  1674  003F  085F               	movf	___ftadd@f2+2,w
  1675  0040  00E2               	movwf	??___ftadd+2
  1676  0041  1003               	clrc
  1677  0042  0D61               	rlf	??___ftadd+1,w
  1678  0043  0D62               	rlf	??___ftadd+2,w
  1679  0044  00E3               	movwf	??___ftadd+3
  1680  0045  0863               	movf	??___ftadd+3,w
  1681  0046  00E5               	movwf	___ftadd@exp2
  1682  0047  0866               	movf	___ftadd@exp1,w
  1683  0048  1903               	btfsc	3,2
  1684  0049  2856               	goto	l1439
  1685  004A  0865               	movf	___ftadd@exp2,w
  1686  004B  0266               	subwf	___ftadd@exp1,w
  1687  004C  1803               	skipnc
  1688  004D  285D               	goto	l1443
  1689  004E  0366               	decf	___ftadd@exp1,w
  1690  004F  3AFF               	xorlw	255
  1691  0050  0765               	addwf	___ftadd@exp2,w
  1692  0051  00E0               	movwf	??___ftadd
  1693  0052  3019               	movlw	25
  1694  0053  0260               	subwf	??___ftadd,w
  1695  0054  1C03               	skipc
  1696  0055  285D               	goto	l1443
  1697  0056                     l1439:	
  1698  0056  085D               	movf	___ftadd@f2,w
  1699  0057  00DA               	movwf	?___ftadd
  1700  0058  085E               	movf	___ftadd@f2+1,w
  1701  0059  00DB               	movwf	?___ftadd+1
  1702  005A  085F               	movf	___ftadd@f2+2,w
  1703  005B  00DC               	movwf	?___ftadd+2
  1704  005C  0008               	return
  1705  005D                     l1443:	
  1706  005D  0865               	movf	___ftadd@exp2,w
  1707  005E  1903               	btfsc	3,2
  1708  005F  0008               	return
  1709  0060  0866               	movf	___ftadd@exp1,w
  1710  0061  0265               	subwf	___ftadd@exp2,w
  1711  0062  1803               	skipnc
  1712  0063  286C               	goto	l1449
  1713  0064  0365               	decf	___ftadd@exp2,w
  1714  0065  3AFF               	xorlw	255
  1715  0066  0766               	addwf	___ftadd@exp1,w
  1716  0067  00E0               	movwf	??___ftadd
  1717  0068  3019               	movlw	25
  1718  0069  0260               	subwf	??___ftadd,w
  1719  006A  1803               	btfsc	3,0
  1720  006B  0008               	return
  1721  006C                     l1449:	
  1722  006C  3006               	movlw	6
  1723  006D  00E0               	movwf	??___ftadd
  1724  006E  0860               	movf	??___ftadd,w
  1725  006F  00E4               	movwf	___ftadd@sign
  1726  0070  1BDC               	btfsc	___ftadd@f1+2,7
  1727  0071  17E4               	bsf	___ftadd@sign,7
  1728  0072  1BDF               	btfsc	___ftadd@f2+2,7
  1729  0073  1764               	bsf	___ftadd@sign,6
  1730  0074  17DB               	bsf	___ftadd@f1+1,7
  1731  0075  30FF               	movlw	255
  1732  0076  05DA               	andwf	___ftadd@f1,f
  1733  0077  30FF               	movlw	255
  1734  0078  05DB               	andwf	___ftadd@f1+1,f
  1735  0079  3000               	movlw	0
  1736  007A  05DC               	andwf	___ftadd@f1+2,f
  1737  007B  17DE               	bsf	___ftadd@f2+1,7
  1738  007C  30FF               	movlw	255
  1739  007D  05DD               	andwf	___ftadd@f2,f
  1740  007E  30FF               	movlw	255
  1741  007F  05DE               	andwf	___ftadd@f2+1,f
  1742  0080  3000               	movlw	0
  1743  0081  05DF               	andwf	___ftadd@f2+2,f
  1744  0082  0865               	movf	___ftadd@exp2,w
  1745  0083  0266               	subwf	___ftadd@exp1,w
  1746  0084  1803               	skipnc
  1747  0085  28AC               	goto	l1471
  1748  0086                     l1461:	
  1749  0086  3001               	movlw	1
  1750  0087                     u1895:	
  1751  0087  1003               	clrc
  1752  0088  0DDD               	rlf	___ftadd@f2,f
  1753  0089  0DDE               	rlf	___ftadd@f2+1,f
  1754  008A  0DDF               	rlf	___ftadd@f2+2,f
  1755  008B  3EFF               	addlw	-1
  1756  008C  1D03               	skipz
  1757  008D  2887               	goto	u1895
  1758  008E  3001               	movlw	1
  1759  008F  02E5               	subwf	___ftadd@exp2,f
  1760  0090  0865               	movf	___ftadd@exp2,w
  1761  0091  0666               	xorwf	___ftadd@exp1,w
  1762  0092  1903               	skipnz
  1763  0093  28A7               	goto	l1469
  1764  0094  3001               	movlw	1
  1765  0095  02E4               	subwf	___ftadd@sign,f
  1766  0096  0864               	movf	___ftadd@sign,w
  1767  0097  3907               	andlw	7
  1768  0098  1903               	btfsc	3,2
  1769  0099  28A7               	goto	l1469
  1770  009A  2886               	goto	l1461
  1771  009B                     l1467:	
  1772  009B  3001               	movlw	1
  1773  009C                     u1925:	
  1774  009C  1003               	clrc
  1775  009D  0CDC               	rrf	___ftadd@f1+2,f
  1776  009E  0CDB               	rrf	___ftadd@f1+1,f
  1777  009F  0CDA               	rrf	___ftadd@f1,f
  1778  00A0  3EFF               	addlw	-1
  1779  00A1  1D03               	skipz
  1780  00A2  289C               	goto	u1925
  1781  00A3  3001               	movlw	1
  1782  00A4  00E0               	movwf	??___ftadd
  1783  00A5  0860               	movf	??___ftadd,w
  1784  00A6  07E6               	addwf	___ftadd@exp1,f
  1785  00A7                     l1469:	
  1786  00A7  0866               	movf	___ftadd@exp1,w
  1787  00A8  0665               	xorwf	___ftadd@exp2,w
  1788  00A9  1903               	btfsc	3,2
  1789  00AA  28D5               	goto	l379
  1790  00AB  289B               	goto	l1467
  1791  00AC                     l1471:	
  1792  00AC  0866               	movf	___ftadd@exp1,w
  1793  00AD  0265               	subwf	___ftadd@exp2,w
  1794  00AE  1803               	skipnc
  1795  00AF  28D5               	goto	l379
  1796  00B0                     l1473:	
  1797  00B0  3001               	movlw	1
  1798  00B1                     u1955:	
  1799  00B1  1003               	clrc
  1800  00B2  0DDA               	rlf	___ftadd@f1,f
  1801  00B3  0DDB               	rlf	___ftadd@f1+1,f
  1802  00B4  0DDC               	rlf	___ftadd@f1+2,f
  1803  00B5  3EFF               	addlw	-1
  1804  00B6  1D03               	skipz
  1805  00B7  28B1               	goto	u1955
  1806  00B8  3001               	movlw	1
  1807  00B9  02E6               	subwf	___ftadd@exp1,f
  1808  00BA  0865               	movf	___ftadd@exp2,w
  1809  00BB  0666               	xorwf	___ftadd@exp1,w
  1810  00BC  1903               	skipnz
  1811  00BD  28D1               	goto	l1481
  1812  00BE  3001               	movlw	1
  1813  00BF  02E4               	subwf	___ftadd@sign,f
  1814  00C0  0864               	movf	___ftadd@sign,w
  1815  00C1  3907               	andlw	7
  1816  00C2  1903               	btfsc	3,2
  1817  00C3  28D1               	goto	l1481
  1818  00C4  28B0               	goto	l1473
  1819  00C5                     l1479:	
  1820  00C5  3001               	movlw	1
  1821  00C6                     u1985:	
  1822  00C6  1003               	clrc
  1823  00C7  0CDF               	rrf	___ftadd@f2+2,f
  1824  00C8  0CDE               	rrf	___ftadd@f2+1,f
  1825  00C9  0CDD               	rrf	___ftadd@f2,f
  1826  00CA  3EFF               	addlw	-1
  1827  00CB  1D03               	skipz
  1828  00CC  28C6               	goto	u1985
  1829  00CD  3001               	movlw	1
  1830  00CE  00E0               	movwf	??___ftadd
  1831  00CF  0860               	movf	??___ftadd,w
  1832  00D0  07E5               	addwf	___ftadd@exp2,f
  1833  00D1                     l1481:	
  1834  00D1  0866               	movf	___ftadd@exp1,w
  1835  00D2  0665               	xorwf	___ftadd@exp2,w
  1836  00D3  1D03               	skipz
  1837  00D4  28C5               	goto	l1479
  1838  00D5                     l379:	
  1839  00D5  1FE4               	btfss	___ftadd@sign,7
  1840  00D6  28E7               	goto	l1485
  1841  00D7  30FF               	movlw	255
  1842  00D8  06DA               	xorwf	___ftadd@f1,f
  1843  00D9  30FF               	movlw	255
  1844  00DA  06DB               	xorwf	___ftadd@f1+1,f
  1845  00DB  30FF               	movlw	255
  1846  00DC  06DC               	xorwf	___ftadd@f1+2,f
  1847  00DD  3001               	movlw	1
  1848  00DE  07DA               	addwf	___ftadd@f1,f
  1849  00DF  3000               	movlw	0
  1850  00E0  1803               	skipnc
  1851  00E1  3001               	movlw	1
  1852  00E2  07DB               	addwf	___ftadd@f1+1,f
  1853  00E3  3000               	movlw	0
  1854  00E4  1803               	skipnc
  1855  00E5  3001               	movlw	1
  1856  00E6  07DC               	addwf	___ftadd@f1+2,f
  1857  00E7                     l1485:	
  1858  00E7  1F64               	btfss	___ftadd@sign,6
  1859  00E8  28F9               	goto	l1489
  1860  00E9  30FF               	movlw	255
  1861  00EA  06DD               	xorwf	___ftadd@f2,f
  1862  00EB  30FF               	movlw	255
  1863  00EC  06DE               	xorwf	___ftadd@f2+1,f
  1864  00ED  30FF               	movlw	255
  1865  00EE  06DF               	xorwf	___ftadd@f2+2,f
  1866  00EF  3001               	movlw	1
  1867  00F0  07DD               	addwf	___ftadd@f2,f
  1868  00F1  3000               	movlw	0
  1869  00F2  1803               	skipnc
  1870  00F3  3001               	movlw	1
  1871  00F4  07DE               	addwf	___ftadd@f2+1,f
  1872  00F5  3000               	movlw	0
  1873  00F6  1803               	skipnc
  1874  00F7  3001               	movlw	1
  1875  00F8  07DF               	addwf	___ftadd@f2+2,f
  1876  00F9                     l1489:	
  1877  00F9  01E4               	clrf	___ftadd@sign
  1878  00FA  085A               	movf	___ftadd@f1,w
  1879  00FB  07DD               	addwf	___ftadd@f2,f
  1880  00FC  085B               	movf	___ftadd@f1+1,w
  1881  00FD  1103               	clrz
  1882  00FE  1803               	skipnc
  1883  00FF  0A5B               	incf	___ftadd@f1+1,w
  1884  0100  1D03               	btfss	3,2
  1885  0101  07DE               	addwf	___ftadd@f2+1,f
  1886  0102  085C               	movf	___ftadd@f1+2,w
  1887  0103  1103               	clrz
  1888  0104  1803               	skipnc
  1889  0105  0A5C               	incf	___ftadd@f1+2,w
  1890  0106  1D03               	btfss	3,2
  1891  0107  07DF               	addwf	___ftadd@f2+2,f
  1892  0108  1FDF               	btfss	___ftadd@f2+2,7
  1893  0109  291C               	goto	l1499
  1894  010A  30FF               	movlw	255
  1895  010B  06DD               	xorwf	___ftadd@f2,f
  1896  010C  30FF               	movlw	255
  1897  010D  06DE               	xorwf	___ftadd@f2+1,f
  1898  010E  30FF               	movlw	255
  1899  010F  06DF               	xorwf	___ftadd@f2+2,f
  1900  0110  3001               	movlw	1
  1901  0111  07DD               	addwf	___ftadd@f2,f
  1902  0112  3000               	movlw	0
  1903  0113  1803               	skipnc
  1904  0114  3001               	movlw	1
  1905  0115  07DE               	addwf	___ftadd@f2+1,f
  1906  0116  3000               	movlw	0
  1907  0117  1803               	skipnc
  1908  0118  3001               	movlw	1
  1909  0119  07DF               	addwf	___ftadd@f2+2,f
  1910  011A  01E4               	clrf	___ftadd@sign
  1911  011B  0AE4               	incf	___ftadd@sign,f
  1912  011C                     l1499:	
  1913  011C  085D               	movf	___ftadd@f2,w
  1914  011D  00A0               	movwf	___ftpack@arg
  1915  011E  085E               	movf	___ftadd@f2+1,w
  1916  011F  00A1               	movwf	___ftpack@arg+1
  1917  0120  085F               	movf	___ftadd@f2+2,w
  1918  0121  00A2               	movwf	___ftpack@arg+2
  1919  0122  0866               	movf	___ftadd@exp1,w
  1920  0123  00E0               	movwf	??___ftadd
  1921  0124  0860               	movf	??___ftadd,w
  1922  0125  00A3               	movwf	___ftpack@exp
  1923  0126  0864               	movf	___ftadd@sign,w
  1924  0127  00E1               	movwf	??___ftadd+1
  1925  0128  0861               	movf	??___ftadd+1,w
  1926  0129  00A4               	movwf	___ftpack@sign
  1927  012A  120A  118A  236B   	fcall	___ftpack
  1928  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1929  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1930  012F  0820               	movf	?___ftpack,w
  1931  0130  00DA               	movwf	?___ftadd
  1932  0131  0821               	movf	?___ftpack+1,w
  1933  0132  00DB               	movwf	?___ftadd+1
  1934  0133  0822               	movf	?___ftpack+2,w
  1935  0134  00DC               	movwf	?___ftadd+2
  1936  0135  0008               	return
  1937  0136                     __end_of___ftadd:	
  1938                           
  1939                           	psect	text9
  1940  0439                     __ptext9:	
  1941 ;; *************** function _move *****************
  1942 ;; Defined at:
  1943 ;;		line 18 in file "motor.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  steps           1    wreg     unsigned char 
  1946 ;;  direction       1    0[BANK0 ] unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  steps           1    3[BANK0 ] unsigned char 
  1949 ;;  i               1    4[BANK0 ] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1959 ;;      Params:         0       1       0       0       0
  1960 ;;      Locals:         0       2       0       0       0
  1961 ;;      Temps:          0       2       0       0       0
  1962 ;;      Totals:         0       5       0       0       0
  1963 ;;Total ram usage:        5 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    1
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_moveDeg
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function _move
  1975  0439                     _move:	
  1976                           
  1977                           ;incstack = 0
  1978                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0]
  1979                           ;move@steps stored from wreg
  1980  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1981  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1982  043B  00A3               	movwf	move@steps
  1983                           
  1984                           ;motor.c: 19: for(char i = 0; i<steps; i++){
  1985  043C  01A4               	clrf	move@i
  1986  043D                     l1557:	
  1987  043D  0823               	movf	move@steps,w
  1988  043E  0224               	subwf	move@i,w
  1989  043F  1803               	btfsc	3,0
  1990  0440  0008               	return
  1991                           
  1992                           ;motor.c: 20: if(cstep == 7 && direction == 1){
  1993  0441  3007               	movlw	7
  1994  0442  0676               	xorwf	_cstep,w
  1995  0443  1D03               	btfss	3,2
  1996  0444  2C50               	goto	l1531
  1997  0445  0320               	decf	move@direction,w
  1998  0446  1D03               	btfss	3,2
  1999  0447  2C50               	goto	l1531
  2000                           
  2001                           ;motor.c: 21: PORTC = allSteps[0];
  2002  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2003  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2004  044A  0820               	movf	_allSteps^(0+128),w
  2005  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2006  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2007  044D  0087               	movwf	7	;volatile
  2008                           
  2009                           ;motor.c: 22: cstep = 0;
  2010  044E  01F6               	clrf	_cstep
  2011                           
  2012                           ;motor.c: 23: }
  2013  044F  2C88               	goto	l1553
  2014  0450                     l1531:	
  2015                           
  2016                           ;motor.c: 24: else if(cstep == 0 && direction == 0){
  2017  0450  0876               	movf	_cstep,w
  2018  0451  1D03               	btfss	3,2
  2019  0452  2C61               	goto	l90
  2020  0453  0820               	movf	move@direction,w
  2021  0454  1D03               	btfss	3,2
  2022  0455  2C61               	goto	l90
  2023                           
  2024                           ;motor.c: 25: PORTC = allSteps[7];
  2025  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2026  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2027  0458  082E               	movf	(_allSteps^(0+128)+14),w
  2028  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2029  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2030  045B  0087               	movwf	7	;volatile
  2031                           
  2032                           ;motor.c: 26: cstep = 7;
  2033  045C  3007               	movlw	7
  2034  045D  00A1               	movwf	??_move
  2035  045E  0821               	movf	??_move,w
  2036  045F  00F6               	movwf	_cstep
  2037                           
  2038                           ;motor.c: 27: }
  2039  0460  2C88               	goto	l1553
  2040  0461                     l90:	
  2041                           
  2042                           ;motor.c: 28: else if (cstep >= 0 && cstep <= 7){
  2043  0461  1BF6               	btfsc	_cstep,7
  2044  0462  2C87               	goto	l1551
  2045  0463  0876               	movf	_cstep,w
  2046  0464  3A80               	xorlw	128
  2047  0465  3E78               	addlw	-136
  2048  0466  1803               	skipnc
  2049  0467  2C87               	goto	l1551
  2050                           
  2051                           ;motor.c: 29: if(direction == 1){
  2052  0468  0320               	decf	move@direction,w
  2053  0469  1D03               	btfss	3,2
  2054  046A  2C76               	goto	l1545
  2055                           
  2056                           ;motor.c: 30: PORTC = allSteps[cstep+1];
  2057  046B  0876               	movf	_cstep,w
  2058  046C  00A1               	movwf	??_move
  2059  046D  0721               	addwf	??_move,w
  2060  046E  3E02               	addlw	2
  2061  046F  3EA0               	addlw	(low (_allSteps| 0))& (0+255)
  2062  0470  0084               	movwf	4
  2063  0471  1383               	bcf	3,7	;select IRP bank1
  2064  0472  0800               	movf	0,w
  2065  0473  0087               	movwf	7	;volatile
  2066                           
  2067                           ;motor.c: 31: cstep++;
  2068  0474  3001               	movlw	1
  2069  0475  2C83               	goto	L1
  2070  0476                     l1545:	
  2071                           ;motor.c: 32: }
  2072                           
  2073                           
  2074                           ;motor.c: 33: else if(direction == 0){
  2075  0476  0820               	movf	move@direction,w
  2076  0477  1D03               	btfss	3,2
  2077  0478  2C88               	goto	l1553
  2078                           
  2079                           ;motor.c: 34: PORTC = allSteps[cstep-1];
  2080  0479  0876               	movf	_cstep,w
  2081  047A  00A1               	movwf	??_move
  2082  047B  0721               	addwf	??_move,w
  2083  047C  3EFE               	addlw	254
  2084  047D  3EA0               	addlw	(low (_allSteps| 0))& (0+255)
  2085  047E  0084               	movwf	4
  2086  047F  1383               	bcf	3,7	;select IRP bank1
  2087  0480  0800               	movf	0,w
  2088  0481  0087               	movwf	7	;volatile
  2089                           
  2090                           ;motor.c: 35: cstep--;
  2091  0482  30FF               	movlw	255
  2092  0483                     L1:	
  2093  0483  00A1               	movwf	??_move
  2094  0484  0821               	movf	??_move,w
  2095  0485  07F6               	addwf	_cstep,f
  2096                           
  2097                           ;motor.c: 36: }
  2098                           ;motor.c: 38: }
  2099  0486  2C88               	goto	l1553
  2100  0487                     l1551:	
  2101                           
  2102                           ;motor.c: 39: else{
  2103                           ;motor.c: 40: PORTC = 0x00;
  2104  0487  0187               	clrf	7	;volatile
  2105  0488                     l1553:	
  2106                           
  2107                           ;motor.c: 41: }
  2108                           ;motor.c: 42: _delay((unsigned long)((20)*(20000000/4000.0)));
  2109  0488  3082               	movlw	130
  2110  0489  00A2               	movwf	??_move+1
  2111  048A  30DD               	movlw	221
  2112  048B  00A1               	movwf	??_move
  2113  048C                     u2277:	
  2114  048C  0BA1               	decfsz	??_move,f
  2115  048D  2C8C               	goto	u2277
  2116  048E  0BA2               	decfsz	??_move+1,f
  2117  048F  2C8C               	goto	u2277
  2118  0490  2C91               	nop2
  2119  0491  3001               	movlw	1
  2120  0492  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0493  1303               	bcf	3,6	;RP1=0, select bank0
  2122  0494  00A1               	movwf	??_move
  2123  0495  0821               	movf	??_move,w
  2124  0496  07A4               	addwf	move@i,f
  2125  0497  2C3D               	goto	l1557
  2126  0498                     __end_of_move:	
  2127                           
  2128                           	psect	text10
  2129  0498                     __ptext10:	
  2130 ;; *************** function ___ftge *****************
  2131 ;; Defined at:
  2132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  ff1             3    0[BANK0 ] float 
  2135 ;;  ff2             3    3[BANK0 ] float 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;		None               void
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2147 ;;      Params:         0       6       0       0       0
  2148 ;;      Locals:         0       0       0       0       0
  2149 ;;      Temps:          0       6       0       0       0
  2150 ;;      Totals:         0      12       0       0       0
  2151 ;;Total ram usage:       12 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    1
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_moveDeg
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function ___ftge
  2163  0498                     ___ftge:	
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2167  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2169  049A  1FA2               	btfss	___ftge@ff1+2,7
  2170  049B  2CC1               	goto	l1317
  2171  049C  3000               	movlw	0
  2172  049D  00A6               	movwf	??___ftge
  2173  049E  3000               	movlw	0
  2174  049F  00A7               	movwf	??___ftge+1
  2175  04A0  3080               	movlw	128
  2176  04A1  00A8               	movwf	??___ftge+2
  2177  04A2  0920               	comf	___ftge@ff1,w
  2178  04A3  00A9               	movwf	??___ftge+3
  2179  04A4  0921               	comf	___ftge@ff1+1,w
  2180  04A5  00AA               	movwf	??___ftge+4
  2181  04A6  0922               	comf	___ftge@ff1+2,w
  2182  04A7  00AB               	movwf	??___ftge+5
  2183  04A8  0AA9               	incf	??___ftge+3,f
  2184  04A9  1903               	skipnz
  2185  04AA  0AAA               	incf	??___ftge+4,f
  2186  04AB  1903               	skipnz
  2187  04AC  0AAB               	incf	??___ftge+5,f
  2188  04AD  0829               	movf	??___ftge+3,w
  2189  04AE  07A6               	addwf	??___ftge,f
  2190  04AF  082A               	movf	??___ftge+4,w
  2191  04B0  1803               	skipnc
  2192  04B1  0F2A               	incfsz	??___ftge+4,w
  2193  04B2  2CB4               	goto	u1571
  2194  04B3  2CB5               	goto	u1572
  2195  04B4                     u1571:	
  2196  04B4  07A7               	addwf	??___ftge+1,f
  2197  04B5                     u1572:	
  2198  04B5  082B               	movf	??___ftge+5,w
  2199  04B6  1803               	skipnc
  2200  04B7  0F2B               	incfsz	??___ftge+5,w
  2201  04B8  2CBA               	goto	u1573
  2202  04B9  2CBB               	goto	u1574
  2203  04BA                     u1573:	
  2204  04BA  07A8               	addwf	??___ftge+2,f
  2205  04BB                     u1574:	
  2206  04BB  0826               	movf	??___ftge,w
  2207  04BC  00A0               	movwf	___ftge@ff1
  2208  04BD  0827               	movf	??___ftge+1,w
  2209  04BE  00A1               	movwf	___ftge@ff1+1
  2210  04BF  0828               	movf	??___ftge+2,w
  2211  04C0  00A2               	movwf	___ftge@ff1+2
  2212  04C1                     l1317:	
  2213  04C1  1FA5               	btfss	___ftge@ff2+2,7
  2214  04C2  2CE8               	goto	l1321
  2215  04C3  3000               	movlw	0
  2216  04C4  00A6               	movwf	??___ftge
  2217  04C5  3000               	movlw	0
  2218  04C6  00A7               	movwf	??___ftge+1
  2219  04C7  3080               	movlw	128
  2220  04C8  00A8               	movwf	??___ftge+2
  2221  04C9  0923               	comf	___ftge@ff2,w
  2222  04CA  00A9               	movwf	??___ftge+3
  2223  04CB  0924               	comf	___ftge@ff2+1,w
  2224  04CC  00AA               	movwf	??___ftge+4
  2225  04CD  0925               	comf	___ftge@ff2+2,w
  2226  04CE  00AB               	movwf	??___ftge+5
  2227  04CF  0AA9               	incf	??___ftge+3,f
  2228  04D0  1903               	skipnz
  2229  04D1  0AAA               	incf	??___ftge+4,f
  2230  04D2  1903               	skipnz
  2231  04D3  0AAB               	incf	??___ftge+5,f
  2232  04D4  0829               	movf	??___ftge+3,w
  2233  04D5  07A6               	addwf	??___ftge,f
  2234  04D6  082A               	movf	??___ftge+4,w
  2235  04D7  1803               	skipnc
  2236  04D8  0F2A               	incfsz	??___ftge+4,w
  2237  04D9  2CDB               	goto	u1591
  2238  04DA  2CDC               	goto	u1592
  2239  04DB                     u1591:	
  2240  04DB  07A7               	addwf	??___ftge+1,f
  2241  04DC                     u1592:	
  2242  04DC  082B               	movf	??___ftge+5,w
  2243  04DD  1803               	skipnc
  2244  04DE  0F2B               	incfsz	??___ftge+5,w
  2245  04DF  2CE1               	goto	u1593
  2246  04E0  2CE2               	goto	u1594
  2247  04E1                     u1593:	
  2248  04E1  07A8               	addwf	??___ftge+2,f
  2249  04E2                     u1594:	
  2250  04E2  0826               	movf	??___ftge,w
  2251  04E3  00A3               	movwf	___ftge@ff2
  2252  04E4  0827               	movf	??___ftge+1,w
  2253  04E5  00A4               	movwf	___ftge@ff2+1
  2254  04E6  0828               	movf	??___ftge+2,w
  2255  04E7  00A5               	movwf	___ftge@ff2+2
  2256  04E8                     l1321:	
  2257  04E8  3080               	movlw	128
  2258  04E9  06A2               	xorwf	___ftge@ff1+2,f
  2259  04EA  3080               	movlw	128
  2260  04EB  06A5               	xorwf	___ftge@ff2+2,f
  2261  04EC  0825               	movf	___ftge@ff2+2,w
  2262  04ED  0222               	subwf	___ftge@ff1+2,w
  2263  04EE  1D03               	skipz
  2264  04EF  0008               	return
  2265  04F0  0824               	movf	___ftge@ff2+1,w
  2266  04F1  0221               	subwf	___ftge@ff1+1,w
  2267  04F2  1D03               	skipz
  2268  04F3  0008               	return
  2269  04F4  0823               	movf	___ftge@ff2,w
  2270  04F5  0220               	subwf	___ftge@ff1,w
  2271  04F6  0008               	return
  2272  04F7                     __end_of___ftge:	
  2273                           
  2274                           	psect	text11
  2275  0225                     __ptext11:	
  2276 ;; *************** function ___ftdiv *****************
  2277 ;; Defined at:
  2278 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  f2              3   19[BANK0 ] float 
  2281 ;;  f1              3   22[BANK0 ] float 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  f3              3   30[BANK0 ] float 
  2284 ;;  sign            1   34[BANK0 ] unsigned char 
  2285 ;;  exp             1   33[BANK0 ] unsigned char 
  2286 ;;  cntr            1   29[BANK0 ] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  3   19[BANK0 ] float 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, pclath, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       6       0       0       0
  2297 ;;      Locals:         0       6       0       0       0
  2298 ;;      Temps:          0       4       0       0       0
  2299 ;;      Totals:         0      16       0       0       0
  2300 ;;Total ram usage:       16 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		___ftpack
  2305 ;; This function is called by:
  2306 ;;		_moveDeg
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           
  2311                           ;psect for function ___ftdiv
  2312  0225                     ___ftdiv:	
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2316  0225  1283               	bcf	3,5	;RP0=0, select bank0
  2317  0226  1303               	bcf	3,6	;RP1=0, select bank0
  2318  0227  0836               	movf	___ftdiv@f1,w
  2319  0228  00B9               	movwf	??___ftdiv
  2320  0229  0837               	movf	___ftdiv@f1+1,w
  2321  022A  00BA               	movwf	??___ftdiv+1
  2322  022B  0838               	movf	___ftdiv@f1+2,w
  2323  022C  00BB               	movwf	??___ftdiv+2
  2324  022D  1003               	clrc
  2325  022E  0D3A               	rlf	??___ftdiv+1,w
  2326  022F  0D3B               	rlf	??___ftdiv+2,w
  2327  0230  00BC               	movwf	??___ftdiv+3
  2328  0231  083C               	movf	??___ftdiv+3,w
  2329  0232  00C1               	movwf	___ftdiv@exp
  2330  0233  0841               	movf	___ftdiv@exp,w
  2331  0234  1D03               	btfss	3,2
  2332  0235  2A3D               	goto	l1573
  2333  0236  3000               	movlw	0
  2334  0237  00B3               	movwf	?___ftdiv
  2335  0238  3000               	movlw	0
  2336  0239  00B4               	movwf	?___ftdiv+1
  2337  023A  3000               	movlw	0
  2338  023B  00B5               	movwf	?___ftdiv+2
  2339  023C  0008               	return
  2340  023D                     l1573:	
  2341  023D  0833               	movf	___ftdiv@f2,w
  2342  023E  00B9               	movwf	??___ftdiv
  2343  023F  0834               	movf	___ftdiv@f2+1,w
  2344  0240  00BA               	movwf	??___ftdiv+1
  2345  0241  0835               	movf	___ftdiv@f2+2,w
  2346  0242  00BB               	movwf	??___ftdiv+2
  2347  0243  1003               	clrc
  2348  0244  0D3A               	rlf	??___ftdiv+1,w
  2349  0245  0D3B               	rlf	??___ftdiv+2,w
  2350  0246  00BC               	movwf	??___ftdiv+3
  2351  0247  083C               	movf	??___ftdiv+3,w
  2352  0248  00C2               	movwf	___ftdiv@sign
  2353  0249  0842               	movf	___ftdiv@sign,w
  2354  024A  1D03               	btfss	3,2
  2355  024B  2A53               	goto	l1579
  2356  024C  3000               	movlw	0
  2357  024D  00B3               	movwf	?___ftdiv
  2358  024E  3000               	movlw	0
  2359  024F  00B4               	movwf	?___ftdiv+1
  2360  0250  3000               	movlw	0
  2361  0251  00B5               	movwf	?___ftdiv+2
  2362  0252  0008               	return
  2363  0253                     l1579:	
  2364  0253  3000               	movlw	0
  2365  0254  00BE               	movwf	___ftdiv@f3
  2366  0255  3000               	movlw	0
  2367  0256  00BF               	movwf	___ftdiv@f3+1
  2368  0257  3000               	movlw	0
  2369  0258  00C0               	movwf	___ftdiv@f3+2
  2370  0259  3089               	movlw	137
  2371  025A  0742               	addwf	___ftdiv@sign,w
  2372  025B  00B9               	movwf	??___ftdiv
  2373  025C  0839               	movf	??___ftdiv,w
  2374  025D  02C1               	subwf	___ftdiv@exp,f
  2375  025E  0836               	movf	___ftdiv@f1,w
  2376  025F  00B9               	movwf	??___ftdiv
  2377  0260  0837               	movf	___ftdiv@f1+1,w
  2378  0261  00BA               	movwf	??___ftdiv+1
  2379  0262  0838               	movf	___ftdiv@f1+2,w
  2380  0263  00BB               	movwf	??___ftdiv+2
  2381  0264  3010               	movlw	16
  2382  0265                     u2175:	
  2383  0265  1003               	clrc
  2384  0266  0CBB               	rrf	??___ftdiv+2,f
  2385  0267  0CBA               	rrf	??___ftdiv+1,f
  2386  0268  0CB9               	rrf	??___ftdiv,f
  2387  0269  3EFF               	addlw	-1
  2388  026A  1D03               	skipz
  2389  026B  2A65               	goto	u2175
  2390  026C  0839               	movf	??___ftdiv,w
  2391  026D  00BC               	movwf	??___ftdiv+3
  2392  026E  083C               	movf	??___ftdiv+3,w
  2393  026F  00C2               	movwf	___ftdiv@sign
  2394  0270  0833               	movf	___ftdiv@f2,w
  2395  0271  00B9               	movwf	??___ftdiv
  2396  0272  0834               	movf	___ftdiv@f2+1,w
  2397  0273  00BA               	movwf	??___ftdiv+1
  2398  0274  0835               	movf	___ftdiv@f2+2,w
  2399  0275  00BB               	movwf	??___ftdiv+2
  2400  0276  3010               	movlw	16
  2401  0277                     u2185:	
  2402  0277  1003               	clrc
  2403  0278  0CBB               	rrf	??___ftdiv+2,f
  2404  0279  0CBA               	rrf	??___ftdiv+1,f
  2405  027A  0CB9               	rrf	??___ftdiv,f
  2406  027B  3EFF               	addlw	-1
  2407  027C  1D03               	skipz
  2408  027D  2A77               	goto	u2185
  2409  027E  0839               	movf	??___ftdiv,w
  2410  027F  00BC               	movwf	??___ftdiv+3
  2411  0280  083C               	movf	??___ftdiv+3,w
  2412  0281  06C2               	xorwf	___ftdiv@sign,f
  2413  0282  3080               	movlw	128
  2414  0283  00B9               	movwf	??___ftdiv
  2415  0284  0839               	movf	??___ftdiv,w
  2416  0285  05C2               	andwf	___ftdiv@sign,f
  2417  0286  17B7               	bsf	___ftdiv@f1+1,7
  2418  0287  30FF               	movlw	255
  2419  0288  05B6               	andwf	___ftdiv@f1,f
  2420  0289  30FF               	movlw	255
  2421  028A  05B7               	andwf	___ftdiv@f1+1,f
  2422  028B  3000               	movlw	0
  2423  028C  05B8               	andwf	___ftdiv@f1+2,f
  2424  028D  17B4               	bsf	___ftdiv@f2+1,7
  2425  028E  30FF               	movlw	255
  2426  028F  05B3               	andwf	___ftdiv@f2,f
  2427  0290  30FF               	movlw	255
  2428  0291  05B4               	andwf	___ftdiv@f2+1,f
  2429  0292  3000               	movlw	0
  2430  0293  05B5               	andwf	___ftdiv@f2+2,f
  2431  0294  3018               	movlw	24
  2432  0295  00B9               	movwf	??___ftdiv
  2433  0296  0839               	movf	??___ftdiv,w
  2434  0297  00BD               	movwf	___ftdiv@cntr
  2435  0298                     l1593:	
  2436  0298  3001               	movlw	1
  2437  0299                     u2195:	
  2438  0299  1003               	clrc
  2439  029A  0DBE               	rlf	___ftdiv@f3,f
  2440  029B  0DBF               	rlf	___ftdiv@f3+1,f
  2441  029C  0DC0               	rlf	___ftdiv@f3+2,f
  2442  029D  3EFF               	addlw	-1
  2443  029E  1D03               	skipz
  2444  029F  2A99               	goto	u2195
  2445  02A0  0835               	movf	___ftdiv@f2+2,w
  2446  02A1  0238               	subwf	___ftdiv@f1+2,w
  2447  02A2  1D03               	skipz
  2448  02A3  2AAA               	goto	u2205
  2449  02A4  0834               	movf	___ftdiv@f2+1,w
  2450  02A5  0237               	subwf	___ftdiv@f1+1,w
  2451  02A6  1D03               	skipz
  2452  02A7  2AAA               	goto	u2205
  2453  02A8  0833               	movf	___ftdiv@f2,w
  2454  02A9  0236               	subwf	___ftdiv@f1,w
  2455  02AA                     u2205:	
  2456  02AA  1C03               	skipc
  2457  02AB  2AB7               	goto	l1601
  2458  02AC  0833               	movf	___ftdiv@f2,w
  2459  02AD  02B6               	subwf	___ftdiv@f1,f
  2460  02AE  0834               	movf	___ftdiv@f2+1,w
  2461  02AF  1C03               	skipc
  2462  02B0  0F34               	incfsz	___ftdiv@f2+1,w
  2463  02B1  02B7               	subwf	___ftdiv@f1+1,f
  2464  02B2  0835               	movf	___ftdiv@f2+2,w
  2465  02B3  1C03               	skipc
  2466  02B4  0A35               	incf	___ftdiv@f2+2,w
  2467  02B5  02B8               	subwf	___ftdiv@f1+2,f
  2468  02B6  143E               	bsf	___ftdiv@f3,0
  2469  02B7                     l1601:	
  2470  02B7  3001               	movlw	1
  2471  02B8                     u2215:	
  2472  02B8  1003               	clrc
  2473  02B9  0DB6               	rlf	___ftdiv@f1,f
  2474  02BA  0DB7               	rlf	___ftdiv@f1+1,f
  2475  02BB  0DB8               	rlf	___ftdiv@f1+2,f
  2476  02BC  3EFF               	addlw	-1
  2477  02BD  1D03               	skipz
  2478  02BE  2AB8               	goto	u2215
  2479  02BF  3001               	movlw	1
  2480  02C0  02BD               	subwf	___ftdiv@cntr,f
  2481  02C1  1D03               	btfss	3,2
  2482  02C2  2A98               	goto	l1593
  2483  02C3  083E               	movf	___ftdiv@f3,w
  2484  02C4  00A0               	movwf	___ftpack@arg
  2485  02C5  083F               	movf	___ftdiv@f3+1,w
  2486  02C6  00A1               	movwf	___ftpack@arg+1
  2487  02C7  0840               	movf	___ftdiv@f3+2,w
  2488  02C8  00A2               	movwf	___ftpack@arg+2
  2489  02C9  0841               	movf	___ftdiv@exp,w
  2490  02CA  00B9               	movwf	??___ftdiv
  2491  02CB  0839               	movf	??___ftdiv,w
  2492  02CC  00A3               	movwf	___ftpack@exp
  2493  02CD  0842               	movf	___ftdiv@sign,w
  2494  02CE  00BA               	movwf	??___ftdiv+1
  2495  02CF  083A               	movf	??___ftdiv+1,w
  2496  02D0  00A4               	movwf	___ftpack@sign
  2497  02D1  120A  118A  236B   	fcall	___ftpack
  2498  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2499  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2500  02D6  0820               	movf	?___ftpack,w
  2501  02D7  00B3               	movwf	?___ftdiv
  2502  02D8  0821               	movf	?___ftpack+1,w
  2503  02D9  00B4               	movwf	?___ftdiv+1
  2504  02DA  0822               	movf	?___ftpack+2,w
  2505  02DB  00B5               	movwf	?___ftdiv+2
  2506  02DC  0008               	return
  2507  02DD                     __end_of___ftdiv:	
  2508                           
  2509                           	psect	text12
  2510  036B                     __ptext12:	
  2511 ;; *************** function ___ftpack *****************
  2512 ;; Defined at:
  2513 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;  arg             3    0[BANK0 ] unsigned um
  2516 ;;  exp             1    3[BANK0 ] unsigned char 
  2517 ;;  sign            1    4[BANK0 ] unsigned char 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  3    0[BANK0 ] float 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2529 ;;      Params:         0       5       0       0       0
  2530 ;;      Locals:         0       0       0       0       0
  2531 ;;      Temps:          0       3       0       0       0
  2532 ;;      Totals:         0       8       0       0       0
  2533 ;;Total ram usage:        8 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    1
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		___altoft
  2540 ;;		___ftadd
  2541 ;;		___ftdiv
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           
  2546                           ;psect for function ___ftpack
  2547  036B                     ___ftpack:	
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2551  036B  1283               	bcf	3,5	;RP0=0, select bank0
  2552  036C  1303               	bcf	3,6	;RP1=0, select bank0
  2553  036D  0823               	movf	___ftpack@exp,w
  2554  036E  1903               	btfsc	3,2
  2555  036F  2B75               	goto	l1373
  2556  0370  0822               	movf	___ftpack@arg+2,w
  2557  0371  0421               	iorwf	___ftpack@arg+1,w
  2558  0372  0420               	iorwf	___ftpack@arg,w
  2559  0373  1D03               	skipz
  2560  0374  2B88               	goto	l1379
  2561  0375                     l1373:	
  2562  0375  3000               	movlw	0
  2563  0376  00A0               	movwf	?___ftpack
  2564  0377  3000               	movlw	0
  2565  0378  00A1               	movwf	?___ftpack+1
  2566  0379  3000               	movlw	0
  2567  037A  00A2               	movwf	?___ftpack+2
  2568  037B  0008               	return
  2569  037C                     l1377:	
  2570  037C  3001               	movlw	1
  2571  037D  00A5               	movwf	??___ftpack
  2572  037E  0825               	movf	??___ftpack,w
  2573  037F  07A3               	addwf	___ftpack@exp,f
  2574  0380  3001               	movlw	1
  2575  0381                     u1665:	
  2576  0381  1003               	clrc
  2577  0382  0CA2               	rrf	___ftpack@arg+2,f
  2578  0383  0CA1               	rrf	___ftpack@arg+1,f
  2579  0384  0CA0               	rrf	___ftpack@arg,f
  2580  0385  3EFF               	addlw	-1
  2581  0386  1D03               	skipz
  2582  0387  2B81               	goto	u1665
  2583  0388                     l1379:	
  2584  0388  30FE               	movlw	254
  2585  0389  0522               	andwf	___ftpack@arg+2,w
  2586  038A  1903               	btfsc	3,2
  2587  038B  2BA3               	goto	l348
  2588  038C  2B7C               	goto	l1377
  2589  038D                     l1381:	
  2590  038D  3001               	movlw	1
  2591  038E  00A5               	movwf	??___ftpack
  2592  038F  0825               	movf	??___ftpack,w
  2593  0390  07A3               	addwf	___ftpack@exp,f
  2594  0391  3001               	movlw	1
  2595  0392  07A0               	addwf	___ftpack@arg,f
  2596  0393  3000               	movlw	0
  2597  0394  1803               	skipnc
  2598  0395  3001               	movlw	1
  2599  0396  07A1               	addwf	___ftpack@arg+1,f
  2600  0397  3000               	movlw	0
  2601  0398  1803               	skipnc
  2602  0399  3001               	movlw	1
  2603  039A  07A2               	addwf	___ftpack@arg+2,f
  2604  039B  3001               	movlw	1
  2605  039C                     u1685:	
  2606  039C  1003               	clrc
  2607  039D  0CA2               	rrf	___ftpack@arg+2,f
  2608  039E  0CA1               	rrf	___ftpack@arg+1,f
  2609  039F  0CA0               	rrf	___ftpack@arg,f
  2610  03A0  3EFF               	addlw	-1
  2611  03A1  1D03               	skipz
  2612  03A2  2B9C               	goto	u1685
  2613  03A3                     l348:	
  2614  03A3  30FF               	movlw	255
  2615  03A4  0522               	andwf	___ftpack@arg+2,w
  2616  03A5  1903               	btfsc	3,2
  2617  03A6  2BB2               	goto	l1389
  2618  03A7  2B8D               	goto	l1381
  2619  03A8                     l1387:	
  2620  03A8  3001               	movlw	1
  2621  03A9  02A3               	subwf	___ftpack@exp,f
  2622  03AA  3001               	movlw	1
  2623  03AB                     u1705:	
  2624  03AB  1003               	clrc
  2625  03AC  0DA0               	rlf	___ftpack@arg,f
  2626  03AD  0DA1               	rlf	___ftpack@arg+1,f
  2627  03AE  0DA2               	rlf	___ftpack@arg+2,f
  2628  03AF  3EFF               	addlw	-1
  2629  03B0  1D03               	skipz
  2630  03B1  2BAB               	goto	u1705
  2631  03B2                     l1389:	
  2632  03B2  1BA1               	btfsc	___ftpack@arg+1,7
  2633  03B3  2BB8               	goto	l355
  2634  03B4  3002               	movlw	2
  2635  03B5  0223               	subwf	___ftpack@exp,w
  2636  03B6  1803               	skipnc
  2637  03B7  2BA8               	goto	l1387
  2638  03B8                     l355:	
  2639  03B8  1823               	btfsc	___ftpack@exp,0
  2640  03B9  2BC0               	goto	l356
  2641  03BA  30FF               	movlw	255
  2642  03BB  05A0               	andwf	___ftpack@arg,f
  2643  03BC  307F               	movlw	127
  2644  03BD  05A1               	andwf	___ftpack@arg+1,f
  2645  03BE  30FF               	movlw	255
  2646  03BF  05A2               	andwf	___ftpack@arg+2,f
  2647  03C0                     l356:	
  2648  03C0  1003               	clrc
  2649  03C1  0CA3               	rrf	___ftpack@exp,f
  2650  03C2  0823               	movf	___ftpack@exp,w
  2651  03C3  00A5               	movwf	??___ftpack
  2652  03C4  01A6               	clrf	??___ftpack+1
  2653  03C5  01A7               	clrf	??___ftpack+2
  2654  03C6  3010               	movlw	16
  2655  03C7                     u1745:	
  2656  03C7  1003               	clrc
  2657  03C8  0DA5               	rlf	??___ftpack,f
  2658  03C9  0DA6               	rlf	??___ftpack+1,f
  2659  03CA  0DA7               	rlf	??___ftpack+2,f
  2660  03CB  3EFF               	addlw	-1
  2661  03CC  1D03               	skipz
  2662  03CD  2BC7               	goto	u1745
  2663  03CE  0825               	movf	??___ftpack,w
  2664  03CF  04A0               	iorwf	___ftpack@arg,f
  2665  03D0  0826               	movf	??___ftpack+1,w
  2666  03D1  04A1               	iorwf	___ftpack@arg+1,f
  2667  03D2  0827               	movf	??___ftpack+2,w
  2668  03D3  04A2               	iorwf	___ftpack@arg+2,f
  2669  03D4  0824               	movf	___ftpack@sign,w
  2670  03D5  1903               	btfsc	3,2
  2671  03D6  0008               	return
  2672  03D7  17A2               	bsf	___ftpack@arg+2,7
  2673  03D8  0008               	return
  2674  03D9                     __end_of___ftpack:	
  2675                           
  2676                           	psect	text13
  2677  0624                     __ptext13:	
  2678 ;; *************** function _initialise *****************
  2679 ;; Defined at:
  2680 ;;		line 56 in file "main.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2694 ;;      Params:         0       0       0       0       0
  2695 ;;      Locals:         0       0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0
  2697 ;;      Totals:         0       0       0       0       0
  2698 ;;Total ram usage:        0 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    1
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _initialise
  2710  0624                     _initialise:	
  2711                           
  2712                           ;main.c: 59: TRISB = 0b00000011;
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _initialise: [wreg+status,2]
  2716  0624  3003               	movlw	3
  2717  0625  1683               	bsf	3,5	;RP0=1, select bank1
  2718  0626  1303               	bcf	3,6	;RP1=0, select bank1
  2719  0627  0086               	movwf	6	;volatile
  2720                           
  2721                           ;main.c: 60: TRISC = 0;
  2722  0628  0187               	clrf	7	;volatile
  2723                           
  2724                           ;main.c: 62: RB2 = 1;
  2725  0629  1283               	bcf	3,5	;RP0=0, select bank0
  2726  062A  1303               	bcf	3,6	;RP1=0, select bank0
  2727  062B  1506               	bsf	6,2	;volatile
  2728                           
  2729                           ;main.c: 63: RB3 = 1;
  2730  062C  1586               	bsf	6,3	;volatile
  2731                           
  2732                           ;main.c: 66: TMR0 = 100;
  2733  062D  3064               	movlw	100
  2734  062E  0081               	movwf	1	;volatile
  2735                           
  2736                           ;main.c: 67: T0CS = 0;
  2737  062F  1683               	bsf	3,5	;RP0=1, select bank1
  2738  0630  1303               	bcf	3,6	;RP1=0, select bank1
  2739  0631  1281               	bcf	1,5	;volatile
  2740                           
  2741                           ;main.c: 68: T0SE = 0;
  2742  0632  1201               	bcf	1,4	;volatile
  2743                           
  2744                           ;main.c: 69: PSA = 0;
  2745  0633  1181               	bcf	1,3	;volatile
  2746                           
  2747                           ;main.c: 70: PS0 = 0;
  2748  0634  1001               	bcf	1,0	;volatile
  2749                           
  2750                           ;main.c: 71: PS1 = 0;
  2751  0635  1081               	bcf	1,1	;volatile
  2752                           
  2753                           ;main.c: 72: PS2 = 1;
  2754  0636  1501               	bsf	1,2	;volatile
  2755                           
  2756                           ;main.c: 74: TMR0IE = 1;
  2757  0637  168B               	bsf	11,5	;volatile
  2758                           
  2759                           ;main.c: 75: (GIE = 1);
  2760  0638  178B               	bsf	11,7	;volatile
  2761  0639  0008               	return
  2762  063A                     __end_of_initialise:	
  2763                           
  2764                           	psect	text14
  2765  05F4                     __ptext14:	
  2766 ;; *************** function _isr *****************
  2767 ;; Defined at:
  2768 ;;		line 24 in file "main.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2782 ;;      Params:         0       0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0
  2784 ;;      Temps:          5       0       0       0       0
  2785 ;;      Totals:         5       0       0       0       0
  2786 ;;Total ram usage:        5 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		Interrupt level 1
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _isr
  2797  05F4                     _isr:	
  2798                           
  2799                           ;main.c: 25: if (T0IF){
  2800  05F4  1D0B               	btfss	11,2	;volatile
  2801  05F5  2E19               	goto	i1l62
  2802                           
  2803                           ;main.c: 26: T0IF = 0;
  2804  05F6  110B               	bcf	11,2	;volatile
  2805                           
  2806                           ;main.c: 27: TMR0 = 100;
  2807  05F7  3064               	movlw	100
  2808  05F8  0081               	movwf	1	;volatile
  2809                           
  2810                           ;main.c: 31: if(!RB0) {
  2811  05F9  1806               	btfsc	6,0	;volatile
  2812  05FA  2E07               	goto	i1l981
  2813                           
  2814                           ;main.c: 32: rtcCounter++;
  2815  05FB  3001               	movlw	1
  2816  05FC  00F0               	movwf	??_isr
  2817  05FD  0870               	movf	??_isr,w
  2818  05FE  07F7               	addwf	_rtcCounter,f	;volatile
  2819                           
  2820                           ;main.c: 33: if(rtcCounter >10 &&pb0Released){
  2821  05FF  300B               	movlw	11
  2822  0600  0277               	subwf	_rtcCounter,w	;volatile
  2823  0601  1803               	btfsc	3,0
  2824  0602  1CF5               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  2825  0603  2E09               	goto	i1l985
  2826                           
  2827                           ;main.c: 34: pb0Pressed = 1;
  2828  0604  1475               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  2829                           
  2830                           ;main.c: 35: pb0Released = 0;
  2831  0605  10F5               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  2832                           
  2833                           ;main.c: 36: }
  2834                           ;main.c: 37: }
  2835  0606  2E09               	goto	i1l985
  2836  0607                     i1l981:	
  2837                           
  2838                           ;main.c: 38: else{
  2839                           ;main.c: 39: rtcCounter = 0;
  2840  0607  01F7               	clrf	_rtcCounter	;volatile
  2841                           
  2842                           ;main.c: 40: pb0Released = 1;
  2843  0608  14F5               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  2844  0609                     i1l985:	
  2845                           
  2846                           ;main.c: 41: }
  2847                           ;main.c: 43: if(!RB1) {
  2848  0609  1886               	btfsc	6,1	;volatile
  2849  060A  2E17               	goto	i1l995
  2850                           
  2851                           ;main.c: 44: rtcCounter2++;
  2852  060B  3001               	movlw	1
  2853  060C  00F0               	movwf	??_isr
  2854  060D  0870               	movf	??_isr,w
  2855  060E  07F8               	addwf	_rtcCounter2,f	;volatile
  2856                           
  2857                           ;main.c: 45: if(rtcCounter2 >10 &&pb1Released){
  2858  060F  300B               	movlw	11
  2859  0610  0278               	subwf	_rtcCounter2,w	;volatile
  2860  0611  1803               	btfsc	3,0
  2861  0612  1DF5               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  2862  0613  2E19               	goto	i1l62
  2863                           
  2864                           ;main.c: 46: pb1Pressed = 1;
  2865  0614  1575               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  2866                           
  2867                           ;main.c: 47: pb1Released = 0;
  2868  0615  11F5               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  2869                           
  2870                           ;main.c: 48: }
  2871                           ;main.c: 49: }
  2872  0616  2E19               	goto	i1l62
  2873  0617                     i1l995:	
  2874                           
  2875                           ;main.c: 50: else{
  2876                           ;main.c: 51: rtcCounter2 = 0;
  2877  0617  01F8               	clrf	_rtcCounter2	;volatile
  2878                           
  2879                           ;main.c: 52: pb1Released = 1;
  2880  0618  15F5               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  2881  0619                     i1l62:	
  2882  0619  0874               	movf	??_isr+4,w
  2883  061A  00FF               	movwf	127
  2884  061B  0873               	movf	??_isr+3,w
  2885  061C  008A               	movwf	10
  2886  061D  0872               	movf	??_isr+2,w
  2887  061E  0084               	movwf	4
  2888  061F  0E71               	swapf	(??_isr+1)^(0+-128),w
  2889  0620  0083               	movwf	3
  2890  0621  0EFE               	swapf	126,f
  2891  0622  0E7E               	swapf	126,w
  2892  0623  0009               	retfie
  2893  0624                     __end_of_isr:	
  2894  007E                     btemp	set	126	;btemp
  2895  007E                     wtemp	set	126
  2896  007E                     wtemp0	set	126
  2897  0080                     wtemp1	set	128
  2898  0082                     wtemp2	set	130
  2899  0084                     wtemp3	set	132
  2900  0086                     wtemp4	set	134
  2901  0088                     wtemp5	set	136
  2902  007F                     wtemp6	set	127
  2903  007E                     ttemp	set	126
  2904  007E                     ttemp0	set	126
  2905  0081                     ttemp1	set	129
  2906  0084                     ttemp2	set	132
  2907  0087                     ttemp3	set	135
  2908  007F                     ttemp4	set	127
  2909  007E                     ltemp	set	126
  2910  007E                     ltemp0	set	126
  2911  0082                     ltemp1	set	130
  2912  0086                     ltemp2	set	134
  2913  0080                     ltemp3	set	128
  2914                           
  2915                           	psect	intentry
  2916  0004                     __pintentry:	
  2917                           ;incstack = 0
  2918                           ; Regs used in _isr: [wreg+status,2+status,0]
  2919                           
  2920  0004                     interrupt_function:	
  2921  007E                     saved_w	set	btemp
  2922  0004  00FE               	movwf	btemp
  2923  0005  0E03               	swapf	3,w
  2924  0006  00F1               	movwf	??_isr+1
  2925  0007  0804               	movf	4,w
  2926  0008  00F2               	movwf	??_isr+2
  2927  0009  080A               	movf	10,w
  2928  000A  00F3               	movwf	??_isr+3
  2929  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2930  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2931  000D  087F               	movf	btemp+1,w
  2932  000E  00F4               	movwf	??_isr+4
  2933  000F  120A  118A  2DF4   	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     80      80
    BANK1            80     13      31
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_moveDeg
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    ___ftdiv->___ftneg

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11882
                                             11 BANK1      2     2      0
                         _initialise
                            _moveDeg
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   11882
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7555
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     191
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1     322
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      D      1F       7       38.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       9       1       64.3%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78      12        0.0%
ABS                  0      0      78       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Apr 01 20:48:35 2016

           ___altoft@exp 002E                        pc 0002              __CFG_CP$OFF 0000  
          ___altoft@sign 002F                       l90 0461                       fsr 0004  
           ___ftadd@exp1 0066             ___ftadd@exp2 0065             ___ftadd@sign 0064  
                    l355 03B8                      l356 03C0                      l348 03A3  
                    l439 0351                      l379 00D5                      _GIE 005F  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _PS0 0408                      _PS1 0409  
                    _PS2 040A             __CFG_CPD$OFF 0000                      _PSA 040B  
                    _isr 05F4                      fsr0 0004                      indf 0000  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000             ___ftdiv@cntr 003D  
           ___ftdiv@sign 0042                     l1103 0346                     l1105 0354  
                   l1109 0362                     l1321 04E8                     l1411 0557  
                   l1317 04C1                     l1413 0569                     l1077 02F7  
                   l1095 0329                     l1423 0591                     l1511 0513  
                   l1601 02B7                     l1097 0339                     l1531 0450  
                   l1443 005D                     l1381 038D                     l1373 0375  
                   l1461 0086                     l1551 0487                     l1471 00AC  
                   l1439 0056                     l1377 037C                     l1545 0476  
                   l1553 0488                     l1481 00D1                     l1473 00B0  
                   l1449 006C                     l1387 03A8                     l1379 0388  
                   l1467 009B                     l1619 01CB                     l1643 05E8  
                   l1635 05D6                     l1627 05C4                     l1389 03B2  
                   l1573 023D                     l1557 043D                     l1485 00E7  
                   l1469 00A7                     l1479 00C5                     l1593 0298  
                   l1489 00F9                     l1579 0253                     l1499 011C  
                   ?_isr 0070                     _T0IF 005A                     _T0CS 040D  
                   u1025 02FE                     u1055 032A                     _T0SE 040C  
                   u2205 02AA                     u1085 0348                     u2215 02B8  
                   u2175 0265                     u1705 03AB                     u2185 0277  
                   u2195 0299                     u1571 04B4                     u2267 05EE  
                   u1572 04B5                     u1573 04BA                     u2277 048C  
                   u1574 04BB                     u1591 04DB                     u1592 04DC  
                   u1745 03C7                     u1665 0381                     u1593 04E1  
                   u1594 04E2                     u1685 039C                     u1925 009C  
                   u1775 055C                     u1955 00B1                     u1895 0087  
                   u1985 00C6                     i1l62 0619                     _TMR0 0001  
           __CFG_WRT$OFF 0000                     _main 05BF             ___ftpack@arg 0020  
           ___ftpack@exp 0023                     _move 0439                     btemp 007E  
                   ltemp 007E                     start 0012                     ttemp 007E  
                   wtemp 007E             ___fttol@exp1 0050             ___fttol@lval 004C  
                  ??_isr 0070                    ?_main 0070          __end_of___ftadd 0136  
                  ?_move 0020            __CFG_WDTE$OFF 0000          __end_of___ftdiv 02DD  
        __end_of___ftneg 0665          __end_of___fttol 036B                    i1l981 0607  
                  i1l985 0609                    i1l995 0617                    _PORTC 0007  
                  _TRISB 0086                    _TRISC 0087                    _cstep 0076  
                  _frexp 0583                    _errno 00BD            ___ftpack@sign 0024  
                  _round 03D9                    _trunc 04F7          __end_of_moveDeg 0225  
         __pbitbssCOMMON 03A8           __CFG_BOREN$OFF 0000                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    move@i 0024                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 0015             __end_of_main 05F4             __end_of_move 0498  
                 ??_main 00BB            ___fttol@sign1 004B                   ??_move 0021  
                 ?_frexp 0020         __end_of___altoft 0583         __end_of___ftpack 03D9  
                 ?_round 0067                   ?_trunc 0051                   _TMR0IE 005D  
         __CFG_PWRTE$OFF 0000                   ___ftge 0498                ??___ftadd 0060  
              ??___ftdiv 0039                ??___ftneg 0075                ??___fttol 0047  
              ??_moveDeg 00B0                   saved_w 007E                   round@f 006A  
                 round@x 0067                   trunc@i 0055                   trunc@x 0051  
__end_of__initialization 0029               ___altoft@c 0028               ___ftadd@f1 005A  
             ___ftadd@f2 005D               ___ftge@ff1 0020               ___ftge@ff2 0023  
             ___ftdiv@f1 0036               ___ftdiv@f2 0033               ___ftdiv@f3 003E  
             ___ftneg@f1 0030               ___fttol@f1 0043           __pcstackCOMMON 0070  
           __pidataBANK1 064B               _pb0Pressed 03A8               _pb1Pressed 03AA  
          __end_of_frexp 05BF            __end_of_round 0439            __end_of_trunc 0541  
                ??_frexp 0024                  ??_round 0075                  ??_trunc 0054  
             __pbssBANK1 00BD               __pmaintext 05BF                  ?___ftge 0020  
             __pintentry 0004                ?___altoft 0028                ?___ftpack 0020  
          move@direction 0020          __size_of___ftge 005F                  ___ftadd 002D  
                ___ftdiv 0225                  ___ftneg 065B                  ___fttol 02DD  
             ??___altoft 002C               ??___ftpack 0025               _initialise 0624  
                __ptext1 0136                  __ptext2 03D9                  __ptext3 04F7  
                __ptext4 0583                  __ptext5 02DD                  __ptext6 0541  
                __ptext7 065B                  __ptext8 002D                  __ptext9 0439  
           __size_of_isr 0030                  _moveDeg 0136     end_of_initialization 0029  
     moveDeg@stepsToMove 00BA               _rtcCounter 0077              ___ftdiv@exp 0041  
            _pb0Released 03A9              _pb1Released 03AB           __end_of___ftge 04F7  
            ?_initialise 0070      start_initialization 0015              __end_of_isr 0624  
             frexp@value 0020                 ??___ftge 0026               init_fetch0 063A  
            __pdataBANK1 00A0        __size_of___altoft 0042        __size_of___ftpack 006E  
            __pbssCOMMON 0076                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00B0      __size_of_initialise 0016               moveDeg@deg 006D  
               ?___ftadd 005A                 ?___ftdiv 0033                 ?___ftneg 0030  
               ?___fttol 0043                 ?_moveDeg 006D           __size_of_frexp 003C  
         __size_of_round 0060           __size_of_trunc 004A        interrupt_function 0004  
              frexp@eptr 0023         __size_of___ftadd 0109         __size_of___ftdiv 00B8  
       __size_of___ftneg 000A                 ___altoft 0541         __size_of___fttol 008E  
           ??_initialise 0075                 ___ftpack 036B                 _allSteps 00A0  
       __size_of_moveDeg 00EF                 __ptext10 0498                 __ptext11 0225  
               __ptext12 036B                 __ptext13 0624                 __ptext14 05F4  
              move@steps 0023               trunc@expon 0058            __size_of_main 0035  
          __size_of_move 005F       __end_of_initialise 063A              _moveDeg$513 00B1  
            _moveDeg$514 00B4              _moveDeg$515 00B7                 init_ram0 063E  
               intlevel1 0000              _rtcCounter2 0078  
