

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Apr 02 17:42:47 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  000E                     	;# 
    51  000F                     	;# 
    52  0010                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0014                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001D                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  0087                     	;# 
    74  0088                     	;# 
    75  0089                     	;# 
    76  008C                     	;# 
    77  008D                     	;# 
    78  008E                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0094                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  009F                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  0087                     	;# 
   134  0088                     	;# 
   135  0089                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0008                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0088                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010E                     	;# 
   272  010F                     	;# 
   273  018C                     	;# 
   274  018D                     	;# 
   275                           
   276                           	psect	idataBANK1
   277  06B9                     __pidataBANK1:	
   278                           
   279                           ;initializer for _halfSteps
   280  06B9  343C               	retlw	60
   281  06BA  3400               	retlw	0
   282  06BB  342E               	retlw	46
   283  06BC  3400               	retlw	0
   284  06BD  342B               	retlw	43
   285  06BE  3400               	retlw	0
   286  06BF  3427               	retlw	39
   287  06C0  3400               	retlw	0
   288  06C1  3435               	retlw	53
   289  06C2  3400               	retlw	0
   290  06C3  3417               	retlw	23
   291  06C4  3400               	retlw	0
   292  06C5  341B               	retlw	27
   293  06C6  3400               	retlw	0
   294  06C7  341E               	retlw	30
   295  06C8  3400               	retlw	0
   296                           
   297                           ;initializer for _wholeSteps
   298  06C9  343C               	retlw	60
   299  06CA  3400               	retlw	0
   300  06CB  342B               	retlw	43
   301  06CC  3400               	retlw	0
   302  06CD  3435               	retlw	53
   303  06CE  3400               	retlw	0
   304  06CF  341B               	retlw	27
   305  06D0  3400               	retlw	0
   306  001F                     _ADCON0	set	31
   307  001E                     _ADRESH	set	30
   308  0007                     _PORTC	set	7
   309  0001                     _TMR0	set	1
   310  0066                     _ADIF	set	102
   311  005F                     _GIE	set	95
   312  00FA                     _GO	set	250
   313  005E                     _PEIE	set	94
   314  0030                     _RB0	set	48
   315  0031                     _RB1	set	49
   316  0032                     _RB2	set	50
   317  0033                     _RB3	set	51
   318  0034                     _RB4	set	52
   319  005A                     _T0IF	set	90
   320  005D                     _TMR0IE	set	93
   321  009F                     _ADCON1	set	159
   322  009E                     _ADRESL	set	158
   323  0086                     _TRISB	set	134
   324  0087                     _TRISC	set	135
   325  0466                     _ADIE	set	1126
   326  0408                     _PS0	set	1032
   327  0409                     _PS1	set	1033
   328  040A                     _PS2	set	1034
   329  040B                     _PSA	set	1035
   330  040D                     _T0CS	set	1037
   331  040C                     _T0SE	set	1036
   332                           
   333                           ; #config settings
   334  0000                     
   335                           	psect	cinit
   336  0015                     start_initialization:	
   337  0015                     __initialization:	
   338                           
   339                           ; Clear objects allocated to BITCOMMON
   340  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   341                           
   342                           ; Clear objects allocated to COMMON
   343  0016  01F6               	clrf	__pbssCOMMON& (0+127)
   344  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   345  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   346  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   347                           
   348                           ; Clear objects allocated to BANK1
   349  001A  1683               	bsf	3,5	;RP0=1, select bank1
   350  001B  1303               	bcf	3,6	;RP1=0, select bank1
   351  001C  01C7               	clrf	__pbssBANK1& (0+127)
   352  001D  01C8               	clrf	(__pbssBANK1+1)& (0+127)
   353                           
   354                           ; Initialize objects allocated to BANK1
   355  001E  1383               	bcf	3,7	;select IRP bank0
   356  001F  30B8               	movlw	low (__pdataBANK1+24)
   357  0020  00FD               	movwf	btemp+-1
   358  0021  3006               	movlw	high __pidataBANK1
   359  0022  00FE               	movwf	btemp
   360  0023  30B9               	movlw	low __pidataBANK1
   361  0024  00FF               	movwf	btemp+1
   362  0025  30A0               	movlw	low __pdataBANK1
   363  0026  0084               	movwf	4
   364  0027  120A  118A  26EB   	fcall	init_ram0
   365  002A                     end_of_initialization:	
   366                           ;End of C runtime variable initialization code
   367                           
   368  002A                     __end_of__initialization:	
   369  002A  0183               	clrf	3
   370  002B  120A  118A  2BDA   	ljmp	_main	;jump to C main() function
   371                           
   372                           	psect	bitbssCOMMON
   373  0380                     __pbitbssCOMMON:	
   374  0380                     _conversionDone:	
   375  0380                     	ds	1
   376  0381                     _motorToggle:	
   377  0381                     	ds	1
   378  0382                     _pb0Pressed:	
   379  0382                     	ds	1
   380  0383                     _pb0Released:	
   381  0383                     	ds	1
   382  0384                     _pb1Pressed:	
   383  0384                     	ds	1
   384  0385                     _pb1Released:	
   385  0385                     	ds	1
   386  0386                     _pb2Pressed:	
   387  0386                     	ds	1
   388  0387                     _pb2Released:	
   389  0387                     	ds	1
   390                           
   391                           	psect	bssCOMMON
   392  0076                     __pbssCOMMON:	
   393  0076                     _cstep:	
   394  0076                     	ds	1
   395  0077                     _rtcCounter:	
   396  0077                     	ds	1
   397  0078                     _rtcCounter2:	
   398  0078                     	ds	1
   399  0079                     _rtcCounter3:	
   400  0079                     	ds	1
   401                           
   402                           	psect	bssBANK1
   403  00C7                     __pbssBANK1:	
   404  00C7                     _errno:	
   405  00C7                     	ds	2
   406                           
   407                           	psect	dataBANK1
   408  00A0                     __pdataBANK1:	
   409  00A0                     _halfSteps:	
   410  00A0                     	ds	16
   411  00B0                     _wholeSteps:	
   412  00B0                     	ds	8
   413                           
   414                           	psect	inittext
   415  06E7                     init_fetch0:	
   416                           ;	Called with low address in FSR and high address in W
   417                           
   418  06E7  087E               	movf	126,w
   419  06E8  008A               	movwf	10
   420  06E9  087F               	movf	127,w
   421  06EA  0082               	movwf	2
   422  06EB                     init_ram0:	
   423                           ;Called with:
   424                           ;	high address of idata address in btemp 
   425                           ;	low address of idata address in btemp+1 
   426                           ;	low address of data in FSR
   427                           ;	high address + 1 of data in btemp-1
   428                           
   429  06EB  26E7  120A  118A   	fcall	init_fetch0
   430  06EE  0080               	movwf	0
   431  06EF  0A84               	incf	4,f
   432  06F0  0804               	movf	4,w
   433  06F1  067D               	xorwf	125,w
   434  06F2  1903               	btfsc	3,2
   435  06F3  3400               	retlw	0
   436  06F4  0AFF               	incf	127,f
   437  06F5  1903               	btfsc	3,2
   438  06F6  0AFE               	incf	126,f
   439  06F7  2EEB               	goto	init_ram0
   440                           
   441                           	psect	cstackBANK1
   442  00B8                     __pcstackBANK1:	
   443  00B8                     ??_moveDeg:	
   444                           
   445                           ; 1 bytes @ 0x0
   446  00B8                     	ds	1
   447  00B9                     _moveDeg$570:	
   448                           
   449                           ; 3 bytes @ 0x1
   450  00B9                     	ds	3
   451  00BC                     _moveDeg$571:	
   452                           
   453                           ; 3 bytes @ 0x4
   454  00BC                     	ds	3
   455  00BF                     _moveDeg$572:	
   456                           
   457                           ; 3 bytes @ 0x7
   458  00BF                     	ds	3
   459  00C2                     moveDeg@stepsToMove:	
   460                           
   461                           ; 1 bytes @ 0xA
   462  00C2                     	ds	1
   463  00C3                     ??_main:	
   464                           
   465                           ; 1 bytes @ 0xB
   466  00C3                     	ds	2
   467  00C5                     main@result:	
   468                           
   469                           ; 2 bytes @ 0xD
   470  00C5                     	ds	2
   471                           
   472                           	psect	cstackCOMMON
   473  0071                     __pcstackCOMMON:	
   474  0071                     ?_debounceButtons:	
   475  0071                     ??_debounceButtons:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0071                     ?_initializeADC:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0071                     ?_startADCConversion:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0071                     ?_isr:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0071                     ?_initialise:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0071                     ?_main:	
   491                           ; 1 bytes @ 0x0
   492                           
   493                           
   494                           ; 1 bytes @ 0x0
   495  0071                     	ds	1
   496  0072                     ??_isr:	
   497                           
   498                           ; 1 bytes @ 0x1
   499  0072                     	ds	4
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503  0020                     ?___ftge:	
   504  0020                     ??_initializeADC:	
   505                           ; 1 bit 
   506                           
   507  0020                     ??_startADCConversion:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0020                     ?_move:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0020                     ??_initialise:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0020                     ?_readADCData:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0020                     ?___ftpack:	
   520                           ; 2 bytes @ 0x0
   521                           
   522  0020                     ?_frexp:	
   523                           ; 3 bytes @ 0x0
   524                           
   525  0020                     move@direction:	
   526                           ; 3 bytes @ 0x0
   527                           
   528  0020                     ___ftpack@arg:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0020                     ___ftge@ff1:	
   532                           ; 3 bytes @ 0x0
   533                           
   534  0020                     frexp@value:	
   535                           ; 3 bytes @ 0x0
   536                           
   537                           
   538                           ; 3 bytes @ 0x0
   539  0020                     	ds	1
   540  0021                     ??_move:	
   541                           
   542                           ; 1 bytes @ 0x1
   543  0021                     	ds	1
   544  0022                     ??_readADCData:	
   545  0022                     readADCData@ADCResult:	
   546                           ; 1 bytes @ 0x2
   547                           
   548                           
   549                           ; 2 bytes @ 0x2
   550  0022                     	ds	1
   551  0023                     move@steps:	
   552  0023                     ___ftpack@exp:	
   553                           ; 1 bytes @ 0x3
   554                           
   555  0023                     frexp@eptr:	
   556                           ; 1 bytes @ 0x3
   557                           
   558  0023                     ___ftge@ff2:	
   559                           ; 1 bytes @ 0x3
   560                           
   561                           
   562                           ; 3 bytes @ 0x3
   563  0023                     	ds	1
   564  0024                     ??_frexp:	
   565  0024                     move@i:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0024                     ___ftpack@sign:	
   569                           ; 1 bytes @ 0x4
   570                           
   571                           
   572                           ; 1 bytes @ 0x4
   573  0024                     	ds	1
   574  0025                     ??___ftpack:	
   575                           
   576                           ; 1 bytes @ 0x5
   577  0025                     	ds	1
   578  0026                     ??___ftge:	
   579                           
   580                           ; 1 bytes @ 0x6
   581  0026                     	ds	2
   582  0028                     ?___altoft:	
   583  0028                     ___altoft@c:	
   584                           ; 3 bytes @ 0x8
   585                           
   586                           
   587                           ; 4 bytes @ 0x8
   588  0028                     	ds	4
   589  002C                     ??___altoft:	
   590                           
   591                           ; 1 bytes @ 0xC
   592  002C                     	ds	2
   593  002E                     ___altoft@exp:	
   594                           
   595                           ; 1 bytes @ 0xE
   596  002E                     	ds	1
   597  002F                     ___altoft@sign:	
   598                           
   599                           ; 1 bytes @ 0xF
   600  002F                     	ds	1
   601  0030                     ?___ftneg:	
   602  0030                     ___ftneg@f1:	
   603                           ; 3 bytes @ 0x10
   604                           
   605                           
   606                           ; 3 bytes @ 0x10
   607  0030                     	ds	3
   608  0033                     ??___ftneg:	
   609  0033                     ?___ftdiv:	
   610                           ; 1 bytes @ 0x13
   611                           
   612  0033                     ___ftdiv@f2:	
   613                           ; 3 bytes @ 0x13
   614                           
   615                           
   616                           ; 3 bytes @ 0x13
   617  0033                     	ds	3
   618  0036                     ___ftdiv@f1:	
   619                           
   620                           ; 3 bytes @ 0x16
   621  0036                     	ds	3
   622  0039                     ??___ftdiv:	
   623                           
   624                           ; 1 bytes @ 0x19
   625  0039                     	ds	4
   626  003D                     ___ftdiv@cntr:	
   627                           
   628                           ; 1 bytes @ 0x1D
   629  003D                     	ds	1
   630  003E                     ___ftdiv@f3:	
   631                           
   632                           ; 3 bytes @ 0x1E
   633  003E                     	ds	3
   634  0041                     ___ftdiv@exp:	
   635                           
   636                           ; 1 bytes @ 0x21
   637  0041                     	ds	1
   638  0042                     ___ftdiv@sign:	
   639                           
   640                           ; 1 bytes @ 0x22
   641  0042                     	ds	1
   642  0043                     ?___fttol:	
   643  0043                     ___fttol@f1:	
   644                           ; 4 bytes @ 0x23
   645                           
   646                           
   647                           ; 3 bytes @ 0x23
   648  0043                     	ds	4
   649  0047                     ??___fttol:	
   650                           
   651                           ; 1 bytes @ 0x27
   652  0047                     	ds	4
   653  004B                     ___fttol@sign1:	
   654                           
   655                           ; 1 bytes @ 0x2B
   656  004B                     	ds	1
   657  004C                     ___fttol@lval:	
   658                           
   659                           ; 4 bytes @ 0x2C
   660  004C                     	ds	4
   661  0050                     ___fttol@exp1:	
   662                           
   663                           ; 1 bytes @ 0x30
   664  0050                     	ds	1
   665  0051                     ?_trunc:	
   666  0051                     trunc@x:	
   667                           ; 3 bytes @ 0x31
   668                           
   669                           
   670                           ; 3 bytes @ 0x31
   671  0051                     	ds	3
   672  0054                     ??_trunc:	
   673                           
   674                           ; 1 bytes @ 0x34
   675  0054                     	ds	1
   676  0055                     trunc@i:	
   677                           
   678                           ; 3 bytes @ 0x35
   679  0055                     	ds	3
   680  0058                     trunc@expon:	
   681                           
   682                           ; 2 bytes @ 0x38
   683  0058                     	ds	2
   684  005A                     ?___ftadd:	
   685  005A                     ___ftadd@f1:	
   686                           ; 3 bytes @ 0x3A
   687                           
   688                           
   689                           ; 3 bytes @ 0x3A
   690  005A                     	ds	3
   691  005D                     ___ftadd@f2:	
   692                           
   693                           ; 3 bytes @ 0x3D
   694  005D                     	ds	3
   695  0060                     ??___ftadd:	
   696                           
   697                           ; 1 bytes @ 0x40
   698  0060                     	ds	4
   699  0064                     ___ftadd@sign:	
   700                           
   701                           ; 1 bytes @ 0x44
   702  0064                     	ds	1
   703  0065                     ___ftadd@exp2:	
   704                           
   705                           ; 1 bytes @ 0x45
   706  0065                     	ds	1
   707  0066                     ___ftadd@exp1:	
   708                           
   709                           ; 1 bytes @ 0x46
   710  0066                     	ds	1
   711  0067                     ?_round:	
   712  0067                     round@x:	
   713                           ; 3 bytes @ 0x47
   714                           
   715                           
   716                           ; 3 bytes @ 0x47
   717  0067                     	ds	3
   718  006A                     ??_round:	
   719  006A                     round@f:	
   720                           ; 1 bytes @ 0x4A
   721                           
   722                           
   723                           ; 3 bytes @ 0x4A
   724  006A                     	ds	3
   725  006D                     ?_moveDeg:	
   726  006D                     moveDeg@deg:	
   727                           ; 1 bytes @ 0x4D
   728                           
   729                           
   730                           ; 3 bytes @ 0x4D
   731  006D                     	ds	3
   732                           
   733                           	psect	maintext
   734  03DA                     __pmaintext:	
   735 ;;
   736 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   737 ;;
   738 ;; *************** function _main *****************
   739 ;; Defined at:
   740 ;;		line 45 in file "main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  result          2   13[BANK1 ] int 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : B00/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       0       0       0       0
   755 ;;      Locals:         0       0       2       0       0
   756 ;;      Temps:          0       0       2       0       0
   757 ;;      Totals:         0       0       4       0       0
   758 ;;Total ram usage:        4 bytes
   759 ;; Hardware stack levels required when called:    7
   760 ;; This function calls:
   761 ;;		_initialise
   762 ;;		_initializeADC
   763 ;;		_move
   764 ;;		_moveDeg
   765 ;;		_readADCData
   766 ;;		_startADCConversion
   767 ;; This function is called by:
   768 ;;		Startup code after reset
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           
   773                           ;psect for function _main
   774  03DA                     _main:	
   775                           
   776                           ;main.c: 47: initialise();
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   780  03DA  120A  118A  26D1  120A  118A  	fcall	_initialise
   781                           
   782                           ;main.c: 48: initializeADC();
   783  03DF  120A  118A  26F8  120A  118A  	fcall	_initializeADC
   784                           
   785                           ;main.c: 49: startADCConversion();
   786  03E4  120A  118A  2707  120A  118A  	fcall	_startADCConversion
   787  03E9                     l1925:	
   788                           ;main.c: 52: while(1){
   789                           
   790                           
   791                           ;main.c: 55: if(conversionDone){
   792  03E9  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   793  03EA  2C02               	goto	l1933
   794                           
   795                           ;main.c: 56: conversionDone = 0;
   796  03EB  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
   797                           
   798                           ;main.c: 57: int result = readADCData();
   799  03EC  120A  118A  25ED  120A  118A  	fcall	_readADCData
   800  03F1  1283               	bcf	3,5	;RP0=0, select bank0
   801  03F2  1303               	bcf	3,6	;RP1=0, select bank0
   802  03F3  0821               	movf	?_readADCData+1,w
   803  03F4  1683               	bsf	3,5	;RP0=1, select bank1
   804  03F5  1303               	bcf	3,6	;RP1=0, select bank1
   805  03F6  00C6               	movwf	(main@result+1)^(0+128)
   806  03F7  1283               	bcf	3,5	;RP0=0, select bank0
   807  03F8  1303               	bcf	3,6	;RP1=0, select bank0
   808  03F9  0820               	movf	?_readADCData,w
   809  03FA  1683               	bsf	3,5	;RP0=1, select bank1
   810  03FB  1303               	bcf	3,6	;RP1=0, select bank1
   811  03FC  00C5               	movwf	main@result^(0+128)
   812                           
   813                           ;main.c: 58: startADCConversion();
   814  03FD  120A  118A  2707  120A  118A  	fcall	_startADCConversion
   815  0402                     l1933:	
   816                           
   817                           ;main.c: 60: }
   818                           ;main.c: 61: if(pb0Pressed){
   819  0402  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   820  0403  2C0E               	goto	l1939
   821                           
   822                           ;main.c: 62: move(1,0);
   823  0404  1283               	bcf	3,5	;RP0=0, select bank0
   824  0405  1303               	bcf	3,6	;RP1=0, select bank0
   825  0406  01A0               	clrf	move@direction
   826  0407  3001               	movlw	1
   827  0408  120A  118A  24A3  120A  118A  	fcall	_move
   828                           
   829                           ;main.c: 63: pb0Pressed = 0;
   830  040D  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
   831  040E                     l1939:	
   832                           
   833                           ;main.c: 64: }
   834                           ;main.c: 65: if(pb1Pressed){
   835  040E  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   836  040F  2C1B               	goto	l1945
   837                           
   838                           ;main.c: 66: move(1,1);
   839  0410  1283               	bcf	3,5	;RP0=0, select bank0
   840  0411  1303               	bcf	3,6	;RP1=0, select bank0
   841  0412  01A0               	clrf	move@direction
   842  0413  0AA0               	incf	move@direction,f
   843  0414  3001               	movlw	1
   844  0415  120A  118A  24A3  120A  118A  	fcall	_move
   845                           
   846                           ;main.c: 67: pb1Pressed = 0;
   847  041A  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
   848  041B                     l1945:	
   849                           
   850                           ;main.c: 68: }
   851                           ;main.c: 69: if(pb2Pressed){
   852  041B  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   853  041C  2C37               	goto	l1957
   854                           
   855                           ;main.c: 70: if(motorToggle){
   856  041D  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
   857  041E  2C27               	goto	l1951
   858                           
   859                           ;main.c: 71: moveDeg(-180);
   860  041F  3000               	movlw	0
   861  0420  1283               	bcf	3,5	;RP0=0, select bank0
   862  0421  1303               	bcf	3,6	;RP1=0, select bank0
   863  0422  00ED               	movwf	moveDeg@deg
   864  0423  3034               	movlw	52
   865  0424  00EE               	movwf	moveDeg@deg+1
   866  0425  30C3               	movlw	195
   867  0426  2C2E               	goto	L1
   868  0427                     l1951:	
   869                           ;main.c: 72: }
   870                           
   871                           
   872                           ;main.c: 73: else{
   873                           ;main.c: 74: moveDeg(180);
   874  0427  3000               	movlw	0
   875  0428  1283               	bcf	3,5	;RP0=0, select bank0
   876  0429  1303               	bcf	3,6	;RP1=0, select bank0
   877  042A  00ED               	movwf	moveDeg@deg
   878  042B  3034               	movlw	52
   879  042C  00EE               	movwf	moveDeg@deg+1
   880  042D  3043               	movlw	67
   881  042E                     L1:	
   882  042E  00EF               	movwf	moveDeg@deg+2
   883  042F  120A  118A  2137  120A  118A  	fcall	_moveDeg
   884                           
   885                           ;main.c: 75: }
   886                           ;main.c: 76: motorToggle = !motorToggle;
   887  0434  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
   888  0435  06F0               	xorwf	_motorToggle/(0+8),f
   889                           
   890                           ;main.c: 77: pb2Pressed = 0;
   891  0436  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
   892  0437                     l1957:	
   893                           
   894                           ;main.c: 78: }
   895                           ;main.c: 79: _delay((unsigned long)((20)*(20000000/4000.0)));
   896  0437  3082               	movlw	130
   897  0438  1683               	bsf	3,5	;RP0=1, select bank1
   898  0439  1303               	bcf	3,6	;RP1=0, select bank1
   899  043A  00C4               	movwf	(??_main^(0+128)+1)
   900  043B  30DD               	movlw	221
   901  043C  00C3               	movwf	??_main^(0+128)
   902  043D                     u2497:	
   903  043D  0BC3               	decfsz	??_main^(0+128),f
   904  043E  2C3D               	goto	u2497
   905  043F  0BC4               	decfsz	(??_main^(0+128)+1),f
   906  0440  2C3D               	goto	u2497
   907  0441  2C42               	nop2
   908  0442  2BE9               	goto	l1925
   909  0443                     __end_of_main:	
   910                           
   911                           	psect	text1
   912  0707                     __ptext1:	
   913 ;; *************** function _startADCConversion *****************
   914 ;; Defined at:
   915 ;;		line 40 in file "adConv.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   929 ;;      Params:         0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0
   931 ;;      Temps:          0       2       0       0       0
   932 ;;      Totals:         0       2       0       0       0
   933 ;;Total ram usage:        2 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    2
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           
   944                           ;psect for function _startADCConversion
   945  0707                     _startADCConversion:	
   946                           
   947                           ;adConv.c: 42: _delay((unsigned long)((1)*(20000000/4000.0)));
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _startADCConversion: [wreg]
   951  0707  3007               	movlw	7
   952  0708  1283               	bcf	3,5	;RP0=0, select bank0
   953  0709  1303               	bcf	3,6	;RP1=0, select bank0
   954  070A  00A1               	movwf	??_startADCConversion+1
   955  070B  307D               	movlw	125
   956  070C  00A0               	movwf	??_startADCConversion
   957  070D                     u2507:	
   958  070D  0BA0               	decfsz	??_startADCConversion,f
   959  070E  2F0D               	goto	u2507
   960  070F  0BA1               	decfsz	??_startADCConversion+1,f
   961  0710  2F0D               	goto	u2507
   962                           
   963                           ;adConv.c: 44: GO = 1;
   964  0711  1283               	bcf	3,5	;RP0=0, select bank0
   965  0712  1303               	bcf	3,6	;RP1=0, select bank0
   966  0713  151F               	bsf	31,2	;volatile
   967  0714  0008               	return
   968  0715                     __end_of_startADCConversion:	
   969                           
   970                           	psect	text2
   971  05ED                     __ptext2:	
   972 ;; *************** function _readADCData *****************
   973 ;; Defined at:
   974 ;;		line 20 in file "adConv.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  ADCResult       2    2[BANK0 ] int 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2    0[BANK0 ] int 
   981 ;; Registers used:
   982 ;;		wreg, btemp+1
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   988 ;;      Params:         0       2       0       0       0
   989 ;;      Locals:         0       2       0       0       0
   990 ;;      Temps:          0       0       0       0       0
   991 ;;      Totals:         0       4       0       0       0
   992 ;;Total ram usage:        4 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    2
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
  1003                           ;psect for function _readADCData
  1004  05ED                     _readADCData:	
  1005                           
  1006                           ;adConv.c: 22: int ADCResult = (ADRESH<<8) + ADRESL ;
  1007                           
  1008                           ;incstack = 0
  1009                           ; Regs used in _readADCData: [wreg+btemp+1]
  1010  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1011  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1012  05EF  081E               	movf	30,w	;volatile
  1013  05F0  00A3               	movwf	readADCData@ADCResult+1
  1014  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  1015  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  1016  05F3  081E               	movf	30,w	;volatile
  1017  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1018  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1019  05F6  00A2               	movwf	readADCData@ADCResult
  1020                           
  1021                           ;adConv.c: 24: if(ADCResult>1000){
  1022  05F7  0823               	movf	readADCData@ADCResult+1,w
  1023  05F8  3A80               	xorlw	128
  1024  05F9  00FF               	movwf	127
  1025  05FA  3083               	movlw	131
  1026  05FB  027F               	subwf	127,w
  1027  05FC  1D03               	skipz
  1028  05FD  2E00               	goto	u2405
  1029  05FE  30E9               	movlw	233
  1030  05FF  0222               	subwf	readADCData@ADCResult,w
  1031  0600                     u2405:	
  1032  0600  1C03               	skipc
  1033  0601  2E06               	goto	l1897
  1034                           
  1035                           ;adConv.c: 25: RB3 = 0;
  1036  0602  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0603  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0604  1186               	bcf	6,3	;volatile
  1039  0605  2E28               	goto	L2
  1040  0606                     l1897:	
  1041                           ;adConv.c: 27: }
  1042                           
  1043                           ;adConv.c: 26: RB4 = 1;
  1044                           
  1045                           
  1046                           ;adConv.c: 28: else if (ADCResult<1000&&ADCResult>400){
  1047  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0608  0823               	movf	readADCData@ADCResult+1,w
  1050  0609  3A80               	xorlw	128
  1051  060A  00FF               	movwf	127
  1052  060B  3083               	movlw	131
  1053  060C  027F               	subwf	127,w
  1054  060D  1D03               	skipz
  1055  060E  2E11               	goto	u2415
  1056  060F  30E8               	movlw	232
  1057  0610  0222               	subwf	readADCData@ADCResult,w
  1058  0611                     u2415:	
  1059  0611  1803               	skipnc
  1060  0612  2E25               	goto	l194
  1061  0613  1283               	bcf	3,5	;RP0=0, select bank0
  1062  0614  1303               	bcf	3,6	;RP1=0, select bank0
  1063  0615  0823               	movf	readADCData@ADCResult+1,w
  1064  0616  3A80               	xorlw	128
  1065  0617  00FF               	movwf	127
  1066  0618  3081               	movlw	129
  1067  0619  027F               	subwf	127,w
  1068  061A  1D03               	skipz
  1069  061B  2E1E               	goto	u2425
  1070  061C  3091               	movlw	145
  1071  061D  0222               	subwf	readADCData@ADCResult,w
  1072  061E                     u2425:	
  1073  061E  1C03               	skipc
  1074  061F  2E25               	goto	l194
  1075                           
  1076                           ;adConv.c: 29: RB3 = 1;
  1077  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1079  0622  1586               	bsf	6,3	;volatile
  1080                           
  1081                           ;adConv.c: 30: RB4 = 0;
  1082  0623  1206               	bcf	6,4	;volatile
  1083                           
  1084                           ;adConv.c: 31: }
  1085  0624  2E29               	goto	l1903
  1086  0625                     l194:	
  1087                           
  1088                           ;adConv.c: 33: else{
  1089                           ;adConv.c: 34: RB3 = 1;
  1090  0625  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0626  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0627  1586               	bsf	6,3	;volatile
  1093  0628                     L2:	
  1094                           
  1095                           ;adConv.c: 35: RB4 = 1;
  1096  0628  1606               	bsf	6,4	;volatile
  1097  0629                     l1903:	
  1098                           
  1099                           ;adConv.c: 36: }
  1100                           ;adConv.c: 37: return ADCResult;
  1101  0629  0823               	movf	readADCData@ADCResult+1,w
  1102  062A  00A1               	movwf	?_readADCData+1
  1103  062B  0822               	movf	readADCData@ADCResult,w
  1104  062C  00A0               	movwf	?_readADCData
  1105  062D  0008               	return
  1106  062E                     __end_of_readADCData:	
  1107                           
  1108                           	psect	text3
  1109  0137                     __ptext3:	
  1110 ;; *************** function _moveDeg *****************
  1111 ;; Defined at:
  1112 ;;		line 46 in file "motor.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  deg             3   77[BANK0 ] int 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1126 ;;      Params:         0       3       0       0       0
  1127 ;;      Locals:         0       0      10       0       0
  1128 ;;      Temps:          0       0       1       0       0
  1129 ;;      Totals:         0       3      11       0       0
  1130 ;;Total ram usage:       14 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    6
  1133 ;; This function calls:
  1134 ;;		___ftdiv
  1135 ;;		___ftge
  1136 ;;		___ftneg
  1137 ;;		___fttol
  1138 ;;		_move
  1139 ;;		_round
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           
  1146                           ;psect for function _moveDeg
  1147  0137                     _moveDeg:	
  1148                           
  1149                           ;motor.c: 47: char stepsToMove;
  1150                           ;motor.c: 48: if(deg<0){
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1154  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0139  086D               	movf	moveDeg@deg,w
  1157  013A  00A0               	movwf	___ftge@ff1
  1158  013B  086E               	movf	moveDeg@deg+1,w
  1159  013C  00A1               	movwf	___ftge@ff1+1
  1160  013D  086F               	movf	moveDeg@deg+2,w
  1161  013E  00A2               	movwf	___ftge@ff1+2
  1162  013F  3000               	movlw	0
  1163  0140  00A3               	movwf	___ftge@ff2
  1164  0141  3000               	movlw	0
  1165  0142  00A4               	movwf	___ftge@ff2+1
  1166  0143  3000               	movlw	0
  1167  0144  00A5               	movwf	___ftge@ff2+2
  1168  0145  120A  118A  2502  120A  118A  	fcall	___ftge
  1169  014A  1803               	btfsc	3,0
  1170  014B  29CC               	goto	l1917
  1171                           
  1172                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1173  014C  1283               	bcf	3,5	;RP0=0, select bank0
  1174  014D  1303               	bcf	3,6	;RP1=0, select bank0
  1175  014E  086D               	movf	moveDeg@deg,w
  1176  014F  00B0               	movwf	___ftneg@f1
  1177  0150  086E               	movf	moveDeg@deg+1,w
  1178  0151  00B1               	movwf	___ftneg@f1+1
  1179  0152  086F               	movf	moveDeg@deg+2,w
  1180  0153  00B2               	movwf	___ftneg@f1+2
  1181  0154  120A  118A  2715  120A  118A  	fcall	___ftneg
  1182  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1183  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1184  015B  0830               	movf	?___ftneg,w
  1185  015C  00B6               	movwf	___ftdiv@f1
  1186  015D  0831               	movf	?___ftneg+1,w
  1187  015E  00B7               	movwf	___ftdiv@f1+1
  1188  015F  0832               	movf	?___ftneg+2,w
  1189  0160  00B8               	movwf	___ftdiv@f1+2
  1190  0161  3000               	movlw	0
  1191  0162  00B3               	movwf	___ftdiv@f2
  1192  0163  3070               	movlw	112
  1193  0164  00B4               	movwf	___ftdiv@f2+1
  1194  0165  3040               	movlw	64
  1195  0166  00B5               	movwf	___ftdiv@f2+2
  1196  0167  120A  118A  2226  120A  118A  	fcall	___ftdiv
  1197  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1198  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1199  016E  0833               	movf	?___ftdiv,w
  1200  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1201  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1202  0171  00B9               	movwf	_moveDeg$570^(0+128)
  1203  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0174  0834               	movf	?___ftdiv+1,w
  1206  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0177  00BA               	movwf	(_moveDeg$570+1)^(0+128)
  1209  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1211  017A  0835               	movf	?___ftdiv+2,w
  1212  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1213  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1214  017D  00BB               	movwf	(_moveDeg$570+2)^(0+128)
  1215                           
  1216                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1217  017E  0839               	movf	_moveDeg$570^(0+128),w
  1218  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0181  00E7               	movwf	round@x
  1221  0182  1683               	bsf	3,5	;RP0=1, select bank1
  1222  0183  1303               	bcf	3,6	;RP1=0, select bank1
  1223  0184  083A               	movf	(_moveDeg$570+1)^(0+128),w
  1224  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0187  00E8               	movwf	round@x+1
  1227  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1228  0189  1303               	bcf	3,6	;RP1=0, select bank1
  1229  018A  083B               	movf	(_moveDeg$570+2)^(0+128),w
  1230  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1231  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1232  018D  00E9               	movwf	round@x+2
  1233  018E  120A  118A  2443  120A  118A  	fcall	_round
  1234  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0195  0867               	movf	?_round,w
  1237  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1238  0197  1303               	bcf	3,6	;RP1=0, select bank1
  1239  0198  00BC               	movwf	_moveDeg$571^(0+128)
  1240  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1241  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1242  019B  0868               	movf	?_round+1,w
  1243  019C  1683               	bsf	3,5	;RP0=1, select bank1
  1244  019D  1303               	bcf	3,6	;RP1=0, select bank1
  1245  019E  00BD               	movwf	(_moveDeg$571+1)^(0+128)
  1246  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1247  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1248  01A1  0869               	movf	?_round+2,w
  1249  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1250  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  1251  01A4  00BE               	movwf	(_moveDeg$571+2)^(0+128)
  1252                           
  1253                           ;motor.c: 49: stepsToMove = (char) round(-deg/(7.5/2.0));
  1254  01A5  083C               	movf	_moveDeg$571^(0+128),w
  1255  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1256  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1257  01A8  00C3               	movwf	___fttol@f1
  1258  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1259  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  1260  01AB  083D               	movf	(_moveDeg$571+1)^(0+128),w
  1261  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1262  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1263  01AE  00C4               	movwf	___fttol@f1+1
  1264  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1265  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1266  01B1  083E               	movf	(_moveDeg$571+2)^(0+128),w
  1267  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1268  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1269  01B4  00C5               	movwf	___fttol@f1+2
  1270  01B5  120A  118A  22DE  120A  118A  	fcall	___fttol
  1271  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1272  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1273  01BC  0843               	movf	?___fttol,w
  1274  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1275  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1276  01BF  00B8               	movwf	??_moveDeg^(0+128)
  1277  01C0  0838               	movf	??_moveDeg^(0+128),w
  1278  01C1  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1279                           
  1280                           ;motor.c: 50: move(stepsToMove,0);
  1281  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1282  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1283  01C4  01A0               	clrf	move@direction
  1284  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  1285  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  1286  01C7  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1287  01C8  120A  118A  24A3   	fcall	_move
  1288                           
  1289                           ;motor.c: 51: }
  1290  01CB  0008               	return
  1291  01CC                     l1917:	
  1292                           
  1293                           ;motor.c: 52: else{
  1294                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1295  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1296  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1297  01CE  086D               	movf	moveDeg@deg,w
  1298  01CF  00B6               	movwf	___ftdiv@f1
  1299  01D0  086E               	movf	moveDeg@deg+1,w
  1300  01D1  00B7               	movwf	___ftdiv@f1+1
  1301  01D2  086F               	movf	moveDeg@deg+2,w
  1302  01D3  00B8               	movwf	___ftdiv@f1+2
  1303  01D4  3000               	movlw	0
  1304  01D5  00B3               	movwf	___ftdiv@f2
  1305  01D6  3070               	movlw	112
  1306  01D7  00B4               	movwf	___ftdiv@f2+1
  1307  01D8  3040               	movlw	64
  1308  01D9  00B5               	movwf	___ftdiv@f2+2
  1309  01DA  120A  118A  2226  120A  118A  	fcall	___ftdiv
  1310  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1311  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1312  01E1  0833               	movf	?___ftdiv,w
  1313  01E2  00E7               	movwf	round@x
  1314  01E3  0834               	movf	?___ftdiv+1,w
  1315  01E4  00E8               	movwf	round@x+1
  1316  01E5  0835               	movf	?___ftdiv+2,w
  1317  01E6  00E9               	movwf	round@x+2
  1318  01E7  120A  118A  2443  120A  118A  	fcall	_round
  1319  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1320  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1321  01EE  0867               	movf	?_round,w
  1322  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  1323  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  1324  01F1  00BF               	movwf	_moveDeg$572^(0+128)
  1325  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1326  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1327  01F4  0868               	movf	?_round+1,w
  1328  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1329  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1330  01F7  00C0               	movwf	(_moveDeg$572+1)^(0+128)
  1331  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1332  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1333  01FA  0869               	movf	?_round+2,w
  1334  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1335  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1336  01FD  00C1               	movwf	(_moveDeg$572+2)^(0+128)
  1337                           
  1338                           ;motor.c: 52: else{
  1339                           ;motor.c: 53: stepsToMove = (char) round(deg/(7.5/2.0));
  1340  01FE  083F               	movf	_moveDeg$572^(0+128),w
  1341  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1343  0201  00C3               	movwf	___fttol@f1
  1344  0202  1683               	bsf	3,5	;RP0=1, select bank1
  1345  0203  1303               	bcf	3,6	;RP1=0, select bank1
  1346  0204  0840               	movf	(_moveDeg$572+1)^(0+128),w
  1347  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0207  00C4               	movwf	___fttol@f1+1
  1350  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1351  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1352  020A  0841               	movf	(_moveDeg$572+2)^(0+128),w
  1353  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1354  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1355  020D  00C5               	movwf	___fttol@f1+2
  1356  020E  120A  118A  22DE  120A  118A  	fcall	___fttol
  1357  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0215  0843               	movf	?___fttol,w
  1360  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1361  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1362  0218  00B8               	movwf	??_moveDeg^(0+128)
  1363  0219  0838               	movf	??_moveDeg^(0+128),w
  1364  021A  00C2               	movwf	moveDeg@stepsToMove^(0+128)
  1365                           
  1366                           ;motor.c: 54: move(stepsToMove,1);
  1367  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1368  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1369  021D  01A0               	clrf	move@direction
  1370  021E  0AA0               	incf	move@direction,f
  1371  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1372  0220  1303               	bcf	3,6	;RP1=0, select bank1
  1373  0221  0842               	movf	moveDeg@stepsToMove^(0+128),w
  1374  0222  120A  118A  24A3   	fcall	_move
  1375  0225  0008               	return
  1376  0226                     __end_of_moveDeg:	
  1377                           
  1378                           	psect	text4
  1379  0443                     __ptext4:	
  1380 ;; *************** function _round *****************
  1381 ;; Defined at:
  1382 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  x               3   71[BANK0 ] void 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  f               3   74[BANK0 ] void 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  3   71[BANK0 ] void 
  1389 ;; Registers used:
  1390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1396 ;;      Params:         0       3       0       0       0
  1397 ;;      Locals:         0       3       0       0       0
  1398 ;;      Temps:          0       0       0       0       0
  1399 ;;      Totals:         0       6       0       0       0
  1400 ;;Total ram usage:        6 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    5
  1403 ;; This function calls:
  1404 ;;		___ftadd
  1405 ;;		___ftneg
  1406 ;;		_trunc
  1407 ;; This function is called by:
  1408 ;;		_moveDeg
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _round
  1414  0443                     _round:	
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1418  0443  1283               	bcf	3,5	;RP0=0, select bank0
  1419  0444  1303               	bcf	3,6	;RP1=0, select bank0
  1420  0445  0867               	movf	round@x,w
  1421  0446  00DA               	movwf	___ftadd@f1
  1422  0447  0868               	movf	round@x+1,w
  1423  0448  00DB               	movwf	___ftadd@f1+1
  1424  0449  0869               	movf	round@x+2,w
  1425  044A  00DC               	movwf	___ftadd@f1+2
  1426  044B  0867               	movf	round@x,w
  1427  044C  00D1               	movwf	trunc@x
  1428  044D  0868               	movf	round@x+1,w
  1429  044E  00D2               	movwf	trunc@x+1
  1430  044F  0869               	movf	round@x+2,w
  1431  0450  00D3               	movwf	trunc@x+2
  1432  0451  120A  118A  2561  120A  118A  	fcall	_trunc
  1433  0456  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0457  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0458  0851               	movf	?_trunc,w
  1436  0459  00B0               	movwf	___ftneg@f1
  1437  045A  0852               	movf	?_trunc+1,w
  1438  045B  00B1               	movwf	___ftneg@f1+1
  1439  045C  0853               	movf	?_trunc+2,w
  1440  045D  00B2               	movwf	___ftneg@f1+2
  1441  045E  120A  118A  2715  120A  118A  	fcall	___ftneg
  1442  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0465  0830               	movf	?___ftneg,w
  1445  0466  00DD               	movwf	___ftadd@f2
  1446  0467  0831               	movf	?___ftneg+1,w
  1447  0468  00DE               	movwf	___ftadd@f2+1
  1448  0469  0832               	movf	?___ftneg+2,w
  1449  046A  00DF               	movwf	___ftadd@f2+2
  1450  046B  120A  118A  202E  120A  118A  	fcall	___ftadd
  1451  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1452  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1453  0472  085A               	movf	?___ftadd,w
  1454  0473  00EA               	movwf	round@f
  1455  0474  085B               	movf	?___ftadd+1,w
  1456  0475  00EB               	movwf	round@f+1
  1457  0476  085C               	movf	?___ftadd+2,w
  1458  0477  00EC               	movwf	round@f+2
  1459  0478  086A               	movf	round@f,w
  1460  0479  00DA               	movwf	___ftadd@f1
  1461  047A  086B               	movf	round@f+1,w
  1462  047B  00DB               	movwf	___ftadd@f1+1
  1463  047C  086C               	movf	round@f+2,w
  1464  047D  00DC               	movwf	___ftadd@f1+2
  1465  047E  0867               	movf	round@x,w
  1466  047F  00DD               	movwf	___ftadd@f2
  1467  0480  0868               	movf	round@x+1,w
  1468  0481  00DE               	movwf	___ftadd@f2+1
  1469  0482  0869               	movf	round@x+2,w
  1470  0483  00DF               	movwf	___ftadd@f2+2
  1471  0484  120A  118A  202E  120A  118A  	fcall	___ftadd
  1472  0489  1283               	bcf	3,5	;RP0=0, select bank0
  1473  048A  1303               	bcf	3,6	;RP1=0, select bank0
  1474  048B  085A               	movf	?___ftadd,w
  1475  048C  00E7               	movwf	round@x
  1476  048D  085B               	movf	?___ftadd+1,w
  1477  048E  00E8               	movwf	round@x+1
  1478  048F  085C               	movf	?___ftadd+2,w
  1479  0490  00E9               	movwf	round@x+2
  1480  0491  0867               	movf	round@x,w
  1481  0492  00D1               	movwf	trunc@x
  1482  0493  0868               	movf	round@x+1,w
  1483  0494  00D2               	movwf	trunc@x+1
  1484  0495  0869               	movf	round@x+2,w
  1485  0496  00D3               	movwf	trunc@x+2
  1486  0497  120A  118A  2561   	fcall	_trunc
  1487  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1488  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1489  049C  0851               	movf	?_trunc,w
  1490  049D  00E7               	movwf	?_round
  1491  049E  0852               	movf	?_trunc+1,w
  1492  049F  00E8               	movwf	?_round+1
  1493  04A0  0853               	movf	?_trunc+2,w
  1494  04A1  00E9               	movwf	?_round+2
  1495  04A2  0008               	return
  1496  04A3                     __end_of_round:	
  1497                           
  1498                           	psect	text5
  1499  0561                     __ptext5:	
  1500 ;; *************** function _trunc *****************
  1501 ;; Defined at:
  1502 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  x               3   49[BANK0 ] void 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  i               3   53[BANK0 ] void 
  1507 ;;  expon           2   56[BANK0 ] int 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  3   49[BANK0 ] int 
  1510 ;; Registers used:
  1511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1517 ;;      Params:         0       3       0       0       0
  1518 ;;      Locals:         0       5       0       0       0
  1519 ;;      Temps:          0       1       0       0       0
  1520 ;;      Totals:         0       9       0       0       0
  1521 ;;Total ram usage:        9 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    4
  1524 ;; This function calls:
  1525 ;;		___altoft
  1526 ;;		___fttol
  1527 ;;		_frexp
  1528 ;; This function is called by:
  1529 ;;		_round
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           
  1534                           ;psect for function _trunc
  1535  0561                     _trunc:	
  1536                           
  1537                           ;incstack = 0
  1538                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1539  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1540  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1541  0563  0851               	movf	trunc@x,w
  1542  0564  00A0               	movwf	frexp@value
  1543  0565  0852               	movf	trunc@x+1,w
  1544  0566  00A1               	movwf	frexp@value+1
  1545  0567  0853               	movf	trunc@x+2,w
  1546  0568  00A2               	movwf	frexp@value+2
  1547  0569  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  1548  056A  00D4               	movwf	??_trunc
  1549  056B  0854               	movf	??_trunc,w
  1550  056C  00A3               	movwf	frexp@eptr
  1551  056D  120A  118A  262E  120A  118A  	fcall	_frexp
  1552  0572  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0573  1303               	bcf	3,6	;RP1=0, select bank0
  1554  0574  1FD9               	btfss	trunc@expon+1,7
  1555  0575  2D7D               	goto	l1753
  1556  0576  3000               	movlw	0
  1557  0577  00D1               	movwf	?_trunc
  1558  0578  3000               	movlw	0
  1559  0579  00D2               	movwf	?_trunc+1
  1560  057A  3000               	movlw	0
  1561  057B  00D3               	movwf	?_trunc+2
  1562  057C  0008               	return
  1563  057D                     l1753:	
  1564  057D  3000               	movlw	0
  1565  057E  0259               	subwf	trunc@expon+1,w
  1566  057F  3015               	movlw	21
  1567  0580  1903               	skipnz
  1568  0581  0258               	subwf	trunc@expon,w
  1569  0582  1803               	btfsc	3,0
  1570  0583  0008               	return
  1571  0584  0851               	movf	trunc@x,w
  1572  0585  00C3               	movwf	___fttol@f1
  1573  0586  0852               	movf	trunc@x+1,w
  1574  0587  00C4               	movwf	___fttol@f1+1
  1575  0588  0853               	movf	trunc@x+2,w
  1576  0589  00C5               	movwf	___fttol@f1+2
  1577  058A  120A  118A  22DE  120A  118A  	fcall	___fttol
  1578  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0591  0846               	movf	?___fttol+3,w
  1581  0592  00AB               	movwf	___altoft@c+3
  1582  0593  0845               	movf	?___fttol+2,w
  1583  0594  00AA               	movwf	___altoft@c+2
  1584  0595  0844               	movf	?___fttol+1,w
  1585  0596  00A9               	movwf	___altoft@c+1
  1586  0597  0843               	movf	?___fttol,w
  1587  0598  00A8               	movwf	___altoft@c
  1588  0599  120A  118A  25AB   	fcall	___altoft
  1589  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1590  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1591  059E  0828               	movf	?___altoft,w
  1592  059F  00D5               	movwf	trunc@i
  1593  05A0  0829               	movf	?___altoft+1,w
  1594  05A1  00D6               	movwf	trunc@i+1
  1595  05A2  082A               	movf	?___altoft+2,w
  1596  05A3  00D7               	movwf	trunc@i+2
  1597  05A4  0855               	movf	trunc@i,w
  1598  05A5  00D1               	movwf	?_trunc
  1599  05A6  0856               	movf	trunc@i+1,w
  1600  05A7  00D2               	movwf	?_trunc+1
  1601  05A8  0857               	movf	trunc@i+2,w
  1602  05A9  00D3               	movwf	?_trunc+2
  1603  05AA  0008               	return
  1604  05AB                     __end_of_trunc:	
  1605                           
  1606                           	psect	text6
  1607  062E                     __ptext6:	
  1608 ;; *************** function _frexp *****************
  1609 ;; Defined at:
  1610 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  value           3    0[BANK0 ] int 
  1613 ;;  eptr            1    3[BANK0 ] PTR int 
  1614 ;;		 -> trunc@expon(2), 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  3    0[BANK0 ] PTR int 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1626 ;;      Params:         0       4       0       0       0
  1627 ;;      Locals:         0       0       0       0       0
  1628 ;;      Temps:          0       2       0       0       0
  1629 ;;      Totals:         0       6       0       0       0
  1630 ;;Total ram usage:        6 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    2
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_trunc
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _frexp
  1642  062E                     _frexp:	
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1646  062E  1283               	bcf	3,5	;RP0=0, select bank0
  1647  062F  1303               	bcf	3,6	;RP1=0, select bank0
  1648  0630  0822               	movf	frexp@value+2,w
  1649  0631  0421               	iorwf	frexp@value+1,w
  1650  0632  0420               	iorwf	frexp@value,w
  1651  0633  1D03               	skipz
  1652  0634  2E3C               	goto	l1657
  1653  0635  0823               	movf	frexp@eptr,w
  1654  0636  0084               	movwf	4
  1655  0637  1383               	bcf	3,7	;select IRP bank0
  1656  0638  0180               	clrf	0
  1657  0639  0A84               	incf	4,f
  1658  063A  0180               	clrf	0
  1659                           
  1660                           ;	Return value of _frexp is never used
  1661  063B  0008               	return
  1662  063C                     l1657:	
  1663  063C  0822               	movf	frexp@value+2,w
  1664  063D  397F               	andlw	127
  1665  063E  00A4               	movwf	??_frexp
  1666  063F  01A5               	clrf	??_frexp+1
  1667  0640  1003               	clrc
  1668  0641  0DA4               	rlf	??_frexp,f
  1669  0642  0DA5               	rlf	??_frexp+1,f
  1670  0643  0823               	movf	frexp@eptr,w
  1671  0644  0084               	movwf	4
  1672  0645  0824               	movf	??_frexp,w
  1673  0646  1383               	bcf	3,7	;select IRP bank0
  1674  0647  0080               	movwf	0
  1675  0648  0A84               	incf	4,f
  1676  0649  0825               	movf	??_frexp+1,w
  1677  064A  0080               	movwf	0
  1678  064B  0D21               	rlf	frexp@value+1,w
  1679  064C  0D21               	rlf	frexp@value+1,w
  1680  064D  3901               	andlw	1
  1681  064E  00A4               	movwf	??_frexp
  1682  064F  01A5               	clrf	??_frexp+1
  1683  0650  0823               	movf	frexp@eptr,w
  1684  0651  0084               	movwf	4
  1685  0652  0824               	movf	??_frexp,w
  1686  0653  0480               	iorwf	0,f
  1687  0654  0A84               	incf	4,f
  1688  0655  0825               	movf	??_frexp+1,w
  1689  0656  0480               	iorwf	0,f
  1690  0657  0823               	movf	frexp@eptr,w
  1691  0658  0084               	movwf	4
  1692  0659  3082               	movlw	130
  1693  065A  0780               	addwf	0,f
  1694  065B  0F84               	incfsz	4,f
  1695  065C  0800               	movf	0,w
  1696  065D  1803               	skipnc
  1697  065E  0A00               	incf	0,w
  1698  065F  00FF               	movwf	127
  1699  0660  30FF               	movlw	255
  1700  0661  077F               	addwf	127,w
  1701  0662  0080               	movwf	0
  1702  0663  0384               	decf	4,f
  1703  0664  0822               	movf	frexp@value+2,w
  1704  0665  3980               	andlw	-128
  1705  0666  383F               	iorlw	63
  1706  0667  00A2               	movwf	frexp@value+2
  1707  0668  13A1               	bcf	frexp@value+1,7
  1708  0669  0008               	return
  1709  066A                     __end_of_frexp:	
  1710                           ;	Return value of _frexp is never used
  1711                           
  1712                           
  1713                           	psect	text7
  1714  02DE                     __ptext7:	
  1715 ;; *************** function ___fttol *****************
  1716 ;; Defined at:
  1717 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  f1              3   35[BANK0 ] float 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  lval            4   44[BANK0 ] unsigned long 
  1722 ;;  exp1            1   48[BANK0 ] unsigned char 
  1723 ;;  sign1           1   43[BANK0 ] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  4   35[BANK0 ] long 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1733 ;;      Params:         0       4       0       0       0
  1734 ;;      Locals:         0       6       0       0       0
  1735 ;;      Temps:          0       4       0       0       0
  1736 ;;      Totals:         0      14       0       0       0
  1737 ;;Total ram usage:       14 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    2
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_moveDeg
  1744 ;;		_trunc
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           
  1749                           ;psect for function ___fttol
  1750  02DE                     ___fttol:	
  1751                           
  1752                           ;incstack = 0
  1753                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1754  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1755  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1756  02E0  0843               	movf	___fttol@f1,w
  1757  02E1  00C7               	movwf	??___fttol
  1758  02E2  0844               	movf	___fttol@f1+1,w
  1759  02E3  00C8               	movwf	??___fttol+1
  1760  02E4  0845               	movf	___fttol@f1+2,w
  1761  02E5  00C9               	movwf	??___fttol+2
  1762  02E6  1003               	clrc
  1763  02E7  0D48               	rlf	??___fttol+1,w
  1764  02E8  0D49               	rlf	??___fttol+2,w
  1765  02E9  00CA               	movwf	??___fttol+3
  1766  02EA  084A               	movf	??___fttol+3,w
  1767  02EB  00D0               	movwf	___fttol@exp1
  1768  02EC  0850               	movf	___fttol@exp1,w
  1769  02ED  1D03               	btfss	3,2
  1770  02EE  2AF8               	goto	l1239
  1771  02EF  3000               	movlw	0
  1772  02F0  00C6               	movwf	?___fttol+3
  1773  02F1  3000               	movlw	0
  1774  02F2  00C5               	movwf	?___fttol+2
  1775  02F3  3000               	movlw	0
  1776  02F4  00C4               	movwf	?___fttol+1
  1777  02F5  3000               	movlw	0
  1778  02F6  00C3               	movwf	?___fttol
  1779  02F7  0008               	return
  1780  02F8                     l1239:	
  1781  02F8  0843               	movf	___fttol@f1,w
  1782  02F9  00C7               	movwf	??___fttol
  1783  02FA  0844               	movf	___fttol@f1+1,w
  1784  02FB  00C8               	movwf	??___fttol+1
  1785  02FC  0845               	movf	___fttol@f1+2,w
  1786  02FD  00C9               	movwf	??___fttol+2
  1787  02FE  3017               	movlw	23
  1788  02FF                     u1125:	
  1789  02FF  1003               	clrc
  1790  0300  0CC9               	rrf	??___fttol+2,f
  1791  0301  0CC8               	rrf	??___fttol+1,f
  1792  0302  0CC7               	rrf	??___fttol,f
  1793  0303  3EFF               	addlw	-1
  1794  0304  1D03               	skipz
  1795  0305  2AFF               	goto	u1125
  1796  0306  0847               	movf	??___fttol,w
  1797  0307  00CA               	movwf	??___fttol+3
  1798  0308  084A               	movf	??___fttol+3,w
  1799  0309  00CB               	movwf	___fttol@sign1
  1800  030A  17C4               	bsf	___fttol@f1+1,7
  1801  030B  30FF               	movlw	255
  1802  030C  05C3               	andwf	___fttol@f1,f
  1803  030D  30FF               	movlw	255
  1804  030E  05C4               	andwf	___fttol@f1+1,f
  1805  030F  3000               	movlw	0
  1806  0310  05C5               	andwf	___fttol@f1+2,f
  1807  0311  0843               	movf	___fttol@f1,w
  1808  0312  00CC               	movwf	___fttol@lval
  1809  0313  0844               	movf	___fttol@f1+1,w
  1810  0314  00CD               	movwf	___fttol@lval+1
  1811  0315  0845               	movf	___fttol@f1+2,w
  1812  0316  00CE               	movwf	___fttol@lval+2
  1813  0317  01CF               	clrf	___fttol@lval+3
  1814  0318  308E               	movlw	142
  1815  0319  02D0               	subwf	___fttol@exp1,f
  1816  031A  1FD0               	btfss	___fttol@exp1,7
  1817  031B  2B3A               	goto	l1259
  1818  031C  0850               	movf	___fttol@exp1,w
  1819  031D  3A80               	xorlw	128
  1820  031E  3E8F               	addlw	143
  1821  031F  1803               	skipnc
  1822  0320  2B2A               	goto	l1257
  1823  0321  3000               	movlw	0
  1824  0322  00C6               	movwf	?___fttol+3
  1825  0323  3000               	movlw	0
  1826  0324  00C5               	movwf	?___fttol+2
  1827  0325  3000               	movlw	0
  1828  0326  00C4               	movwf	?___fttol+1
  1829  0327  3000               	movlw	0
  1830  0328  00C3               	movwf	?___fttol
  1831  0329  0008               	return
  1832  032A                     l1257:	
  1833  032A  3001               	movlw	1
  1834  032B                     u1155:	
  1835  032B  1003               	clrc
  1836  032C  0CCF               	rrf	___fttol@lval+3,f
  1837  032D  0CCE               	rrf	___fttol@lval+2,f
  1838  032E  0CCD               	rrf	___fttol@lval+1,f
  1839  032F  0CCC               	rrf	___fttol@lval,f
  1840  0330  3EFF               	addlw	-1
  1841  0331  1D03               	skipz
  1842  0332  2B2B               	goto	u1155
  1843  0333  3001               	movlw	1
  1844  0334  00C7               	movwf	??___fttol
  1845  0335  0847               	movf	??___fttol,w
  1846  0336  07D0               	addwf	___fttol@exp1,f
  1847  0337  1903               	btfsc	3,2
  1848  0338  2B55               	goto	l1267
  1849  0339  2B2A               	goto	l1257
  1850  033A                     l1259:	
  1851  033A  3018               	movlw	24
  1852  033B  0250               	subwf	___fttol@exp1,w
  1853  033C  1C03               	skipc
  1854  033D  2B52               	goto	l535
  1855  033E  3000               	movlw	0
  1856  033F  00C6               	movwf	?___fttol+3
  1857  0340  3000               	movlw	0
  1858  0341  00C5               	movwf	?___fttol+2
  1859  0342  3000               	movlw	0
  1860  0343  00C4               	movwf	?___fttol+1
  1861  0344  3000               	movlw	0
  1862  0345  00C3               	movwf	?___fttol
  1863  0346  0008               	return
  1864  0347                     l1265:	
  1865  0347  3001               	movlw	1
  1866  0348  00C7               	movwf	??___fttol
  1867  0349                     u1185:	
  1868  0349  1003               	clrc
  1869  034A  0DCC               	rlf	___fttol@lval,f
  1870  034B  0DCD               	rlf	___fttol@lval+1,f
  1871  034C  0DCE               	rlf	___fttol@lval+2,f
  1872  034D  0DCF               	rlf	___fttol@lval+3,f
  1873  034E  0BC7               	decfsz	??___fttol,f
  1874  034F  2B49               	goto	u1185
  1875  0350  3001               	movlw	1
  1876  0351  02D0               	subwf	___fttol@exp1,f
  1877  0352                     l535:	
  1878  0352  0850               	movf	___fttol@exp1,w
  1879  0353  1D03               	btfss	3,2
  1880  0354  2B47               	goto	l1265
  1881  0355                     l1267:	
  1882  0355  084B               	movf	___fttol@sign1,w
  1883  0356  1903               	btfsc	3,2
  1884  0357  2B63               	goto	l1271
  1885  0358  09CC               	comf	___fttol@lval,f
  1886  0359  09CD               	comf	___fttol@lval+1,f
  1887  035A  09CE               	comf	___fttol@lval+2,f
  1888  035B  09CF               	comf	___fttol@lval+3,f
  1889  035C  0ACC               	incf	___fttol@lval,f
  1890  035D  1903               	skipnz
  1891  035E  0ACD               	incf	___fttol@lval+1,f
  1892  035F  1903               	skipnz
  1893  0360  0ACE               	incf	___fttol@lval+2,f
  1894  0361  1903               	skipnz
  1895  0362  0ACF               	incf	___fttol@lval+3,f
  1896  0363                     l1271:	
  1897  0363  084F               	movf	___fttol@lval+3,w
  1898  0364  00C6               	movwf	?___fttol+3
  1899  0365  084E               	movf	___fttol@lval+2,w
  1900  0366  00C5               	movwf	?___fttol+2
  1901  0367  084D               	movf	___fttol@lval+1,w
  1902  0368  00C4               	movwf	?___fttol+1
  1903  0369  084C               	movf	___fttol@lval,w
  1904  036A  00C3               	movwf	?___fttol
  1905  036B  0008               	return
  1906  036C                     __end_of___fttol:	
  1907                           
  1908                           	psect	text8
  1909  05AB                     __ptext8:	
  1910 ;; *************** function ___altoft *****************
  1911 ;; Defined at:
  1912 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  c               4    8[BANK0 ] long 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  sign            1   15[BANK0 ] unsigned char 
  1917 ;;  exp             1   14[BANK0 ] unsigned char 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  3    8[BANK0 ] float 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2, status,0, pclath, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1927 ;;      Params:         0       4       0       0       0
  1928 ;;      Locals:         0       2       0       0       0
  1929 ;;      Temps:          0       2       0       0       0
  1930 ;;      Totals:         0       8       0       0       0
  1931 ;;Total ram usage:        8 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:    3
  1934 ;; This function calls:
  1935 ;;		___ftpack
  1936 ;; This function is called by:
  1937 ;;		_trunc
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           
  1942                           ;psect for function ___altoft
  1943  05AB                     ___altoft:	
  1944                           
  1945                           ;incstack = 0
  1946                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  1947  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  1948  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  1949  05AD  01AF               	clrf	___altoft@sign
  1950  05AE  308E               	movlw	142
  1951  05AF  00AC               	movwf	??___altoft
  1952  05B0  082C               	movf	??___altoft,w
  1953  05B1  00AE               	movwf	___altoft@exp
  1954  05B2  1FAB               	btfss	___altoft@c+3,7
  1955  05B3  2DC1               	goto	l1645
  1956  05B4  09A8               	comf	___altoft@c,f
  1957  05B5  09A9               	comf	___altoft@c+1,f
  1958  05B6  09AA               	comf	___altoft@c+2,f
  1959  05B7  09AB               	comf	___altoft@c+3,f
  1960  05B8  0AA8               	incf	___altoft@c,f
  1961  05B9  1903               	skipnz
  1962  05BA  0AA9               	incf	___altoft@c+1,f
  1963  05BB  1903               	skipnz
  1964  05BC  0AAA               	incf	___altoft@c+2,f
  1965  05BD  1903               	skipnz
  1966  05BE  0AAB               	incf	___altoft@c+3,f
  1967  05BF  01AF               	clrf	___altoft@sign
  1968  05C0  0AAF               	incf	___altoft@sign,f
  1969  05C1                     l1645:	
  1970  05C1  30FF               	movlw	255
  1971  05C2  052B               	andwf	___altoft@c+3,w
  1972  05C3  1903               	btfsc	3,2
  1973  05C4  2DD3               	goto	l1647
  1974  05C5  3001               	movlw	1
  1975  05C6                     u1935:	
  1976  05C6  1003               	clrc
  1977  05C7  0CAB               	rrf	___altoft@c+3,f
  1978  05C8  0CAA               	rrf	___altoft@c+2,f
  1979  05C9  0CA9               	rrf	___altoft@c+1,f
  1980  05CA  0CA8               	rrf	___altoft@c,f
  1981  05CB  3EFF               	addlw	-1
  1982  05CC  1D03               	skipz
  1983  05CD  2DC6               	goto	u1935
  1984  05CE  3001               	movlw	1
  1985  05CF  00AC               	movwf	??___altoft
  1986  05D0  082C               	movf	??___altoft,w
  1987  05D1  07AE               	addwf	___altoft@exp,f
  1988  05D2  2DC1               	goto	l1645
  1989  05D3                     l1647:	
  1990  05D3  0828               	movf	___altoft@c,w
  1991  05D4  00A0               	movwf	___ftpack@arg
  1992  05D5  0829               	movf	___altoft@c+1,w
  1993  05D6  00A1               	movwf	___ftpack@arg+1
  1994  05D7  082A               	movf	___altoft@c+2,w
  1995  05D8  00A2               	movwf	___ftpack@arg+2
  1996  05D9  082E               	movf	___altoft@exp,w
  1997  05DA  00AC               	movwf	??___altoft
  1998  05DB  082C               	movf	??___altoft,w
  1999  05DC  00A3               	movwf	___ftpack@exp
  2000  05DD  082F               	movf	___altoft@sign,w
  2001  05DE  00AD               	movwf	??___altoft+1
  2002  05DF  082D               	movf	??___altoft+1,w
  2003  05E0  00A4               	movwf	___ftpack@sign
  2004  05E1  120A  118A  236C   	fcall	___ftpack
  2005  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2006  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2007  05E6  0820               	movf	?___ftpack,w
  2008  05E7  00A8               	movwf	?___altoft
  2009  05E8  0821               	movf	?___ftpack+1,w
  2010  05E9  00A9               	movwf	?___altoft+1
  2011  05EA  0822               	movf	?___ftpack+2,w
  2012  05EB  00AA               	movwf	?___altoft+2
  2013  05EC  0008               	return
  2014  05ED                     __end_of___altoft:	
  2015                           
  2016                           	psect	text9
  2017  0715                     __ptext9:	
  2018 ;; *************** function ___ftneg *****************
  2019 ;; Defined at:
  2020 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  f1              3   16[BANK0 ] float 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  3   16[BANK0 ] float 
  2027 ;; Registers used:
  2028 ;;		wreg
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2034 ;;      Params:         0       3       0       0       0
  2035 ;;      Locals:         0       0       0       0       0
  2036 ;;      Temps:          0       0       0       0       0
  2037 ;;      Totals:         0       3       0       0       0
  2038 ;;Total ram usage:        3 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    2
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_moveDeg
  2045 ;;		_round
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function ___ftneg
  2051  0715                     ___ftneg:	
  2052                           
  2053                           ;incstack = 0
  2054                           ; Regs used in ___ftneg: [wreg]
  2055  0715  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0716  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0717  0832               	movf	___ftneg@f1+2,w
  2058  0718  0431               	iorwf	___ftneg@f1+1,w
  2059  0719  0430               	iorwf	___ftneg@f1,w
  2060  071A  1903               	skipnz
  2061  071B  0008               	return
  2062  071C  3080               	movlw	128
  2063  071D  06B2               	xorwf	___ftneg@f1+2,f
  2064  071E  0008               	return
  2065  071F                     __end_of___ftneg:	
  2066                           
  2067                           	psect	text10
  2068  002E                     __ptext10:	
  2069 ;; *************** function ___ftadd *****************
  2070 ;; Defined at:
  2071 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  f1              3   58[BANK0 ] float 
  2074 ;;  f2              3   61[BANK0 ] float 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  exp1            1   70[BANK0 ] unsigned char 
  2077 ;;  exp2            1   69[BANK0 ] unsigned char 
  2078 ;;  sign            1   68[BANK0 ] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  3   58[BANK0 ] float 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0, pclath, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2088 ;;      Params:         0       6       0       0       0
  2089 ;;      Locals:         0       3       0       0       0
  2090 ;;      Temps:          0       4       0       0       0
  2091 ;;      Totals:         0      13       0       0       0
  2092 ;;Total ram usage:       13 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    3
  2095 ;; This function calls:
  2096 ;;		___ftpack
  2097 ;; This function is called by:
  2098 ;;		_round
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function ___ftadd
  2104  002E                     ___ftadd:	
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2108  002E  1283               	bcf	3,5	;RP0=0, select bank0
  2109  002F  1303               	bcf	3,6	;RP1=0, select bank0
  2110  0030  085A               	movf	___ftadd@f1,w
  2111  0031  00E0               	movwf	??___ftadd
  2112  0032  085B               	movf	___ftadd@f1+1,w
  2113  0033  00E1               	movwf	??___ftadd+1
  2114  0034  085C               	movf	___ftadd@f1+2,w
  2115  0035  00E2               	movwf	??___ftadd+2
  2116  0036  1003               	clrc
  2117  0037  0D61               	rlf	??___ftadd+1,w
  2118  0038  0D62               	rlf	??___ftadd+2,w
  2119  0039  00E3               	movwf	??___ftadd+3
  2120  003A  0863               	movf	??___ftadd+3,w
  2121  003B  00E6               	movwf	___ftadd@exp1
  2122  003C  085D               	movf	___ftadd@f2,w
  2123  003D  00E0               	movwf	??___ftadd
  2124  003E  085E               	movf	___ftadd@f2+1,w
  2125  003F  00E1               	movwf	??___ftadd+1
  2126  0040  085F               	movf	___ftadd@f2+2,w
  2127  0041  00E2               	movwf	??___ftadd+2
  2128  0042  1003               	clrc
  2129  0043  0D61               	rlf	??___ftadd+1,w
  2130  0044  0D62               	rlf	??___ftadd+2,w
  2131  0045  00E3               	movwf	??___ftadd+3
  2132  0046  0863               	movf	??___ftadd+3,w
  2133  0047  00E5               	movwf	___ftadd@exp2
  2134  0048  0866               	movf	___ftadd@exp1,w
  2135  0049  1903               	btfsc	3,2
  2136  004A  2857               	goto	l1673
  2137  004B  0865               	movf	___ftadd@exp2,w
  2138  004C  0266               	subwf	___ftadd@exp1,w
  2139  004D  1803               	skipnc
  2140  004E  285E               	goto	l1677
  2141  004F  0366               	decf	___ftadd@exp1,w
  2142  0050  3AFF               	xorlw	255
  2143  0051  0765               	addwf	___ftadd@exp2,w
  2144  0052  00E0               	movwf	??___ftadd
  2145  0053  3019               	movlw	25
  2146  0054  0260               	subwf	??___ftadd,w
  2147  0055  1C03               	skipc
  2148  0056  285E               	goto	l1677
  2149  0057                     l1673:	
  2150  0057  085D               	movf	___ftadd@f2,w
  2151  0058  00DA               	movwf	?___ftadd
  2152  0059  085E               	movf	___ftadd@f2+1,w
  2153  005A  00DB               	movwf	?___ftadd+1
  2154  005B  085F               	movf	___ftadd@f2+2,w
  2155  005C  00DC               	movwf	?___ftadd+2
  2156  005D  0008               	return
  2157  005E                     l1677:	
  2158  005E  0865               	movf	___ftadd@exp2,w
  2159  005F  1903               	btfsc	3,2
  2160  0060  0008               	return
  2161  0061  0866               	movf	___ftadd@exp1,w
  2162  0062  0265               	subwf	___ftadd@exp2,w
  2163  0063  1803               	skipnc
  2164  0064  286D               	goto	l1683
  2165  0065  0365               	decf	___ftadd@exp2,w
  2166  0066  3AFF               	xorlw	255
  2167  0067  0766               	addwf	___ftadd@exp1,w
  2168  0068  00E0               	movwf	??___ftadd
  2169  0069  3019               	movlw	25
  2170  006A  0260               	subwf	??___ftadd,w
  2171  006B  1803               	btfsc	3,0
  2172  006C  0008               	return
  2173  006D                     l1683:	
  2174  006D  3006               	movlw	6
  2175  006E  00E0               	movwf	??___ftadd
  2176  006F  0860               	movf	??___ftadd,w
  2177  0070  00E4               	movwf	___ftadd@sign
  2178  0071  1BDC               	btfsc	___ftadd@f1+2,7
  2179  0072  17E4               	bsf	___ftadd@sign,7
  2180  0073  1BDF               	btfsc	___ftadd@f2+2,7
  2181  0074  1764               	bsf	___ftadd@sign,6
  2182  0075  17DB               	bsf	___ftadd@f1+1,7
  2183  0076  30FF               	movlw	255
  2184  0077  05DA               	andwf	___ftadd@f1,f
  2185  0078  30FF               	movlw	255
  2186  0079  05DB               	andwf	___ftadd@f1+1,f
  2187  007A  3000               	movlw	0
  2188  007B  05DC               	andwf	___ftadd@f1+2,f
  2189  007C  17DE               	bsf	___ftadd@f2+1,7
  2190  007D  30FF               	movlw	255
  2191  007E  05DD               	andwf	___ftadd@f2,f
  2192  007F  30FF               	movlw	255
  2193  0080  05DE               	andwf	___ftadd@f2+1,f
  2194  0081  3000               	movlw	0
  2195  0082  05DF               	andwf	___ftadd@f2+2,f
  2196  0083  0865               	movf	___ftadd@exp2,w
  2197  0084  0266               	subwf	___ftadd@exp1,w
  2198  0085  1803               	skipnc
  2199  0086  28AD               	goto	l1705
  2200  0087                     l1695:	
  2201  0087  3001               	movlw	1
  2202  0088                     u2055:	
  2203  0088  1003               	clrc
  2204  0089  0DDD               	rlf	___ftadd@f2,f
  2205  008A  0DDE               	rlf	___ftadd@f2+1,f
  2206  008B  0DDF               	rlf	___ftadd@f2+2,f
  2207  008C  3EFF               	addlw	-1
  2208  008D  1D03               	skipz
  2209  008E  2888               	goto	u2055
  2210  008F  3001               	movlw	1
  2211  0090  02E5               	subwf	___ftadd@exp2,f
  2212  0091  0865               	movf	___ftadd@exp2,w
  2213  0092  0666               	xorwf	___ftadd@exp1,w
  2214  0093  1903               	skipnz
  2215  0094  28A8               	goto	l1703
  2216  0095  3001               	movlw	1
  2217  0096  02E4               	subwf	___ftadd@sign,f
  2218  0097  0864               	movf	___ftadd@sign,w
  2219  0098  3907               	andlw	7
  2220  0099  1903               	btfsc	3,2
  2221  009A  28A8               	goto	l1703
  2222  009B  2887               	goto	l1695
  2223  009C                     l1701:	
  2224  009C  3001               	movlw	1
  2225  009D                     u2085:	
  2226  009D  1003               	clrc
  2227  009E  0CDC               	rrf	___ftadd@f1+2,f
  2228  009F  0CDB               	rrf	___ftadd@f1+1,f
  2229  00A0  0CDA               	rrf	___ftadd@f1,f
  2230  00A1  3EFF               	addlw	-1
  2231  00A2  1D03               	skipz
  2232  00A3  289D               	goto	u2085
  2233  00A4  3001               	movlw	1
  2234  00A5  00E0               	movwf	??___ftadd
  2235  00A6  0860               	movf	??___ftadd,w
  2236  00A7  07E6               	addwf	___ftadd@exp1,f
  2237  00A8                     l1703:	
  2238  00A8  0866               	movf	___ftadd@exp1,w
  2239  00A9  0665               	xorwf	___ftadd@exp2,w
  2240  00AA  1903               	btfsc	3,2
  2241  00AB  28D6               	goto	l475
  2242  00AC  289C               	goto	l1701
  2243  00AD                     l1705:	
  2244  00AD  0866               	movf	___ftadd@exp1,w
  2245  00AE  0265               	subwf	___ftadd@exp2,w
  2246  00AF  1803               	skipnc
  2247  00B0  28D6               	goto	l475
  2248  00B1                     l1707:	
  2249  00B1  3001               	movlw	1
  2250  00B2                     u2115:	
  2251  00B2  1003               	clrc
  2252  00B3  0DDA               	rlf	___ftadd@f1,f
  2253  00B4  0DDB               	rlf	___ftadd@f1+1,f
  2254  00B5  0DDC               	rlf	___ftadd@f1+2,f
  2255  00B6  3EFF               	addlw	-1
  2256  00B7  1D03               	skipz
  2257  00B8  28B2               	goto	u2115
  2258  00B9  3001               	movlw	1
  2259  00BA  02E6               	subwf	___ftadd@exp1,f
  2260  00BB  0865               	movf	___ftadd@exp2,w
  2261  00BC  0666               	xorwf	___ftadd@exp1,w
  2262  00BD  1903               	skipnz
  2263  00BE  28D2               	goto	l1715
  2264  00BF  3001               	movlw	1
  2265  00C0  02E4               	subwf	___ftadd@sign,f
  2266  00C1  0864               	movf	___ftadd@sign,w
  2267  00C2  3907               	andlw	7
  2268  00C3  1903               	btfsc	3,2
  2269  00C4  28D2               	goto	l1715
  2270  00C5  28B1               	goto	l1707
  2271  00C6                     l1713:	
  2272  00C6  3001               	movlw	1
  2273  00C7                     u2145:	
  2274  00C7  1003               	clrc
  2275  00C8  0CDF               	rrf	___ftadd@f2+2,f
  2276  00C9  0CDE               	rrf	___ftadd@f2+1,f
  2277  00CA  0CDD               	rrf	___ftadd@f2,f
  2278  00CB  3EFF               	addlw	-1
  2279  00CC  1D03               	skipz
  2280  00CD  28C7               	goto	u2145
  2281  00CE  3001               	movlw	1
  2282  00CF  00E0               	movwf	??___ftadd
  2283  00D0  0860               	movf	??___ftadd,w
  2284  00D1  07E5               	addwf	___ftadd@exp2,f
  2285  00D2                     l1715:	
  2286  00D2  0866               	movf	___ftadd@exp1,w
  2287  00D3  0665               	xorwf	___ftadd@exp2,w
  2288  00D4  1D03               	skipz
  2289  00D5  28C6               	goto	l1713
  2290  00D6                     l475:	
  2291  00D6  1FE4               	btfss	___ftadd@sign,7
  2292  00D7  28E8               	goto	l1719
  2293  00D8  30FF               	movlw	255
  2294  00D9  06DA               	xorwf	___ftadd@f1,f
  2295  00DA  30FF               	movlw	255
  2296  00DB  06DB               	xorwf	___ftadd@f1+1,f
  2297  00DC  30FF               	movlw	255
  2298  00DD  06DC               	xorwf	___ftadd@f1+2,f
  2299  00DE  3001               	movlw	1
  2300  00DF  07DA               	addwf	___ftadd@f1,f
  2301  00E0  3000               	movlw	0
  2302  00E1  1803               	skipnc
  2303  00E2  3001               	movlw	1
  2304  00E3  07DB               	addwf	___ftadd@f1+1,f
  2305  00E4  3000               	movlw	0
  2306  00E5  1803               	skipnc
  2307  00E6  3001               	movlw	1
  2308  00E7  07DC               	addwf	___ftadd@f1+2,f
  2309  00E8                     l1719:	
  2310  00E8  1F64               	btfss	___ftadd@sign,6
  2311  00E9  28FA               	goto	l1723
  2312  00EA  30FF               	movlw	255
  2313  00EB  06DD               	xorwf	___ftadd@f2,f
  2314  00EC  30FF               	movlw	255
  2315  00ED  06DE               	xorwf	___ftadd@f2+1,f
  2316  00EE  30FF               	movlw	255
  2317  00EF  06DF               	xorwf	___ftadd@f2+2,f
  2318  00F0  3001               	movlw	1
  2319  00F1  07DD               	addwf	___ftadd@f2,f
  2320  00F2  3000               	movlw	0
  2321  00F3  1803               	skipnc
  2322  00F4  3001               	movlw	1
  2323  00F5  07DE               	addwf	___ftadd@f2+1,f
  2324  00F6  3000               	movlw	0
  2325  00F7  1803               	skipnc
  2326  00F8  3001               	movlw	1
  2327  00F9  07DF               	addwf	___ftadd@f2+2,f
  2328  00FA                     l1723:	
  2329  00FA  01E4               	clrf	___ftadd@sign
  2330  00FB  085A               	movf	___ftadd@f1,w
  2331  00FC  07DD               	addwf	___ftadd@f2,f
  2332  00FD  085B               	movf	___ftadd@f1+1,w
  2333  00FE  1103               	clrz
  2334  00FF  1803               	skipnc
  2335  0100  0A5B               	incf	___ftadd@f1+1,w
  2336  0101  1D03               	btfss	3,2
  2337  0102  07DE               	addwf	___ftadd@f2+1,f
  2338  0103  085C               	movf	___ftadd@f1+2,w
  2339  0104  1103               	clrz
  2340  0105  1803               	skipnc
  2341  0106  0A5C               	incf	___ftadd@f1+2,w
  2342  0107  1D03               	btfss	3,2
  2343  0108  07DF               	addwf	___ftadd@f2+2,f
  2344  0109  1FDF               	btfss	___ftadd@f2+2,7
  2345  010A  291D               	goto	l1733
  2346  010B  30FF               	movlw	255
  2347  010C  06DD               	xorwf	___ftadd@f2,f
  2348  010D  30FF               	movlw	255
  2349  010E  06DE               	xorwf	___ftadd@f2+1,f
  2350  010F  30FF               	movlw	255
  2351  0110  06DF               	xorwf	___ftadd@f2+2,f
  2352  0111  3001               	movlw	1
  2353  0112  07DD               	addwf	___ftadd@f2,f
  2354  0113  3000               	movlw	0
  2355  0114  1803               	skipnc
  2356  0115  3001               	movlw	1
  2357  0116  07DE               	addwf	___ftadd@f2+1,f
  2358  0117  3000               	movlw	0
  2359  0118  1803               	skipnc
  2360  0119  3001               	movlw	1
  2361  011A  07DF               	addwf	___ftadd@f2+2,f
  2362  011B  01E4               	clrf	___ftadd@sign
  2363  011C  0AE4               	incf	___ftadd@sign,f
  2364  011D                     l1733:	
  2365  011D  085D               	movf	___ftadd@f2,w
  2366  011E  00A0               	movwf	___ftpack@arg
  2367  011F  085E               	movf	___ftadd@f2+1,w
  2368  0120  00A1               	movwf	___ftpack@arg+1
  2369  0121  085F               	movf	___ftadd@f2+2,w
  2370  0122  00A2               	movwf	___ftpack@arg+2
  2371  0123  0866               	movf	___ftadd@exp1,w
  2372  0124  00E0               	movwf	??___ftadd
  2373  0125  0860               	movf	??___ftadd,w
  2374  0126  00A3               	movwf	___ftpack@exp
  2375  0127  0864               	movf	___ftadd@sign,w
  2376  0128  00E1               	movwf	??___ftadd+1
  2377  0129  0861               	movf	??___ftadd+1,w
  2378  012A  00A4               	movwf	___ftpack@sign
  2379  012B  120A  118A  236C   	fcall	___ftpack
  2380  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2381  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0130  0820               	movf	?___ftpack,w
  2383  0131  00DA               	movwf	?___ftadd
  2384  0132  0821               	movf	?___ftpack+1,w
  2385  0133  00DB               	movwf	?___ftadd+1
  2386  0134  0822               	movf	?___ftpack+2,w
  2387  0135  00DC               	movwf	?___ftadd+2
  2388  0136  0008               	return
  2389  0137                     __end_of___ftadd:	
  2390                           
  2391                           	psect	text11
  2392  04A3                     __ptext11:	
  2393 ;; *************** function _move *****************
  2394 ;; Defined at:
  2395 ;;		line 18 in file "motor.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  steps           1    wreg     unsigned char 
  2398 ;;  direction       1    0[BANK0 ] unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  steps           1    3[BANK0 ] unsigned char 
  2401 ;;  i               1    4[BANK0 ] unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2411 ;;      Params:         0       1       0       0       0
  2412 ;;      Locals:         0       2       0       0       0
  2413 ;;      Temps:          0       2       0       0       0
  2414 ;;      Totals:         0       5       0       0       0
  2415 ;;Total ram usage:        5 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    2
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;;		_moveDeg
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function _move
  2428  04A3                     _move:	
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0]
  2432                           ;move@steps stored from wreg
  2433  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2434  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2435  04A5  00A3               	movwf	move@steps
  2436                           
  2437                           ;motor.c: 19: for(char i = 0; i<steps; i++){
  2438  04A6  01A4               	clrf	move@i
  2439  04A7                     l1799:	
  2440  04A7  0823               	movf	move@steps,w
  2441  04A8  0224               	subwf	move@i,w
  2442  04A9  1803               	btfsc	3,0
  2443  04AA  0008               	return
  2444                           
  2445                           ;motor.c: 20: if(cstep == 7 && direction == 1){
  2446  04AB  3007               	movlw	7
  2447  04AC  0676               	xorwf	_cstep,w
  2448  04AD  1D03               	btfss	3,2
  2449  04AE  2CBA               	goto	l1773
  2450  04AF  0320               	decf	move@direction,w
  2451  04B0  1D03               	btfss	3,2
  2452  04B1  2CBA               	goto	l1773
  2453                           
  2454                           ;motor.c: 21: PORTC = halfSteps[0];
  2455  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  2456  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  2457  04B4  0820               	movf	_halfSteps^(0+128),w
  2458  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2459  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2460  04B7  0087               	movwf	7	;volatile
  2461                           
  2462                           ;motor.c: 22: cstep = 0;
  2463  04B8  01F6               	clrf	_cstep
  2464                           
  2465                           ;motor.c: 23: }
  2466  04B9  2CF2               	goto	l1795
  2467  04BA                     l1773:	
  2468                           
  2469                           ;motor.c: 24: else if(cstep == 0 && direction == 0){
  2470  04BA  0876               	movf	_cstep,w
  2471  04BB  1D03               	btfss	3,2
  2472  04BC  2CCB               	goto	l111
  2473  04BD  0820               	movf	move@direction,w
  2474  04BE  1D03               	btfss	3,2
  2475  04BF  2CCB               	goto	l111
  2476                           
  2477                           ;motor.c: 25: PORTC = halfSteps[7];
  2478  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  2479  04C1  1303               	bcf	3,6	;RP1=0, select bank1
  2480  04C2  082E               	movf	(_halfSteps^(0+128)+14),w
  2481  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2482  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2483  04C5  0087               	movwf	7	;volatile
  2484                           
  2485                           ;motor.c: 26: cstep = 7;
  2486  04C6  3007               	movlw	7
  2487  04C7  00A1               	movwf	??_move
  2488  04C8  0821               	movf	??_move,w
  2489  04C9  00F6               	movwf	_cstep
  2490                           
  2491                           ;motor.c: 27: }
  2492  04CA  2CF2               	goto	l1795
  2493  04CB                     l111:	
  2494                           
  2495                           ;motor.c: 28: else if (cstep >= 0 && cstep <= 7){
  2496  04CB  1BF6               	btfsc	_cstep,7
  2497  04CC  2CF1               	goto	l1793
  2498  04CD  0876               	movf	_cstep,w
  2499  04CE  3A80               	xorlw	128
  2500  04CF  3E78               	addlw	-136
  2501  04D0  1803               	skipnc
  2502  04D1  2CF1               	goto	l1793
  2503                           
  2504                           ;motor.c: 29: if(direction == 1){
  2505  04D2  0320               	decf	move@direction,w
  2506  04D3  1D03               	btfss	3,2
  2507  04D4  2CE0               	goto	l1787
  2508                           
  2509                           ;motor.c: 30: PORTC = halfSteps[cstep+1];
  2510  04D5  0876               	movf	_cstep,w
  2511  04D6  00A1               	movwf	??_move
  2512  04D7  0721               	addwf	??_move,w
  2513  04D8  3E02               	addlw	2
  2514  04D9  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2515  04DA  0084               	movwf	4
  2516  04DB  1383               	bcf	3,7	;select IRP bank1
  2517  04DC  0800               	movf	0,w
  2518  04DD  0087               	movwf	7	;volatile
  2519                           
  2520                           ;motor.c: 31: cstep++;
  2521  04DE  3001               	movlw	1
  2522  04DF  2CED               	goto	L3
  2523  04E0                     l1787:	
  2524                           ;motor.c: 32: }
  2525                           
  2526                           
  2527                           ;motor.c: 33: else if(direction == 0){
  2528  04E0  0820               	movf	move@direction,w
  2529  04E1  1D03               	btfss	3,2
  2530  04E2  2CF2               	goto	l1795
  2531                           
  2532                           ;motor.c: 34: PORTC = halfSteps[cstep-1];
  2533  04E3  0876               	movf	_cstep,w
  2534  04E4  00A1               	movwf	??_move
  2535  04E5  0721               	addwf	??_move,w
  2536  04E6  3EFE               	addlw	254
  2537  04E7  3EA0               	addlw	(low (_halfSteps| 0))& (0+255)
  2538  04E8  0084               	movwf	4
  2539  04E9  1383               	bcf	3,7	;select IRP bank1
  2540  04EA  0800               	movf	0,w
  2541  04EB  0087               	movwf	7	;volatile
  2542                           
  2543                           ;motor.c: 35: cstep--;
  2544  04EC  30FF               	movlw	255
  2545  04ED                     L3:	
  2546  04ED  00A1               	movwf	??_move
  2547  04EE  0821               	movf	??_move,w
  2548  04EF  07F6               	addwf	_cstep,f
  2549                           
  2550                           ;motor.c: 36: }
  2551                           ;motor.c: 38: }
  2552  04F0  2CF2               	goto	l1795
  2553  04F1                     l1793:	
  2554                           
  2555                           ;motor.c: 39: else{
  2556                           ;motor.c: 40: PORTC = 0x00;
  2557  04F1  0187               	clrf	7	;volatile
  2558  04F2                     l1795:	
  2559                           
  2560                           ;motor.c: 41: }
  2561                           ;motor.c: 42: _delay((unsigned long)((20)*(20000000/4000.0)));
  2562  04F2  3082               	movlw	130
  2563  04F3  00A2               	movwf	??_move+1
  2564  04F4  30DD               	movlw	221
  2565  04F5  00A1               	movwf	??_move
  2566  04F6                     u2517:	
  2567  04F6  0BA1               	decfsz	??_move,f
  2568  04F7  2CF6               	goto	u2517
  2569  04F8  0BA2               	decfsz	??_move+1,f
  2570  04F9  2CF6               	goto	u2517
  2571  04FA  2CFB               	nop2
  2572  04FB  3001               	movlw	1
  2573  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2574  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2575  04FE  00A1               	movwf	??_move
  2576  04FF  0821               	movf	??_move,w
  2577  0500  07A4               	addwf	move@i,f
  2578  0501  2CA7               	goto	l1799
  2579  0502                     __end_of_move:	
  2580                           
  2581                           	psect	text12
  2582  0502                     __ptext12:	
  2583 ;; *************** function ___ftge *****************
  2584 ;; Defined at:
  2585 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  ff1             3    0[BANK0 ] float 
  2588 ;;  ff2             3    3[BANK0 ] float 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;		None               void
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2600 ;;      Params:         0       6       0       0       0
  2601 ;;      Locals:         0       0       0       0       0
  2602 ;;      Temps:          0       6       0       0       0
  2603 ;;      Totals:         0      12       0       0       0
  2604 ;;Total ram usage:       12 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    2
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_moveDeg
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function ___ftge
  2616  0502                     ___ftge:	
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  2620  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0504  1FA2               	btfss	___ftge@ff1+2,7
  2623  0505  2D2B               	goto	l1479
  2624  0506  3000               	movlw	0
  2625  0507  00A6               	movwf	??___ftge
  2626  0508  3000               	movlw	0
  2627  0509  00A7               	movwf	??___ftge+1
  2628  050A  3080               	movlw	128
  2629  050B  00A8               	movwf	??___ftge+2
  2630  050C  0920               	comf	___ftge@ff1,w
  2631  050D  00A9               	movwf	??___ftge+3
  2632  050E  0921               	comf	___ftge@ff1+1,w
  2633  050F  00AA               	movwf	??___ftge+4
  2634  0510  0922               	comf	___ftge@ff1+2,w
  2635  0511  00AB               	movwf	??___ftge+5
  2636  0512  0AA9               	incf	??___ftge+3,f
  2637  0513  1903               	skipnz
  2638  0514  0AAA               	incf	??___ftge+4,f
  2639  0515  1903               	skipnz
  2640  0516  0AAB               	incf	??___ftge+5,f
  2641  0517  0829               	movf	??___ftge+3,w
  2642  0518  07A6               	addwf	??___ftge,f
  2643  0519  082A               	movf	??___ftge+4,w
  2644  051A  1803               	skipnc
  2645  051B  0F2A               	incfsz	??___ftge+4,w
  2646  051C  2D1E               	goto	u1671
  2647  051D  2D1F               	goto	u1672
  2648  051E                     u1671:	
  2649  051E  07A7               	addwf	??___ftge+1,f
  2650  051F                     u1672:	
  2651  051F  082B               	movf	??___ftge+5,w
  2652  0520  1803               	skipnc
  2653  0521  0F2B               	incfsz	??___ftge+5,w
  2654  0522  2D24               	goto	u1673
  2655  0523  2D25               	goto	u1674
  2656  0524                     u1673:	
  2657  0524  07A8               	addwf	??___ftge+2,f
  2658  0525                     u1674:	
  2659  0525  0826               	movf	??___ftge,w
  2660  0526  00A0               	movwf	___ftge@ff1
  2661  0527  0827               	movf	??___ftge+1,w
  2662  0528  00A1               	movwf	___ftge@ff1+1
  2663  0529  0828               	movf	??___ftge+2,w
  2664  052A  00A2               	movwf	___ftge@ff1+2
  2665  052B                     l1479:	
  2666  052B  1FA5               	btfss	___ftge@ff2+2,7
  2667  052C  2D52               	goto	l1483
  2668  052D  3000               	movlw	0
  2669  052E  00A6               	movwf	??___ftge
  2670  052F  3000               	movlw	0
  2671  0530  00A7               	movwf	??___ftge+1
  2672  0531  3080               	movlw	128
  2673  0532  00A8               	movwf	??___ftge+2
  2674  0533  0923               	comf	___ftge@ff2,w
  2675  0534  00A9               	movwf	??___ftge+3
  2676  0535  0924               	comf	___ftge@ff2+1,w
  2677  0536  00AA               	movwf	??___ftge+4
  2678  0537  0925               	comf	___ftge@ff2+2,w
  2679  0538  00AB               	movwf	??___ftge+5
  2680  0539  0AA9               	incf	??___ftge+3,f
  2681  053A  1903               	skipnz
  2682  053B  0AAA               	incf	??___ftge+4,f
  2683  053C  1903               	skipnz
  2684  053D  0AAB               	incf	??___ftge+5,f
  2685  053E  0829               	movf	??___ftge+3,w
  2686  053F  07A6               	addwf	??___ftge,f
  2687  0540  082A               	movf	??___ftge+4,w
  2688  0541  1803               	skipnc
  2689  0542  0F2A               	incfsz	??___ftge+4,w
  2690  0543  2D45               	goto	u1691
  2691  0544  2D46               	goto	u1692
  2692  0545                     u1691:	
  2693  0545  07A7               	addwf	??___ftge+1,f
  2694  0546                     u1692:	
  2695  0546  082B               	movf	??___ftge+5,w
  2696  0547  1803               	skipnc
  2697  0548  0F2B               	incfsz	??___ftge+5,w
  2698  0549  2D4B               	goto	u1693
  2699  054A  2D4C               	goto	u1694
  2700  054B                     u1693:	
  2701  054B  07A8               	addwf	??___ftge+2,f
  2702  054C                     u1694:	
  2703  054C  0826               	movf	??___ftge,w
  2704  054D  00A3               	movwf	___ftge@ff2
  2705  054E  0827               	movf	??___ftge+1,w
  2706  054F  00A4               	movwf	___ftge@ff2+1
  2707  0550  0828               	movf	??___ftge+2,w
  2708  0551  00A5               	movwf	___ftge@ff2+2
  2709  0552                     l1483:	
  2710  0552  3080               	movlw	128
  2711  0553  06A2               	xorwf	___ftge@ff1+2,f
  2712  0554  3080               	movlw	128
  2713  0555  06A5               	xorwf	___ftge@ff2+2,f
  2714  0556  0825               	movf	___ftge@ff2+2,w
  2715  0557  0222               	subwf	___ftge@ff1+2,w
  2716  0558  1D03               	skipz
  2717  0559  0008               	return
  2718  055A  0824               	movf	___ftge@ff2+1,w
  2719  055B  0221               	subwf	___ftge@ff1+1,w
  2720  055C  1D03               	skipz
  2721  055D  0008               	return
  2722  055E  0823               	movf	___ftge@ff2,w
  2723  055F  0220               	subwf	___ftge@ff1,w
  2724  0560  0008               	return
  2725  0561                     __end_of___ftge:	
  2726                           
  2727                           	psect	text13
  2728  0226                     __ptext13:	
  2729 ;; *************** function ___ftdiv *****************
  2730 ;; Defined at:
  2731 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  f2              3   19[BANK0 ] float 
  2734 ;;  f1              3   22[BANK0 ] float 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  f3              3   30[BANK0 ] float 
  2737 ;;  sign            1   34[BANK0 ] unsigned char 
  2738 ;;  exp             1   33[BANK0 ] unsigned char 
  2739 ;;  cntr            1   29[BANK0 ] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  3   19[BANK0 ] float 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2749 ;;      Params:         0       6       0       0       0
  2750 ;;      Locals:         0       6       0       0       0
  2751 ;;      Temps:          0       4       0       0       0
  2752 ;;      Totals:         0      16       0       0       0
  2753 ;;Total ram usage:       16 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    3
  2756 ;; This function calls:
  2757 ;;		___ftpack
  2758 ;; This function is called by:
  2759 ;;		_moveDeg
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           
  2764                           ;psect for function ___ftdiv
  2765  0226                     ___ftdiv:	
  2766                           
  2767                           ;incstack = 0
  2768                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2769  0226  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0227  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0228  0836               	movf	___ftdiv@f1,w
  2772  0229  00B9               	movwf	??___ftdiv
  2773  022A  0837               	movf	___ftdiv@f1+1,w
  2774  022B  00BA               	movwf	??___ftdiv+1
  2775  022C  0838               	movf	___ftdiv@f1+2,w
  2776  022D  00BB               	movwf	??___ftdiv+2
  2777  022E  1003               	clrc
  2778  022F  0D3A               	rlf	??___ftdiv+1,w
  2779  0230  0D3B               	rlf	??___ftdiv+2,w
  2780  0231  00BC               	movwf	??___ftdiv+3
  2781  0232  083C               	movf	??___ftdiv+3,w
  2782  0233  00C1               	movwf	___ftdiv@exp
  2783  0234  0841               	movf	___ftdiv@exp,w
  2784  0235  1D03               	btfss	3,2
  2785  0236  2A3E               	goto	l1815
  2786  0237  3000               	movlw	0
  2787  0238  00B3               	movwf	?___ftdiv
  2788  0239  3000               	movlw	0
  2789  023A  00B4               	movwf	?___ftdiv+1
  2790  023B  3000               	movlw	0
  2791  023C  00B5               	movwf	?___ftdiv+2
  2792  023D  0008               	return
  2793  023E                     l1815:	
  2794  023E  0833               	movf	___ftdiv@f2,w
  2795  023F  00B9               	movwf	??___ftdiv
  2796  0240  0834               	movf	___ftdiv@f2+1,w
  2797  0241  00BA               	movwf	??___ftdiv+1
  2798  0242  0835               	movf	___ftdiv@f2+2,w
  2799  0243  00BB               	movwf	??___ftdiv+2
  2800  0244  1003               	clrc
  2801  0245  0D3A               	rlf	??___ftdiv+1,w
  2802  0246  0D3B               	rlf	??___ftdiv+2,w
  2803  0247  00BC               	movwf	??___ftdiv+3
  2804  0248  083C               	movf	??___ftdiv+3,w
  2805  0249  00C2               	movwf	___ftdiv@sign
  2806  024A  0842               	movf	___ftdiv@sign,w
  2807  024B  1D03               	btfss	3,2
  2808  024C  2A54               	goto	l1821
  2809  024D  3000               	movlw	0
  2810  024E  00B3               	movwf	?___ftdiv
  2811  024F  3000               	movlw	0
  2812  0250  00B4               	movwf	?___ftdiv+1
  2813  0251  3000               	movlw	0
  2814  0252  00B5               	movwf	?___ftdiv+2
  2815  0253  0008               	return
  2816  0254                     l1821:	
  2817  0254  3000               	movlw	0
  2818  0255  00BE               	movwf	___ftdiv@f3
  2819  0256  3000               	movlw	0
  2820  0257  00BF               	movwf	___ftdiv@f3+1
  2821  0258  3000               	movlw	0
  2822  0259  00C0               	movwf	___ftdiv@f3+2
  2823  025A  3089               	movlw	137
  2824  025B  0742               	addwf	___ftdiv@sign,w
  2825  025C  00B9               	movwf	??___ftdiv
  2826  025D  0839               	movf	??___ftdiv,w
  2827  025E  02C1               	subwf	___ftdiv@exp,f
  2828  025F  0836               	movf	___ftdiv@f1,w
  2829  0260  00B9               	movwf	??___ftdiv
  2830  0261  0837               	movf	___ftdiv@f1+1,w
  2831  0262  00BA               	movwf	??___ftdiv+1
  2832  0263  0838               	movf	___ftdiv@f1+2,w
  2833  0264  00BB               	movwf	??___ftdiv+2
  2834  0265  3010               	movlw	16
  2835  0266                     u2345:	
  2836  0266  1003               	clrc
  2837  0267  0CBB               	rrf	??___ftdiv+2,f
  2838  0268  0CBA               	rrf	??___ftdiv+1,f
  2839  0269  0CB9               	rrf	??___ftdiv,f
  2840  026A  3EFF               	addlw	-1
  2841  026B  1D03               	skipz
  2842  026C  2A66               	goto	u2345
  2843  026D  0839               	movf	??___ftdiv,w
  2844  026E  00BC               	movwf	??___ftdiv+3
  2845  026F  083C               	movf	??___ftdiv+3,w
  2846  0270  00C2               	movwf	___ftdiv@sign
  2847  0271  0833               	movf	___ftdiv@f2,w
  2848  0272  00B9               	movwf	??___ftdiv
  2849  0273  0834               	movf	___ftdiv@f2+1,w
  2850  0274  00BA               	movwf	??___ftdiv+1
  2851  0275  0835               	movf	___ftdiv@f2+2,w
  2852  0276  00BB               	movwf	??___ftdiv+2
  2853  0277  3010               	movlw	16
  2854  0278                     u2355:	
  2855  0278  1003               	clrc
  2856  0279  0CBB               	rrf	??___ftdiv+2,f
  2857  027A  0CBA               	rrf	??___ftdiv+1,f
  2858  027B  0CB9               	rrf	??___ftdiv,f
  2859  027C  3EFF               	addlw	-1
  2860  027D  1D03               	skipz
  2861  027E  2A78               	goto	u2355
  2862  027F  0839               	movf	??___ftdiv,w
  2863  0280  00BC               	movwf	??___ftdiv+3
  2864  0281  083C               	movf	??___ftdiv+3,w
  2865  0282  06C2               	xorwf	___ftdiv@sign,f
  2866  0283  3080               	movlw	128
  2867  0284  00B9               	movwf	??___ftdiv
  2868  0285  0839               	movf	??___ftdiv,w
  2869  0286  05C2               	andwf	___ftdiv@sign,f
  2870  0287  17B7               	bsf	___ftdiv@f1+1,7
  2871  0288  30FF               	movlw	255
  2872  0289  05B6               	andwf	___ftdiv@f1,f
  2873  028A  30FF               	movlw	255
  2874  028B  05B7               	andwf	___ftdiv@f1+1,f
  2875  028C  3000               	movlw	0
  2876  028D  05B8               	andwf	___ftdiv@f1+2,f
  2877  028E  17B4               	bsf	___ftdiv@f2+1,7
  2878  028F  30FF               	movlw	255
  2879  0290  05B3               	andwf	___ftdiv@f2,f
  2880  0291  30FF               	movlw	255
  2881  0292  05B4               	andwf	___ftdiv@f2+1,f
  2882  0293  3000               	movlw	0
  2883  0294  05B5               	andwf	___ftdiv@f2+2,f
  2884  0295  3018               	movlw	24
  2885  0296  00B9               	movwf	??___ftdiv
  2886  0297  0839               	movf	??___ftdiv,w
  2887  0298  00BD               	movwf	___ftdiv@cntr
  2888  0299                     l1835:	
  2889  0299  3001               	movlw	1
  2890  029A                     u2365:	
  2891  029A  1003               	clrc
  2892  029B  0DBE               	rlf	___ftdiv@f3,f
  2893  029C  0DBF               	rlf	___ftdiv@f3+1,f
  2894  029D  0DC0               	rlf	___ftdiv@f3+2,f
  2895  029E  3EFF               	addlw	-1
  2896  029F  1D03               	skipz
  2897  02A0  2A9A               	goto	u2365
  2898  02A1  0835               	movf	___ftdiv@f2+2,w
  2899  02A2  0238               	subwf	___ftdiv@f1+2,w
  2900  02A3  1D03               	skipz
  2901  02A4  2AAB               	goto	u2375
  2902  02A5  0834               	movf	___ftdiv@f2+1,w
  2903  02A6  0237               	subwf	___ftdiv@f1+1,w
  2904  02A7  1D03               	skipz
  2905  02A8  2AAB               	goto	u2375
  2906  02A9  0833               	movf	___ftdiv@f2,w
  2907  02AA  0236               	subwf	___ftdiv@f1,w
  2908  02AB                     u2375:	
  2909  02AB  1C03               	skipc
  2910  02AC  2AB8               	goto	l1843
  2911  02AD  0833               	movf	___ftdiv@f2,w
  2912  02AE  02B6               	subwf	___ftdiv@f1,f
  2913  02AF  0834               	movf	___ftdiv@f2+1,w
  2914  02B0  1C03               	skipc
  2915  02B1  0F34               	incfsz	___ftdiv@f2+1,w
  2916  02B2  02B7               	subwf	___ftdiv@f1+1,f
  2917  02B3  0835               	movf	___ftdiv@f2+2,w
  2918  02B4  1C03               	skipc
  2919  02B5  0A35               	incf	___ftdiv@f2+2,w
  2920  02B6  02B8               	subwf	___ftdiv@f1+2,f
  2921  02B7  143E               	bsf	___ftdiv@f3,0
  2922  02B8                     l1843:	
  2923  02B8  3001               	movlw	1
  2924  02B9                     u2385:	
  2925  02B9  1003               	clrc
  2926  02BA  0DB6               	rlf	___ftdiv@f1,f
  2927  02BB  0DB7               	rlf	___ftdiv@f1+1,f
  2928  02BC  0DB8               	rlf	___ftdiv@f1+2,f
  2929  02BD  3EFF               	addlw	-1
  2930  02BE  1D03               	skipz
  2931  02BF  2AB9               	goto	u2385
  2932  02C0  3001               	movlw	1
  2933  02C1  02BD               	subwf	___ftdiv@cntr,f
  2934  02C2  1D03               	btfss	3,2
  2935  02C3  2A99               	goto	l1835
  2936  02C4  083E               	movf	___ftdiv@f3,w
  2937  02C5  00A0               	movwf	___ftpack@arg
  2938  02C6  083F               	movf	___ftdiv@f3+1,w
  2939  02C7  00A1               	movwf	___ftpack@arg+1
  2940  02C8  0840               	movf	___ftdiv@f3+2,w
  2941  02C9  00A2               	movwf	___ftpack@arg+2
  2942  02CA  0841               	movf	___ftdiv@exp,w
  2943  02CB  00B9               	movwf	??___ftdiv
  2944  02CC  0839               	movf	??___ftdiv,w
  2945  02CD  00A3               	movwf	___ftpack@exp
  2946  02CE  0842               	movf	___ftdiv@sign,w
  2947  02CF  00BA               	movwf	??___ftdiv+1
  2948  02D0  083A               	movf	??___ftdiv+1,w
  2949  02D1  00A4               	movwf	___ftpack@sign
  2950  02D2  120A  118A  236C   	fcall	___ftpack
  2951  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2952  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2953  02D7  0820               	movf	?___ftpack,w
  2954  02D8  00B3               	movwf	?___ftdiv
  2955  02D9  0821               	movf	?___ftpack+1,w
  2956  02DA  00B4               	movwf	?___ftdiv+1
  2957  02DB  0822               	movf	?___ftpack+2,w
  2958  02DC  00B5               	movwf	?___ftdiv+2
  2959  02DD  0008               	return
  2960  02DE                     __end_of___ftdiv:	
  2961                           
  2962                           	psect	text14
  2963  036C                     __ptext14:	
  2964 ;; *************** function ___ftpack *****************
  2965 ;; Defined at:
  2966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  arg             3    0[BANK0 ] unsigned um
  2969 ;;  exp             1    3[BANK0 ] unsigned char 
  2970 ;;  sign            1    4[BANK0 ] unsigned char 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  3    0[BANK0 ] float 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         0       5       0       0       0
  2983 ;;      Locals:         0       0       0       0       0
  2984 ;;      Temps:          0       3       0       0       0
  2985 ;;      Totals:         0       8       0       0       0
  2986 ;;Total ram usage:        8 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    2
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		___altoft
  2993 ;;		___ftadd
  2994 ;;		___ftdiv
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function ___ftpack
  3000  036C                     ___ftpack:	
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3004  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3005  036D  1303               	bcf	3,6	;RP1=0, select bank0
  3006  036E  0823               	movf	___ftpack@exp,w
  3007  036F  1903               	btfsc	3,2
  3008  0370  2B76               	goto	l1607
  3009  0371  0822               	movf	___ftpack@arg+2,w
  3010  0372  0421               	iorwf	___ftpack@arg+1,w
  3011  0373  0420               	iorwf	___ftpack@arg,w
  3012  0374  1D03               	skipz
  3013  0375  2B89               	goto	l1613
  3014  0376                     l1607:	
  3015  0376  3000               	movlw	0
  3016  0377  00A0               	movwf	?___ftpack
  3017  0378  3000               	movlw	0
  3018  0379  00A1               	movwf	?___ftpack+1
  3019  037A  3000               	movlw	0
  3020  037B  00A2               	movwf	?___ftpack+2
  3021  037C  0008               	return
  3022  037D                     l1611:	
  3023  037D  3001               	movlw	1
  3024  037E  00A5               	movwf	??___ftpack
  3025  037F  0825               	movf	??___ftpack,w
  3026  0380  07A3               	addwf	___ftpack@exp,f
  3027  0381  3001               	movlw	1
  3028  0382                     u1825:	
  3029  0382  1003               	clrc
  3030  0383  0CA2               	rrf	___ftpack@arg+2,f
  3031  0384  0CA1               	rrf	___ftpack@arg+1,f
  3032  0385  0CA0               	rrf	___ftpack@arg,f
  3033  0386  3EFF               	addlw	-1
  3034  0387  1D03               	skipz
  3035  0388  2B82               	goto	u1825
  3036  0389                     l1613:	
  3037  0389  30FE               	movlw	254
  3038  038A  0522               	andwf	___ftpack@arg+2,w
  3039  038B  1903               	btfsc	3,2
  3040  038C  2BA4               	goto	l444
  3041  038D  2B7D               	goto	l1611
  3042  038E                     l1615:	
  3043  038E  3001               	movlw	1
  3044  038F  00A5               	movwf	??___ftpack
  3045  0390  0825               	movf	??___ftpack,w
  3046  0391  07A3               	addwf	___ftpack@exp,f
  3047  0392  3001               	movlw	1
  3048  0393  07A0               	addwf	___ftpack@arg,f
  3049  0394  3000               	movlw	0
  3050  0395  1803               	skipnc
  3051  0396  3001               	movlw	1
  3052  0397  07A1               	addwf	___ftpack@arg+1,f
  3053  0398  3000               	movlw	0
  3054  0399  1803               	skipnc
  3055  039A  3001               	movlw	1
  3056  039B  07A2               	addwf	___ftpack@arg+2,f
  3057  039C  3001               	movlw	1
  3058  039D                     u1845:	
  3059  039D  1003               	clrc
  3060  039E  0CA2               	rrf	___ftpack@arg+2,f
  3061  039F  0CA1               	rrf	___ftpack@arg+1,f
  3062  03A0  0CA0               	rrf	___ftpack@arg,f
  3063  03A1  3EFF               	addlw	-1
  3064  03A2  1D03               	skipz
  3065  03A3  2B9D               	goto	u1845
  3066  03A4                     l444:	
  3067  03A4  30FF               	movlw	255
  3068  03A5  0522               	andwf	___ftpack@arg+2,w
  3069  03A6  1903               	btfsc	3,2
  3070  03A7  2BB3               	goto	l1623
  3071  03A8  2B8E               	goto	l1615
  3072  03A9                     l1621:	
  3073  03A9  3001               	movlw	1
  3074  03AA  02A3               	subwf	___ftpack@exp,f
  3075  03AB  3001               	movlw	1
  3076  03AC                     u1865:	
  3077  03AC  1003               	clrc
  3078  03AD  0DA0               	rlf	___ftpack@arg,f
  3079  03AE  0DA1               	rlf	___ftpack@arg+1,f
  3080  03AF  0DA2               	rlf	___ftpack@arg+2,f
  3081  03B0  3EFF               	addlw	-1
  3082  03B1  1D03               	skipz
  3083  03B2  2BAC               	goto	u1865
  3084  03B3                     l1623:	
  3085  03B3  1BA1               	btfsc	___ftpack@arg+1,7
  3086  03B4  2BB9               	goto	l451
  3087  03B5  3002               	movlw	2
  3088  03B6  0223               	subwf	___ftpack@exp,w
  3089  03B7  1803               	skipnc
  3090  03B8  2BA9               	goto	l1621
  3091  03B9                     l451:	
  3092  03B9  1823               	btfsc	___ftpack@exp,0
  3093  03BA  2BC1               	goto	l452
  3094  03BB  30FF               	movlw	255
  3095  03BC  05A0               	andwf	___ftpack@arg,f
  3096  03BD  307F               	movlw	127
  3097  03BE  05A1               	andwf	___ftpack@arg+1,f
  3098  03BF  30FF               	movlw	255
  3099  03C0  05A2               	andwf	___ftpack@arg+2,f
  3100  03C1                     l452:	
  3101  03C1  1003               	clrc
  3102  03C2  0CA3               	rrf	___ftpack@exp,f
  3103  03C3  0823               	movf	___ftpack@exp,w
  3104  03C4  00A5               	movwf	??___ftpack
  3105  03C5  01A6               	clrf	??___ftpack+1
  3106  03C6  01A7               	clrf	??___ftpack+2
  3107  03C7  3010               	movlw	16
  3108  03C8                     u1905:	
  3109  03C8  1003               	clrc
  3110  03C9  0DA5               	rlf	??___ftpack,f
  3111  03CA  0DA6               	rlf	??___ftpack+1,f
  3112  03CB  0DA7               	rlf	??___ftpack+2,f
  3113  03CC  3EFF               	addlw	-1
  3114  03CD  1D03               	skipz
  3115  03CE  2BC8               	goto	u1905
  3116  03CF  0825               	movf	??___ftpack,w
  3117  03D0  04A0               	iorwf	___ftpack@arg,f
  3118  03D1  0826               	movf	??___ftpack+1,w
  3119  03D2  04A1               	iorwf	___ftpack@arg+1,f
  3120  03D3  0827               	movf	??___ftpack+2,w
  3121  03D4  04A2               	iorwf	___ftpack@arg+2,f
  3122  03D5  0824               	movf	___ftpack@sign,w
  3123  03D6  1903               	btfsc	3,2
  3124  03D7  0008               	return
  3125  03D8  17A2               	bsf	___ftpack@arg+2,7
  3126  03D9  0008               	return
  3127  03DA                     __end_of___ftpack:	
  3128                           
  3129                           	psect	text15
  3130  06F8                     __ptext15:	
  3131 ;; *************** function _initializeADC *****************
  3132 ;; Defined at:
  3133 ;;		line 5 in file "adConv.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3147 ;;      Params:         0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0
  3150 ;;      Totals:         0       0       0       0       0
  3151 ;;Total ram usage:        0 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    2
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function _initializeADC
  3163  06F8                     _initializeADC:	
  3164                           
  3165                           ;adConv.c: 9: ADCON1 = 0b10000000;
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _initializeADC: [wreg]
  3169  06F8  3080               	movlw	128
  3170  06F9  1683               	bsf	3,5	;RP0=1, select bank1
  3171  06FA  1303               	bcf	3,6	;RP1=0, select bank1
  3172  06FB  009F               	movwf	31	;volatile
  3173                           
  3174                           ;adConv.c: 11: ADCON0 = 0b100000001;
  3175  06FC  3001               	movlw	1
  3176  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  3177  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  3178  06FF  009F               	movwf	31	;volatile
  3179                           
  3180                           ;adConv.c: 15: ADIF = 0;
  3181  0700  130C               	bcf	12,6	;volatile
  3182                           
  3183                           ;adConv.c: 16: ADIE = 1;
  3184  0701  1683               	bsf	3,5	;RP0=1, select bank1
  3185  0702  1303               	bcf	3,6	;RP1=0, select bank1
  3186  0703  170C               	bsf	12,6	;volatile
  3187                           
  3188                           ;adConv.c: 17: PEIE = 1;
  3189  0704  170B               	bsf	11,6	;volatile
  3190                           
  3191                           ;adConv.c: 18: GIE = 1;
  3192  0705  178B               	bsf	11,7	;volatile
  3193  0706  0008               	return
  3194  0707                     __end_of_initializeADC:	
  3195                           
  3196                           	psect	text16
  3197  06D1                     __ptext16:	
  3198 ;; *************** function _initialise *****************
  3199 ;; Defined at:
  3200 ;;		line 22 in file "main.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3214 ;;      Params:         0       0       0       0       0
  3215 ;;      Locals:         0       0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0
  3217 ;;      Totals:         0       0       0       0       0
  3218 ;;Total ram usage:        0 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    2
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_main
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _initialise
  3230  06D1                     _initialise:	
  3231                           
  3232                           ;main.c: 25: TRISB = 0b00000111;
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in _initialise: [wreg+status,2]
  3236  06D1  3007               	movlw	7
  3237  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  3238  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  3239  06D4  0086               	movwf	6	;volatile
  3240                           
  3241                           ;main.c: 26: TRISC = 0;
  3242  06D5  0187               	clrf	7	;volatile
  3243                           
  3244                           ;main.c: 28: RB3 = 1;
  3245  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3246  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3247  06D8  1586               	bsf	6,3	;volatile
  3248                           
  3249                           ;main.c: 29: RB4 = 1;
  3250  06D9  1606               	bsf	6,4	;volatile
  3251                           
  3252                           ;main.c: 32: TMR0 = 100;
  3253  06DA  3064               	movlw	100
  3254  06DB  0081               	movwf	1	;volatile
  3255                           
  3256                           ;main.c: 33: T0CS = 0;
  3257  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  3258  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  3259  06DE  1281               	bcf	1,5	;volatile
  3260                           
  3261                           ;main.c: 34: T0SE = 0;
  3262  06DF  1201               	bcf	1,4	;volatile
  3263                           
  3264                           ;main.c: 35: PSA = 0;
  3265  06E0  1181               	bcf	1,3	;volatile
  3266                           
  3267                           ;main.c: 36: PS0 = 0;
  3268  06E1  1001               	bcf	1,0	;volatile
  3269                           
  3270                           ;main.c: 37: PS1 = 0;
  3271  06E2  1081               	bcf	1,1	;volatile
  3272                           
  3273                           ;main.c: 38: PS2 = 1;
  3274  06E3  1501               	bsf	1,2	;volatile
  3275                           
  3276                           ;main.c: 40: TMR0IE = 1;
  3277  06E4  168B               	bsf	11,5	;volatile
  3278                           
  3279                           ;main.c: 41: (GIE = 1);
  3280  06E5  178B               	bsf	11,7	;volatile
  3281  06E6  0008               	return
  3282  06E7                     __end_of_initialise:	
  3283                           
  3284                           	psect	text17
  3285  069E                     __ptext17:	
  3286 ;; *************** function _isr *****************
  3287 ;; Defined at:
  3288 ;;		line 11 in file "main.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3302 ;;      Params:         0       0       0       0       0
  3303 ;;      Locals:         0       0       0       0       0
  3304 ;;      Temps:          4       0       0       0       0
  3305 ;;      Totals:         4       0       0       0       0
  3306 ;;Total ram usage:        4 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    1
  3309 ;; This function calls:
  3310 ;;		_debounceButtons
  3311 ;; This function is called by:
  3312 ;;		Interrupt level 1
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _isr
  3318  069E                     _isr:	
  3319                           
  3320                           ;main.c: 12: if (T0IF){
  3321  069E  1D0B               	btfss	11,2	;volatile
  3322  069F  2EA8               	goto	i1l1141
  3323                           
  3324                           ;main.c: 13: T0IF = 0;
  3325  06A0  110B               	bcf	11,2	;volatile
  3326                           
  3327                           ;main.c: 14: TMR0 = 100;
  3328  06A1  3064               	movlw	100
  3329  06A2  0081               	movwf	1	;volatile
  3330                           
  3331                           ;main.c: 15: debounceButtons();
  3332  06A3  120A  118A  266A  120A  118A  	fcall	_debounceButtons
  3333  06A8                     i1l1141:	
  3334                           
  3335                           ;main.c: 16: }
  3336                           ;main.c: 17: if(ADIF){
  3337  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  3338  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  3339  06AA  1F0C               	btfss	12,6	;volatile
  3340  06AB  2EAE               	goto	i1l77
  3341                           
  3342                           ;main.c: 18: conversionDone = 1;
  3343  06AC  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  3344                           
  3345                           ;main.c: 19: ADIF = 0;
  3346  06AD  130C               	bcf	12,6	;volatile
  3347  06AE                     i1l77:	
  3348  06AE  0875               	movf	??_isr+3,w
  3349  06AF  00FF               	movwf	127
  3350  06B0  0874               	movf	??_isr+2,w
  3351  06B1  008A               	movwf	10
  3352  06B2  0873               	movf	??_isr+1,w
  3353  06B3  0084               	movwf	4
  3354  06B4  0E72               	swapf	??_isr^(0+-128),w
  3355  06B5  0083               	movwf	3
  3356  06B6  0EFE               	swapf	126,f
  3357  06B7  0E7E               	swapf	126,w
  3358  06B8  0009               	retfie
  3359  06B9                     __end_of_isr:	
  3360                           
  3361                           	psect	intentry
  3362  0004                     __pintentry:	
  3363                           ;incstack = 0
  3364                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  3365                           
  3366  0004                     interrupt_function:	
  3367  007E                     saved_w	set	btemp
  3368  0004  00FE               	movwf	btemp
  3369  0005  0E03               	swapf	3,w
  3370  0006  00F2               	movwf	??_isr
  3371  0007  0804               	movf	4,w
  3372  0008  00F3               	movwf	??_isr+1
  3373  0009  080A               	movf	10,w
  3374  000A  00F4               	movwf	??_isr+2
  3375  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3376  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3377  000D  087F               	movf	btemp+1,w
  3378  000E  00F5               	movwf	??_isr+3
  3379  000F  120A  118A  2E9E   	ljmp	_isr
  3380                           
  3381                           	psect	text18
  3382  066A                     __ptext18:	
  3383 ;; *************** function _debounceButtons *****************
  3384 ;; Defined at:
  3385 ;;		line 7 in file "timer0.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3399 ;;      Params:         0       0       0       0       0
  3400 ;;      Locals:         0       0       0       0       0
  3401 ;;      Temps:          1       0       0       0       0
  3402 ;;      Totals:         1       0       0       0       0
  3403 ;;Total ram usage:        1 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_isr
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _debounceButtons
  3414  066A                     _debounceButtons:	
  3415                           
  3416                           ;timer0.c: 9: if(!RB0) {
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  3420  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3421  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3422  066C  1806               	btfsc	6,0	;volatile
  3423  066D  2E7A               	goto	i1l1029
  3424                           
  3425                           ;timer0.c: 10: rtcCounter++;
  3426  066E  3001               	movlw	1
  3427  066F  00F1               	movwf	??_debounceButtons
  3428  0670  0871               	movf	??_debounceButtons,w
  3429  0671  07F7               	addwf	_rtcCounter,f	;volatile
  3430                           
  3431                           ;timer0.c: 11: if(rtcCounter >10 &&pb0Released){
  3432  0672  300B               	movlw	11
  3433  0673  0277               	subwf	_rtcCounter,w	;volatile
  3434  0674  1803               	btfsc	3,0
  3435  0675  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3436  0676  2E7C               	goto	i1l1033
  3437                           
  3438                           ;timer0.c: 12: pb0Pressed = 1;
  3439  0677  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  3440                           
  3441                           ;timer0.c: 13: pb0Released = 0;
  3442  0678  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3443                           
  3444                           ;timer0.c: 14: }
  3445                           ;timer0.c: 15: }
  3446  0679  2E7C               	goto	i1l1033
  3447  067A                     i1l1029:	
  3448                           
  3449                           ;timer0.c: 16: else{
  3450                           ;timer0.c: 17: rtcCounter = 0;
  3451  067A  01F7               	clrf	_rtcCounter	;volatile
  3452                           
  3453                           ;timer0.c: 18: pb0Released = 1;
  3454  067B  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  3455  067C                     i1l1033:	
  3456                           
  3457                           ;timer0.c: 19: }
  3458                           ;timer0.c: 21: if(!RB1) {
  3459  067C  1886               	btfsc	6,1	;volatile
  3460  067D  2E8A               	goto	i1l1043
  3461                           
  3462                           ;timer0.c: 22: rtcCounter2++;
  3463  067E  3001               	movlw	1
  3464  067F  00F1               	movwf	??_debounceButtons
  3465  0680  0871               	movf	??_debounceButtons,w
  3466  0681  07F8               	addwf	_rtcCounter2,f	;volatile
  3467                           
  3468                           ;timer0.c: 23: if(rtcCounter2 >10 &&pb1Released){
  3469  0682  300B               	movlw	11
  3470  0683  0278               	subwf	_rtcCounter2,w	;volatile
  3471  0684  1803               	btfsc	3,0
  3472  0685  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3473  0686  2E8C               	goto	i1l1047
  3474                           
  3475                           ;timer0.c: 24: pb1Pressed = 1;
  3476  0687  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  3477                           
  3478                           ;timer0.c: 25: pb1Released = 0;
  3479  0688  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3480                           
  3481                           ;timer0.c: 26: }
  3482                           ;timer0.c: 27: }
  3483  0689  2E8C               	goto	i1l1047
  3484  068A                     i1l1043:	
  3485                           
  3486                           ;timer0.c: 28: else{
  3487                           ;timer0.c: 29: rtcCounter2 = 0;
  3488  068A  01F8               	clrf	_rtcCounter2	;volatile
  3489                           
  3490                           ;timer0.c: 30: pb1Released = 1;
  3491  068B  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  3492  068C                     i1l1047:	
  3493                           
  3494                           ;timer0.c: 31: }
  3495                           ;timer0.c: 32: if(!RB2) {
  3496  068C  1906               	btfsc	6,2	;volatile
  3497  068D  2E9B               	goto	i1l1057
  3498                           
  3499                           ;timer0.c: 33: rtcCounter3++;
  3500  068E  3001               	movlw	1
  3501  068F  00F1               	movwf	??_debounceButtons
  3502  0690  0871               	movf	??_debounceButtons,w
  3503  0691  07F9               	addwf	_rtcCounter3,f	;volatile
  3504                           
  3505                           ;timer0.c: 34: if(rtcCounter3 >10 &&pb2Released){
  3506  0692  300B               	movlw	11
  3507  0693  0279               	subwf	_rtcCounter3,w	;volatile
  3508  0694  1C03               	skipc
  3509  0695  0008               	return
  3510  0696  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3511  0697  0008               	return
  3512                           
  3513                           ;timer0.c: 35: pb2Pressed = 1;
  3514  0698  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  3515                           
  3516                           ;timer0.c: 36: pb2Released = 0;
  3517  0699  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3518                           
  3519                           ;timer0.c: 37: }
  3520                           ;timer0.c: 38: }
  3521  069A  0008               	return
  3522  069B                     i1l1057:	
  3523                           
  3524                           ;timer0.c: 39: else{
  3525                           ;timer0.c: 40: rtcCounter3 = 0;
  3526  069B  01F9               	clrf	_rtcCounter3	;volatile
  3527                           
  3528                           ;timer0.c: 41: pb2Released = 1;
  3529  069C  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  3530  069D  0008               	return
  3531  069E                     __end_of_debounceButtons:	
  3532  007E                     btemp	set	126	;btemp
  3533  007E                     wtemp	set	126
  3534  007E                     wtemp0	set	126
  3535  0080                     wtemp1	set	128
  3536  0082                     wtemp2	set	130
  3537  0084                     wtemp3	set	132
  3538  0086                     wtemp4	set	134
  3539  0088                     wtemp5	set	136
  3540  007F                     wtemp6	set	127
  3541  007E                     ttemp	set	126
  3542  007E                     ttemp0	set	126
  3543  0081                     ttemp1	set	129
  3544  0084                     ttemp2	set	132
  3545  0087                     ttemp3	set	135
  3546  007F                     ttemp4	set	127
  3547  007E                     ltemp	set	126
  3548  007E                     ltemp0	set	126
  3549  0082                     ltemp1	set	130
  3550  0086                     ltemp2	set	134
  3551  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     15      41
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons

Critical Paths under _main in BANK0

    _main->_moveDeg
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    ___ftdiv->___ftneg

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_moveDeg

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   12692
                                             11 BANK1      4     4      0
                         _initialise
                      _initializeADC
                               _move
                            _moveDeg
                        _readADCData
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCData                                          4     2      2     127
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   12110
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    7604
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3490
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2277
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3583
                                             58 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1     452
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2688
                                             19 BANK0     16    10      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
   _initializeADC
   _move
   _moveDeg
     ___ftdiv
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
     _round
       ___ftadd
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _startADCConversion

 _isr (ROOT)
   _debounceButtons

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      F      29       7       51.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      83      12        0.0%
ABS                  0      0      83       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Apr 02 17:42:47 2016

               ___altoft@exp 002E                            pc 0002                  __CFG_CP$OFF 0000  
              ___altoft@sign 002F                           _GO 00FA          ?_startADCConversion 0071  
                         fsr 0004                 ___ftadd@exp1 0066                 ___ftadd@exp2 0065  
               ___ftadd@sign 0064                          l111 04CB                          l194 0625  
                        l451 03B9                          l452 03C1                          l444 03A4  
                        l535 0352                          l475 00D6                          _GIE 005F  
                        _RB0 0030                          _RB1 0031                          _RB2 0032  
                        _RB3 0033                          _RB4 0034                          _PS0 0408  
                        _PS1 0409                          _PS2 040A                 __CFG_CPD$OFF 0000  
                        _PSA 040B                          _isr 069E                          fsr0 0004  
                        indf 0000                 __CFG_FOSC$HS 0000                 ?_readADCData 0020  
               __CFG_LVP$OFF 0000                 ___ftdiv@cntr 003D                 ___ftdiv@sign 0042  
                       l1271 0363                         l1239 02F8                         l1265 0347  
                       l1257 032A                         l1611 037D                         l1267 0355  
                       l1259 033A                         l1621 03A9                         l1613 0389  
                       l1701 009C                         l1623 03B3                         l1615 038E  
                       l1607 0376                         l1703 00A8                         l1713 00C6  
                       l1705 00AD                         l1483 0552                         l1723 00FA  
                       l1715 00D2                         l1707 00B1                         l1821 0254  
                       l1733 011D                         l1645 05C1                         l1815 023E  
                       l1479 052B                         l1719 00E8                         l1647 05D3  
                       l1903 0629                         l1673 0057                         l1657 063C  
                       l1753 057D                         l1843 02B8                         l1835 0299  
                       l1683 006D                         l1773 04BA                         l1677 005E  
                       l1917 01CC                         l1933 0402                         l1925 03E9  
                       l1695 0087                         l1951 0427                         l1793 04F1  
                       l1945 041B                         l1787 04E0                         l1795 04F2  
                       l1939 040E                         l1957 0437                         l1799 04A7  
                       l1897 0606                         _ADIE 0466                         _ADIF 0066  
                       ?_isr 0071         ??_startADCConversion 0020                         _T0IF 005A  
                       _T0CS 040D                         u1125 02FF                         u2115 00B2  
                       u1155 032B                         _T0SE 040C                         u2055 0088  
                       u2145 00C7                         u1185 0349                         u2085 009D  
                       u2405 0600                         u2415 0611                         u2345 0266  
                       u2425 061E                         u2355 0278                         u2507 070D  
                       u2365 029A                         u2517 04F6                         u2375 02AB  
                       u1671 051E                         u1672 051F                         u1905 03C8  
                       u1825 0382                         u2385 02B9                         u1673 0524  
                       u1674 0525                         u1691 0545                         u1692 0546  
                       u1845 039D                         u1693 054B                         u1694 054C  
                       u1935 05C6                         u1865 03AC                         u2497 043D  
                       _PEIE 005E                         i1l77 06AE                         _TMR0 0001  
               __CFG_WRT$OFF 0000                         _main 03DA                 ___ftpack@arg 0020  
               ___ftpack@exp 0023                         _move 04A3                         btemp 007E  
                       ltemp 007E                         start 0012                         ttemp 007E  
                       wtemp 007E                 ___fttol@exp1 0050                 ___fttol@lval 004C  
                      ??_isr 0072                        ?_main 0071              __end_of___ftadd 0137  
                      ?_move 0020                __CFG_WDTE$OFF 0000              __end_of___ftdiv 02DE  
            __end_of___ftneg 071F              __end_of___fttol 036C                        _PORTC 0007  
                      _TRISB 0086                        _TRISC 0087                        _cstep 0076  
                      _frexp 062E                        _errno 00C7            ??_debounceButtons 0071  
              ___ftpack@sign 0024                        _round 0443                        _trunc 0561  
            __end_of_moveDeg 0226               __pbitbssCOMMON 0380               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080                        move@i 0024  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F                        status 0003  
                      wtemp0 007E                        wtemp1 0080                        wtemp2 0082  
                      wtemp3 0084                        wtemp4 0086                        wtemp5 0088  
                      wtemp6 007F              __initialization 0015                 __end_of_main 0443  
               __end_of_move 0502                       ??_main 00C3                ___fttol@sign1 004B  
                     ??_move 0021                       _ADCON0 001F                       _ADCON1 009F  
                     ?_frexp 0020             __end_of___altoft 05ED                       _ADRESH 001E  
                     _ADRESL 009E             __end_of___ftpack 03DA                       ?_round 0067  
             _conversionDone 0380                       ?_trunc 0051                       i1l1033 067C  
                     i1l1043 068A                       i1l1029 067A                       i1l1141 06A8  
                     i1l1047 068C                       i1l1057 069B                       _TMR0IE 005D  
             __CFG_PWRTE$OFF 0000                       ___ftge 0502                    ??___ftadd 0060  
                  ??___ftdiv 0039                    ??___ftneg 0033                    ??___fttol 0047  
                  ??_moveDeg 00B8                       saved_w 007E       __size_of_initializeADC 000F  
                     round@f 006A                       round@x 0067                       trunc@i 0055  
                     trunc@x 0051         __size_of_readADCData 0041      __end_of__initialization 002A  
                 ___altoft@c 0028                   ___ftadd@f1 005A                   ___ftadd@f2 005D  
                 ___ftge@ff1 0020                   ___ftge@ff2 0023                   ___ftdiv@f1 0036  
                 ___ftdiv@f2 0033                   ___ftdiv@f3 003E                   ___ftneg@f1 0030  
                 ___fttol@f1 0043               __pcstackCOMMON 0071                 __pidataBANK1 06B9  
                 _pb0Pressed 0382                   _pb1Pressed 0384                __end_of_frexp 066A  
                 _pb2Pressed 0386                __end_of_round 04A3                __end_of_trunc 05AB  
                    ??_frexp 0024                      ??_round 006A                      ??_trunc 0054  
                 __pbssBANK1 00C7         readADCData@ADCResult 0022                _initializeADC 06F8  
                 __pmaintext 03DA                      ?___ftge 0020                   __pintentry 0004  
                  ?___altoft 0028                    ?___ftpack 0020              _debounceButtons 066A  
__size_of_startADCConversion 000E               ?_initializeADC 0071                move@direction 0020  
            __size_of___ftge 005F                      ___ftadd 002E                      ___ftdiv 0226  
                    ___ftneg 0715                      ___fttol 02DE                   ??___altoft 002C  
                 ??___ftpack 0025                   _initialise 06D1                      __ptext1 0707  
                    __ptext2 05ED                      __ptext3 0137                      __ptext4 0443  
                    __ptext5 0561                      __ptext6 062E                      __ptext7 02DE  
                    __ptext8 05AB                      __ptext9 0715                 __size_of_isr 001B  
                    _moveDeg 0137         end_of_initialization 002A           moveDeg@stepsToMove 00C2  
                 _rtcCounter 0077      __end_of_debounceButtons 069E                   _wholeSteps 00B0  
                ___ftdiv@exp 0041              ??_initializeADC 0020                   main@result 00C5  
                _pb0Released 0383                  _pb1Released 0385               __end_of___ftge 0561  
                _pb2Released 0387                  ?_initialise 0071          start_initialization 0015  
              ??_readADCData 0022                  __end_of_isr 06B9                   frexp@value 0020  
           ?_debounceButtons 0071                     ??___ftge 0026                   init_fetch0 06E7  
                __pdataBANK1 00A0            __size_of___altoft 0042            __size_of___ftpack 006E  
                __pbssCOMMON 0076                    ___latbits 0002                __pcstackBANK0 0020  
              __pcstackBANK1 00B8          __end_of_readADCData 062E          __size_of_initialise 0016  
                  _halfSteps 00A0                   moveDeg@deg 006D                     ?___ftadd 005A  
                   ?___ftdiv 0033                     ?___ftneg 0030                     ?___fttol 0043  
                   ?_moveDeg 006D   __end_of_startADCConversion 0715               __size_of_frexp 003C  
             __size_of_round 0060               __size_of_trunc 004A            interrupt_function 0004  
                _readADCData 05ED                    frexp@eptr 0023             __size_of___ftadd 0109  
           __size_of___ftdiv 00B8             __size_of___ftneg 000A                     ___altoft 05AB  
           __size_of___fttol 008E                 ??_initialise 0020                     ___ftpack 036C  
           __size_of_moveDeg 00EF                     __ptext10 002E                     __ptext11 04A3  
                   __ptext12 0502                     __ptext13 0226                     __ptext14 036C  
                   __ptext15 06F8                     __ptext16 06D1                     __ptext17 069E  
                   __ptext18 066A                    move@steps 0023                   trunc@expon 0058  
              __size_of_main 0069                __size_of_move 005F           __end_of_initialise 06E7  
      __end_of_initializeADC 0707                  _moveDeg$570 00B9                  _moveDeg$571 00BC  
                _moveDeg$572 00BF                     init_ram0 06EB                     intlevel1 0000  
                _rtcCounter2 0078                  _rtcCounter3 0079                  _motorToggle 0381  
   __size_of_debounceButtons 0034           _startADCConversion 0707  
