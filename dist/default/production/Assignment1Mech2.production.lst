

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Apr 08 17:38:43 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009E                     	;# 
   341  009F                     	;# 
   342  010C                     	;# 
   343  010D                     	;# 
   344  010E                     	;# 
   345  010F                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348                           
   349                           	psect	idataBANK1
   350  0D9C                     __pidataBANK1:	
   351                           
   352                           ;initializer for _halfSteps
   353  0D9C  343C               	retlw	60
   354  0D9D  3400               	retlw	0
   355  0D9E  342E               	retlw	46
   356  0D9F  3400               	retlw	0
   357  0DA0  342B               	retlw	43
   358  0DA1  3400               	retlw	0
   359  0DA2  3427               	retlw	39
   360  0DA3  3400               	retlw	0
   361  0DA4  3435               	retlw	53
   362  0DA5  3400               	retlw	0
   363  0DA6  3417               	retlw	23
   364  0DA7  3400               	retlw	0
   365  0DA8  341B               	retlw	27
   366  0DA9  3400               	retlw	0
   367  0DAA  341E               	retlw	30
   368  0DAB  3400               	retlw	0
   369                           
   370                           ;initializer for _wholeSteps
   371  0DAC  343C               	retlw	60
   372  0DAD  3400               	retlw	0
   373  0DAE  342B               	retlw	43
   374  0DAF  3400               	retlw	0
   375  0DB0  3435               	retlw	53
   376  0DB1  3400               	retlw	0
   377  0DB2  341B               	retlw	27
   378  0DB3  3400               	retlw	0
   379  001F                     _ADCON0	set	31
   380  001E                     _ADRESH	set	30
   381  0007                     _PORTC	set	7
   382  0008                     _PORTD	set	8
   383  0009                     _PORTE	set	9
   384  0001                     _TMR0	set	1
   385  0066                     _ADIF	set	102
   386  005F                     _GIE	set	95
   387  00FA                     _GO	set	250
   388  005E                     _PEIE	set	94
   389  0030                     _RB0	set	48
   390  0031                     _RB1	set	49
   391  0032                     _RB2	set	50
   392  0033                     _RB3	set	51
   393  0034                     _RB4	set	52
   394  0035                     _RB5	set	53
   395  0048                     _RE0	set	72
   396  0049                     _RE1	set	73
   397  004A                     _RE2	set	74
   398  005A                     _T0IF	set	90
   399  005D                     _TMR0IE	set	93
   400  009E                     _ADRESL	set	158
   401  0085                     _TRISA	set	133
   402  0086                     _TRISB	set	134
   403  0087                     _TRISC	set	135
   404  0088                     _TRISD	set	136
   405  0089                     _TRISE	set	137
   406  04FE                     _ADCS2	set	1278
   407  04FF                     _ADFM	set	1279
   408  0466                     _ADIE	set	1126
   409  04F8                     _PCFG0	set	1272
   410  04F9                     _PCFG1	set	1273
   411  04FA                     _PCFG2	set	1274
   412  04FB                     _PCFG3	set	1275
   413  0408                     _PS0	set	1032
   414  0409                     _PS1	set	1033
   415  040A                     _PS2	set	1034
   416  040B                     _PSA	set	1035
   417  040D                     _T0CS	set	1037
   418  040C                     _T0SE	set	1036
   419                           
   420                           ; #config settings
   421  0000                     
   422                           	psect	cinit
   423  0015                     start_initialization:	
   424  0015                     __initialization:	
   425                           
   426                           ; Clear objects allocated to BITCOMMON
   427  0015  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   428  0016  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   429                           
   430                           ; Clear objects allocated to COMMON
   431  0017  01F7               	clrf	__pbssCOMMON& (0+127)
   432  0018  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   433  0019  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   434                           
   435                           ; Clear objects allocated to BANK1
   436  001A  1683               	bsf	3,5	;RP0=1, select bank1
   437  001B  1303               	bcf	3,6	;RP1=0, select bank1
   438  001C  01D1               	clrf	__pbssBANK1& (0+127)
   439  001D  01D2               	clrf	(__pbssBANK1+1)& (0+127)
   440  001E  01D3               	clrf	(__pbssBANK1+2)& (0+127)
   441  001F  01D4               	clrf	(__pbssBANK1+3)& (0+127)
   442  0020  01D5               	clrf	(__pbssBANK1+4)& (0+127)
   443  0021  01D6               	clrf	(__pbssBANK1+5)& (0+127)
   444  0022  01D7               	clrf	(__pbssBANK1+6)& (0+127)
   445  0023  01D8               	clrf	(__pbssBANK1+7)& (0+127)
   446  0024  01D9               	clrf	(__pbssBANK1+8)& (0+127)
   447                           
   448                           ; Initialize objects allocated to BANK1
   449  0025  1383               	bcf	3,7	;select IRP bank0
   450  0026  30D1               	movlw	low (__pdataBANK1+24)
   451  0027  00FD               	movwf	btemp+-1
   452  0028  300D               	movlw	high __pidataBANK1
   453  0029  00FE               	movwf	btemp
   454  002A  309C               	movlw	low __pidataBANK1
   455  002B  00FF               	movwf	btemp+1
   456  002C  30B9               	movlw	low __pdataBANK1
   457  002D  0084               	movwf	4
   458  002E  120A  158A  253B   	fcall	init_ram0
   459  0031                     end_of_initialization:	
   460                           ;End of C runtime variable initialization code
   461                           
   462  0031                     __end_of__initialization:	
   463  0031  0183               	clrf	3
   464  0032  120A  118A  2BFA   	ljmp	_main	;jump to C main() function
   465                           
   466                           	psect	bitbssCOMMON
   467  0380                     __pbitbssCOMMON:	
   468  0380                     _conversionDone:	
   469  0380                     	ds	1
   470  0381                     _motorToggle:	
   471  0381                     	ds	1
   472  0382                     _pb0Pressed:	
   473  0382                     	ds	1
   474  0383                     _pb0Released:	
   475  0383                     	ds	1
   476  0384                     _pb1Pressed:	
   477  0384                     	ds	1
   478  0385                     _pb1Released:	
   479  0385                     	ds	1
   480  0386                     _pb2Pressed:	
   481  0386                     	ds	1
   482  0387                     _pb2Released:	
   483  0387                     	ds	1
   484  0388                     _pb3Pressed:	
   485  0388                     	ds	1
   486  0389                     _pb3Released:	
   487  0389                     	ds	1
   488  038A                     _updateLcdIRData:	
   489  038A                     	ds	1
   490                           
   491                           	psect	bssCOMMON
   492  0077                     __pbssCOMMON:	
   493  0077                     _cstep:	
   494  0077                     	ds	1
   495  0078                     _pbCounter:	
   496  0078                     	ds	1
   497  0079                     _pbCounter2:	
   498  0079                     	ds	1
   499                           
   500                           	psect	bssBANK1
   501  00D1                     __pbssBANK1:	
   502  00D1                     _errno:	
   503  00D1                     	ds	2
   504  00D3                     _nrOfSteps:	
   505  00D3                     	ds	2
   506  00D5                     _rtcCounter:	
   507  00D5                     	ds	2
   508  00D7                     _irLcdCounter:	
   509  00D7                     	ds	1
   510  00D8                     _pbCounter3:	
   511  00D8                     	ds	1
   512  00D9                     _pbCounter4:	
   513  00D9                     	ds	1
   514                           
   515                           	psect	dataBANK1
   516  00B9                     __pdataBANK1:	
   517  00B9                     _halfSteps:	
   518  00B9                     	ds	16
   519  00C9                     _wholeSteps:	
   520  00C9                     	ds	8
   521                           
   522                           	psect	inittext
   523  0D37                     init_fetch0:	
   524                           ;	Called with low address in FSR and high address in W
   525                           
   526  0D37  087E               	movf	126,w
   527  0D38  008A               	movwf	10
   528  0D39  087F               	movf	127,w
   529  0D3A  0082               	movwf	2
   530  0D3B                     init_ram0:	
   531                           ;Called with:
   532                           ;	high address of idata address in btemp 
   533                           ;	low address of idata address in btemp+1 
   534                           ;	low address of data in FSR
   535                           ;	high address + 1 of data in btemp-1
   536                           
   537  0D3B  2537  120A  158A   	fcall	init_fetch0
   538  0D3E  0080               	movwf	0
   539  0D3F  0A84               	incf	4,f
   540  0D40  0804               	movf	4,w
   541  0D41  067D               	xorwf	125,w
   542  0D42  1903               	btfsc	3,2
   543  0D43  3400               	retlw	0
   544  0D44  0AFF               	incf	127,f
   545  0D45  1903               	btfsc	3,2
   546  0D46  0AFE               	incf	126,f
   547  0D47  2D3B               	goto	init_ram0
   548                           
   549                           	psect	cstackBANK1
   550  00A0                     __pcstackBANK1:	
   551  00A0                     ??_moveDeg:	
   552  00A0                     readADCMeter@rawInverted:	
   553                           ; 1 bytes @ 0x0
   554                           
   555                           
   556                           ; 3 bytes @ 0x0
   557  00A0                     	ds	1
   558  00A1                     _moveDeg$678:	
   559                           
   560                           ; 3 bytes @ 0x1
   561  00A1                     	ds	2
   562  00A3                     readADCMeter@k:	
   563                           
   564                           ; 3 bytes @ 0x3
   565  00A3                     	ds	1
   566  00A4                     _moveDeg$679:	
   567                           
   568                           ; 3 bytes @ 0x4
   569  00A4                     	ds	2
   570  00A6                     readADCMeter@m:	
   571                           
   572                           ; 3 bytes @ 0x6
   573  00A6                     	ds	1
   574  00A7                     _moveDeg$680:	
   575                           
   576                           ; 3 bytes @ 0x7
   577  00A7                     	ds	2
   578  00A9                     readADCMeter@result:	
   579                           
   580                           ; 3 bytes @ 0x9
   581  00A9                     	ds	1
   582  00AA                     moveDeg@stepsToMove:	
   583                           
   584                           ; 1 bytes @ 0xA
   585  00AA                     	ds	2
   586  00AC                     _readADCMeter$681:	
   587                           
   588                           ; 3 bytes @ 0xC
   589  00AC                     	ds	3
   590  00AF                     readADCMeter@raw:	
   591                           
   592                           ; 2 bytes @ 0xF
   593  00AF                     	ds	2
   594  00B1                     readADCMeter@resultInInt:	
   595                           
   596                           ; 2 bytes @ 0x11
   597  00B1                     	ds	2
   598  00B3                     ??_main:	
   599                           
   600                           ; 1 bytes @ 0x13
   601  00B3                     	ds	2
   602  00B5                     main@result:	
   603                           
   604                           ; 2 bytes @ 0x15
   605  00B5                     	ds	2
   606  00B7                     main@resultInMeters:	
   607                           
   608                           ; 2 bytes @ 0x17
   609  00B7                     	ds	2
   610                           
   611                           	psect	cstackCOMMON
   612  0072                     __pcstackCOMMON:	
   613  0072                     ?_flashLed:	
   614  0072                     ??_flashLed:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0072                     ?_debounceButtons:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0072                     ??_debounceButtons:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0072                     ?_lcdRefresh:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0072                     ??_lcdRefresh:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0072                     ?_initializeTimer0:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0072                     ?_initializeADC:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0072                     ?_setupLCD:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0072                     ?_startADCConversion:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0072                     ?_lcdSetCursor:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0072                     ?_isr:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0072                     ?_initialise:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0072                     ?_main:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0072                     ?_lcdWriteControl:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0072                     ?_lcdWriteData:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0072                     ?_initializeMotor:	
   660                           ; 1 bytes @ 0x0
   661                           
   662                           
   663                           ; 2 bytes @ 0x0
   664  0072                     	ds	1
   665  0073                     ??_isr:	
   666                           
   667                           ; 1 bytes @ 0x1
   668  0073                     	ds	4
   669                           
   670                           	psect	cstackBANK0
   671  0020                     __pcstackBANK0:	
   672  0020                     ?___ftge:	
   673  0020                     ??_initializeTimer0:	
   674                           ; 1 bit 
   675                           
   676  0020                     ??_initializeADC:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ??_startADCConversion:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     ??_lcdWriteControl:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0020                     ??_lcdWriteData:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0020                     ?_readADCData:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0020                     ?___wmul:	
   692                           ; 2 bytes @ 0x0
   693                           
   694  0020                     ?___ftpack:	
   695                           ; 2 bytes @ 0x0
   696                           
   697  0020                     ?_frexp:	
   698                           ; 3 bytes @ 0x0
   699                           
   700  0020                     ___wmul@multiplier:	
   701                           ; 3 bytes @ 0x0
   702                           
   703  0020                     ___ftpack@arg:	
   704                           ; 2 bytes @ 0x0
   705                           
   706  0020                     ___ftge@ff1:	
   707                           ; 3 bytes @ 0x0
   708                           
   709  0020                     frexp@value:	
   710                           ; 3 bytes @ 0x0
   711                           
   712                           
   713                           ; 3 bytes @ 0x0
   714  0020                     	ds	2
   715  0022                     ??_readADCData:	
   716  0022                     lcdWriteControl@databyte:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0022                     lcdWriteData@databyte:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0022                     readADCData@ADCResult:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0022                     ___wmul@multiplicand:	
   726                           ; 2 bytes @ 0x2
   727                           
   728                           
   729                           ; 2 bytes @ 0x2
   730  0022                     	ds	1
   731  0023                     ??_setupLCD:	
   732  0023                     ??_lcdSetCursor:	
   733                           ; 1 bytes @ 0x3
   734                           
   735  0023                     lcdSetCursor@address:	
   736                           ; 1 bytes @ 0x3
   737                           
   738  0023                     ___ftpack@exp:	
   739                           ; 1 bytes @ 0x3
   740                           
   741  0023                     frexp@eptr:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  0023                     ___ftge@ff2:	
   745                           ; 1 bytes @ 0x3
   746                           
   747                           
   748                           ; 3 bytes @ 0x3
   749  0023                     	ds	1
   750  0024                     ??_frexp:	
   751  0024                     ??___wmul:	
   752                           ; 1 bytes @ 0x4
   753                           
   754  0024                     ___ftpack@sign:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  0024                     ___wmul@product:	
   758                           ; 1 bytes @ 0x4
   759                           
   760                           
   761                           ; 2 bytes @ 0x4
   762  0024                     	ds	1
   763  0025                     ??___ftpack:	
   764                           
   765                           ; 1 bytes @ 0x5
   766  0025                     	ds	1
   767  0026                     ?_lcdWriteToDigitBCD:	
   768  0026                     ??___ftge:	
   769                           ; 1 bytes @ 0x6
   770                           
   771  0026                     lcdWriteToDigitBCD@data:	
   772                           ; 1 bytes @ 0x6
   773                           
   774                           
   775                           ; 2 bytes @ 0x6
   776  0026                     	ds	2
   777  0028                     ?___altoft:	
   778  0028                     ?___awtoft:	
   779                           ; 3 bytes @ 0x8
   780                           
   781  0028                     ?___ftmul:	
   782                           ; 3 bytes @ 0x8
   783                           
   784  0028                     lcdWriteToDigitBCD@digits:	
   785                           ; 3 bytes @ 0x8
   786                           
   787  0028                     ___awtoft@c:	
   788                           ; 1 bytes @ 0x8
   789                           
   790  0028                     ___ftmul@f1:	
   791                           ; 2 bytes @ 0x8
   792                           
   793  0028                     ___altoft@c:	
   794                           ; 3 bytes @ 0x8
   795                           
   796                           
   797                           ; 4 bytes @ 0x8
   798  0028                     	ds	1
   799  0029                     lcdWriteToDigitBCD@showSign:	
   800                           
   801                           ; 1 bytes @ 0x9
   802  0029                     	ds	1
   803  002A                     ??_lcdWriteToDigitBCD:	
   804                           
   805                           ; 1 bytes @ 0xA
   806  002A                     	ds	1
   807  002B                     ??___awtoft:	
   808  002B                     lcdWriteToDigitBCD@TensDigit:	
   809                           ; 1 bytes @ 0xB
   810                           
   811  002B                     ___ftmul@f2:	
   812                           ; 1 bytes @ 0xB
   813                           
   814                           
   815                           ; 3 bytes @ 0xB
   816  002B                     	ds	1
   817  002C                     ??___altoft:	
   818  002C                     lcdWriteToDigitBCD@HundredDigit:	
   819                           ; 1 bytes @ 0xC
   820                           
   821                           
   822                           ; 1 bytes @ 0xC
   823  002C                     	ds	1
   824  002D                     lcdWriteToDigitBCD@ThousandDigit:	
   825  002D                     ___awtoft@sign:	
   826                           ; 1 bytes @ 0xD
   827                           
   828                           
   829                           ; 1 bytes @ 0xD
   830  002D                     	ds	1
   831  002E                     ??___ftmul:	
   832  002E                     lcdWriteToDigitBCD@sign:	
   833                           ; 1 bytes @ 0xE
   834                           
   835  002E                     ___altoft@exp:	
   836                           ; 1 bytes @ 0xE
   837                           
   838                           
   839                           ; 1 bytes @ 0xE
   840  002E                     	ds	1
   841  002F                     ___altoft@sign:	
   842  002F                     lcdWriteToDigitBCD@OnesDigit:	
   843                           ; 1 bytes @ 0xF
   844                           
   845                           
   846                           ; 2 bytes @ 0xF
   847  002F                     	ds	1
   848  0030                     ?___ftneg:	
   849  0030                     ___ftneg@f1:	
   850                           ; 3 bytes @ 0x10
   851                           
   852                           
   853                           ; 3 bytes @ 0x10
   854  0030                     	ds	1
   855  0031                     ??_initializeMotor:	
   856  0031                     ?_move:	
   857                           ; 1 bytes @ 0x11
   858                           
   859  0031                     move@direction:	
   860                           ; 1 bytes @ 0x11
   861                           
   862                           
   863                           ; 1 bytes @ 0x11
   864  0031                     	ds	1
   865  0032                     ??_move:	
   866  0032                     ??_initialise:	
   867                           ; 1 bytes @ 0x12
   868                           
   869  0032                     ___ftmul@exp:	
   870                           ; 1 bytes @ 0x12
   871                           
   872                           
   873                           ; 1 bytes @ 0x12
   874  0032                     	ds	1
   875  0033                     ??___ftneg:	
   876  0033                     ?___ftdiv:	
   877                           ; 1 bytes @ 0x13
   878                           
   879  0033                     ___ftdiv@f2:	
   880                           ; 3 bytes @ 0x13
   881                           
   882  0033                     ___ftmul@f3_as_product:	
   883                           ; 3 bytes @ 0x13
   884                           
   885                           
   886                           ; 3 bytes @ 0x13
   887  0033                     	ds	1
   888  0034                     move@steps:	
   889                           
   890                           ; 1 bytes @ 0x14
   891  0034                     	ds	1
   892  0035                     move@i:	
   893                           
   894                           ; 1 bytes @ 0x15
   895  0035                     	ds	1
   896  0036                     ___ftmul@cntr:	
   897  0036                     ___ftdiv@f1:	
   898                           ; 1 bytes @ 0x16
   899                           
   900                           
   901                           ; 3 bytes @ 0x16
   902  0036                     	ds	1
   903  0037                     ___ftmul@sign:	
   904                           
   905                           ; 1 bytes @ 0x17
   906  0037                     	ds	2
   907  0039                     ??___ftdiv:	
   908                           
   909                           ; 1 bytes @ 0x19
   910  0039                     	ds	4
   911  003D                     ___ftdiv@cntr:	
   912                           
   913                           ; 1 bytes @ 0x1D
   914  003D                     	ds	1
   915  003E                     ___ftdiv@f3:	
   916                           
   917                           ; 3 bytes @ 0x1E
   918  003E                     	ds	3
   919  0041                     ___ftdiv@exp:	
   920                           
   921                           ; 1 bytes @ 0x21
   922  0041                     	ds	1
   923  0042                     ___ftdiv@sign:	
   924                           
   925                           ; 1 bytes @ 0x22
   926  0042                     	ds	1
   927  0043                     ?___fttol:	
   928  0043                     ___fttol@f1:	
   929                           ; 4 bytes @ 0x23
   930                           
   931                           
   932                           ; 3 bytes @ 0x23
   933  0043                     	ds	4
   934  0047                     ??___fttol:	
   935                           
   936                           ; 1 bytes @ 0x27
   937  0047                     	ds	4
   938  004B                     ___fttol@sign1:	
   939                           
   940                           ; 1 bytes @ 0x2B
   941  004B                     	ds	1
   942  004C                     ___fttol@lval:	
   943                           
   944                           ; 4 bytes @ 0x2C
   945  004C                     	ds	4
   946  0050                     ___fttol@exp1:	
   947                           
   948                           ; 1 bytes @ 0x30
   949  0050                     	ds	1
   950  0051                     ?_trunc:	
   951  0051                     trunc@x:	
   952                           ; 3 bytes @ 0x31
   953                           
   954                           
   955                           ; 3 bytes @ 0x31
   956  0051                     	ds	3
   957  0054                     ??_trunc:	
   958                           
   959                           ; 1 bytes @ 0x34
   960  0054                     	ds	1
   961  0055                     trunc@i:	
   962                           
   963                           ; 3 bytes @ 0x35
   964  0055                     	ds	3
   965  0058                     trunc@expon:	
   966                           
   967                           ; 2 bytes @ 0x38
   968  0058                     	ds	2
   969  005A                     ?___ftadd:	
   970  005A                     ___ftadd@f1:	
   971                           ; 3 bytes @ 0x3A
   972                           
   973                           
   974                           ; 3 bytes @ 0x3A
   975  005A                     	ds	3
   976  005D                     ___ftadd@f2:	
   977                           
   978                           ; 3 bytes @ 0x3D
   979  005D                     	ds	3
   980  0060                     ??___ftadd:	
   981                           
   982                           ; 1 bytes @ 0x40
   983  0060                     	ds	4
   984  0064                     ___ftadd@sign:	
   985                           
   986                           ; 1 bytes @ 0x44
   987  0064                     	ds	1
   988  0065                     ___ftadd@exp2:	
   989                           
   990                           ; 1 bytes @ 0x45
   991  0065                     	ds	1
   992  0066                     ___ftadd@exp1:	
   993                           
   994                           ; 1 bytes @ 0x46
   995  0066                     	ds	1
   996  0067                     ?_round:	
   997  0067                     round@x:	
   998                           ; 3 bytes @ 0x47
   999                           
  1000                           
  1001                           ; 3 bytes @ 0x47
  1002  0067                     	ds	3
  1003  006A                     ??_round:	
  1004  006A                     round@f:	
  1005                           ; 1 bytes @ 0x4A
  1006                           
  1007                           
  1008                           ; 3 bytes @ 0x4A
  1009  006A                     	ds	3
  1010  006D                     ?_moveDeg:	
  1011  006D                     ?_readADCMeter:	
  1012                           ; 1 bytes @ 0x4D
  1013                           
  1014  006D                     moveDeg@deg:	
  1015                           ; 2 bytes @ 0x4D
  1016                           
  1017                           
  1018                           ; 3 bytes @ 0x4D
  1019  006D                     	ds	2
  1020  006F                     ??_readADCMeter:	
  1021                           
  1022                           ; 1 bytes @ 0x4F
  1023  006F                     	ds	1
  1024                           
  1025                           	psect	maintext
  1026  03FA                     __pmaintext:	
  1027 ;;
  1028 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1029 ;;
  1030 ;; *************** function _main *****************
  1031 ;; Defined at:
  1032 ;;		line 44 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;  resultInMete    2   23[BANK1 ] int 
  1037 ;;  result          2   21[BANK1 ] int 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : B00/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1047 ;;      Params:         0       0       0       0       0
  1048 ;;      Locals:         0       0       4       0       0
  1049 ;;      Temps:          0       0       2       0       0
  1050 ;;      Totals:         0       0       6       0       0
  1051 ;;Total ram usage:        6 bytes
  1052 ;; Hardware stack levels required when called:    7
  1053 ;; This function calls:
  1054 ;;		_initialise
  1055 ;;		_lcdSetCursor
  1056 ;;		_lcdWriteToDigitBCD
  1057 ;;		_move
  1058 ;;		_moveDeg
  1059 ;;		_readADCData
  1060 ;;		_readADCMeter
  1061 ;;		_startADCConversion
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _main
  1069  03FA                     _main:	
  1070                           
  1071                           ;main.c: 46: initialise();
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1075  03FA  120A  158A  25B4  120A  118A  	fcall	_initialise
  1076                           
  1077                           ;main.c: 47: startADCConversion();
  1078  03FF  120A  158A  250B  120A  118A  	fcall	_startADCConversion
  1079  0404                     l2826:	
  1080                           ;main.c: 50: while(1){
  1081                           
  1082                           
  1083                           ;main.c: 53: if(conversionDone){
  1084  0404  1C70               	btfss	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1085  0405  2C71               	goto	l2840
  1086                           
  1087                           ;main.c: 54: conversionDone = 0;
  1088  0406  1070               	bcf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  1089                           
  1090                           ;main.c: 55: int result = readADCData();
  1091  0407  120A  158A  2528  120A  118A  	fcall	_readADCData
  1092  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1093  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1094  040E  0821               	movf	?_readADCData+1,w
  1095  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1096  0410  1303               	bcf	3,6	;RP1=0, select bank1
  1097  0411  00B6               	movwf	(main@result+1)^(0+128)
  1098  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1099  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1100  0414  0820               	movf	?_readADCData,w
  1101  0415  1683               	bsf	3,5	;RP0=1, select bank1
  1102  0416  1303               	bcf	3,6	;RP1=0, select bank1
  1103  0417  00B5               	movwf	main@result^(0+128)
  1104                           
  1105                           ;main.c: 56: int resultInMeters = readADCMeter();
  1106  0418  120A  118A  213E  120A  118A  	fcall	_readADCMeter
  1107  041D  1283               	bcf	3,5	;RP0=0, select bank0
  1108  041E  1303               	bcf	3,6	;RP1=0, select bank0
  1109  041F  086E               	movf	?_readADCMeter+1,w
  1110  0420  1683               	bsf	3,5	;RP0=1, select bank1
  1111  0421  1303               	bcf	3,6	;RP1=0, select bank1
  1112  0422  00B8               	movwf	(main@resultInMeters+1)^(0+128)
  1113  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0424  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0425  086D               	movf	?_readADCMeter,w
  1116  0426  1683               	bsf	3,5	;RP0=1, select bank1
  1117  0427  1303               	bcf	3,6	;RP1=0, select bank1
  1118  0428  00B7               	movwf	main@resultInMeters^(0+128)
  1119                           
  1120                           ;main.c: 57: if(updateLcdIRData){
  1121  0429  1D71               	btfss	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1122  042A  2C6C               	goto	l99
  1123                           
  1124                           ;main.c: 58: lcdSetCursor(0x00);
  1125  042B  3000               	movlw	0
  1126  042C  120A  158A  24EB  120A  118A  	fcall	_lcdSetCursor
  1127                           
  1128                           ;main.c: 59: lcdWriteToDigitBCD(result,4,0);
  1129  0431  1683               	bsf	3,5	;RP0=1, select bank1
  1130  0432  1303               	bcf	3,6	;RP1=0, select bank1
  1131  0433  0836               	movf	(main@result+1)^(0+128),w
  1132  0434  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0435  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0436  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1135  0437  1683               	bsf	3,5	;RP0=1, select bank1
  1136  0438  1303               	bcf	3,6	;RP1=0, select bank1
  1137  0439  0835               	movf	main@result^(0+128),w
  1138  043A  1283               	bcf	3,5	;RP0=0, select bank0
  1139  043B  1303               	bcf	3,6	;RP1=0, select bank0
  1140  043C  00A6               	movwf	lcdWriteToDigitBCD@data
  1141  043D  3004               	movlw	4
  1142  043E  1683               	bsf	3,5	;RP0=1, select bank1
  1143  043F  1303               	bcf	3,6	;RP1=0, select bank1
  1144  0440  00B3               	movwf	??_main^(0+128)
  1145  0441  0833               	movf	??_main^(0+128),w
  1146  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0444  00A8               	movwf	lcdWriteToDigitBCD@digits
  1149  0445  01A9               	clrf	lcdWriteToDigitBCD@showSign
  1150  0446  120A  118A  2575  120A  118A  	fcall	_lcdWriteToDigitBCD
  1151                           
  1152                           ;main.c: 60: lcdSetCursor(0x0B);
  1153  044B  300B               	movlw	11
  1154  044C  120A  158A  24EB  120A  118A  	fcall	_lcdSetCursor
  1155                           
  1156                           ;main.c: 61: lcdWriteToDigitBCD(resultInMeters,3,0);
  1157  0451  1683               	bsf	3,5	;RP0=1, select bank1
  1158  0452  1303               	bcf	3,6	;RP1=0, select bank1
  1159  0453  0838               	movf	(main@resultInMeters+1)^(0+128),w
  1160  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1162  0456  00A7               	movwf	lcdWriteToDigitBCD@data+1
  1163  0457  1683               	bsf	3,5	;RP0=1, select bank1
  1164  0458  1303               	bcf	3,6	;RP1=0, select bank1
  1165  0459  0837               	movf	main@resultInMeters^(0+128),w
  1166  045A  1283               	bcf	3,5	;RP0=0, select bank0
  1167  045B  1303               	bcf	3,6	;RP1=0, select bank0
  1168  045C  00A6               	movwf	lcdWriteToDigitBCD@data
  1169  045D  3003               	movlw	3
  1170  045E  1683               	bsf	3,5	;RP0=1, select bank1
  1171  045F  1303               	bcf	3,6	;RP1=0, select bank1
  1172  0460  00B3               	movwf	??_main^(0+128)
  1173  0461  0833               	movf	??_main^(0+128),w
  1174  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1175  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0464  00A8               	movwf	lcdWriteToDigitBCD@digits
  1177  0465  01A9               	clrf	lcdWriteToDigitBCD@showSign
  1178  0466  120A  118A  2575  120A  118A  	fcall	_lcdWriteToDigitBCD
  1179                           
  1180                           ;main.c: 62: updateLcdIRData = 0;
  1181  046B  1171               	bcf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  1182  046C                     l99:	
  1183                           
  1184                           ;main.c: 63: }
  1185                           ;main.c: 65: startADCConversion();
  1186  046C  120A  158A  250B  120A  118A  	fcall	_startADCConversion
  1187  0471                     l2840:	
  1188                           
  1189                           ;main.c: 67: }
  1190                           ;main.c: 68: if(pb0Pressed){
  1191  0471  1D70               	btfss	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1192  0472  2C82               	goto	l2848
  1193                           
  1194                           ;main.c: 69: move(1,1);
  1195  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0474  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0475  01B1               	clrf	move@direction
  1198  0476  0AB1               	incf	move@direction,f
  1199  0477  3001               	movlw	1
  1200  0478  120A  118A  2614  120A  118A  	fcall	_move
  1201                           
  1202                           ;main.c: 70: RB4 = !RB4;
  1203  047D  3010               	movlw	16
  1204  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1205  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1206  0480  0686               	xorwf	6,f
  1207                           
  1208                           ;main.c: 71: pb0Pressed = 0;
  1209  0481  1170               	bcf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  1210  0482                     l2848:	
  1211                           
  1212                           ;main.c: 72: }
  1213                           ;main.c: 73: if(pb1Pressed){
  1214  0482  1E70               	btfss	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1215  0483  2C8E               	goto	l2854
  1216                           
  1217                           ;main.c: 74: move(1,0);
  1218  0484  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0485  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0486  01B1               	clrf	move@direction
  1221  0487  3001               	movlw	1
  1222  0488  120A  118A  2614  120A  118A  	fcall	_move
  1223                           
  1224                           ;main.c: 75: pb1Pressed = 0;
  1225  048D  1270               	bcf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  1226  048E                     l2854:	
  1227                           
  1228                           ;main.c: 76: }
  1229                           ;main.c: 77: if(pb2Pressed){
  1230  048E  1F70               	btfss	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1231  048F  2CAA               	goto	l2866
  1232                           
  1233                           ;main.c: 78: if(motorToggle){
  1234  0490  1CF0               	btfss	_motorToggle/(0+8),_motorToggle& (0+7)
  1235  0491  2C9A               	goto	l2860
  1236                           
  1237                           ;main.c: 79: moveDeg(-180);
  1238  0492  3000               	movlw	0
  1239  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1240  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1241  0495  00ED               	movwf	moveDeg@deg
  1242  0496  3034               	movlw	52
  1243  0497  00EE               	movwf	moveDeg@deg+1
  1244  0498  30C3               	movlw	195
  1245  0499  2CA1               	goto	L1
  1246  049A                     l2860:	
  1247                           ;main.c: 80: }
  1248                           
  1249                           
  1250                           ;main.c: 81: else{
  1251                           ;main.c: 82: moveDeg(180);
  1252  049A  3000               	movlw	0
  1253  049B  1283               	bcf	3,5	;RP0=0, select bank0
  1254  049C  1303               	bcf	3,6	;RP1=0, select bank0
  1255  049D  00ED               	movwf	moveDeg@deg
  1256  049E  3034               	movlw	52
  1257  049F  00EE               	movwf	moveDeg@deg+1
  1258  04A0  3043               	movlw	67
  1259  04A1                     L1:	
  1260  04A1  00EF               	movwf	moveDeg@deg+2
  1261  04A2  120A  118A  2238  120A  118A  	fcall	_moveDeg
  1262                           
  1263                           ;main.c: 83: }
  1264                           ;main.c: 84: motorToggle = !motorToggle;
  1265  04A7  3002               	movlw	(0+1) shl (_motorToggle& (0+7))
  1266  04A8  06F0               	xorwf	_motorToggle/(0+8),f
  1267                           
  1268                           ;main.c: 85: pb2Pressed = 0;
  1269  04A9  1370               	bcf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  1270  04AA                     l2866:	
  1271                           
  1272                           ;main.c: 86: }
  1273                           ;main.c: 87: if(pb3Pressed){
  1274  04AA  1C71               	btfss	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1275  04AB  2CB1               	goto	l105
  1276                           
  1277                           ;main.c: 88: RB4 = !RB4;
  1278  04AC  3010               	movlw	16
  1279  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1280  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1281  04AF  0686               	xorwf	6,f
  1282                           
  1283                           ;main.c: 89: pb3Pressed = 0;
  1284  04B0  1071               	bcf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  1285  04B1                     l105:	
  1286                           
  1287                           ;main.c: 90: }
  1288                           ;main.c: 92: _delay((unsigned long)((20)*(20000000/4000.0)));
  1289  04B1  3082               	movlw	130
  1290  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  1291  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  1292  04B4  00B4               	movwf	(??_main^(0+128)+1)
  1293  04B5  30DD               	movlw	221
  1294  04B6  00B3               	movwf	??_main^(0+128)
  1295  04B7                     u3637:	
  1296  04B7  0BB3               	decfsz	??_main^(0+128),f
  1297  04B8  2CB7               	goto	u3637
  1298  04B9  0BB4               	decfsz	(??_main^(0+128)+1),f
  1299  04BA  2CB7               	goto	u3637
  1300  04BB  2CBC               	nop2
  1301  04BC  2C04               	goto	l2826
  1302  04BD                     __end_of_main:	
  1303                           
  1304                           	psect	text1
  1305  0D0B                     __ptext1:	
  1306 ;; *************** function _startADCConversion *****************
  1307 ;; Defined at:
  1308 ;;		line 43 in file "adConv.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1322 ;;      Params:         0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0
  1324 ;;      Temps:          0       2       0       0       0
  1325 ;;      Totals:         0       2       0       0       0
  1326 ;;Total ram usage:        2 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           
  1337                           ;psect for function _startADCConversion
  1338  0D0B                     _startADCConversion:	
  1339                           
  1340                           ;adConv.c: 45: _delay((unsigned long)((1)*(20000000/4000.0)));
  1341                           
  1342                           ;incstack = 0
  1343                           ; Regs used in _startADCConversion: [wreg]
  1344  0D0B  3007               	movlw	7
  1345  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0D0E  00A1               	movwf	??_startADCConversion+1
  1348  0D0F  307D               	movlw	125
  1349  0D10  00A0               	movwf	??_startADCConversion
  1350  0D11                     u3647:	
  1351  0D11  0BA0               	decfsz	??_startADCConversion,f
  1352  0D12  2D11               	goto	u3647
  1353  0D13  0BA1               	decfsz	??_startADCConversion+1,f
  1354  0D14  2D11               	goto	u3647
  1355                           
  1356                           ;adConv.c: 47: GO = 1;
  1357  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  1358  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  1359  0D17  151F               	bsf	31,2	;volatile
  1360  0D18  0008               	return
  1361  0D19                     __end_of_startADCConversion:	
  1362                           
  1363                           	psect	text2
  1364  013E                     __ptext2:	
  1365 ;; *************** function _readADCMeter *****************
  1366 ;; Defined at:
  1367 ;;		line 34 in file "adConv.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  result          3    9[BANK1 ] void 
  1372 ;;  m               3    6[BANK1 ] void 
  1373 ;;  k               3    3[BANK1 ] void 
  1374 ;;  rawInverted     3    0[BANK1 ] void 
  1375 ;;  resultInInt     2   17[BANK1 ] int 
  1376 ;;  raw             2   15[BANK1 ] int 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  2   77[BANK0 ] int 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       2       0       0       0
  1387 ;;      Locals:         0       0      19       0       0
  1388 ;;      Temps:          0       0       0       0       0
  1389 ;;      Totals:         0       2      19       0       0
  1390 ;;Total ram usage:       21 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    6
  1393 ;; This function calls:
  1394 ;;		___awtoft
  1395 ;;		___ftadd
  1396 ;;		___ftdiv
  1397 ;;		___ftmul
  1398 ;;		___fttol
  1399 ;;		_readADCData
  1400 ;;		_round
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _readADCMeter
  1408  013E                     _readADCMeter:	
  1409                           
  1410                           ;adConv.c: 35: int raw = readADCData();
  1411                           
  1412                           ;incstack = 0
  1413                           ; Regs used in _readADCMeter: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1414  013E  120A  158A  2528  120A  118A  	fcall	_readADCData
  1415  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1416  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1417  0145  0821               	movf	?_readADCData+1,w
  1418  0146  1683               	bsf	3,5	;RP0=1, select bank1
  1419  0147  1303               	bcf	3,6	;RP1=0, select bank1
  1420  0148  00B0               	movwf	(readADCMeter@raw+1)^(0+128)
  1421  0149  1283               	bcf	3,5	;RP0=0, select bank0
  1422  014A  1303               	bcf	3,6	;RP1=0, select bank0
  1423  014B  0820               	movf	?_readADCData,w
  1424  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1425  014D  1303               	bcf	3,6	;RP1=0, select bank1
  1426  014E  00AF               	movwf	readADCMeter@raw^(0+128)
  1427                           
  1428                           ;adConv.c: 36: double rawInverted = 1.0/((double) raw);
  1429  014F  0830               	movf	(readADCMeter@raw+1)^(0+128),w
  1430  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1431  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1432  0152  00A9               	movwf	___awtoft@c+1
  1433  0153  1683               	bsf	3,5	;RP0=1, select bank1
  1434  0154  1303               	bcf	3,6	;RP1=0, select bank1
  1435  0155  082F               	movf	readADCMeter@raw^(0+128),w
  1436  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0158  00A8               	movwf	___awtoft@c
  1439  0159  120A  158A  263A  120A  118A  	fcall	___awtoft
  1440  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1441  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0160  0828               	movf	?___awtoft,w
  1443  0161  00B3               	movwf	___ftdiv@f2
  1444  0162  0829               	movf	?___awtoft+1,w
  1445  0163  00B4               	movwf	___ftdiv@f2+1
  1446  0164  082A               	movf	?___awtoft+2,w
  1447  0165  00B5               	movwf	___ftdiv@f2+2
  1448  0166  3000               	movlw	0
  1449  0167  00B6               	movwf	___ftdiv@f1
  1450  0168  3080               	movlw	128
  1451  0169  00B7               	movwf	___ftdiv@f1+1
  1452  016A  303F               	movlw	63
  1453  016B  00B8               	movwf	___ftdiv@f1+2
  1454  016C  120A  118A  24BD  120A  118A  	fcall	___ftdiv
  1455  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1457  0173  0833               	movf	?___ftdiv,w
  1458  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1459  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1460  0176  00A0               	movwf	readADCMeter@rawInverted^(0+128)
  1461  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0179  0834               	movf	?___ftdiv+1,w
  1464  017A  1683               	bsf	3,5	;RP0=1, select bank1
  1465  017B  1303               	bcf	3,6	;RP1=0, select bank1
  1466  017C  00A1               	movwf	(readADCMeter@rawInverted+1)^(0+128)
  1467  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1468  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1469  017F  0835               	movf	?___ftdiv+2,w
  1470  0180  1683               	bsf	3,5	;RP0=1, select bank1
  1471  0181  1303               	bcf	3,6	;RP1=0, select bank1
  1472  0182  00A2               	movwf	(readADCMeter@rawInverted+2)^(0+128)
  1473                           
  1474                           ;adConv.c: 37: double k = 18609;
  1475  0183  3062               	movlw	98
  1476  0184  00A3               	movwf	readADCMeter@k^(0+128)
  1477  0185  3091               	movlw	145
  1478  0186  00A4               	movwf	(readADCMeter@k+1)^(0+128)
  1479  0187  3046               	movlw	70
  1480  0188  00A5               	movwf	(readADCMeter@k+2)^(0+128)
  1481                           
  1482                           ;adConv.c: 38: double m = -1.6803;
  1483  0189  3014               	movlw	20
  1484  018A  00A6               	movwf	readADCMeter@m^(0+128)
  1485  018B  30D7               	movlw	215
  1486  018C  00A7               	movwf	(readADCMeter@m+1)^(0+128)
  1487  018D  30BF               	movlw	191
  1488  018E  00A8               	movwf	(readADCMeter@m+2)^(0+128)
  1489                           
  1490                           ;adConv.c: 39: double result = rawInverted*k + m;
  1491  018F  0826               	movf	readADCMeter@m^(0+128),w
  1492  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0192  00DA               	movwf	___ftadd@f1
  1495  0193  1683               	bsf	3,5	;RP0=1, select bank1
  1496  0194  1303               	bcf	3,6	;RP1=0, select bank1
  1497  0195  0827               	movf	(readADCMeter@m+1)^(0+128),w
  1498  0196  1283               	bcf	3,5	;RP0=0, select bank0
  1499  0197  1303               	bcf	3,6	;RP1=0, select bank0
  1500  0198  00DB               	movwf	___ftadd@f1+1
  1501  0199  1683               	bsf	3,5	;RP0=1, select bank1
  1502  019A  1303               	bcf	3,6	;RP1=0, select bank1
  1503  019B  0828               	movf	(readADCMeter@m+2)^(0+128),w
  1504  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1505  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1506  019E  00DC               	movwf	___ftadd@f1+2
  1507  019F  1683               	bsf	3,5	;RP0=1, select bank1
  1508  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  1509  01A1  0823               	movf	readADCMeter@k^(0+128),w
  1510  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1511  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1512  01A4  00A8               	movwf	___ftmul@f1
  1513  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1514  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1515  01A7  0824               	movf	(readADCMeter@k+1)^(0+128),w
  1516  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1517  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1518  01AA  00A9               	movwf	___ftmul@f1+1
  1519  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1520  01AC  1303               	bcf	3,6	;RP1=0, select bank1
  1521  01AD  0825               	movf	(readADCMeter@k+2)^(0+128),w
  1522  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1523  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1524  01B0  00AA               	movwf	___ftmul@f1+2
  1525  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1526  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  1527  01B3  0820               	movf	readADCMeter@rawInverted^(0+128),w
  1528  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1529  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1530  01B6  00AB               	movwf	___ftmul@f2
  1531  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1532  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  1533  01B9  0821               	movf	(readADCMeter@rawInverted+1)^(0+128),w
  1534  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1535  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1536  01BC  00AC               	movwf	___ftmul@f2+1
  1537  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1538  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1539  01BF  0822               	movf	(readADCMeter@rawInverted+2)^(0+128),w
  1540  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1541  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1542  01C2  00AD               	movwf	___ftmul@f2+2
  1543  01C3  120A  118A  2327  120A  118A  	fcall	___ftmul
  1544  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1545  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1546  01CA  0828               	movf	?___ftmul,w
  1547  01CB  00DD               	movwf	___ftadd@f2
  1548  01CC  0829               	movf	?___ftmul+1,w
  1549  01CD  00DE               	movwf	___ftadd@f2+1
  1550  01CE  082A               	movf	?___ftmul+2,w
  1551  01CF  00DF               	movwf	___ftadd@f2+2
  1552  01D0  120A  118A  2035  120A  118A  	fcall	___ftadd
  1553  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1554  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1555  01D7  085A               	movf	?___ftadd,w
  1556  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  1557  01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1558  01DA  00A9               	movwf	readADCMeter@result^(0+128)
  1559  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1560  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1561  01DD  085B               	movf	?___ftadd+1,w
  1562  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  1563  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  1564  01E0  00AA               	movwf	(readADCMeter@result+1)^(0+128)
  1565  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1566  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1567  01E3  085C               	movf	?___ftadd+2,w
  1568  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1569  01E5  1303               	bcf	3,6	;RP1=0, select bank1
  1570  01E6  00AB               	movwf	(readADCMeter@result+2)^(0+128)
  1571                           
  1572                           ;adConv.c: 40: int resultInInt = (int) round(result);
  1573  01E7  0829               	movf	readADCMeter@result^(0+128),w
  1574  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1575  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1576  01EA  00E7               	movwf	round@x
  1577  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1578  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1579  01ED  082A               	movf	(readADCMeter@result+1)^(0+128),w
  1580  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1581  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1582  01F0  00E8               	movwf	round@x+1
  1583  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  1584  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  1585  01F3  082B               	movf	(readADCMeter@result+2)^(0+128),w
  1586  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1587  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1588  01F6  00E9               	movwf	round@x+2
  1589  01F7  120A  158A  27A0  120A  118A  	fcall	_round
  1590  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1591  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1592  01FE  0867               	movf	?_round,w
  1593  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1594  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1595  0201  00AC               	movwf	_readADCMeter$681^(0+128)
  1596  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1597  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1598  0204  0868               	movf	?_round+1,w
  1599  0205  1683               	bsf	3,5	;RP0=1, select bank1
  1600  0206  1303               	bcf	3,6	;RP1=0, select bank1
  1601  0207  00AD               	movwf	(_readADCMeter$681+1)^(0+128)
  1602  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1604  020A  0869               	movf	?_round+2,w
  1605  020B  1683               	bsf	3,5	;RP0=1, select bank1
  1606  020C  1303               	bcf	3,6	;RP1=0, select bank1
  1607  020D  00AE               	movwf	(_readADCMeter$681+2)^(0+128)
  1608                           
  1609                           ;adConv.c: 40: int resultInInt = (int) round(result);
  1610  020E  082C               	movf	_readADCMeter$681^(0+128),w
  1611  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1612  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1613  0211  00C3               	movwf	___fttol@f1
  1614  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1615  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1616  0214  082D               	movf	(_readADCMeter$681+1)^(0+128),w
  1617  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0217  00C4               	movwf	___fttol@f1+1
  1620  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1621  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1622  021A  082E               	movf	(_readADCMeter$681+2)^(0+128),w
  1623  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1624  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1625  021D  00C5               	movwf	___fttol@f1+2
  1626  021E  120A  118A  26A5   	fcall	___fttol
  1627  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0223  0844               	movf	?___fttol+1,w
  1630  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1631  0225  1303               	bcf	3,6	;RP1=0, select bank1
  1632  0226  00B2               	movwf	(readADCMeter@resultInInt+1)^(0+128)
  1633  0227  1283               	bcf	3,5	;RP0=0, select bank0
  1634  0228  1303               	bcf	3,6	;RP1=0, select bank0
  1635  0229  0843               	movf	?___fttol,w
  1636  022A  1683               	bsf	3,5	;RP0=1, select bank1
  1637  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1638  022C  00B1               	movwf	readADCMeter@resultInInt^(0+128)
  1639                           
  1640                           ;adConv.c: 41: return resultInInt;
  1641  022D  0832               	movf	(readADCMeter@resultInInt+1)^(0+128),w
  1642  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1643  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0230  00EE               	movwf	?_readADCMeter+1
  1645  0231  1683               	bsf	3,5	;RP0=1, select bank1
  1646  0232  1303               	bcf	3,6	;RP1=0, select bank1
  1647  0233  0831               	movf	readADCMeter@resultInInt^(0+128),w
  1648  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0235  1303               	bcf	3,6	;RP1=0, select bank0
  1650  0236  00ED               	movwf	?_readADCMeter
  1651  0237  0008               	return
  1652  0238                     __end_of_readADCMeter:	
  1653                           
  1654                           	psect	text3
  1655  0D28                     __ptext3:	
  1656 ;; *************** function _readADCData *****************
  1657 ;; Defined at:
  1658 ;;		line 28 in file "adConv.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  ADCResult       2    2[BANK0 ] int 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  2    0[BANK0 ] int 
  1665 ;; Registers used:
  1666 ;;		wreg
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1672 ;;      Params:         0       2       0       0       0
  1673 ;;      Locals:         0       2       0       0       0
  1674 ;;      Temps:          0       0       0       0       0
  1675 ;;      Totals:         0       4       0       0       0
  1676 ;;Total ram usage:        4 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    2
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;;		_readADCMeter
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _readADCData
  1689  0D28                     _readADCData:	
  1690                           
  1691                           ;adConv.c: 30: int ADCResult = (ADRESH<<8) + ADRESL ;
  1692                           
  1693                           ;incstack = 0
  1694                           ; Regs used in _readADCData: [wreg]
  1695  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0D2A  081E               	movf	30,w	;volatile
  1698  0D2B  00A3               	movwf	readADCData@ADCResult+1
  1699  0D2C  1683               	bsf	3,5	;RP0=1, select bank1
  1700  0D2D  1303               	bcf	3,6	;RP1=0, select bank1
  1701  0D2E  081E               	movf	30,w	;volatile
  1702  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0D31  00A2               	movwf	readADCData@ADCResult
  1705                           
  1706                           ;adConv.c: 31: return ADCResult;
  1707  0D32  0823               	movf	readADCData@ADCResult+1,w
  1708  0D33  00A1               	movwf	?_readADCData+1
  1709  0D34  0822               	movf	readADCData@ADCResult,w
  1710  0D35  00A0               	movwf	?_readADCData
  1711  0D36  0008               	return
  1712  0D37                     __end_of_readADCData:	
  1713                           
  1714                           	psect	text4
  1715  0327                     __ptext4:	
  1716 ;; *************** function ___ftmul *****************
  1717 ;; Defined at:
  1718 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  f1              3    8[BANK0 ] float 
  1721 ;;  f2              3   11[BANK0 ] float 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  1724 ;;  sign            1   23[BANK0 ] unsigned char 
  1725 ;;  cntr            1   22[BANK0 ] unsigned char 
  1726 ;;  exp             1   18[BANK0 ] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  3    8[BANK0 ] float 
  1729 ;; Registers used:
  1730 ;;		wreg, status,2, status,0, pclath, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1736 ;;      Params:         0       6       0       0       0
  1737 ;;      Locals:         0       6       0       0       0
  1738 ;;      Temps:          0       4       0       0       0
  1739 ;;      Totals:         0      16       0       0       0
  1740 ;;Total ram usage:       16 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    3
  1743 ;; This function calls:
  1744 ;;		___ftpack
  1745 ;; This function is called by:
  1746 ;;		_readADCMeter
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           
  1751                           ;psect for function ___ftmul
  1752  0327                     ___ftmul:	
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1756  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0329  0828               	movf	___ftmul@f1,w
  1759  032A  00AE               	movwf	??___ftmul
  1760  032B  0829               	movf	___ftmul@f1+1,w
  1761  032C  00AF               	movwf	??___ftmul+1
  1762  032D  082A               	movf	___ftmul@f1+2,w
  1763  032E  00B0               	movwf	??___ftmul+2
  1764  032F  1003               	clrc
  1765  0330  0D2F               	rlf	??___ftmul+1,w
  1766  0331  0D30               	rlf	??___ftmul+2,w
  1767  0332  00B1               	movwf	??___ftmul+3
  1768  0333  0831               	movf	??___ftmul+3,w
  1769  0334  00B2               	movwf	___ftmul@exp
  1770  0335  0832               	movf	___ftmul@exp,w
  1771  0336  1D03               	btfss	3,2
  1772  0337  2B3F               	goto	l2726
  1773  0338  3000               	movlw	0
  1774  0339  00A8               	movwf	?___ftmul
  1775  033A  3000               	movlw	0
  1776  033B  00A9               	movwf	?___ftmul+1
  1777  033C  3000               	movlw	0
  1778  033D  00AA               	movwf	?___ftmul+2
  1779  033E  0008               	return
  1780  033F                     l2726:	
  1781  033F  082B               	movf	___ftmul@f2,w
  1782  0340  00AE               	movwf	??___ftmul
  1783  0341  082C               	movf	___ftmul@f2+1,w
  1784  0342  00AF               	movwf	??___ftmul+1
  1785  0343  082D               	movf	___ftmul@f2+2,w
  1786  0344  00B0               	movwf	??___ftmul+2
  1787  0345  1003               	clrc
  1788  0346  0D2F               	rlf	??___ftmul+1,w
  1789  0347  0D30               	rlf	??___ftmul+2,w
  1790  0348  00B1               	movwf	??___ftmul+3
  1791  0349  0831               	movf	??___ftmul+3,w
  1792  034A  00B7               	movwf	___ftmul@sign
  1793  034B  0837               	movf	___ftmul@sign,w
  1794  034C  1D03               	btfss	3,2
  1795  034D  2B55               	goto	l2732
  1796  034E  3000               	movlw	0
  1797  034F  00A8               	movwf	?___ftmul
  1798  0350  3000               	movlw	0
  1799  0351  00A9               	movwf	?___ftmul+1
  1800  0352  3000               	movlw	0
  1801  0353  00AA               	movwf	?___ftmul+2
  1802  0354  0008               	return
  1803  0355                     l2732:	
  1804  0355  0837               	movf	___ftmul@sign,w
  1805  0356  3E7B               	addlw	123
  1806  0357  00AE               	movwf	??___ftmul
  1807  0358  082E               	movf	??___ftmul,w
  1808  0359  07B2               	addwf	___ftmul@exp,f
  1809  035A  0828               	movf	___ftmul@f1,w
  1810  035B  00AE               	movwf	??___ftmul
  1811  035C  0829               	movf	___ftmul@f1+1,w
  1812  035D  00AF               	movwf	??___ftmul+1
  1813  035E  082A               	movf	___ftmul@f1+2,w
  1814  035F  00B0               	movwf	??___ftmul+2
  1815  0360  3010               	movlw	16
  1816  0361                     u3425:	
  1817  0361  1003               	clrc
  1818  0362  0CB0               	rrf	??___ftmul+2,f
  1819  0363  0CAF               	rrf	??___ftmul+1,f
  1820  0364  0CAE               	rrf	??___ftmul,f
  1821  0365  3EFF               	addlw	-1
  1822  0366  1D03               	skipz
  1823  0367  2B61               	goto	u3425
  1824  0368  082E               	movf	??___ftmul,w
  1825  0369  00B1               	movwf	??___ftmul+3
  1826  036A  0831               	movf	??___ftmul+3,w
  1827  036B  00B7               	movwf	___ftmul@sign
  1828  036C  082B               	movf	___ftmul@f2,w
  1829  036D  00AE               	movwf	??___ftmul
  1830  036E  082C               	movf	___ftmul@f2+1,w
  1831  036F  00AF               	movwf	??___ftmul+1
  1832  0370  082D               	movf	___ftmul@f2+2,w
  1833  0371  00B0               	movwf	??___ftmul+2
  1834  0372  3010               	movlw	16
  1835  0373                     u3435:	
  1836  0373  1003               	clrc
  1837  0374  0CB0               	rrf	??___ftmul+2,f
  1838  0375  0CAF               	rrf	??___ftmul+1,f
  1839  0376  0CAE               	rrf	??___ftmul,f
  1840  0377  3EFF               	addlw	-1
  1841  0378  1D03               	skipz
  1842  0379  2B73               	goto	u3435
  1843  037A  082E               	movf	??___ftmul,w
  1844  037B  00B1               	movwf	??___ftmul+3
  1845  037C  0831               	movf	??___ftmul+3,w
  1846  037D  06B7               	xorwf	___ftmul@sign,f
  1847  037E  3080               	movlw	128
  1848  037F  00AE               	movwf	??___ftmul
  1849  0380  082E               	movf	??___ftmul,w
  1850  0381  05B7               	andwf	___ftmul@sign,f
  1851  0382  17A9               	bsf	___ftmul@f1+1,7
  1852  0383  17AC               	bsf	___ftmul@f2+1,7
  1853  0384  30FF               	movlw	255
  1854  0385  05AB               	andwf	___ftmul@f2,f
  1855  0386  30FF               	movlw	255
  1856  0387  05AC               	andwf	___ftmul@f2+1,f
  1857  0388  3000               	movlw	0
  1858  0389  05AD               	andwf	___ftmul@f2+2,f
  1859  038A  3000               	movlw	0
  1860  038B  00B3               	movwf	___ftmul@f3_as_product
  1861  038C  3000               	movlw	0
  1862  038D  00B4               	movwf	___ftmul@f3_as_product+1
  1863  038E  3000               	movlw	0
  1864  038F  00B5               	movwf	___ftmul@f3_as_product+2
  1865  0390  3007               	movlw	7
  1866  0391  00AE               	movwf	??___ftmul
  1867  0392  082E               	movf	??___ftmul,w
  1868  0393  00B6               	movwf	___ftmul@cntr
  1869  0394                     l2744:	
  1870  0394  1C28               	btfss	___ftmul@f1,0
  1871  0395  2BA4               	goto	l2748
  1872  0396  082B               	movf	___ftmul@f2,w
  1873  0397  07B3               	addwf	___ftmul@f3_as_product,f
  1874  0398  082C               	movf	___ftmul@f2+1,w
  1875  0399  1103               	clrz
  1876  039A  1803               	skipnc
  1877  039B  0A2C               	incf	___ftmul@f2+1,w
  1878  039C  1D03               	btfss	3,2
  1879  039D  07B4               	addwf	___ftmul@f3_as_product+1,f
  1880  039E  082D               	movf	___ftmul@f2+2,w
  1881  039F  1103               	clrz
  1882  03A0  1803               	skipnc
  1883  03A1  0A2D               	incf	___ftmul@f2+2,w
  1884  03A2  1D03               	btfss	3,2
  1885  03A3  07B5               	addwf	___ftmul@f3_as_product+2,f
  1886  03A4                     l2748:	
  1887  03A4  3001               	movlw	1
  1888  03A5                     u3465:	
  1889  03A5  1003               	clrc
  1890  03A6  0CAA               	rrf	___ftmul@f1+2,f
  1891  03A7  0CA9               	rrf	___ftmul@f1+1,f
  1892  03A8  0CA8               	rrf	___ftmul@f1,f
  1893  03A9  3EFF               	addlw	-1
  1894  03AA  1D03               	skipz
  1895  03AB  2BA5               	goto	u3465
  1896  03AC  3001               	movlw	1
  1897  03AD                     u3475:	
  1898  03AD  1003               	clrc
  1899  03AE  0DAB               	rlf	___ftmul@f2,f
  1900  03AF  0DAC               	rlf	___ftmul@f2+1,f
  1901  03B0  0DAD               	rlf	___ftmul@f2+2,f
  1902  03B1  3EFF               	addlw	-1
  1903  03B2  1D03               	skipz
  1904  03B3  2BAD               	goto	u3475
  1905  03B4  3001               	movlw	1
  1906  03B5  02B6               	subwf	___ftmul@cntr,f
  1907  03B6  1D03               	btfss	3,2
  1908  03B7  2B94               	goto	l2744
  1909  03B8  3009               	movlw	9
  1910  03B9  00AE               	movwf	??___ftmul
  1911  03BA  082E               	movf	??___ftmul,w
  1912  03BB  00B6               	movwf	___ftmul@cntr
  1913  03BC                     l2756:	
  1914  03BC  1C28               	btfss	___ftmul@f1,0
  1915  03BD  2BCC               	goto	l2760
  1916  03BE  082B               	movf	___ftmul@f2,w
  1917  03BF  07B3               	addwf	___ftmul@f3_as_product,f
  1918  03C0  082C               	movf	___ftmul@f2+1,w
  1919  03C1  1103               	clrz
  1920  03C2  1803               	skipnc
  1921  03C3  0A2C               	incf	___ftmul@f2+1,w
  1922  03C4  1D03               	btfss	3,2
  1923  03C5  07B4               	addwf	___ftmul@f3_as_product+1,f
  1924  03C6  082D               	movf	___ftmul@f2+2,w
  1925  03C7  1103               	clrz
  1926  03C8  1803               	skipnc
  1927  03C9  0A2D               	incf	___ftmul@f2+2,w
  1928  03CA  1D03               	btfss	3,2
  1929  03CB  07B5               	addwf	___ftmul@f3_as_product+2,f
  1930  03CC                     l2760:	
  1931  03CC  3001               	movlw	1
  1932  03CD                     u3515:	
  1933  03CD  1003               	clrc
  1934  03CE  0CAA               	rrf	___ftmul@f1+2,f
  1935  03CF  0CA9               	rrf	___ftmul@f1+1,f
  1936  03D0  0CA8               	rrf	___ftmul@f1,f
  1937  03D1  3EFF               	addlw	-1
  1938  03D2  1D03               	skipz
  1939  03D3  2BCD               	goto	u3515
  1940  03D4  3001               	movlw	1
  1941  03D5                     u3525:	
  1942  03D5  1003               	clrc
  1943  03D6  0CB5               	rrf	___ftmul@f3_as_product+2,f
  1944  03D7  0CB4               	rrf	___ftmul@f3_as_product+1,f
  1945  03D8  0CB3               	rrf	___ftmul@f3_as_product,f
  1946  03D9  3EFF               	addlw	-1
  1947  03DA  1D03               	skipz
  1948  03DB  2BD5               	goto	u3525
  1949  03DC  3001               	movlw	1
  1950  03DD  02B6               	subwf	___ftmul@cntr,f
  1951  03DE  1D03               	btfss	3,2
  1952  03DF  2BBC               	goto	l2756
  1953  03E0  0833               	movf	___ftmul@f3_as_product,w
  1954  03E1  00A0               	movwf	___ftpack@arg
  1955  03E2  0834               	movf	___ftmul@f3_as_product+1,w
  1956  03E3  00A1               	movwf	___ftpack@arg+1
  1957  03E4  0835               	movf	___ftmul@f3_as_product+2,w
  1958  03E5  00A2               	movwf	___ftpack@arg+2
  1959  03E6  0832               	movf	___ftmul@exp,w
  1960  03E7  00AE               	movwf	??___ftmul
  1961  03E8  082E               	movf	??___ftmul,w
  1962  03E9  00A3               	movwf	___ftpack@exp
  1963  03EA  0837               	movf	___ftmul@sign,w
  1964  03EB  00AF               	movwf	??___ftmul+1
  1965  03EC  082F               	movf	??___ftmul+1,w
  1966  03ED  00A4               	movwf	___ftpack@sign
  1967  03EE  120A  118A  2733   	fcall	___ftpack
  1968  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1969  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1970  03F3  0820               	movf	?___ftpack,w
  1971  03F4  00A8               	movwf	?___ftmul
  1972  03F5  0821               	movf	?___ftpack+1,w
  1973  03F6  00A9               	movwf	?___ftmul+1
  1974  03F7  0822               	movf	?___ftpack+2,w
  1975  03F8  00AA               	movwf	?___ftmul+2
  1976  03F9  0008               	return
  1977  03FA                     __end_of___ftmul:	
  1978                           
  1979                           	psect	text5
  1980  0E3A                     __ptext5:	
  1981 ;; *************** function ___awtoft *****************
  1982 ;; Defined at:
  1983 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  c               2    8[BANK0 ] int 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  sign            1   13[BANK0 ] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  3    8[BANK0 ] float 
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1997 ;;      Params:         0       3       0       0       0
  1998 ;;      Locals:         0       1       0       0       0
  1999 ;;      Temps:          0       2       0       0       0
  2000 ;;      Totals:         0       6       0       0       0
  2001 ;;Total ram usage:        6 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    3
  2004 ;; This function calls:
  2005 ;;		___ftpack
  2006 ;; This function is called by:
  2007 ;;		_readADCMeter
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function ___awtoft
  2013  0E3A                     ___awtoft:	
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2017  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  2018  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  2019  0E3C  01AD               	clrf	___awtoft@sign
  2020  0E3D  1FA9               	btfss	___awtoft@c+1,7
  2021  0E3E  2E46               	goto	l2674
  2022  0E3F  09A8               	comf	___awtoft@c,f
  2023  0E40  09A9               	comf	___awtoft@c+1,f
  2024  0E41  0AA8               	incf	___awtoft@c,f
  2025  0E42  1903               	skipnz
  2026  0E43  0AA9               	incf	___awtoft@c+1,f
  2027  0E44  01AD               	clrf	___awtoft@sign
  2028  0E45  0AAD               	incf	___awtoft@sign,f
  2029  0E46                     l2674:	
  2030  0E46  0828               	movf	___awtoft@c,w
  2031  0E47  00A0               	movwf	___ftpack@arg
  2032  0E48  0829               	movf	___awtoft@c+1,w
  2033  0E49  00A1               	movwf	___ftpack@arg+1
  2034  0E4A  01A2               	clrf	___ftpack@arg+2
  2035  0E4B  308E               	movlw	142
  2036  0E4C  00AB               	movwf	??___awtoft
  2037  0E4D  082B               	movf	??___awtoft,w
  2038  0E4E  00A3               	movwf	___ftpack@exp
  2039  0E4F  082D               	movf	___awtoft@sign,w
  2040  0E50  00AC               	movwf	??___awtoft+1
  2041  0E51  082C               	movf	??___awtoft+1,w
  2042  0E52  00A4               	movwf	___ftpack@sign
  2043  0E53  120A  118A  2733   	fcall	___ftpack
  2044  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  2045  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  2046  0E58  0820               	movf	?___ftpack,w
  2047  0E59  00A8               	movwf	?___awtoft
  2048  0E5A  0821               	movf	?___ftpack+1,w
  2049  0E5B  00A9               	movwf	?___awtoft+1
  2050  0E5C  0822               	movf	?___ftpack+2,w
  2051  0E5D  00AA               	movwf	?___awtoft+2
  2052  0E5E  0008               	return
  2053  0E5F                     __end_of___awtoft:	
  2054                           
  2055                           	psect	text6
  2056  0238                     __ptext6:	
  2057 ;; *************** function _moveDeg *****************
  2058 ;; Defined at:
  2059 ;;		line 63 in file "motor.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  deg             3   77[BANK0 ] float 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;  stepsToMove     1   10[BANK1 ] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2073 ;;      Params:         0       3       0       0       0
  2074 ;;      Locals:         0       0      10       0       0
  2075 ;;      Temps:          0       0       1       0       0
  2076 ;;      Totals:         0       3      11       0       0
  2077 ;;Total ram usage:       14 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    6
  2080 ;; This function calls:
  2081 ;;		___ftdiv
  2082 ;;		___ftge
  2083 ;;		___ftneg
  2084 ;;		___fttol
  2085 ;;		_move
  2086 ;;		_round
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           
  2093                           ;psect for function _moveDeg
  2094  0238                     _moveDeg:	
  2095                           
  2096                           ;motor.c: 64: char stepsToMove;
  2097                           ;motor.c: 65: if(deg<0){
  2098                           
  2099                           ;incstack = 0
  2100                           ; Regs used in _moveDeg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2101  0238  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0239  1303               	bcf	3,6	;RP1=0, select bank0
  2103  023A  086D               	movf	moveDeg@deg,w
  2104  023B  00A0               	movwf	___ftge@ff1
  2105  023C  086E               	movf	moveDeg@deg+1,w
  2106  023D  00A1               	movwf	___ftge@ff1+1
  2107  023E  086F               	movf	moveDeg@deg+2,w
  2108  023F  00A2               	movwf	___ftge@ff1+2
  2109  0240  3000               	movlw	0
  2110  0241  00A3               	movwf	___ftge@ff2
  2111  0242  3000               	movlw	0
  2112  0243  00A4               	movwf	___ftge@ff2+1
  2113  0244  3000               	movlw	0
  2114  0245  00A5               	movwf	___ftge@ff2+2
  2115  0246  120A  118A  27A1  120A  118A  	fcall	___ftge
  2116  024B  1803               	btfsc	3,0
  2117  024C  2ACD               	goto	l2818
  2118                           
  2119                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2120  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2121  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2122  024F  086D               	movf	moveDeg@deg,w
  2123  0250  00B0               	movwf	___ftneg@f1
  2124  0251  086E               	movf	moveDeg@deg+1,w
  2125  0252  00B1               	movwf	___ftneg@f1+1
  2126  0253  086F               	movf	moveDeg@deg+2,w
  2127  0254  00B2               	movwf	___ftneg@f1+2
  2128  0255  120A  158A  24F4  120A  118A  	fcall	___ftneg
  2129  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2130  025B  1303               	bcf	3,6	;RP1=0, select bank0
  2131  025C  0830               	movf	?___ftneg,w
  2132  025D  00B6               	movwf	___ftdiv@f1
  2133  025E  0831               	movf	?___ftneg+1,w
  2134  025F  00B7               	movwf	___ftdiv@f1+1
  2135  0260  0832               	movf	?___ftneg+2,w
  2136  0261  00B8               	movwf	___ftdiv@f1+2
  2137  0262  3000               	movlw	0
  2138  0263  00B3               	movwf	___ftdiv@f2
  2139  0264  3070               	movlw	112
  2140  0265  00B4               	movwf	___ftdiv@f2+1
  2141  0266  3040               	movlw	64
  2142  0267  00B5               	movwf	___ftdiv@f2+2
  2143  0268  120A  118A  24BD  120A  118A  	fcall	___ftdiv
  2144  026D  1283               	bcf	3,5	;RP0=0, select bank0
  2145  026E  1303               	bcf	3,6	;RP1=0, select bank0
  2146  026F  0833               	movf	?___ftdiv,w
  2147  0270  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0271  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0272  00A1               	movwf	_moveDeg$678^(0+128)
  2150  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0275  0834               	movf	?___ftdiv+1,w
  2153  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0277  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0278  00A2               	movwf	(_moveDeg$678+1)^(0+128)
  2156  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2157  027A  1303               	bcf	3,6	;RP1=0, select bank0
  2158  027B  0835               	movf	?___ftdiv+2,w
  2159  027C  1683               	bsf	3,5	;RP0=1, select bank1
  2160  027D  1303               	bcf	3,6	;RP1=0, select bank1
  2161  027E  00A3               	movwf	(_moveDeg$678+2)^(0+128)
  2162                           
  2163                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2164  027F  0821               	movf	_moveDeg$678^(0+128),w
  2165  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2166  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0282  00E7               	movwf	round@x
  2168  0283  1683               	bsf	3,5	;RP0=1, select bank1
  2169  0284  1303               	bcf	3,6	;RP1=0, select bank1
  2170  0285  0822               	movf	(_moveDeg$678+1)^(0+128),w
  2171  0286  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0287  1303               	bcf	3,6	;RP1=0, select bank0
  2173  0288  00E8               	movwf	round@x+1
  2174  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2175  028A  1303               	bcf	3,6	;RP1=0, select bank1
  2176  028B  0823               	movf	(_moveDeg$678+2)^(0+128),w
  2177  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2178  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2179  028E  00E9               	movwf	round@x+2
  2180  028F  120A  158A  27A0  120A  118A  	fcall	_round
  2181  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2182  0295  1303               	bcf	3,6	;RP1=0, select bank0
  2183  0296  0867               	movf	?_round,w
  2184  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2185  0298  1303               	bcf	3,6	;RP1=0, select bank1
  2186  0299  00A4               	movwf	_moveDeg$679^(0+128)
  2187  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2188  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2189  029C  0868               	movf	?_round+1,w
  2190  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2191  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2192  029F  00A5               	movwf	(_moveDeg$679+1)^(0+128)
  2193  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2194  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2195  02A2  0869               	movf	?_round+2,w
  2196  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2197  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2198  02A5  00A6               	movwf	(_moveDeg$679+2)^(0+128)
  2199                           
  2200                           ;motor.c: 66: stepsToMove = (char) round(-deg/(7.5/2.0));
  2201  02A6  0824               	movf	_moveDeg$679^(0+128),w
  2202  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2203  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2204  02A9  00C3               	movwf	___fttol@f1
  2205  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2206  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  2207  02AC  0825               	movf	(_moveDeg$679+1)^(0+128),w
  2208  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2209  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2210  02AF  00C4               	movwf	___fttol@f1+1
  2211  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  2212  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  2213  02B2  0826               	movf	(_moveDeg$679+2)^(0+128),w
  2214  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2215  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2216  02B5  00C5               	movwf	___fttol@f1+2
  2217  02B6  120A  118A  26A5  120A  118A  	fcall	___fttol
  2218  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2219  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2220  02BD  0843               	movf	?___fttol,w
  2221  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2222  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2223  02C0  00A0               	movwf	??_moveDeg^(0+128)
  2224  02C1  0820               	movf	??_moveDeg^(0+128),w
  2225  02C2  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2226                           
  2227                           ;motor.c: 67: move(stepsToMove,0);
  2228  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2229  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2230  02C5  01B1               	clrf	move@direction
  2231  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  2232  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  2233  02C8  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2234  02C9  120A  118A  2614   	fcall	_move
  2235                           
  2236                           ;motor.c: 68: }
  2237  02CC  0008               	return
  2238  02CD                     l2818:	
  2239                           
  2240                           ;motor.c: 69: else{
  2241                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  2242  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2243  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2244  02CF  086D               	movf	moveDeg@deg,w
  2245  02D0  00B6               	movwf	___ftdiv@f1
  2246  02D1  086E               	movf	moveDeg@deg+1,w
  2247  02D2  00B7               	movwf	___ftdiv@f1+1
  2248  02D3  086F               	movf	moveDeg@deg+2,w
  2249  02D4  00B8               	movwf	___ftdiv@f1+2
  2250  02D5  3000               	movlw	0
  2251  02D6  00B3               	movwf	___ftdiv@f2
  2252  02D7  3070               	movlw	112
  2253  02D8  00B4               	movwf	___ftdiv@f2+1
  2254  02D9  3040               	movlw	64
  2255  02DA  00B5               	movwf	___ftdiv@f2+2
  2256  02DB  120A  118A  24BD  120A  118A  	fcall	___ftdiv
  2257  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2258  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2259  02E2  0833               	movf	?___ftdiv,w
  2260  02E3  00E7               	movwf	round@x
  2261  02E4  0834               	movf	?___ftdiv+1,w
  2262  02E5  00E8               	movwf	round@x+1
  2263  02E6  0835               	movf	?___ftdiv+2,w
  2264  02E7  00E9               	movwf	round@x+2
  2265  02E8  120A  158A  27A0  120A  118A  	fcall	_round
  2266  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2267  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2268  02EF  0867               	movf	?_round,w
  2269  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2270  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2271  02F2  00A7               	movwf	_moveDeg$680^(0+128)
  2272  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2273  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2274  02F5  0868               	movf	?_round+1,w
  2275  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2276  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  2277  02F8  00A8               	movwf	(_moveDeg$680+1)^(0+128)
  2278  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2279  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2280  02FB  0869               	movf	?_round+2,w
  2281  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2282  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  2283  02FE  00A9               	movwf	(_moveDeg$680+2)^(0+128)
  2284                           
  2285                           ;motor.c: 69: else{
  2286                           ;motor.c: 70: stepsToMove = (char) round(deg/(7.5/2.0));
  2287  02FF  0827               	movf	_moveDeg$680^(0+128),w
  2288  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2289  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2290  0302  00C3               	movwf	___fttol@f1
  2291  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2292  0304  1303               	bcf	3,6	;RP1=0, select bank1
  2293  0305  0828               	movf	(_moveDeg$680+1)^(0+128),w
  2294  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0308  00C4               	movwf	___fttol@f1+1
  2297  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2298  030A  1303               	bcf	3,6	;RP1=0, select bank1
  2299  030B  0829               	movf	(_moveDeg$680+2)^(0+128),w
  2300  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2301  030D  1303               	bcf	3,6	;RP1=0, select bank0
  2302  030E  00C5               	movwf	___fttol@f1+2
  2303  030F  120A  118A  26A5  120A  118A  	fcall	___fttol
  2304  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0315  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0316  0843               	movf	?___fttol,w
  2307  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2309  0319  00A0               	movwf	??_moveDeg^(0+128)
  2310  031A  0820               	movf	??_moveDeg^(0+128),w
  2311  031B  00AA               	movwf	moveDeg@stepsToMove^(0+128)
  2312                           
  2313                           ;motor.c: 71: move(stepsToMove,1);
  2314  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2315  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2316  031E  01B1               	clrf	move@direction
  2317  031F  0AB1               	incf	move@direction,f
  2318  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2319  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2320  0322  082A               	movf	moveDeg@stepsToMove^(0+128),w
  2321  0323  120A  118A  2614   	fcall	_move
  2322  0326  0008               	return
  2323  0327                     __end_of_moveDeg:	
  2324                           
  2325                           	psect	text7
  2326  0FA0                     __ptext7:	
  2327 ;; *************** function _round *****************
  2328 ;; Defined at:
  2329 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  x               3   71[BANK0 ] void 
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  f               3   74[BANK0 ] void 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  3   71[BANK0 ] void 
  2336 ;; Registers used:
  2337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2343 ;;      Params:         0       3       0       0       0
  2344 ;;      Locals:         0       3       0       0       0
  2345 ;;      Temps:          0       0       0       0       0
  2346 ;;      Totals:         0       6       0       0       0
  2347 ;;Total ram usage:        6 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    5
  2350 ;; This function calls:
  2351 ;;		___ftadd
  2352 ;;		___ftneg
  2353 ;;		_trunc
  2354 ;; This function is called by:
  2355 ;;		_moveDeg
  2356 ;;		_readADCMeter
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _round
  2362  0FA0                     _round:	
  2363                           
  2364                           ;incstack = 0
  2365                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2366  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0FA2  0867               	movf	round@x,w
  2369  0FA3  00DA               	movwf	___ftadd@f1
  2370  0FA4  0868               	movf	round@x+1,w
  2371  0FA5  00DB               	movwf	___ftadd@f1+1
  2372  0FA6  0869               	movf	round@x+2,w
  2373  0FA7  00DC               	movwf	___ftadd@f1+2
  2374  0FA8  0867               	movf	round@x,w
  2375  0FA9  00D1               	movwf	trunc@x
  2376  0FAA  0868               	movf	round@x+1,w
  2377  0FAB  00D2               	movwf	trunc@x+1
  2378  0FAC  0869               	movf	round@x+2,w
  2379  0FAD  00D3               	movwf	trunc@x+2
  2380  0FAE  120A  158A  2708  120A  158A  	fcall	_trunc
  2381  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  2382  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  2383  0FB5  0851               	movf	?_trunc,w
  2384  0FB6  00B0               	movwf	___ftneg@f1
  2385  0FB7  0852               	movf	?_trunc+1,w
  2386  0FB8  00B1               	movwf	___ftneg@f1+1
  2387  0FB9  0853               	movf	?_trunc+2,w
  2388  0FBA  00B2               	movwf	___ftneg@f1+2
  2389  0FBB  120A  158A  24F4  120A  158A  	fcall	___ftneg
  2390  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  2391  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  2392  0FC2  0830               	movf	?___ftneg,w
  2393  0FC3  00DD               	movwf	___ftadd@f2
  2394  0FC4  0831               	movf	?___ftneg+1,w
  2395  0FC5  00DE               	movwf	___ftadd@f2+1
  2396  0FC6  0832               	movf	?___ftneg+2,w
  2397  0FC7  00DF               	movwf	___ftadd@f2+2
  2398  0FC8  120A  118A  2035  120A  158A  	fcall	___ftadd
  2399  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  2400  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  2401  0FCF  085A               	movf	?___ftadd,w
  2402  0FD0  00EA               	movwf	round@f
  2403  0FD1  085B               	movf	?___ftadd+1,w
  2404  0FD2  00EB               	movwf	round@f+1
  2405  0FD3  085C               	movf	?___ftadd+2,w
  2406  0FD4  00EC               	movwf	round@f+2
  2407  0FD5  086A               	movf	round@f,w
  2408  0FD6  00DA               	movwf	___ftadd@f1
  2409  0FD7  086B               	movf	round@f+1,w
  2410  0FD8  00DB               	movwf	___ftadd@f1+1
  2411  0FD9  086C               	movf	round@f+2,w
  2412  0FDA  00DC               	movwf	___ftadd@f1+2
  2413  0FDB  0867               	movf	round@x,w
  2414  0FDC  00DD               	movwf	___ftadd@f2
  2415  0FDD  0868               	movf	round@x+1,w
  2416  0FDE  00DE               	movwf	___ftadd@f2+1
  2417  0FDF  0869               	movf	round@x+2,w
  2418  0FE0  00DF               	movwf	___ftadd@f2+2
  2419  0FE1  120A  118A  2035  120A  158A  	fcall	___ftadd
  2420  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0FE8  085A               	movf	?___ftadd,w
  2423  0FE9  00E7               	movwf	round@x
  2424  0FEA  085B               	movf	?___ftadd+1,w
  2425  0FEB  00E8               	movwf	round@x+1
  2426  0FEC  085C               	movf	?___ftadd+2,w
  2427  0FED  00E9               	movwf	round@x+2
  2428  0FEE  0867               	movf	round@x,w
  2429  0FEF  00D1               	movwf	trunc@x
  2430  0FF0  0868               	movf	round@x+1,w
  2431  0FF1  00D2               	movwf	trunc@x+1
  2432  0FF2  0869               	movf	round@x+2,w
  2433  0FF3  00D3               	movwf	trunc@x+2
  2434  0FF4  120A  158A  2708   	fcall	_trunc
  2435  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0FF9  0851               	movf	?_trunc,w
  2438  0FFA  00E7               	movwf	?_round
  2439  0FFB  0852               	movf	?_trunc+1,w
  2440  0FFC  00E8               	movwf	?_round+1
  2441  0FFD  0853               	movf	?_trunc+2,w
  2442  0FFE  00E9               	movwf	?_round+2
  2443  0FFF  0008               	return
  2444  1000                     __end_of_round:	
  2445                           
  2446                           	psect	text8
  2447  0F08                     __ptext8:	
  2448 ;; *************** function _trunc *****************
  2449 ;; Defined at:
  2450 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  x               3   49[BANK0 ] void 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  i               3   53[BANK0 ] void 
  2455 ;;  expon           2   56[BANK0 ] int 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  3   49[BANK0 ] int 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2465 ;;      Params:         0       3       0       0       0
  2466 ;;      Locals:         0       5       0       0       0
  2467 ;;      Temps:          0       1       0       0       0
  2468 ;;      Totals:         0       9       0       0       0
  2469 ;;Total ram usage:        9 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		___altoft
  2474 ;;		___fttol
  2475 ;;		_frexp
  2476 ;; This function is called by:
  2477 ;;		_round
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _trunc
  2483  0F08                     _trunc:	
  2484                           
  2485                           ;incstack = 0
  2486                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2487  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  2488  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  2489  0F0A  0851               	movf	trunc@x,w
  2490  0F0B  00A0               	movwf	frexp@value
  2491  0F0C  0852               	movf	trunc@x+1,w
  2492  0F0D  00A1               	movwf	frexp@value+1
  2493  0F0E  0853               	movf	trunc@x+2,w
  2494  0F0F  00A2               	movwf	frexp@value+2
  2495  0F10  3058               	movlw	(low (trunc@expon| 0))& (0+255)
  2496  0F11  00D4               	movwf	??_trunc
  2497  0F12  0854               	movf	??_trunc,w
  2498  0F13  00A3               	movwf	frexp@eptr
  2499  0F14  120A  158A  268A  120A  158A  	fcall	_frexp
  2500  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0F1B  1FD9               	btfss	trunc@expon+1,7
  2503  0F1C  2F24               	goto	l2534
  2504  0F1D  3000               	movlw	0
  2505  0F1E  00D1               	movwf	?_trunc
  2506  0F1F  3000               	movlw	0
  2507  0F20  00D2               	movwf	?_trunc+1
  2508  0F21  3000               	movlw	0
  2509  0F22  00D3               	movwf	?_trunc+2
  2510  0F23  0008               	return
  2511  0F24                     l2534:	
  2512  0F24  3000               	movlw	0
  2513  0F25  0259               	subwf	trunc@expon+1,w
  2514  0F26  3015               	movlw	21
  2515  0F27  1903               	skipnz
  2516  0F28  0258               	subwf	trunc@expon,w
  2517  0F29  1803               	btfsc	3,0
  2518  0F2A  0008               	return
  2519  0F2B  0851               	movf	trunc@x,w
  2520  0F2C  00C3               	movwf	___fttol@f1
  2521  0F2D  0852               	movf	trunc@x+1,w
  2522  0F2E  00C4               	movwf	___fttol@f1+1
  2523  0F2F  0853               	movf	trunc@x+2,w
  2524  0F30  00C5               	movwf	___fttol@f1+2
  2525  0F31  120A  118A  26A5  120A  158A  	fcall	___fttol
  2526  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0F38  0846               	movf	?___fttol+3,w
  2529  0F39  00AB               	movwf	___altoft@c+3
  2530  0F3A  0845               	movf	?___fttol+2,w
  2531  0F3B  00AA               	movwf	___altoft@c+2
  2532  0F3C  0844               	movf	?___fttol+1,w
  2533  0F3D  00A9               	movwf	___altoft@c+1
  2534  0F3E  0843               	movf	?___fttol,w
  2535  0F3F  00A8               	movwf	___altoft@c
  2536  0F40  120A  158A  26C6   	fcall	___altoft
  2537  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  2538  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  2539  0F45  0828               	movf	?___altoft,w
  2540  0F46  00D5               	movwf	trunc@i
  2541  0F47  0829               	movf	?___altoft+1,w
  2542  0F48  00D6               	movwf	trunc@i+1
  2543  0F49  082A               	movf	?___altoft+2,w
  2544  0F4A  00D7               	movwf	trunc@i+2
  2545  0F4B  0855               	movf	trunc@i,w
  2546  0F4C  00D1               	movwf	?_trunc
  2547  0F4D  0856               	movf	trunc@i+1,w
  2548  0F4E  00D2               	movwf	?_trunc+1
  2549  0F4F  0857               	movf	trunc@i+2,w
  2550  0F50  00D3               	movwf	?_trunc+2
  2551  0F51  0008               	return
  2552  0F52                     __end_of_trunc:	
  2553                           
  2554                           	psect	text9
  2555  0E8A                     __ptext9:	
  2556 ;; *************** function _frexp *****************
  2557 ;; Defined at:
  2558 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  value           3    0[BANK0 ] int 
  2561 ;;  eptr            1    3[BANK0 ] PTR int 
  2562 ;;		 -> trunc@expon(2), 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  3    0[BANK0 ] PTR int 
  2567 ;; Registers used:
  2568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2574 ;;      Params:         0       4       0       0       0
  2575 ;;      Locals:         0       0       0       0       0
  2576 ;;      Temps:          0       2       0       0       0
  2577 ;;      Totals:         0       6       0       0       0
  2578 ;;Total ram usage:        6 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    2
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_trunc
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           
  2589                           ;psect for function _frexp
  2590  0E8A                     _frexp:	
  2591                           
  2592                           ;incstack = 0
  2593                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  2594  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0E8C  0822               	movf	frexp@value+2,w
  2597  0E8D  0421               	iorwf	frexp@value+1,w
  2598  0E8E  0420               	iorwf	frexp@value,w
  2599  0E8F  1D03               	skipz
  2600  0E90  2E98               	goto	l2386
  2601  0E91  0823               	movf	frexp@eptr,w
  2602  0E92  0084               	movwf	4
  2603  0E93  1383               	bcf	3,7	;select IRP bank0
  2604  0E94  0180               	clrf	0
  2605  0E95  0A84               	incf	4,f
  2606  0E96  0180               	clrf	0
  2607                           
  2608                           ;	Return value of _frexp is never used
  2609  0E97  0008               	return
  2610  0E98                     l2386:	
  2611  0E98  0822               	movf	frexp@value+2,w
  2612  0E99  397F               	andlw	127
  2613  0E9A  00A4               	movwf	??_frexp
  2614  0E9B  01A5               	clrf	??_frexp+1
  2615  0E9C  1003               	clrc
  2616  0E9D  0DA4               	rlf	??_frexp,f
  2617  0E9E  0DA5               	rlf	??_frexp+1,f
  2618  0E9F  0823               	movf	frexp@eptr,w
  2619  0EA0  0084               	movwf	4
  2620  0EA1  0824               	movf	??_frexp,w
  2621  0EA2  1383               	bcf	3,7	;select IRP bank0
  2622  0EA3  0080               	movwf	0
  2623  0EA4  0A84               	incf	4,f
  2624  0EA5  0825               	movf	??_frexp+1,w
  2625  0EA6  0080               	movwf	0
  2626  0EA7  0D21               	rlf	frexp@value+1,w
  2627  0EA8  0D21               	rlf	frexp@value+1,w
  2628  0EA9  3901               	andlw	1
  2629  0EAA  00A4               	movwf	??_frexp
  2630  0EAB  01A5               	clrf	??_frexp+1
  2631  0EAC  0823               	movf	frexp@eptr,w
  2632  0EAD  0084               	movwf	4
  2633  0EAE  0824               	movf	??_frexp,w
  2634  0EAF  0480               	iorwf	0,f
  2635  0EB0  0A84               	incf	4,f
  2636  0EB1  0825               	movf	??_frexp+1,w
  2637  0EB2  0480               	iorwf	0,f
  2638  0EB3  0823               	movf	frexp@eptr,w
  2639  0EB4  0084               	movwf	4
  2640  0EB5  3082               	movlw	130
  2641  0EB6  0780               	addwf	0,f
  2642  0EB7  0F84               	incfsz	4,f
  2643  0EB8  0800               	movf	0,w
  2644  0EB9  1803               	skipnc
  2645  0EBA  0A00               	incf	0,w
  2646  0EBB  00FF               	movwf	127
  2647  0EBC  30FF               	movlw	255
  2648  0EBD  077F               	addwf	127,w
  2649  0EBE  0080               	movwf	0
  2650  0EBF  0384               	decf	4,f
  2651  0EC0  0822               	movf	frexp@value+2,w
  2652  0EC1  3980               	andlw	-128
  2653  0EC2  383F               	iorlw	63
  2654  0EC3  00A2               	movwf	frexp@value+2
  2655  0EC4  13A1               	bcf	frexp@value+1,7
  2656  0EC5  0008               	return
  2657  0EC6                     __end_of_frexp:	
  2658                           ;	Return value of _frexp is never used
  2659                           
  2660                           
  2661                           	psect	text10
  2662  06A5                     __ptext10:	
  2663 ;; *************** function ___fttol *****************
  2664 ;; Defined at:
  2665 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  f1              3   35[BANK0 ] float 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  lval            4   44[BANK0 ] unsigned long 
  2670 ;;  exp1            1   48[BANK0 ] unsigned char 
  2671 ;;  sign1           1   43[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  4   35[BANK0 ] long 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2681 ;;      Params:         0       4       0       0       0
  2682 ;;      Locals:         0       6       0       0       0
  2683 ;;      Temps:          0       4       0       0       0
  2684 ;;      Totals:         0      14       0       0       0
  2685 ;;Total ram usage:       14 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    2
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_moveDeg
  2692 ;;		_readADCMeter
  2693 ;;		_trunc
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           
  2698                           ;psect for function ___fttol
  2699  06A5                     ___fttol:	
  2700                           
  2701                           ;incstack = 0
  2702                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2703  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  2704  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  2705  06A7  0843               	movf	___fttol@f1,w
  2706  06A8  00C7               	movwf	??___fttol
  2707  06A9  0844               	movf	___fttol@f1+1,w
  2708  06AA  00C8               	movwf	??___fttol+1
  2709  06AB  0845               	movf	___fttol@f1+2,w
  2710  06AC  00C9               	movwf	??___fttol+2
  2711  06AD  1003               	clrc
  2712  06AE  0D48               	rlf	??___fttol+1,w
  2713  06AF  0D49               	rlf	??___fttol+2,w
  2714  06B0  00CA               	movwf	??___fttol+3
  2715  06B1  084A               	movf	??___fttol+3,w
  2716  06B2  00D0               	movwf	___fttol@exp1
  2717  06B3  0850               	movf	___fttol@exp1,w
  2718  06B4  1D03               	btfss	3,2
  2719  06B5  2EBF               	goto	l1660
  2720  06B6  3000               	movlw	0
  2721  06B7  00C6               	movwf	?___fttol+3
  2722  06B8  3000               	movlw	0
  2723  06B9  00C5               	movwf	?___fttol+2
  2724  06BA  3000               	movlw	0
  2725  06BB  00C4               	movwf	?___fttol+1
  2726  06BC  3000               	movlw	0
  2727  06BD  00C3               	movwf	?___fttol
  2728  06BE  0008               	return
  2729  06BF                     l1660:	
  2730  06BF  0843               	movf	___fttol@f1,w
  2731  06C0  00C7               	movwf	??___fttol
  2732  06C1  0844               	movf	___fttol@f1+1,w
  2733  06C2  00C8               	movwf	??___fttol+1
  2734  06C3  0845               	movf	___fttol@f1+2,w
  2735  06C4  00C9               	movwf	??___fttol+2
  2736  06C5  3017               	movlw	23
  2737  06C6                     u1525:	
  2738  06C6  1003               	clrc
  2739  06C7  0CC9               	rrf	??___fttol+2,f
  2740  06C8  0CC8               	rrf	??___fttol+1,f
  2741  06C9  0CC7               	rrf	??___fttol,f
  2742  06CA  3EFF               	addlw	-1
  2743  06CB  1D03               	skipz
  2744  06CC  2EC6               	goto	u1525
  2745  06CD  0847               	movf	??___fttol,w
  2746  06CE  00CA               	movwf	??___fttol+3
  2747  06CF  084A               	movf	??___fttol+3,w
  2748  06D0  00CB               	movwf	___fttol@sign1
  2749  06D1  17C4               	bsf	___fttol@f1+1,7
  2750  06D2  30FF               	movlw	255
  2751  06D3  05C3               	andwf	___fttol@f1,f
  2752  06D4  30FF               	movlw	255
  2753  06D5  05C4               	andwf	___fttol@f1+1,f
  2754  06D6  3000               	movlw	0
  2755  06D7  05C5               	andwf	___fttol@f1+2,f
  2756  06D8  0843               	movf	___fttol@f1,w
  2757  06D9  00CC               	movwf	___fttol@lval
  2758  06DA  0844               	movf	___fttol@f1+1,w
  2759  06DB  00CD               	movwf	___fttol@lval+1
  2760  06DC  0845               	movf	___fttol@f1+2,w
  2761  06DD  00CE               	movwf	___fttol@lval+2
  2762  06DE  01CF               	clrf	___fttol@lval+3
  2763  06DF  308E               	movlw	142
  2764  06E0  02D0               	subwf	___fttol@exp1,f
  2765  06E1  1FD0               	btfss	___fttol@exp1,7
  2766  06E2  2F01               	goto	l1680
  2767  06E3  0850               	movf	___fttol@exp1,w
  2768  06E4  3A80               	xorlw	128
  2769  06E5  3E8F               	addlw	143
  2770  06E6  1803               	skipnc
  2771  06E7  2EF1               	goto	l1678
  2772  06E8  3000               	movlw	0
  2773  06E9  00C6               	movwf	?___fttol+3
  2774  06EA  3000               	movlw	0
  2775  06EB  00C5               	movwf	?___fttol+2
  2776  06EC  3000               	movlw	0
  2777  06ED  00C4               	movwf	?___fttol+1
  2778  06EE  3000               	movlw	0
  2779  06EF  00C3               	movwf	?___fttol
  2780  06F0  0008               	return
  2781  06F1                     l1678:	
  2782  06F1  3001               	movlw	1
  2783  06F2                     u1555:	
  2784  06F2  1003               	clrc
  2785  06F3  0CCF               	rrf	___fttol@lval+3,f
  2786  06F4  0CCE               	rrf	___fttol@lval+2,f
  2787  06F5  0CCD               	rrf	___fttol@lval+1,f
  2788  06F6  0CCC               	rrf	___fttol@lval,f
  2789  06F7  3EFF               	addlw	-1
  2790  06F8  1D03               	skipz
  2791  06F9  2EF2               	goto	u1555
  2792  06FA  3001               	movlw	1
  2793  06FB  00C7               	movwf	??___fttol
  2794  06FC  0847               	movf	??___fttol,w
  2795  06FD  07D0               	addwf	___fttol@exp1,f
  2796  06FE  1903               	btfsc	3,2
  2797  06FF  2F1C               	goto	l1688
  2798  0700  2EF1               	goto	l1678
  2799  0701                     l1680:	
  2800  0701  3018               	movlw	24
  2801  0702  0250               	subwf	___fttol@exp1,w
  2802  0703  1C03               	skipc
  2803  0704  2F19               	goto	l672
  2804  0705  3000               	movlw	0
  2805  0706  00C6               	movwf	?___fttol+3
  2806  0707  3000               	movlw	0
  2807  0708  00C5               	movwf	?___fttol+2
  2808  0709  3000               	movlw	0
  2809  070A  00C4               	movwf	?___fttol+1
  2810  070B  3000               	movlw	0
  2811  070C  00C3               	movwf	?___fttol
  2812  070D  0008               	return
  2813  070E                     l1686:	
  2814  070E  3001               	movlw	1
  2815  070F  00C7               	movwf	??___fttol
  2816  0710                     u1585:	
  2817  0710  1003               	clrc
  2818  0711  0DCC               	rlf	___fttol@lval,f
  2819  0712  0DCD               	rlf	___fttol@lval+1,f
  2820  0713  0DCE               	rlf	___fttol@lval+2,f
  2821  0714  0DCF               	rlf	___fttol@lval+3,f
  2822  0715  0BC7               	decfsz	??___fttol,f
  2823  0716  2F10               	goto	u1585
  2824  0717  3001               	movlw	1
  2825  0718  02D0               	subwf	___fttol@exp1,f
  2826  0719                     l672:	
  2827  0719  0850               	movf	___fttol@exp1,w
  2828  071A  1D03               	btfss	3,2
  2829  071B  2F0E               	goto	l1686
  2830  071C                     l1688:	
  2831  071C  084B               	movf	___fttol@sign1,w
  2832  071D  1903               	btfsc	3,2
  2833  071E  2F2A               	goto	l1692
  2834  071F  09CC               	comf	___fttol@lval,f
  2835  0720  09CD               	comf	___fttol@lval+1,f
  2836  0721  09CE               	comf	___fttol@lval+2,f
  2837  0722  09CF               	comf	___fttol@lval+3,f
  2838  0723  0ACC               	incf	___fttol@lval,f
  2839  0724  1903               	skipnz
  2840  0725  0ACD               	incf	___fttol@lval+1,f
  2841  0726  1903               	skipnz
  2842  0727  0ACE               	incf	___fttol@lval+2,f
  2843  0728  1903               	skipnz
  2844  0729  0ACF               	incf	___fttol@lval+3,f
  2845  072A                     l1692:	
  2846  072A  084F               	movf	___fttol@lval+3,w
  2847  072B  00C6               	movwf	?___fttol+3
  2848  072C  084E               	movf	___fttol@lval+2,w
  2849  072D  00C5               	movwf	?___fttol+2
  2850  072E  084D               	movf	___fttol@lval+1,w
  2851  072F  00C4               	movwf	?___fttol+1
  2852  0730  084C               	movf	___fttol@lval,w
  2853  0731  00C3               	movwf	?___fttol
  2854  0732  0008               	return
  2855  0733                     __end_of___fttol:	
  2856                           
  2857                           	psect	text11
  2858  0EC6                     __ptext11:	
  2859 ;; *************** function ___altoft *****************
  2860 ;; Defined at:
  2861 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  c               4    8[BANK0 ] long 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  sign            1   15[BANK0 ] unsigned char 
  2866 ;;  exp             1   14[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  3    8[BANK0 ] float 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, pclath, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2876 ;;      Params:         0       4       0       0       0
  2877 ;;      Locals:         0       2       0       0       0
  2878 ;;      Temps:          0       2       0       0       0
  2879 ;;      Totals:         0       8       0       0       0
  2880 ;;Total ram usage:        8 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    3
  2883 ;; This function calls:
  2884 ;;		___ftpack
  2885 ;; This function is called by:
  2886 ;;		_trunc
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function ___altoft
  2892  0EC6                     ___altoft:	
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2896  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  2898  0EC8  01AF               	clrf	___altoft@sign
  2899  0EC9  308E               	movlw	142
  2900  0ECA  00AC               	movwf	??___altoft
  2901  0ECB  082C               	movf	??___altoft,w
  2902  0ECC  00AE               	movwf	___altoft@exp
  2903  0ECD  1FAB               	btfss	___altoft@c+3,7
  2904  0ECE  2EDC               	goto	l2374
  2905  0ECF  09A8               	comf	___altoft@c,f
  2906  0ED0  09A9               	comf	___altoft@c+1,f
  2907  0ED1  09AA               	comf	___altoft@c+2,f
  2908  0ED2  09AB               	comf	___altoft@c+3,f
  2909  0ED3  0AA8               	incf	___altoft@c,f
  2910  0ED4  1903               	skipnz
  2911  0ED5  0AA9               	incf	___altoft@c+1,f
  2912  0ED6  1903               	skipnz
  2913  0ED7  0AAA               	incf	___altoft@c+2,f
  2914  0ED8  1903               	skipnz
  2915  0ED9  0AAB               	incf	___altoft@c+3,f
  2916  0EDA  01AF               	clrf	___altoft@sign
  2917  0EDB  0AAF               	incf	___altoft@sign,f
  2918  0EDC                     l2374:	
  2919  0EDC  30FF               	movlw	255
  2920  0EDD  052B               	andwf	___altoft@c+3,w
  2921  0EDE  1903               	btfsc	3,2
  2922  0EDF  2EEE               	goto	l2376
  2923  0EE0  3001               	movlw	1
  2924  0EE1                     u2805:	
  2925  0EE1  1003               	clrc
  2926  0EE2  0CAB               	rrf	___altoft@c+3,f
  2927  0EE3  0CAA               	rrf	___altoft@c+2,f
  2928  0EE4  0CA9               	rrf	___altoft@c+1,f
  2929  0EE5  0CA8               	rrf	___altoft@c,f
  2930  0EE6  3EFF               	addlw	-1
  2931  0EE7  1D03               	skipz
  2932  0EE8  2EE1               	goto	u2805
  2933  0EE9  3001               	movlw	1
  2934  0EEA  00AC               	movwf	??___altoft
  2935  0EEB  082C               	movf	??___altoft,w
  2936  0EEC  07AE               	addwf	___altoft@exp,f
  2937  0EED  2EDC               	goto	l2374
  2938  0EEE                     l2376:	
  2939  0EEE  0828               	movf	___altoft@c,w
  2940  0EEF  00A0               	movwf	___ftpack@arg
  2941  0EF0  0829               	movf	___altoft@c+1,w
  2942  0EF1  00A1               	movwf	___ftpack@arg+1
  2943  0EF2  082A               	movf	___altoft@c+2,w
  2944  0EF3  00A2               	movwf	___ftpack@arg+2
  2945  0EF4  082E               	movf	___altoft@exp,w
  2946  0EF5  00AC               	movwf	??___altoft
  2947  0EF6  082C               	movf	??___altoft,w
  2948  0EF7  00A3               	movwf	___ftpack@exp
  2949  0EF8  082F               	movf	___altoft@sign,w
  2950  0EF9  00AD               	movwf	??___altoft+1
  2951  0EFA  082D               	movf	??___altoft+1,w
  2952  0EFB  00A4               	movwf	___ftpack@sign
  2953  0EFC  120A  118A  2733   	fcall	___ftpack
  2954  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0F01  0820               	movf	?___ftpack,w
  2957  0F02  00A8               	movwf	?___altoft
  2958  0F03  0821               	movf	?___ftpack+1,w
  2959  0F04  00A9               	movwf	?___altoft+1
  2960  0F05  0822               	movf	?___ftpack+2,w
  2961  0F06  00AA               	movwf	?___altoft+2
  2962  0F07  0008               	return
  2963  0F08                     __end_of___altoft:	
  2964                           
  2965                           	psect	text12
  2966  0CF4                     __ptext12:	
  2967 ;; *************** function ___ftneg *****************
  2968 ;; Defined at:
  2969 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  f1              3   16[BANK0 ] float 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  3   16[BANK0 ] float 
  2976 ;; Registers used:
  2977 ;;		wreg
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         0       3       0       0       0
  2984 ;;      Locals:         0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0
  2986 ;;      Totals:         0       3       0       0       0
  2987 ;;Total ram usage:        3 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    2
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_moveDeg
  2994 ;;		_round
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function ___ftneg
  3000  0CF4                     ___ftneg:	
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in ___ftneg: [wreg]
  3004  0CF4  1283               	bcf	3,5	;RP0=0, select bank0
  3005  0CF5  1303               	bcf	3,6	;RP1=0, select bank0
  3006  0CF6  0832               	movf	___ftneg@f1+2,w
  3007  0CF7  0431               	iorwf	___ftneg@f1+1,w
  3008  0CF8  0430               	iorwf	___ftneg@f1,w
  3009  0CF9  1903               	skipnz
  3010  0CFA  0008               	return
  3011  0CFB  3080               	movlw	128
  3012  0CFC  06B2               	xorwf	___ftneg@f1+2,f
  3013  0CFD  0008               	return
  3014  0CFE                     __end_of___ftneg:	
  3015                           
  3016                           	psect	text13
  3017  0035                     __ptext13:	
  3018 ;; *************** function ___ftadd *****************
  3019 ;; Defined at:
  3020 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  f1              3   58[BANK0 ] float 
  3023 ;;  f2              3   61[BANK0 ] float 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  exp1            1   70[BANK0 ] unsigned char 
  3026 ;;  exp2            1   69[BANK0 ] unsigned char 
  3027 ;;  sign            1   68[BANK0 ] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  3   58[BANK0 ] float 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3037 ;;      Params:         0       6       0       0       0
  3038 ;;      Locals:         0       3       0       0       0
  3039 ;;      Temps:          0       4       0       0       0
  3040 ;;      Totals:         0      13       0       0       0
  3041 ;;Total ram usage:       13 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		___ftpack
  3046 ;; This function is called by:
  3047 ;;		_readADCMeter
  3048 ;;		_round
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function ___ftadd
  3054  0035                     ___ftadd:	
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3058  0035  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0036  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0037  085A               	movf	___ftadd@f1,w
  3061  0038  00E0               	movwf	??___ftadd
  3062  0039  085B               	movf	___ftadd@f1+1,w
  3063  003A  00E1               	movwf	??___ftadd+1
  3064  003B  085C               	movf	___ftadd@f1+2,w
  3065  003C  00E2               	movwf	??___ftadd+2
  3066  003D  1003               	clrc
  3067  003E  0D61               	rlf	??___ftadd+1,w
  3068  003F  0D62               	rlf	??___ftadd+2,w
  3069  0040  00E3               	movwf	??___ftadd+3
  3070  0041  0863               	movf	??___ftadd+3,w
  3071  0042  00E6               	movwf	___ftadd@exp1
  3072  0043  085D               	movf	___ftadd@f2,w
  3073  0044  00E0               	movwf	??___ftadd
  3074  0045  085E               	movf	___ftadd@f2+1,w
  3075  0046  00E1               	movwf	??___ftadd+1
  3076  0047  085F               	movf	___ftadd@f2+2,w
  3077  0048  00E2               	movwf	??___ftadd+2
  3078  0049  1003               	clrc
  3079  004A  0D61               	rlf	??___ftadd+1,w
  3080  004B  0D62               	rlf	??___ftadd+2,w
  3081  004C  00E3               	movwf	??___ftadd+3
  3082  004D  0863               	movf	??___ftadd+3,w
  3083  004E  00E5               	movwf	___ftadd@exp2
  3084  004F  0866               	movf	___ftadd@exp1,w
  3085  0050  1903               	btfsc	3,2
  3086  0051  285E               	goto	l2454
  3087  0052  0865               	movf	___ftadd@exp2,w
  3088  0053  0266               	subwf	___ftadd@exp1,w
  3089  0054  1803               	skipnc
  3090  0055  2865               	goto	l2458
  3091  0056  0366               	decf	___ftadd@exp1,w
  3092  0057  3AFF               	xorlw	255
  3093  0058  0765               	addwf	___ftadd@exp2,w
  3094  0059  00E0               	movwf	??___ftadd
  3095  005A  3019               	movlw	25
  3096  005B  0260               	subwf	??___ftadd,w
  3097  005C  1C03               	skipc
  3098  005D  2865               	goto	l2458
  3099  005E                     l2454:	
  3100  005E  085D               	movf	___ftadd@f2,w
  3101  005F  00DA               	movwf	?___ftadd
  3102  0060  085E               	movf	___ftadd@f2+1,w
  3103  0061  00DB               	movwf	?___ftadd+1
  3104  0062  085F               	movf	___ftadd@f2+2,w
  3105  0063  00DC               	movwf	?___ftadd+2
  3106  0064  0008               	return
  3107  0065                     l2458:	
  3108  0065  0865               	movf	___ftadd@exp2,w
  3109  0066  1903               	btfsc	3,2
  3110  0067  0008               	return
  3111  0068  0866               	movf	___ftadd@exp1,w
  3112  0069  0265               	subwf	___ftadd@exp2,w
  3113  006A  1803               	skipnc
  3114  006B  2874               	goto	l2464
  3115  006C  0365               	decf	___ftadd@exp2,w
  3116  006D  3AFF               	xorlw	255
  3117  006E  0766               	addwf	___ftadd@exp1,w
  3118  006F  00E0               	movwf	??___ftadd
  3119  0070  3019               	movlw	25
  3120  0071  0260               	subwf	??___ftadd,w
  3121  0072  1803               	btfsc	3,0
  3122  0073  0008               	return
  3123  0074                     l2464:	
  3124  0074  3006               	movlw	6
  3125  0075  00E0               	movwf	??___ftadd
  3126  0076  0860               	movf	??___ftadd,w
  3127  0077  00E4               	movwf	___ftadd@sign
  3128  0078  1BDC               	btfsc	___ftadd@f1+2,7
  3129  0079  17E4               	bsf	___ftadd@sign,7
  3130  007A  1BDF               	btfsc	___ftadd@f2+2,7
  3131  007B  1764               	bsf	___ftadd@sign,6
  3132  007C  17DB               	bsf	___ftadd@f1+1,7
  3133  007D  30FF               	movlw	255
  3134  007E  05DA               	andwf	___ftadd@f1,f
  3135  007F  30FF               	movlw	255
  3136  0080  05DB               	andwf	___ftadd@f1+1,f
  3137  0081  3000               	movlw	0
  3138  0082  05DC               	andwf	___ftadd@f1+2,f
  3139  0083  17DE               	bsf	___ftadd@f2+1,7
  3140  0084  30FF               	movlw	255
  3141  0085  05DD               	andwf	___ftadd@f2,f
  3142  0086  30FF               	movlw	255
  3143  0087  05DE               	andwf	___ftadd@f2+1,f
  3144  0088  3000               	movlw	0
  3145  0089  05DF               	andwf	___ftadd@f2+2,f
  3146  008A  0865               	movf	___ftadd@exp2,w
  3147  008B  0266               	subwf	___ftadd@exp1,w
  3148  008C  1803               	skipnc
  3149  008D  28B4               	goto	l2486
  3150  008E                     l2476:	
  3151  008E  3001               	movlw	1
  3152  008F                     u3035:	
  3153  008F  1003               	clrc
  3154  0090  0DDD               	rlf	___ftadd@f2,f
  3155  0091  0DDE               	rlf	___ftadd@f2+1,f
  3156  0092  0DDF               	rlf	___ftadd@f2+2,f
  3157  0093  3EFF               	addlw	-1
  3158  0094  1D03               	skipz
  3159  0095  288F               	goto	u3035
  3160  0096  3001               	movlw	1
  3161  0097  02E5               	subwf	___ftadd@exp2,f
  3162  0098  0865               	movf	___ftadd@exp2,w
  3163  0099  0666               	xorwf	___ftadd@exp1,w
  3164  009A  1903               	skipnz
  3165  009B  28AF               	goto	l2484
  3166  009C  3001               	movlw	1
  3167  009D  02E4               	subwf	___ftadd@sign,f
  3168  009E  0864               	movf	___ftadd@sign,w
  3169  009F  3907               	andlw	7
  3170  00A0  1903               	btfsc	3,2
  3171  00A1  28AF               	goto	l2484
  3172  00A2  288E               	goto	l2476
  3173  00A3                     l2482:	
  3174  00A3  3001               	movlw	1
  3175  00A4                     u3065:	
  3176  00A4  1003               	clrc
  3177  00A5  0CDC               	rrf	___ftadd@f1+2,f
  3178  00A6  0CDB               	rrf	___ftadd@f1+1,f
  3179  00A7  0CDA               	rrf	___ftadd@f1,f
  3180  00A8  3EFF               	addlw	-1
  3181  00A9  1D03               	skipz
  3182  00AA  28A4               	goto	u3065
  3183  00AB  3001               	movlw	1
  3184  00AC  00E0               	movwf	??___ftadd
  3185  00AD  0860               	movf	??___ftadd,w
  3186  00AE  07E6               	addwf	___ftadd@exp1,f
  3187  00AF                     l2484:	
  3188  00AF  0866               	movf	___ftadd@exp1,w
  3189  00B0  0665               	xorwf	___ftadd@exp2,w
  3190  00B1  1903               	btfsc	3,2
  3191  00B2  28DD               	goto	l612
  3192  00B3  28A3               	goto	l2482
  3193  00B4                     l2486:	
  3194  00B4  0866               	movf	___ftadd@exp1,w
  3195  00B5  0265               	subwf	___ftadd@exp2,w
  3196  00B6  1803               	skipnc
  3197  00B7  28DD               	goto	l612
  3198  00B8                     l2488:	
  3199  00B8  3001               	movlw	1
  3200  00B9                     u3095:	
  3201  00B9  1003               	clrc
  3202  00BA  0DDA               	rlf	___ftadd@f1,f
  3203  00BB  0DDB               	rlf	___ftadd@f1+1,f
  3204  00BC  0DDC               	rlf	___ftadd@f1+2,f
  3205  00BD  3EFF               	addlw	-1
  3206  00BE  1D03               	skipz
  3207  00BF  28B9               	goto	u3095
  3208  00C0  3001               	movlw	1
  3209  00C1  02E6               	subwf	___ftadd@exp1,f
  3210  00C2  0865               	movf	___ftadd@exp2,w
  3211  00C3  0666               	xorwf	___ftadd@exp1,w
  3212  00C4  1903               	skipnz
  3213  00C5  28D9               	goto	l2496
  3214  00C6  3001               	movlw	1
  3215  00C7  02E4               	subwf	___ftadd@sign,f
  3216  00C8  0864               	movf	___ftadd@sign,w
  3217  00C9  3907               	andlw	7
  3218  00CA  1903               	btfsc	3,2
  3219  00CB  28D9               	goto	l2496
  3220  00CC  28B8               	goto	l2488
  3221  00CD                     l2494:	
  3222  00CD  3001               	movlw	1
  3223  00CE                     u3125:	
  3224  00CE  1003               	clrc
  3225  00CF  0CDF               	rrf	___ftadd@f2+2,f
  3226  00D0  0CDE               	rrf	___ftadd@f2+1,f
  3227  00D1  0CDD               	rrf	___ftadd@f2,f
  3228  00D2  3EFF               	addlw	-1
  3229  00D3  1D03               	skipz
  3230  00D4  28CE               	goto	u3125
  3231  00D5  3001               	movlw	1
  3232  00D6  00E0               	movwf	??___ftadd
  3233  00D7  0860               	movf	??___ftadd,w
  3234  00D8  07E5               	addwf	___ftadd@exp2,f
  3235  00D9                     l2496:	
  3236  00D9  0866               	movf	___ftadd@exp1,w
  3237  00DA  0665               	xorwf	___ftadd@exp2,w
  3238  00DB  1D03               	skipz
  3239  00DC  28CD               	goto	l2494
  3240  00DD                     l612:	
  3241  00DD  1FE4               	btfss	___ftadd@sign,7
  3242  00DE  28EF               	goto	l2500
  3243  00DF  30FF               	movlw	255
  3244  00E0  06DA               	xorwf	___ftadd@f1,f
  3245  00E1  30FF               	movlw	255
  3246  00E2  06DB               	xorwf	___ftadd@f1+1,f
  3247  00E3  30FF               	movlw	255
  3248  00E4  06DC               	xorwf	___ftadd@f1+2,f
  3249  00E5  3001               	movlw	1
  3250  00E6  07DA               	addwf	___ftadd@f1,f
  3251  00E7  3000               	movlw	0
  3252  00E8  1803               	skipnc
  3253  00E9  3001               	movlw	1
  3254  00EA  07DB               	addwf	___ftadd@f1+1,f
  3255  00EB  3000               	movlw	0
  3256  00EC  1803               	skipnc
  3257  00ED  3001               	movlw	1
  3258  00EE  07DC               	addwf	___ftadd@f1+2,f
  3259  00EF                     l2500:	
  3260  00EF  1F64               	btfss	___ftadd@sign,6
  3261  00F0  2901               	goto	l2504
  3262  00F1  30FF               	movlw	255
  3263  00F2  06DD               	xorwf	___ftadd@f2,f
  3264  00F3  30FF               	movlw	255
  3265  00F4  06DE               	xorwf	___ftadd@f2+1,f
  3266  00F5  30FF               	movlw	255
  3267  00F6  06DF               	xorwf	___ftadd@f2+2,f
  3268  00F7  3001               	movlw	1
  3269  00F8  07DD               	addwf	___ftadd@f2,f
  3270  00F9  3000               	movlw	0
  3271  00FA  1803               	skipnc
  3272  00FB  3001               	movlw	1
  3273  00FC  07DE               	addwf	___ftadd@f2+1,f
  3274  00FD  3000               	movlw	0
  3275  00FE  1803               	skipnc
  3276  00FF  3001               	movlw	1
  3277  0100  07DF               	addwf	___ftadd@f2+2,f
  3278  0101                     l2504:	
  3279  0101  01E4               	clrf	___ftadd@sign
  3280  0102  085A               	movf	___ftadd@f1,w
  3281  0103  07DD               	addwf	___ftadd@f2,f
  3282  0104  085B               	movf	___ftadd@f1+1,w
  3283  0105  1103               	clrz
  3284  0106  1803               	skipnc
  3285  0107  0A5B               	incf	___ftadd@f1+1,w
  3286  0108  1D03               	btfss	3,2
  3287  0109  07DE               	addwf	___ftadd@f2+1,f
  3288  010A  085C               	movf	___ftadd@f1+2,w
  3289  010B  1103               	clrz
  3290  010C  1803               	skipnc
  3291  010D  0A5C               	incf	___ftadd@f1+2,w
  3292  010E  1D03               	btfss	3,2
  3293  010F  07DF               	addwf	___ftadd@f2+2,f
  3294  0110  1FDF               	btfss	___ftadd@f2+2,7
  3295  0111  2924               	goto	l2514
  3296  0112  30FF               	movlw	255
  3297  0113  06DD               	xorwf	___ftadd@f2,f
  3298  0114  30FF               	movlw	255
  3299  0115  06DE               	xorwf	___ftadd@f2+1,f
  3300  0116  30FF               	movlw	255
  3301  0117  06DF               	xorwf	___ftadd@f2+2,f
  3302  0118  3001               	movlw	1
  3303  0119  07DD               	addwf	___ftadd@f2,f
  3304  011A  3000               	movlw	0
  3305  011B  1803               	skipnc
  3306  011C  3001               	movlw	1
  3307  011D  07DE               	addwf	___ftadd@f2+1,f
  3308  011E  3000               	movlw	0
  3309  011F  1803               	skipnc
  3310  0120  3001               	movlw	1
  3311  0121  07DF               	addwf	___ftadd@f2+2,f
  3312  0122  01E4               	clrf	___ftadd@sign
  3313  0123  0AE4               	incf	___ftadd@sign,f
  3314  0124                     l2514:	
  3315  0124  085D               	movf	___ftadd@f2,w
  3316  0125  00A0               	movwf	___ftpack@arg
  3317  0126  085E               	movf	___ftadd@f2+1,w
  3318  0127  00A1               	movwf	___ftpack@arg+1
  3319  0128  085F               	movf	___ftadd@f2+2,w
  3320  0129  00A2               	movwf	___ftpack@arg+2
  3321  012A  0866               	movf	___ftadd@exp1,w
  3322  012B  00E0               	movwf	??___ftadd
  3323  012C  0860               	movf	??___ftadd,w
  3324  012D  00A3               	movwf	___ftpack@exp
  3325  012E  0864               	movf	___ftadd@sign,w
  3326  012F  00E1               	movwf	??___ftadd+1
  3327  0130  0861               	movf	??___ftadd+1,w
  3328  0131  00A4               	movwf	___ftpack@sign
  3329  0132  120A  118A  2733   	fcall	___ftpack
  3330  0135  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0136  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0137  0820               	movf	?___ftpack,w
  3333  0138  00DA               	movwf	?___ftadd
  3334  0139  0821               	movf	?___ftpack+1,w
  3335  013A  00DB               	movwf	?___ftadd+1
  3336  013B  0822               	movf	?___ftpack+2,w
  3337  013C  00DC               	movwf	?___ftadd+2
  3338  013D  0008               	return
  3339  013E                     __end_of___ftadd:	
  3340                           
  3341                           	psect	text14
  3342  0614                     __ptext14:	
  3343 ;; *************** function _move *****************
  3344 ;; Defined at:
  3345 ;;		line 25 in file "motor.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  steps           1    wreg     unsigned char 
  3348 ;;  direction       1   17[BANK0 ] unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  steps           1   20[BANK0 ] unsigned char 
  3351 ;;  i               1   21[BANK0 ] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3361 ;;      Params:         0       1       0       0       0
  3362 ;;      Locals:         0       2       0       0       0
  3363 ;;      Temps:          0       2       0       0       0
  3364 ;;      Totals:         0       5       0       0       0
  3365 ;;Total ram usage:        5 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    4
  3368 ;; This function calls:
  3369 ;;		_lcdSetCursor
  3370 ;;		_lcdWriteToDigitBCD
  3371 ;; This function is called by:
  3372 ;;		_main
  3373 ;;		_moveDeg
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _move
  3379  0614                     _move:	
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in _move: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3383                           ;move@steps stored from wreg
  3384  0614  1283               	bcf	3,5	;RP0=0, select bank0
  3385  0615  1303               	bcf	3,6	;RP1=0, select bank0
  3386  0616  00B4               	movwf	move@steps
  3387                           
  3388                           ;motor.c: 26: for(char i = 0; i<steps; i++){
  3389  0617  01B5               	clrf	move@i
  3390  0618                     l2656:	
  3391  0618  0834               	movf	move@steps,w
  3392  0619  0235               	subwf	move@i,w
  3393  061A  1803               	btfsc	3,0
  3394  061B  0008               	return
  3395                           
  3396                           ;motor.c: 27: if(cstep == 7 && direction == 1){
  3397  061C  3007               	movlw	7
  3398  061D  0677               	xorwf	_cstep,w
  3399  061E  1D03               	btfss	3,2
  3400  061F  2E2B               	goto	l2618
  3401  0620  0331               	decf	move@direction,w
  3402  0621  1D03               	btfss	3,2
  3403  0622  2E2B               	goto	l2618
  3404                           
  3405                           ;motor.c: 28: PORTC = halfSteps[0];
  3406  0623  1683               	bsf	3,5	;RP0=1, select bank1
  3407  0624  1303               	bcf	3,6	;RP1=0, select bank1
  3408  0625  0839               	movf	_halfSteps^(0+128),w
  3409  0626  1283               	bcf	3,5	;RP0=0, select bank0
  3410  0627  1303               	bcf	3,6	;RP1=0, select bank0
  3411  0628  0087               	movwf	7	;volatile
  3412                           
  3413                           ;motor.c: 29: cstep = 0;
  3414  0629  01F7               	clrf	_cstep
  3415                           
  3416                           ;motor.c: 30: }
  3417  062A  2E63               	goto	l2640
  3418  062B                     l2618:	
  3419                           
  3420                           ;motor.c: 31: else if(cstep == 0 && direction == 0){
  3421  062B  0877               	movf	_cstep,w
  3422  062C  1D03               	btfss	3,2
  3423  062D  2E3C               	goto	l136
  3424  062E  0831               	movf	move@direction,w
  3425  062F  1D03               	btfss	3,2
  3426  0630  2E3C               	goto	l136
  3427                           
  3428                           ;motor.c: 32: PORTC = halfSteps[7];
  3429  0631  1683               	bsf	3,5	;RP0=1, select bank1
  3430  0632  1303               	bcf	3,6	;RP1=0, select bank1
  3431  0633  0847               	movf	(_halfSteps^(0+128)+14),w
  3432  0634  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0635  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0636  0087               	movwf	7	;volatile
  3435                           
  3436                           ;motor.c: 33: cstep = 7;
  3437  0637  3007               	movlw	7
  3438  0638  00B2               	movwf	??_move
  3439  0639  0832               	movf	??_move,w
  3440  063A  00F7               	movwf	_cstep
  3441                           
  3442                           ;motor.c: 34: }
  3443  063B  2E63               	goto	l2640
  3444  063C                     l136:	
  3445                           
  3446                           ;motor.c: 35: else if (cstep >= 0 && cstep <= 7){
  3447  063C  1BF7               	btfsc	_cstep,7
  3448  063D  2E62               	goto	l2638
  3449  063E  0877               	movf	_cstep,w
  3450  063F  3A80               	xorlw	128
  3451  0640  3E78               	addlw	-136
  3452  0641  1803               	skipnc
  3453  0642  2E62               	goto	l2638
  3454                           
  3455                           ;motor.c: 36: if(direction == 1){
  3456  0643  0331               	decf	move@direction,w
  3457  0644  1D03               	btfss	3,2
  3458  0645  2E51               	goto	l2632
  3459                           
  3460                           ;motor.c: 37: PORTC = halfSteps[cstep+1];
  3461  0646  0877               	movf	_cstep,w
  3462  0647  00B2               	movwf	??_move
  3463  0648  0732               	addwf	??_move,w
  3464  0649  3E02               	addlw	2
  3465  064A  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3466  064B  0084               	movwf	4
  3467  064C  1383               	bcf	3,7	;select IRP bank1
  3468  064D  0800               	movf	0,w
  3469  064E  0087               	movwf	7	;volatile
  3470                           
  3471                           ;motor.c: 38: cstep++;
  3472  064F  3001               	movlw	1
  3473  0650  2E5E               	goto	L2
  3474  0651                     l2632:	
  3475                           ;motor.c: 39: }
  3476                           
  3477                           
  3478                           ;motor.c: 40: else if(direction == 0){
  3479  0651  0831               	movf	move@direction,w
  3480  0652  1D03               	btfss	3,2
  3481  0653  2E63               	goto	l2640
  3482                           
  3483                           ;motor.c: 41: PORTC = halfSteps[cstep-1];
  3484  0654  0877               	movf	_cstep,w
  3485  0655  00B2               	movwf	??_move
  3486  0656  0732               	addwf	??_move,w
  3487  0657  3EFE               	addlw	254
  3488  0658  3EB9               	addlw	(low (_halfSteps| 0))& (0+255)
  3489  0659  0084               	movwf	4
  3490  065A  1383               	bcf	3,7	;select IRP bank1
  3491  065B  0800               	movf	0,w
  3492  065C  0087               	movwf	7	;volatile
  3493                           
  3494                           ;motor.c: 42: cstep--;
  3495  065D  30FF               	movlw	255
  3496  065E                     L2:	
  3497  065E  00B2               	movwf	??_move
  3498  065F  0832               	movf	??_move,w
  3499  0660  07F7               	addwf	_cstep,f
  3500                           
  3501                           ;motor.c: 43: }
  3502                           ;motor.c: 45: }
  3503  0661  2E63               	goto	l2640
  3504  0662                     l2638:	
  3505                           
  3506                           ;motor.c: 46: else{
  3507                           ;motor.c: 47: PORTC = 0x00;
  3508  0662  0187               	clrf	7	;volatile
  3509  0663                     l2640:	
  3510                           
  3511                           ;motor.c: 48: }
  3512                           ;motor.c: 50: lcdSetCursor(0x40);
  3513  0663  3040               	movlw	64
  3514  0664  120A  158A  24EB  120A  118A  	fcall	_lcdSetCursor
  3515                           
  3516                           ;motor.c: 51: if(direction==1){
  3517  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3518  066A  1303               	bcf	3,6	;RP1=0, select bank0
  3519  066B  0331               	decf	move@direction,w
  3520  066C  1D03               	btfss	3,2
  3521  066D  2E76               	goto	l2648
  3522                           
  3523                           ;motor.c: 52: nrOfSteps++;
  3524  066E  3001               	movlw	1
  3525  066F  1683               	bsf	3,5	;RP0=1, select bank1
  3526  0670  1303               	bcf	3,6	;RP1=0, select bank1
  3527  0671  07D3               	addwf	_nrOfSteps^(0+128),f
  3528  0672  1803               	skipnc
  3529  0673  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3530  0674  3000               	movlw	0
  3531  0675  2E7D               	goto	L3
  3532  0676                     l2648:	
  3533                           ;motor.c: 54: }
  3534                           
  3535                           ;motor.c: 53: lcdWriteToDigitBCD(nrOfSteps,4,1);
  3536                           
  3537                           
  3538                           ;motor.c: 55: else{
  3539                           ;motor.c: 56: nrOfSteps--;
  3540  0676  30FF               	movlw	255
  3541  0677  1683               	bsf	3,5	;RP0=1, select bank1
  3542  0678  1303               	bcf	3,6	;RP1=0, select bank1
  3543  0679  07D3               	addwf	_nrOfSteps^(0+128),f
  3544  067A  1803               	skipnc
  3545  067B  0AD4               	incf	(_nrOfSteps+1)^(0+128),f
  3546  067C  30FF               	movlw	255
  3547  067D                     L3:	
  3548  067D  07D4               	addwf	(_nrOfSteps+1)^(0+128),f
  3549                           
  3550                           ;motor.c: 57: lcdWriteToDigitBCD(nrOfSteps,4,1);
  3551  067E  0854               	movf	(_nrOfSteps+1)^(0+128),w
  3552  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0680  1303               	bcf	3,6	;RP1=0, select bank0
  3554  0681  00A7               	movwf	lcdWriteToDigitBCD@data+1
  3555  0682  1683               	bsf	3,5	;RP0=1, select bank1
  3556  0683  1303               	bcf	3,6	;RP1=0, select bank1
  3557  0684  0853               	movf	_nrOfSteps^(0+128),w
  3558  0685  1283               	bcf	3,5	;RP0=0, select bank0
  3559  0686  1303               	bcf	3,6	;RP1=0, select bank0
  3560  0687  00A6               	movwf	lcdWriteToDigitBCD@data
  3561  0688  3004               	movlw	4
  3562  0689  00B2               	movwf	??_move
  3563  068A  0832               	movf	??_move,w
  3564  068B  00A8               	movwf	lcdWriteToDigitBCD@digits
  3565  068C  01A9               	clrf	lcdWriteToDigitBCD@showSign
  3566  068D  0AA9               	incf	lcdWriteToDigitBCD@showSign,f
  3567  068E  120A  118A  2575  120A  118A  	fcall	_lcdWriteToDigitBCD
  3568                           
  3569                           ;motor.c: 58: }
  3570                           ;motor.c: 59: _delay((unsigned long)((20)*(20000000/4000.0)));
  3571  0693  3082               	movlw	130
  3572  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3573  0695  1303               	bcf	3,6	;RP1=0, select bank0
  3574  0696  00B3               	movwf	??_move+1
  3575  0697  30DD               	movlw	221
  3576  0698  00B2               	movwf	??_move
  3577  0699                     u3657:	
  3578  0699  0BB2               	decfsz	??_move,f
  3579  069A  2E99               	goto	u3657
  3580  069B  0BB3               	decfsz	??_move+1,f
  3581  069C  2E99               	goto	u3657
  3582  069D  2E9E               	nop2
  3583  069E  3001               	movlw	1
  3584  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3585  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3586  06A1  00B2               	movwf	??_move
  3587  06A2  0832               	movf	??_move,w
  3588  06A3  07B5               	addwf	move@i,f
  3589  06A4  2E18               	goto	l2656
  3590  06A5                     __end_of_move:	
  3591                           
  3592                           	psect	text15
  3593  07A1                     __ptext15:	
  3594 ;; *************** function ___ftge *****************
  3595 ;; Defined at:
  3596 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  ff1             3    0[BANK0 ] float 
  3599 ;;  ff2             3    3[BANK0 ] float 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;		None               void
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3611 ;;      Params:         0       6       0       0       0
  3612 ;;      Locals:         0       0       0       0       0
  3613 ;;      Temps:          0       6       0       0       0
  3614 ;;      Totals:         0      12       0       0       0
  3615 ;;Total ram usage:       12 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    2
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_moveDeg
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           
  3626                           ;psect for function ___ftge
  3627  07A1                     ___ftge:	
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3631  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  3632  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  3633  07A3  1FA2               	btfss	___ftge@ff1+2,7
  3634  07A4  2FCA               	goto	l2040
  3635  07A5  3000               	movlw	0
  3636  07A6  00A6               	movwf	??___ftge
  3637  07A7  3000               	movlw	0
  3638  07A8  00A7               	movwf	??___ftge+1
  3639  07A9  3080               	movlw	128
  3640  07AA  00A8               	movwf	??___ftge+2
  3641  07AB  0920               	comf	___ftge@ff1,w
  3642  07AC  00A9               	movwf	??___ftge+3
  3643  07AD  0921               	comf	___ftge@ff1+1,w
  3644  07AE  00AA               	movwf	??___ftge+4
  3645  07AF  0922               	comf	___ftge@ff1+2,w
  3646  07B0  00AB               	movwf	??___ftge+5
  3647  07B1  0AA9               	incf	??___ftge+3,f
  3648  07B2  1903               	skipnz
  3649  07B3  0AAA               	incf	??___ftge+4,f
  3650  07B4  1903               	skipnz
  3651  07B5  0AAB               	incf	??___ftge+5,f
  3652  07B6  0829               	movf	??___ftge+3,w
  3653  07B7  07A6               	addwf	??___ftge,f
  3654  07B8  082A               	movf	??___ftge+4,w
  3655  07B9  1803               	skipnc
  3656  07BA  0F2A               	incfsz	??___ftge+4,w
  3657  07BB  2FBD               	goto	u2201
  3658  07BC  2FBE               	goto	u2202
  3659  07BD                     u2201:	
  3660  07BD  07A7               	addwf	??___ftge+1,f
  3661  07BE                     u2202:	
  3662  07BE  082B               	movf	??___ftge+5,w
  3663  07BF  1803               	skipnc
  3664  07C0  0F2B               	incfsz	??___ftge+5,w
  3665  07C1  2FC3               	goto	u2203
  3666  07C2  2FC4               	goto	u2204
  3667  07C3                     u2203:	
  3668  07C3  07A8               	addwf	??___ftge+2,f
  3669  07C4                     u2204:	
  3670  07C4  0826               	movf	??___ftge,w
  3671  07C5  00A0               	movwf	___ftge@ff1
  3672  07C6  0827               	movf	??___ftge+1,w
  3673  07C7  00A1               	movwf	___ftge@ff1+1
  3674  07C8  0828               	movf	??___ftge+2,w
  3675  07C9  00A2               	movwf	___ftge@ff1+2
  3676  07CA                     l2040:	
  3677  07CA  1FA5               	btfss	___ftge@ff2+2,7
  3678  07CB  2FF1               	goto	l2044
  3679  07CC  3000               	movlw	0
  3680  07CD  00A6               	movwf	??___ftge
  3681  07CE  3000               	movlw	0
  3682  07CF  00A7               	movwf	??___ftge+1
  3683  07D0  3080               	movlw	128
  3684  07D1  00A8               	movwf	??___ftge+2
  3685  07D2  0923               	comf	___ftge@ff2,w
  3686  07D3  00A9               	movwf	??___ftge+3
  3687  07D4  0924               	comf	___ftge@ff2+1,w
  3688  07D5  00AA               	movwf	??___ftge+4
  3689  07D6  0925               	comf	___ftge@ff2+2,w
  3690  07D7  00AB               	movwf	??___ftge+5
  3691  07D8  0AA9               	incf	??___ftge+3,f
  3692  07D9  1903               	skipnz
  3693  07DA  0AAA               	incf	??___ftge+4,f
  3694  07DB  1903               	skipnz
  3695  07DC  0AAB               	incf	??___ftge+5,f
  3696  07DD  0829               	movf	??___ftge+3,w
  3697  07DE  07A6               	addwf	??___ftge,f
  3698  07DF  082A               	movf	??___ftge+4,w
  3699  07E0  1803               	skipnc
  3700  07E1  0F2A               	incfsz	??___ftge+4,w
  3701  07E2  2FE4               	goto	u2221
  3702  07E3  2FE5               	goto	u2222
  3703  07E4                     u2221:	
  3704  07E4  07A7               	addwf	??___ftge+1,f
  3705  07E5                     u2222:	
  3706  07E5  082B               	movf	??___ftge+5,w
  3707  07E6  1803               	skipnc
  3708  07E7  0F2B               	incfsz	??___ftge+5,w
  3709  07E8  2FEA               	goto	u2223
  3710  07E9  2FEB               	goto	u2224
  3711  07EA                     u2223:	
  3712  07EA  07A8               	addwf	??___ftge+2,f
  3713  07EB                     u2224:	
  3714  07EB  0826               	movf	??___ftge,w
  3715  07EC  00A3               	movwf	___ftge@ff2
  3716  07ED  0827               	movf	??___ftge+1,w
  3717  07EE  00A4               	movwf	___ftge@ff2+1
  3718  07EF  0828               	movf	??___ftge+2,w
  3719  07F0  00A5               	movwf	___ftge@ff2+2
  3720  07F1                     l2044:	
  3721  07F1  3080               	movlw	128
  3722  07F2  06A2               	xorwf	___ftge@ff1+2,f
  3723  07F3  3080               	movlw	128
  3724  07F4  06A5               	xorwf	___ftge@ff2+2,f
  3725  07F5  0825               	movf	___ftge@ff2+2,w
  3726  07F6  0222               	subwf	___ftge@ff1+2,w
  3727  07F7  1D03               	skipz
  3728  07F8  0008               	return
  3729  07F9  0824               	movf	___ftge@ff2+1,w
  3730  07FA  0221               	subwf	___ftge@ff1+1,w
  3731  07FB  1D03               	skipz
  3732  07FC  0008               	return
  3733  07FD  0823               	movf	___ftge@ff2,w
  3734  07FE  0220               	subwf	___ftge@ff1,w
  3735  07FF  0008               	return
  3736  0800                     __end_of___ftge:	
  3737                           
  3738                           	psect	text16
  3739  04BD                     __ptext16:	
  3740 ;; *************** function ___ftdiv *****************
  3741 ;; Defined at:
  3742 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  f2              3   19[BANK0 ] float 
  3745 ;;  f1              3   22[BANK0 ] float 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  f3              3   30[BANK0 ] float 
  3748 ;;  sign            1   34[BANK0 ] unsigned char 
  3749 ;;  exp             1   33[BANK0 ] unsigned char 
  3750 ;;  cntr            1   29[BANK0 ] unsigned char 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  3   19[BANK0 ] float 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3760 ;;      Params:         0       6       0       0       0
  3761 ;;      Locals:         0       6       0       0       0
  3762 ;;      Temps:          0       4       0       0       0
  3763 ;;      Totals:         0      16       0       0       0
  3764 ;;Total ram usage:       16 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    3
  3767 ;; This function calls:
  3768 ;;		___ftpack
  3769 ;; This function is called by:
  3770 ;;		_moveDeg
  3771 ;;		_readADCMeter
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function ___ftdiv
  3777  04BD                     ___ftdiv:	
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3781  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  3782  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  3783  04BF  0836               	movf	___ftdiv@f1,w
  3784  04C0  00B9               	movwf	??___ftdiv
  3785  04C1  0837               	movf	___ftdiv@f1+1,w
  3786  04C2  00BA               	movwf	??___ftdiv+1
  3787  04C3  0838               	movf	___ftdiv@f1+2,w
  3788  04C4  00BB               	movwf	??___ftdiv+2
  3789  04C5  1003               	clrc
  3790  04C6  0D3A               	rlf	??___ftdiv+1,w
  3791  04C7  0D3B               	rlf	??___ftdiv+2,w
  3792  04C8  00BC               	movwf	??___ftdiv+3
  3793  04C9  083C               	movf	??___ftdiv+3,w
  3794  04CA  00C1               	movwf	___ftdiv@exp
  3795  04CB  0841               	movf	___ftdiv@exp,w
  3796  04CC  1D03               	btfss	3,2
  3797  04CD  2CD5               	goto	l2684
  3798  04CE  3000               	movlw	0
  3799  04CF  00B3               	movwf	?___ftdiv
  3800  04D0  3000               	movlw	0
  3801  04D1  00B4               	movwf	?___ftdiv+1
  3802  04D2  3000               	movlw	0
  3803  04D3  00B5               	movwf	?___ftdiv+2
  3804  04D4  0008               	return
  3805  04D5                     l2684:	
  3806  04D5  0833               	movf	___ftdiv@f2,w
  3807  04D6  00B9               	movwf	??___ftdiv
  3808  04D7  0834               	movf	___ftdiv@f2+1,w
  3809  04D8  00BA               	movwf	??___ftdiv+1
  3810  04D9  0835               	movf	___ftdiv@f2+2,w
  3811  04DA  00BB               	movwf	??___ftdiv+2
  3812  04DB  1003               	clrc
  3813  04DC  0D3A               	rlf	??___ftdiv+1,w
  3814  04DD  0D3B               	rlf	??___ftdiv+2,w
  3815  04DE  00BC               	movwf	??___ftdiv+3
  3816  04DF  083C               	movf	??___ftdiv+3,w
  3817  04E0  00C2               	movwf	___ftdiv@sign
  3818  04E1  0842               	movf	___ftdiv@sign,w
  3819  04E2  1D03               	btfss	3,2
  3820  04E3  2CEB               	goto	l2690
  3821  04E4  3000               	movlw	0
  3822  04E5  00B3               	movwf	?___ftdiv
  3823  04E6  3000               	movlw	0
  3824  04E7  00B4               	movwf	?___ftdiv+1
  3825  04E8  3000               	movlw	0
  3826  04E9  00B5               	movwf	?___ftdiv+2
  3827  04EA  0008               	return
  3828  04EB                     l2690:	
  3829  04EB  3000               	movlw	0
  3830  04EC  00BE               	movwf	___ftdiv@f3
  3831  04ED  3000               	movlw	0
  3832  04EE  00BF               	movwf	___ftdiv@f3+1
  3833  04EF  3000               	movlw	0
  3834  04F0  00C0               	movwf	___ftdiv@f3+2
  3835  04F1  3089               	movlw	137
  3836  04F2  0742               	addwf	___ftdiv@sign,w
  3837  04F3  00B9               	movwf	??___ftdiv
  3838  04F4  0839               	movf	??___ftdiv,w
  3839  04F5  02C1               	subwf	___ftdiv@exp,f
  3840  04F6  0836               	movf	___ftdiv@f1,w
  3841  04F7  00B9               	movwf	??___ftdiv
  3842  04F8  0837               	movf	___ftdiv@f1+1,w
  3843  04F9  00BA               	movwf	??___ftdiv+1
  3844  04FA  0838               	movf	___ftdiv@f1+2,w
  3845  04FB  00BB               	movwf	??___ftdiv+2
  3846  04FC  3010               	movlw	16
  3847  04FD                     u3345:	
  3848  04FD  1003               	clrc
  3849  04FE  0CBB               	rrf	??___ftdiv+2,f
  3850  04FF  0CBA               	rrf	??___ftdiv+1,f
  3851  0500  0CB9               	rrf	??___ftdiv,f
  3852  0501  3EFF               	addlw	-1
  3853  0502  1D03               	skipz
  3854  0503  2CFD               	goto	u3345
  3855  0504  0839               	movf	??___ftdiv,w
  3856  0505  00BC               	movwf	??___ftdiv+3
  3857  0506  083C               	movf	??___ftdiv+3,w
  3858  0507  00C2               	movwf	___ftdiv@sign
  3859  0508  0833               	movf	___ftdiv@f2,w
  3860  0509  00B9               	movwf	??___ftdiv
  3861  050A  0834               	movf	___ftdiv@f2+1,w
  3862  050B  00BA               	movwf	??___ftdiv+1
  3863  050C  0835               	movf	___ftdiv@f2+2,w
  3864  050D  00BB               	movwf	??___ftdiv+2
  3865  050E  3010               	movlw	16
  3866  050F                     u3355:	
  3867  050F  1003               	clrc
  3868  0510  0CBB               	rrf	??___ftdiv+2,f
  3869  0511  0CBA               	rrf	??___ftdiv+1,f
  3870  0512  0CB9               	rrf	??___ftdiv,f
  3871  0513  3EFF               	addlw	-1
  3872  0514  1D03               	skipz
  3873  0515  2D0F               	goto	u3355
  3874  0516  0839               	movf	??___ftdiv,w
  3875  0517  00BC               	movwf	??___ftdiv+3
  3876  0518  083C               	movf	??___ftdiv+3,w
  3877  0519  06C2               	xorwf	___ftdiv@sign,f
  3878  051A  3080               	movlw	128
  3879  051B  00B9               	movwf	??___ftdiv
  3880  051C  0839               	movf	??___ftdiv,w
  3881  051D  05C2               	andwf	___ftdiv@sign,f
  3882  051E  17B7               	bsf	___ftdiv@f1+1,7
  3883  051F  30FF               	movlw	255
  3884  0520  05B6               	andwf	___ftdiv@f1,f
  3885  0521  30FF               	movlw	255
  3886  0522  05B7               	andwf	___ftdiv@f1+1,f
  3887  0523  3000               	movlw	0
  3888  0524  05B8               	andwf	___ftdiv@f1+2,f
  3889  0525  17B4               	bsf	___ftdiv@f2+1,7
  3890  0526  30FF               	movlw	255
  3891  0527  05B3               	andwf	___ftdiv@f2,f
  3892  0528  30FF               	movlw	255
  3893  0529  05B4               	andwf	___ftdiv@f2+1,f
  3894  052A  3000               	movlw	0
  3895  052B  05B5               	andwf	___ftdiv@f2+2,f
  3896  052C  3018               	movlw	24
  3897  052D  00B9               	movwf	??___ftdiv
  3898  052E  0839               	movf	??___ftdiv,w
  3899  052F  00BD               	movwf	___ftdiv@cntr
  3900  0530                     l2704:	
  3901  0530  3001               	movlw	1
  3902  0531                     u3365:	
  3903  0531  1003               	clrc
  3904  0532  0DBE               	rlf	___ftdiv@f3,f
  3905  0533  0DBF               	rlf	___ftdiv@f3+1,f
  3906  0534  0DC0               	rlf	___ftdiv@f3+2,f
  3907  0535  3EFF               	addlw	-1
  3908  0536  1D03               	skipz
  3909  0537  2D31               	goto	u3365
  3910  0538  0835               	movf	___ftdiv@f2+2,w
  3911  0539  0238               	subwf	___ftdiv@f1+2,w
  3912  053A  1D03               	skipz
  3913  053B  2D42               	goto	u3375
  3914  053C  0834               	movf	___ftdiv@f2+1,w
  3915  053D  0237               	subwf	___ftdiv@f1+1,w
  3916  053E  1D03               	skipz
  3917  053F  2D42               	goto	u3375
  3918  0540  0833               	movf	___ftdiv@f2,w
  3919  0541  0236               	subwf	___ftdiv@f1,w
  3920  0542                     u3375:	
  3921  0542  1C03               	skipc
  3922  0543  2D4F               	goto	l2712
  3923  0544  0833               	movf	___ftdiv@f2,w
  3924  0545  02B6               	subwf	___ftdiv@f1,f
  3925  0546  0834               	movf	___ftdiv@f2+1,w
  3926  0547  1C03               	skipc
  3927  0548  0F34               	incfsz	___ftdiv@f2+1,w
  3928  0549  02B7               	subwf	___ftdiv@f1+1,f
  3929  054A  0835               	movf	___ftdiv@f2+2,w
  3930  054B  1C03               	skipc
  3931  054C  0A35               	incf	___ftdiv@f2+2,w
  3932  054D  02B8               	subwf	___ftdiv@f1+2,f
  3933  054E  143E               	bsf	___ftdiv@f3,0
  3934  054F                     l2712:	
  3935  054F  3001               	movlw	1
  3936  0550                     u3385:	
  3937  0550  1003               	clrc
  3938  0551  0DB6               	rlf	___ftdiv@f1,f
  3939  0552  0DB7               	rlf	___ftdiv@f1+1,f
  3940  0553  0DB8               	rlf	___ftdiv@f1+2,f
  3941  0554  3EFF               	addlw	-1
  3942  0555  1D03               	skipz
  3943  0556  2D50               	goto	u3385
  3944  0557  3001               	movlw	1
  3945  0558  02BD               	subwf	___ftdiv@cntr,f
  3946  0559  1D03               	btfss	3,2
  3947  055A  2D30               	goto	l2704
  3948  055B  083E               	movf	___ftdiv@f3,w
  3949  055C  00A0               	movwf	___ftpack@arg
  3950  055D  083F               	movf	___ftdiv@f3+1,w
  3951  055E  00A1               	movwf	___ftpack@arg+1
  3952  055F  0840               	movf	___ftdiv@f3+2,w
  3953  0560  00A2               	movwf	___ftpack@arg+2
  3954  0561  0841               	movf	___ftdiv@exp,w
  3955  0562  00B9               	movwf	??___ftdiv
  3956  0563  0839               	movf	??___ftdiv,w
  3957  0564  00A3               	movwf	___ftpack@exp
  3958  0565  0842               	movf	___ftdiv@sign,w
  3959  0566  00BA               	movwf	??___ftdiv+1
  3960  0567  083A               	movf	??___ftdiv+1,w
  3961  0568  00A4               	movwf	___ftpack@sign
  3962  0569  120A  118A  2733   	fcall	___ftpack
  3963  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3964  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3965  056E  0820               	movf	?___ftpack,w
  3966  056F  00B3               	movwf	?___ftdiv
  3967  0570  0821               	movf	?___ftpack+1,w
  3968  0571  00B4               	movwf	?___ftdiv+1
  3969  0572  0822               	movf	?___ftpack+2,w
  3970  0573  00B5               	movwf	?___ftdiv+2
  3971  0574  0008               	return
  3972  0575                     __end_of___ftdiv:	
  3973                           
  3974                           	psect	text17
  3975  0733                     __ptext17:	
  3976 ;; *************** function ___ftpack *****************
  3977 ;; Defined at:
  3978 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  arg             3    0[BANK0 ] unsigned um
  3981 ;;  exp             1    3[BANK0 ] unsigned char 
  3982 ;;  sign            1    4[BANK0 ] unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  3    0[BANK0 ] float 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         0       5       0       0       0
  3995 ;;      Locals:         0       0       0       0       0
  3996 ;;      Temps:          0       3       0       0       0
  3997 ;;      Totals:         0       8       0       0       0
  3998 ;;Total ram usage:        8 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		___altoft
  4005 ;;		___awtoft
  4006 ;;		___ftadd
  4007 ;;		___ftdiv
  4008 ;;		___ftmul
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function ___ftpack
  4014  0733                     ___ftpack:	
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4018  0733  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0734  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0735  0823               	movf	___ftpack@exp,w
  4021  0736  1903               	btfsc	3,2
  4022  0737  2F3D               	goto	l2306
  4023  0738  0822               	movf	___ftpack@arg+2,w
  4024  0739  0421               	iorwf	___ftpack@arg+1,w
  4025  073A  0420               	iorwf	___ftpack@arg,w
  4026  073B  1D03               	skipz
  4027  073C  2F50               	goto	l2312
  4028  073D                     l2306:	
  4029  073D  3000               	movlw	0
  4030  073E  00A0               	movwf	?___ftpack
  4031  073F  3000               	movlw	0
  4032  0740  00A1               	movwf	?___ftpack+1
  4033  0741  3000               	movlw	0
  4034  0742  00A2               	movwf	?___ftpack+2
  4035  0743  0008               	return
  4036  0744                     l2310:	
  4037  0744  3001               	movlw	1
  4038  0745  00A5               	movwf	??___ftpack
  4039  0746  0825               	movf	??___ftpack,w
  4040  0747  07A3               	addwf	___ftpack@exp,f
  4041  0748  3001               	movlw	1
  4042  0749                     u2655:	
  4043  0749  1003               	clrc
  4044  074A  0CA2               	rrf	___ftpack@arg+2,f
  4045  074B  0CA1               	rrf	___ftpack@arg+1,f
  4046  074C  0CA0               	rrf	___ftpack@arg,f
  4047  074D  3EFF               	addlw	-1
  4048  074E  1D03               	skipz
  4049  074F  2F49               	goto	u2655
  4050  0750                     l2312:	
  4051  0750  30FE               	movlw	254
  4052  0751  0522               	andwf	___ftpack@arg+2,w
  4053  0752  1903               	btfsc	3,2
  4054  0753  2F6B               	goto	l581
  4055  0754  2F44               	goto	l2310
  4056  0755                     l2314:	
  4057  0755  3001               	movlw	1
  4058  0756  00A5               	movwf	??___ftpack
  4059  0757  0825               	movf	??___ftpack,w
  4060  0758  07A3               	addwf	___ftpack@exp,f
  4061  0759  3001               	movlw	1
  4062  075A  07A0               	addwf	___ftpack@arg,f
  4063  075B  3000               	movlw	0
  4064  075C  1803               	skipnc
  4065  075D  3001               	movlw	1
  4066  075E  07A1               	addwf	___ftpack@arg+1,f
  4067  075F  3000               	movlw	0
  4068  0760  1803               	skipnc
  4069  0761  3001               	movlw	1
  4070  0762  07A2               	addwf	___ftpack@arg+2,f
  4071  0763  3001               	movlw	1
  4072  0764                     u2675:	
  4073  0764  1003               	clrc
  4074  0765  0CA2               	rrf	___ftpack@arg+2,f
  4075  0766  0CA1               	rrf	___ftpack@arg+1,f
  4076  0767  0CA0               	rrf	___ftpack@arg,f
  4077  0768  3EFF               	addlw	-1
  4078  0769  1D03               	skipz
  4079  076A  2F64               	goto	u2675
  4080  076B                     l581:	
  4081  076B  30FF               	movlw	255
  4082  076C  0522               	andwf	___ftpack@arg+2,w
  4083  076D  1903               	btfsc	3,2
  4084  076E  2F7A               	goto	l2322
  4085  076F  2F55               	goto	l2314
  4086  0770                     l2320:	
  4087  0770  3001               	movlw	1
  4088  0771  02A3               	subwf	___ftpack@exp,f
  4089  0772  3001               	movlw	1
  4090  0773                     u2695:	
  4091  0773  1003               	clrc
  4092  0774  0DA0               	rlf	___ftpack@arg,f
  4093  0775  0DA1               	rlf	___ftpack@arg+1,f
  4094  0776  0DA2               	rlf	___ftpack@arg+2,f
  4095  0777  3EFF               	addlw	-1
  4096  0778  1D03               	skipz
  4097  0779  2F73               	goto	u2695
  4098  077A                     l2322:	
  4099  077A  1BA1               	btfsc	___ftpack@arg+1,7
  4100  077B  2F80               	goto	l588
  4101  077C  3002               	movlw	2
  4102  077D  0223               	subwf	___ftpack@exp,w
  4103  077E  1803               	skipnc
  4104  077F  2F70               	goto	l2320
  4105  0780                     l588:	
  4106  0780  1823               	btfsc	___ftpack@exp,0
  4107  0781  2F88               	goto	l589
  4108  0782  30FF               	movlw	255
  4109  0783  05A0               	andwf	___ftpack@arg,f
  4110  0784  307F               	movlw	127
  4111  0785  05A1               	andwf	___ftpack@arg+1,f
  4112  0786  30FF               	movlw	255
  4113  0787  05A2               	andwf	___ftpack@arg+2,f
  4114  0788                     l589:	
  4115  0788  1003               	clrc
  4116  0789  0CA3               	rrf	___ftpack@exp,f
  4117  078A  0823               	movf	___ftpack@exp,w
  4118  078B  00A5               	movwf	??___ftpack
  4119  078C  01A6               	clrf	??___ftpack+1
  4120  078D  01A7               	clrf	??___ftpack+2
  4121  078E  3010               	movlw	16
  4122  078F                     u2735:	
  4123  078F  1003               	clrc
  4124  0790  0DA5               	rlf	??___ftpack,f
  4125  0791  0DA6               	rlf	??___ftpack+1,f
  4126  0792  0DA7               	rlf	??___ftpack+2,f
  4127  0793  3EFF               	addlw	-1
  4128  0794  1D03               	skipz
  4129  0795  2F8F               	goto	u2735
  4130  0796  0825               	movf	??___ftpack,w
  4131  0797  04A0               	iorwf	___ftpack@arg,f
  4132  0798  0826               	movf	??___ftpack+1,w
  4133  0799  04A1               	iorwf	___ftpack@arg+1,f
  4134  079A  0827               	movf	??___ftpack+2,w
  4135  079B  04A2               	iorwf	___ftpack@arg+2,f
  4136  079C  0824               	movf	___ftpack@sign,w
  4137  079D  1903               	btfsc	3,2
  4138  079E  0008               	return
  4139  079F  17A2               	bsf	___ftpack@arg+2,7
  4140  07A0  0008               	return
  4141  07A1                     __end_of___ftpack:	
  4142                           
  4143                           	psect	text18
  4144  0DB4                     __ptext18:	
  4145 ;; *************** function _initialise *****************
  4146 ;; Defined at:
  4147 ;;		line 26 in file "main.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4161 ;;      Params:         0       0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0
  4164 ;;      Totals:         0       0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    5
  4168 ;; This function calls:
  4169 ;;		_initializeADC
  4170 ;;		_initializeMotor
  4171 ;;		_initializeTimer0
  4172 ;;		_setupLCD
  4173 ;; This function is called by:
  4174 ;;		_main
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _initialise
  4180  0DB4                     _initialise:	
  4181                           
  4182                           ;main.c: 29: TRISB = 0b00001111;
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _initialise: [wreg+status,2+status,0+pclath+cstack]
  4186  0DB4  300F               	movlw	15
  4187  0DB5  1683               	bsf	3,5	;RP0=1, select bank1
  4188  0DB6  1303               	bcf	3,6	;RP1=0, select bank1
  4189  0DB7  0086               	movwf	6	;volatile
  4190                           
  4191                           ;main.c: 30: TRISC = 0;
  4192  0DB8  0187               	clrf	7	;volatile
  4193                           
  4194                           ;main.c: 32: RB4 = 1;
  4195  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0DBB  1606               	bsf	6,4	;volatile
  4198                           
  4199                           ;main.c: 33: RB5 = 1;
  4200  0DBC  1686               	bsf	6,5	;volatile
  4201                           
  4202                           ;main.c: 35: initializeTimer0();
  4203  0DBD  120A  158A  2519  120A  158A  	fcall	_initializeTimer0
  4204                           
  4205                           ;main.c: 36: initializeADC();
  4206  0DC2  120A  158A  256F  120A  158A  	fcall	_initializeADC
  4207                           
  4208                           ;main.c: 37: setupLCD();
  4209  0DC7  120A  158A  265F  120A  158A  	fcall	_setupLCD
  4210                           
  4211                           ;main.c: 38: initializeMotor();
  4212  0DCC  120A  158A  25D0   	fcall	_initializeMotor
  4213  0DCF  0008               	return
  4214  0DD0                     __end_of_initialise:	
  4215                           
  4216                           	psect	text19
  4217  0E5F                     __ptext19:	
  4218 ;; *************** function _setupLCD *****************
  4219 ;; Defined at:
  4220 ;;		line 81 in file "lcd.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, pclath, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4234 ;;      Params:         0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    3
  4241 ;; This function calls:
  4242 ;;		_lcdWriteControl
  4243 ;; This function is called by:
  4244 ;;		_initialise
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _setupLCD
  4250  0E5F                     _setupLCD:	
  4251                           
  4252                           ;lcd.c: 84: PORTD = 0;
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  4256  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0E60  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0E61  0188               	clrf	8	;volatile
  4259                           
  4260                           ;lcd.c: 85: PORTE = 0;
  4261  0E62  0189               	clrf	9	;volatile
  4262                           
  4263                           ;lcd.c: 87: TRISD = 0b00000000;
  4264  0E63  1683               	bsf	3,5	;RP0=1, select bank1
  4265  0E64  1303               	bcf	3,6	;RP1=0, select bank1
  4266  0E65  0188               	clrf	8	;volatile
  4267                           
  4268                           ;lcd.c: 88: TRISE = 0b00000000;
  4269  0E66  0189               	clrf	9	;volatile
  4270                           
  4271                           ;lcd.c: 91: lcdWriteControl(0b00000001);
  4272  0E67  3001               	movlw	1
  4273  0E68  120A  158A  255B  120A  158A  	fcall	_lcdWriteControl
  4274                           
  4275                           ;lcd.c: 92: lcdWriteControl(0b00111000);
  4276  0E6D  3038               	movlw	56
  4277  0E6E  120A  158A  255B  120A  158A  	fcall	_lcdWriteControl
  4278                           
  4279                           ;lcd.c: 93: lcdWriteControl(0b00001100);
  4280  0E73  300C               	movlw	12
  4281  0E74  120A  158A  255B  120A  158A  	fcall	_lcdWriteControl
  4282                           
  4283                           ;lcd.c: 94: lcdWriteControl(0b00000110);
  4284  0E79  3006               	movlw	6
  4285  0E7A  120A  158A  255B  120A  158A  	fcall	_lcdWriteControl
  4286                           
  4287                           ;lcd.c: 95: lcdWriteControl(0b00000010);
  4288  0E7F  3002               	movlw	2
  4289  0E80  120A  158A  255B  120A  158A  	fcall	_lcdWriteControl
  4290                           
  4291                           ;lcd.c: 99: lcdWriteControl(0b00000001);
  4292  0E85  3001               	movlw	1
  4293  0E86  120A  158A  255B   	fcall	_lcdWriteControl
  4294  0E89  0008               	return
  4295  0E8A                     __end_of_setupLCD:	
  4296                           
  4297                           	psect	text20
  4298  0D19                     __ptext20:	
  4299 ;; *************** function _initializeTimer0 *****************
  4300 ;; Defined at:
  4301 ;;		line 7 in file "timer0.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4315 ;;      Params:         0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    2
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_initialise
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _initializeTimer0
  4331  0D19                     _initializeTimer0:	
  4332                           
  4333                           ;timer0.c: 10: TMR0 = 100;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _initializeTimer0: [wreg]
  4337  0D19  3064               	movlw	100
  4338  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  4340  0D1C  0081               	movwf	1	;volatile
  4341                           
  4342                           ;timer0.c: 11: T0CS = 0;
  4343  0D1D  1683               	bsf	3,5	;RP0=1, select bank1
  4344  0D1E  1303               	bcf	3,6	;RP1=0, select bank1
  4345  0D1F  1281               	bcf	1,5	;volatile
  4346                           
  4347                           ;timer0.c: 12: T0SE = 0;
  4348  0D20  1201               	bcf	1,4	;volatile
  4349                           
  4350                           ;timer0.c: 13: PSA = 0;
  4351  0D21  1181               	bcf	1,3	;volatile
  4352                           
  4353                           ;timer0.c: 14: PS0 = 0;
  4354  0D22  1001               	bcf	1,0	;volatile
  4355                           
  4356                           ;timer0.c: 15: PS1 = 0;
  4357  0D23  1081               	bcf	1,1	;volatile
  4358                           
  4359                           ;timer0.c: 16: PS2 = 1;
  4360  0D24  1501               	bsf	1,2	;volatile
  4361                           
  4362                           ;timer0.c: 18: TMR0IE = 1;
  4363  0D25  168B               	bsf	11,5	;volatile
  4364                           
  4365                           ;timer0.c: 19: (GIE = 1);
  4366  0D26  178B               	bsf	11,7	;volatile
  4367  0D27  0008               	return
  4368  0D28                     __end_of_initializeTimer0:	
  4369                           
  4370                           	psect	text21
  4371  0DD0                     __ptext21:	
  4372 ;; *************** function _initializeMotor *****************
  4373 ;; Defined at:
  4374 ;;		line 19 in file "motor.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  2   28[None  ] int 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2, status,0, pclath, cstack
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4388 ;;      Params:         0       0       0       0       0
  4389 ;;      Locals:         0       0       0       0       0
  4390 ;;      Temps:          0       1       0       0       0
  4391 ;;      Totals:         0       1       0       0       0
  4392 ;;Total ram usage:        1 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    4
  4395 ;; This function calls:
  4396 ;;		_lcdSetCursor
  4397 ;;		_lcdWriteToDigitBCD
  4398 ;; This function is called by:
  4399 ;;		_initialise
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _initializeMotor
  4405  0DD0                     _initializeMotor:	
  4406                           
  4407                           ;motor.c: 20: PORTC = halfSteps[0];
  4408                           
  4409                           ;incstack = 0
  4410                           ; Regs used in _initializeMotor: [wreg+status,2+status,0+pclath+cstack]
  4411  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  4412  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  4413  0DD2  0839               	movf	_halfSteps^(0+128),w
  4414  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  4415  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  4416  0DD5  0087               	movwf	7	;volatile
  4417                           
  4418                           ;motor.c: 21: lcdSetCursor(0x40);
  4419  0DD6  3040               	movlw	64
  4420  0DD7  120A  158A  24EB  120A  158A  	fcall	_lcdSetCursor
  4421                           
  4422                           ;motor.c: 22: lcdWriteToDigitBCD(nrOfSteps,4,1);
  4423  0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0DDD  1303               	bcf	3,6	;RP1=0, select bank1
  4425  0DDE  0854               	movf	(_nrOfSteps+1)^(0+128),w
  4426  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  4427  0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  4428  0DE1  00A7               	movwf	lcdWriteToDigitBCD@data+1
  4429  0DE2  1683               	bsf	3,5	;RP0=1, select bank1
  4430  0DE3  1303               	bcf	3,6	;RP1=0, select bank1
  4431  0DE4  0853               	movf	_nrOfSteps^(0+128),w
  4432  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  4433  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  4434  0DE7  00A6               	movwf	lcdWriteToDigitBCD@data
  4435  0DE8  3004               	movlw	4
  4436  0DE9  00B1               	movwf	??_initializeMotor
  4437  0DEA  0831               	movf	??_initializeMotor,w
  4438  0DEB  00A8               	movwf	lcdWriteToDigitBCD@digits
  4439  0DEC  01A9               	clrf	lcdWriteToDigitBCD@showSign
  4440  0DED  0AA9               	incf	lcdWriteToDigitBCD@showSign,f
  4441  0DEE  120A  118A  2575   	fcall	_lcdWriteToDigitBCD
  4442  0DF1  0008               	return
  4443  0DF2                     __end_of_initializeMotor:	
  4444                           
  4445                           	psect	text22
  4446  0575                     __ptext22:	
  4447 ;; *************** function _lcdWriteToDigitBCD *****************
  4448 ;; Defined at:
  4449 ;;		line 39 in file "lcd.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  data            2    6[BANK0 ] int 
  4452 ;;  digits          1    8[BANK0 ] unsigned char 
  4453 ;;  showSign        1    9[BANK0 ] unsigned char 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  OnesDigit       2   15[BANK0 ] unsigned int 
  4456 ;;  sign            1   14[BANK0 ] char 
  4457 ;;  ThousandDigi    1   13[BANK0 ] unsigned char 
  4458 ;;  HundredDigit    1   12[BANK0 ] unsigned char 
  4459 ;;  TensDigit       1   11[BANK0 ] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0, pclath, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4469 ;;      Params:         0       4       0       0       0
  4470 ;;      Locals:         0       6       0       0       0
  4471 ;;      Temps:          0       1       0       0       0
  4472 ;;      Totals:         0      11       0       0       0
  4473 ;;Total ram usage:       11 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    3
  4476 ;; This function calls:
  4477 ;;		___wmul
  4478 ;;		_lcdWriteData
  4479 ;; This function is called by:
  4480 ;;		_main
  4481 ;;		_initializeMotor
  4482 ;;		_move
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function _lcdWriteToDigitBCD
  4488  0575                     _lcdWriteToDigitBCD:	
  4489                           
  4490                           ;lcd.c: 40: unsigned int OnesDigit;
  4491                           ;lcd.c: 41: unsigned char TensDigit, HundredDigit, ThousandDigit;
  4492                           ;lcd.c: 42: signed char sign = 1;
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  4496  0575  1283               	bcf	3,5	;RP0=0, select bank0
  4497  0576  1303               	bcf	3,6	;RP1=0, select bank0
  4498  0577  01AE               	clrf	lcdWriteToDigitBCD@sign
  4499  0578  0AAE               	incf	lcdWriteToDigitBCD@sign,f
  4500                           
  4501                           ;lcd.c: 43: if(data<0)
  4502  0579  1FA7               	btfss	lcdWriteToDigitBCD@data+1,7
  4503  057A  2D7D               	goto	l2404
  4504                           
  4505                           ;lcd.c: 44: sign = -1;
  4506  057B  01AE               	clrf	lcdWriteToDigitBCD@sign
  4507  057C  03AE               	decf	lcdWriteToDigitBCD@sign,f
  4508  057D                     l2404:	
  4509                           
  4510                           ;lcd.c: 46: OnesDigit = data*sign;
  4511  057D  082E               	movf	lcdWriteToDigitBCD@sign,w
  4512  057E  00A0               	movwf	___wmul@multiplier
  4513  057F  01A1               	clrf	___wmul@multiplier+1
  4514  0580  1BA0               	btfsc	___wmul@multiplier,7
  4515  0581  03A1               	decf	___wmul@multiplier+1,f
  4516  0582  0827               	movf	lcdWriteToDigitBCD@data+1,w
  4517  0583  00A3               	movwf	___wmul@multiplicand+1
  4518  0584  0826               	movf	lcdWriteToDigitBCD@data,w
  4519  0585  00A2               	movwf	___wmul@multiplicand
  4520  0586  120A  158A  25F2  120A  118A  	fcall	___wmul
  4521  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4522  058C  1303               	bcf	3,6	;RP1=0, select bank0
  4523  058D  0821               	movf	?___wmul+1,w
  4524  058E  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4525  058F  0820               	movf	?___wmul,w
  4526  0590  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4527                           
  4528                           ;lcd.c: 47: ThousandDigit = 0;
  4529  0591  01AD               	clrf	lcdWriteToDigitBCD@ThousandDigit
  4530                           
  4531                           ;lcd.c: 48: HundredDigit = 0;
  4532  0592  01AC               	clrf	lcdWriteToDigitBCD@HundredDigit
  4533                           
  4534                           ;lcd.c: 49: TensDigit = 0;
  4535  0593  01AB               	clrf	lcdWriteToDigitBCD@TensDigit
  4536  0594                     l2414:	
  4537                           ;lcd.c: 53: while(OnesDigit >= 1000){
  4538                           
  4539  0594  3003               	movlw	3
  4540  0595  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4541  0596  30E8               	movlw	232
  4542  0597  1903               	skipnz
  4543  0598  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4544  0599  1C03               	btfss	3,0
  4545  059A  2DB4               	goto	l2418
  4546                           
  4547                           ;lcd.c: 54: OnesDigit = OnesDigit - 1000;
  4548  059B  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4549  059C  3E18               	addlw	24
  4550  059D  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4551  059E  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4552  059F  1803               	skipnc
  4553  05A0  3E01               	addlw	1
  4554  05A1  3EFC               	addlw	252
  4555  05A2  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4556                           
  4557                           ;lcd.c: 55: ThousandDigit++;
  4558  05A3  3001               	movlw	1
  4559  05A4  00AA               	movwf	??_lcdWriteToDigitBCD
  4560  05A5  082A               	movf	??_lcdWriteToDigitBCD,w
  4561  05A6  07AD               	addwf	lcdWriteToDigitBCD@ThousandDigit,f
  4562  05A7  2D94               	goto	l2414
  4563  05A8                     l2416:	
  4564                           ;lcd.c: 56: }
  4565                           ;lcd.c: 57: while(OnesDigit >= 100){
  4566                           
  4567                           
  4568                           ;lcd.c: 58: OnesDigit = OnesDigit - 100;
  4569  05A8  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4570  05A9  3E9C               	addlw	156
  4571  05AA  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4572  05AB  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4573  05AC  1803               	skipnc
  4574  05AD  3E01               	addlw	1
  4575  05AE  3EFF               	addlw	255
  4576  05AF  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4577                           
  4578                           ;lcd.c: 59: HundredDigit++;
  4579  05B0  3001               	movlw	1
  4580  05B1  00AA               	movwf	??_lcdWriteToDigitBCD
  4581  05B2  082A               	movf	??_lcdWriteToDigitBCD,w
  4582  05B3  07AC               	addwf	lcdWriteToDigitBCD@HundredDigit,f
  4583  05B4                     l2418:	
  4584  05B4  3000               	movlw	0
  4585  05B5  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4586  05B6  3064               	movlw	100
  4587  05B7  1903               	skipnz
  4588  05B8  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4589  05B9  1C03               	btfss	3,0
  4590  05BA  2DC8               	goto	l2422
  4591  05BB  2DA8               	goto	l2416
  4592  05BC                     l2420:	
  4593                           ;lcd.c: 60: }
  4594                           ;lcd.c: 61: while (OnesDigit >= 10){
  4595                           
  4596                           
  4597                           ;lcd.c: 62: OnesDigit = OnesDigit - 10;
  4598  05BC  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4599  05BD  3EF6               	addlw	246
  4600  05BE  00AF               	movwf	lcdWriteToDigitBCD@OnesDigit
  4601  05BF  0830               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  4602  05C0  1803               	skipnc
  4603  05C1  3E01               	addlw	1
  4604  05C2  3EFF               	addlw	255
  4605  05C3  00B0               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  4606                           
  4607                           ;lcd.c: 63: TensDigit++;
  4608  05C4  3001               	movlw	1
  4609  05C5  00AA               	movwf	??_lcdWriteToDigitBCD
  4610  05C6  082A               	movf	??_lcdWriteToDigitBCD,w
  4611  05C7  07AB               	addwf	lcdWriteToDigitBCD@TensDigit,f
  4612  05C8                     l2422:	
  4613  05C8  3000               	movlw	0
  4614  05C9  0230               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  4615  05CA  300A               	movlw	10
  4616  05CB  1903               	skipnz
  4617  05CC  022F               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  4618  05CD  1803               	skipnc
  4619  05CE  2DBC               	goto	l2420
  4620                           
  4621                           ;lcd.c: 64: }
  4622                           ;lcd.c: 65: if(sign == -1 && showSign)
  4623  05CF  0A2E               	incf	lcdWriteToDigitBCD@sign,w
  4624  05D0  1D03               	btfss	3,2
  4625  05D1  2DD7               	goto	l2430
  4626  05D2  0829               	movf	lcdWriteToDigitBCD@showSign,w
  4627  05D3  1903               	btfsc	3,2
  4628  05D4  2DD7               	goto	l2430
  4629                           
  4630                           ;lcd.c: 66: lcdWriteData((unsigned char)45);
  4631  05D5  302D               	movlw	45
  4632  05D6  2DE0               	goto	L5
  4633  05D7                     l2430:	
  4634                           
  4635                           ;lcd.c: 67: else if (sign == 1 && showSign){
  4636  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  4637  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  4638  05D9  032E               	decf	lcdWriteToDigitBCD@sign,w
  4639  05DA  1D03               	btfss	3,2
  4640  05DB  2DE5               	goto	l2436
  4641  05DC  0829               	movf	lcdWriteToDigitBCD@showSign,w
  4642  05DD  1903               	btfsc	3,2
  4643  05DE  2DE5               	goto	l2436
  4644                           
  4645                           ;lcd.c: 68: lcdWriteData((unsigned char)43);
  4646  05DF  302B               	movlw	43
  4647  05E0                     L5:	
  4648  05E0  120A  158A  2548  120A  118A  	fcall	_lcdWriteData
  4649  05E5                     l2436:	
  4650                           
  4651                           ;lcd.c: 69: }
  4652                           ;lcd.c: 70: if(digits>3)
  4653  05E5  3004               	movlw	4
  4654  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  4655  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  4656  05E8  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4657  05E9  1C03               	skipc
  4658  05EA  2DF2               	goto	l2440
  4659                           
  4660                           ;lcd.c: 71: lcdWriteData((unsigned char)ThousandDigit + 48);
  4661  05EB  082D               	movf	lcdWriteToDigitBCD@ThousandDigit,w
  4662  05EC  3E30               	addlw	48
  4663  05ED  120A  158A  2548  120A  118A  	fcall	_lcdWriteData
  4664  05F2                     l2440:	
  4665                           
  4666                           ;lcd.c: 72: if(digits>2)
  4667  05F2  3003               	movlw	3
  4668  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  4669  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  4670  05F5  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4671  05F6  1C03               	skipc
  4672  05F7  2DFF               	goto	l2444
  4673                           
  4674                           ;lcd.c: 73: lcdWriteData((unsigned char)HundredDigit + 48);
  4675  05F8  082C               	movf	lcdWriteToDigitBCD@HundredDigit,w
  4676  05F9  3E30               	addlw	48
  4677  05FA  120A  158A  2548  120A  118A  	fcall	_lcdWriteData
  4678  05FF                     l2444:	
  4679                           
  4680                           ;lcd.c: 74: if(digits>1)
  4681  05FF  3002               	movlw	2
  4682  0600  1283               	bcf	3,5	;RP0=0, select bank0
  4683  0601  1303               	bcf	3,6	;RP1=0, select bank0
  4684  0602  0228               	subwf	lcdWriteToDigitBCD@digits,w
  4685  0603  1C03               	skipc
  4686  0604  2E0C               	goto	l332
  4687                           
  4688                           ;lcd.c: 75: lcdWriteData((unsigned char)TensDigit + 48);
  4689  0605  082B               	movf	lcdWriteToDigitBCD@TensDigit,w
  4690  0606  3E30               	addlw	48
  4691  0607  120A  158A  2548  120A  118A  	fcall	_lcdWriteData
  4692  060C                     l332:	
  4693                           
  4694                           ;lcd.c: 77: lcdWriteData((unsigned char)OnesDigit + 48);
  4695  060C  1283               	bcf	3,5	;RP0=0, select bank0
  4696  060D  1303               	bcf	3,6	;RP1=0, select bank0
  4697  060E  082F               	movf	lcdWriteToDigitBCD@OnesDigit,w
  4698  060F  3E30               	addlw	48
  4699  0610  120A  158A  2548   	fcall	_lcdWriteData
  4700  0613  0008               	return
  4701  0614                     __end_of_lcdWriteToDigitBCD:	
  4702                           
  4703                           	psect	text23
  4704  0D48                     __ptext23:	
  4705 ;; *************** function _lcdWriteData *****************
  4706 ;; Defined at:
  4707 ;;		line 17 in file "lcd.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  databyte        1    wreg     unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  databyte        1    2[BANK0 ] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4721 ;;      Params:         0       0       0       0       0
  4722 ;;      Locals:         0       1       0       0       0
  4723 ;;      Temps:          0       2       0       0       0
  4724 ;;      Totals:         0       3       0       0       0
  4725 ;;Total ram usage:        3 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    2
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_lcdWriteToDigitBCD
  4732 ;;		_lcdWriteString
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _lcdWriteData
  4738  0D48                     _lcdWriteData:	
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in _lcdWriteData: [wreg]
  4742                           ;lcdWriteData@databyte stored from wreg
  4743  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  4744  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  4745  0D4A  00A2               	movwf	lcdWriteData@databyte
  4746                           
  4747                           ;lcd.c: 18: RE2 = 0;
  4748  0D4B  1109               	bcf	9,2	;volatile
  4749                           
  4750                           ;lcd.c: 19: RE1 = 0;
  4751  0D4C  1089               	bcf	9,1	;volatile
  4752                           
  4753                           ;lcd.c: 20: RE0 = 1;
  4754  0D4D  1409               	bsf	9,0	;volatile
  4755                           
  4756                           ;lcd.c: 21: PORTD = databyte;
  4757  0D4E  0822               	movf	lcdWriteData@databyte,w
  4758  0D4F  0088               	movwf	8	;volatile
  4759                           
  4760                           ;lcd.c: 22: RE2 = 1;
  4761  0D50  1509               	bsf	9,2	;volatile
  4762                           
  4763                           ;lcd.c: 23: RE2 = 0;
  4764  0D51  1109               	bcf	9,2	;volatile
  4765                           
  4766                           ;lcd.c: 24: _delay((unsigned long)((1)*(20000000/4000.0)));
  4767  0D52  3007               	movlw	7
  4768  0D53  00A1               	movwf	??_lcdWriteData+1
  4769  0D54  307D               	movlw	125
  4770  0D55  00A0               	movwf	??_lcdWriteData
  4771  0D56                     u3667:	
  4772  0D56  0BA0               	decfsz	??_lcdWriteData,f
  4773  0D57  2D56               	goto	u3667
  4774  0D58  0BA1               	decfsz	??_lcdWriteData+1,f
  4775  0D59  2D56               	goto	u3667
  4776  0D5A  0008               	return
  4777  0D5B                     __end_of_lcdWriteData:	
  4778                           
  4779                           	psect	text24
  4780  0DF2                     __ptext24:	
  4781 ;; *************** function ___wmul *****************
  4782 ;; Defined at:
  4783 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4786 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  product         2    4[BANK0 ] unsigned int 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  2    0[BANK0 ] unsigned int 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4798 ;;      Params:         0       4       0       0       0
  4799 ;;      Locals:         0       2       0       0       0
  4800 ;;      Temps:          0       0       0       0       0
  4801 ;;      Totals:         0       6       0       0       0
  4802 ;;Total ram usage:        6 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    2
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_lcdWriteToDigitBCD
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function ___wmul
  4814  0DF2                     ___wmul:	
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4818  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  4819  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  4820  0DF4  01A4               	clrf	___wmul@product
  4821  0DF5  01A5               	clrf	___wmul@product+1
  4822  0DF6                     l2352:	
  4823  0DF6  1C20               	btfss	___wmul@multiplier,0
  4824  0DF7  2DFE               	goto	l420
  4825  0DF8  0822               	movf	___wmul@multiplicand,w
  4826  0DF9  07A4               	addwf	___wmul@product,f
  4827  0DFA  1803               	skipnc
  4828  0DFB  0AA5               	incf	___wmul@product+1,f
  4829  0DFC  0823               	movf	___wmul@multiplicand+1,w
  4830  0DFD  07A5               	addwf	___wmul@product+1,f
  4831  0DFE                     l420:	
  4832  0DFE  3001               	movlw	1
  4833  0DFF                     u2765:	
  4834  0DFF  1003               	clrc
  4835  0E00  0DA2               	rlf	___wmul@multiplicand,f
  4836  0E01  0DA3               	rlf	___wmul@multiplicand+1,f
  4837  0E02  3EFF               	addlw	-1
  4838  0E03  1D03               	skipz
  4839  0E04  2DFF               	goto	u2765
  4840  0E05  3001               	movlw	1
  4841  0E06                     u2775:	
  4842  0E06  1003               	clrc
  4843  0E07  0CA1               	rrf	___wmul@multiplier+1,f
  4844  0E08  0CA0               	rrf	___wmul@multiplier,f
  4845  0E09  3EFF               	addlw	-1
  4846  0E0A  1D03               	skipz
  4847  0E0B  2E06               	goto	u2775
  4848  0E0C  0820               	movf	___wmul@multiplier,w
  4849  0E0D  0421               	iorwf	___wmul@multiplier+1,w
  4850  0E0E  1D03               	btfss	3,2
  4851  0E0F  2DF6               	goto	l2352
  4852  0E10  0825               	movf	___wmul@product+1,w
  4853  0E11  00A1               	movwf	?___wmul+1
  4854  0E12  0824               	movf	___wmul@product,w
  4855  0E13  00A0               	movwf	?___wmul
  4856  0E14  0008               	return
  4857  0E15                     __end_of___wmul:	
  4858                           
  4859                           	psect	text25
  4860  0CEB                     __ptext25:	
  4861 ;; *************** function _lcdSetCursor *****************
  4862 ;; Defined at:
  4863 ;;		line 28 in file "lcd.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  address         1    wreg     unsigned char 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  address         1    3[BANK0 ] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4877 ;;      Params:         0       0       0       0       0
  4878 ;;      Locals:         0       1       0       0       0
  4879 ;;      Temps:          0       0       0       0       0
  4880 ;;      Totals:         0       1       0       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    3
  4884 ;; This function calls:
  4885 ;;		_lcdWriteControl
  4886 ;; This function is called by:
  4887 ;;		_main
  4888 ;;		_initializeMotor
  4889 ;;		_move
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function _lcdSetCursor
  4895  0CEB                     _lcdSetCursor:	
  4896                           
  4897                           ;incstack = 0
  4898                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  4899                           ;lcdSetCursor@address stored from wreg
  4900  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  4901  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  4902  0CED  00A3               	movwf	lcdSetCursor@address
  4903                           
  4904                           ;lcd.c: 29: address |= 0b10000000;
  4905  0CEE  17A3               	bsf	lcdSetCursor@address,7
  4906                           
  4907                           ;lcd.c: 30: lcdWriteControl(address);
  4908  0CEF  0823               	movf	lcdSetCursor@address,w
  4909  0CF0  120A  158A  255B   	fcall	_lcdWriteControl
  4910  0CF3  0008               	return
  4911  0CF4                     __end_of_lcdSetCursor:	
  4912                           
  4913                           	psect	text26
  4914  0D5B                     __ptext26:	
  4915 ;; *************** function _lcdWriteControl *****************
  4916 ;; Defined at:
  4917 ;;		line 6 in file "lcd.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  databyte        1    wreg     unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  databyte        1    2[BANK0 ] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4931 ;;      Params:         0       0       0       0       0
  4932 ;;      Locals:         0       1       0       0       0
  4933 ;;      Temps:          0       2       0       0       0
  4934 ;;      Totals:         0       3       0       0       0
  4935 ;;Total ram usage:        3 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    2
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_lcdSetCursor
  4942 ;;		_setupLCD
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _lcdWriteControl
  4948  0D5B                     _lcdWriteControl:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _lcdWriteControl: [wreg]
  4952                           ;lcdWriteControl@databyte stored from wreg
  4953  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0D5D  00A2               	movwf	lcdWriteControl@databyte
  4956                           
  4957                           ;lcd.c: 7: RE2 = 0;
  4958  0D5E  1109               	bcf	9,2	;volatile
  4959                           
  4960                           ;lcd.c: 8: RE1 = 0;
  4961  0D5F  1089               	bcf	9,1	;volatile
  4962                           
  4963                           ;lcd.c: 9: RE0 = 0;
  4964  0D60  1009               	bcf	9,0	;volatile
  4965                           
  4966                           ;lcd.c: 10: PORTD = databyte;
  4967  0D61  0822               	movf	lcdWriteControl@databyte,w
  4968  0D62  0088               	movwf	8	;volatile
  4969                           
  4970                           ;lcd.c: 11: RE2 = 1;
  4971  0D63  1509               	bsf	9,2	;volatile
  4972                           
  4973                           ;lcd.c: 12: RE2 = 0;
  4974  0D64  1109               	bcf	9,2	;volatile
  4975                           
  4976                           ;lcd.c: 13: _delay((unsigned long)((2)*(20000000/4000.0)));
  4977  0D65  300D               	movlw	13
  4978  0D66  00A1               	movwf	??_lcdWriteControl+1
  4979  0D67  30FB               	movlw	251
  4980  0D68  00A0               	movwf	??_lcdWriteControl
  4981  0D69                     u3677:	
  4982  0D69  0BA0               	decfsz	??_lcdWriteControl,f
  4983  0D6A  2D69               	goto	u3677
  4984  0D6B  0BA1               	decfsz	??_lcdWriteControl+1,f
  4985  0D6C  2D69               	goto	u3677
  4986  0D6D  2D6E               	nop2
  4987  0D6E  0008               	return
  4988  0D6F                     __end_of_lcdWriteControl:	
  4989                           
  4990                           	psect	text27
  4991  0D6F                     __ptext27:	
  4992 ;; *************** function _initializeADC *****************
  4993 ;; Defined at:
  4994 ;;		line 5 in file "adConv.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5008 ;;      Params:         0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0
  5010 ;;      Temps:          0       0       0       0       0
  5011 ;;      Totals:         0       0       0       0       0
  5012 ;;Total ram usage:        0 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    2
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_initialise
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _initializeADC
  5024  0D6F                     _initializeADC:	
  5025                           
  5026                           ;adConv.c: 6: TRISA = 0b11111111;
  5027                           
  5028                           ;incstack = 0
  5029                           ; Regs used in _initializeADC: [wreg]
  5030  0D6F  30FF               	movlw	255
  5031  0D70  1683               	bsf	3,5	;RP0=1, select bank1
  5032  0D71  1303               	bcf	3,6	;RP1=0, select bank1
  5033  0D72  0085               	movwf	5	;volatile
  5034                           
  5035                           ;adConv.c: 8: ADFM = 1;
  5036  0D73  179F               	bsf	31,7	;volatile
  5037                           
  5038                           ;adConv.c: 10: ADCS2 = 0;
  5039  0D74  131F               	bcf	31,6	;volatile
  5040                           
  5041                           ;adConv.c: 12: PCFG3 = 0;
  5042  0D75  119F               	bcf	31,3	;volatile
  5043                           
  5044                           ;adConv.c: 13: PCFG2 = 0;
  5045  0D76  111F               	bcf	31,2	;volatile
  5046                           
  5047                           ;adConv.c: 14: PCFG1 = 1;
  5048  0D77  149F               	bsf	31,1	;volatile
  5049                           
  5050                           ;adConv.c: 15: PCFG0 = 1;
  5051  0D78  141F               	bsf	31,0	;volatile
  5052                           
  5053                           ;adConv.c: 19: ADCON0 = 0b10000001;
  5054  0D79  3081               	movlw	129
  5055  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  5056  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  5057  0D7C  009F               	movwf	31	;volatile
  5058                           
  5059                           ;adConv.c: 23: ADIF = 0;
  5060  0D7D  130C               	bcf	12,6	;volatile
  5061                           
  5062                           ;adConv.c: 24: ADIE = 1;
  5063  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  5064  0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  5065  0D80  170C               	bsf	12,6	;volatile
  5066                           
  5067                           ;adConv.c: 25: PEIE = 1;
  5068  0D81  170B               	bsf	11,6	;volatile
  5069                           
  5070                           ;adConv.c: 26: GIE = 1;
  5071  0D82  178B               	bsf	11,7	;volatile
  5072  0D83  0008               	return
  5073  0D84                     __end_of_initializeADC:	
  5074                           
  5075                           	psect	text28
  5076  0E15                     __ptext28:	
  5077 ;; *************** function _isr *****************
  5078 ;; Defined at:
  5079 ;;		line 13 in file "main.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5093 ;;      Params:         0       0       0       0       0
  5094 ;;      Locals:         0       0       0       0       0
  5095 ;;      Temps:          4       0       0       0       0
  5096 ;;      Totals:         4       0       0       0       0
  5097 ;;Total ram usage:        4 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    1
  5100 ;; This function calls:
  5101 ;;		_debounceButtons
  5102 ;;		_flashLed
  5103 ;;		_lcdRefresh
  5104 ;; This function is called by:
  5105 ;;		Interrupt level 1
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _isr
  5111  0E15                     _isr:	
  5112                           
  5113                           ;main.c: 14: if (T0IF){
  5114  0E15  1D0B               	btfss	11,2	;volatile
  5115  0E16  2E29               	goto	i1l2242
  5116                           
  5117                           ;main.c: 15: T0IF = 0;
  5118  0E17  110B               	bcf	11,2	;volatile
  5119                           
  5120                           ;main.c: 16: TMR0 = 100;
  5121  0E18  3064               	movlw	100
  5122  0E19  0081               	movwf	1	;volatile
  5123                           
  5124                           ;main.c: 17: flashLed();
  5125  0E1A  120A  158A  2584  120A  158A  	fcall	_flashLed
  5126                           
  5127                           ;main.c: 18: debounceButtons();
  5128  0E1F  120A  158A  2752  120A  158A  	fcall	_debounceButtons
  5129                           
  5130                           ;main.c: 19: lcdRefresh();
  5131  0E24  120A  158A  24FE  120A  158A  	fcall	_lcdRefresh
  5132  0E29                     i1l2242:	
  5133                           
  5134                           ;main.c: 20: }
  5135                           ;main.c: 21: if(ADIF){
  5136  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5137  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5138  0E2B  1F0C               	btfss	12,6	;volatile
  5139  0E2C  2E2F               	goto	i1l91
  5140                           
  5141                           ;main.c: 22: conversionDone = 1;
  5142  0E2D  1470               	bsf	_conversionDone/(0+8),_conversionDone& (0+7)	;volatile
  5143                           
  5144                           ;main.c: 23: ADIF = 0;
  5145  0E2E  130C               	bcf	12,6	;volatile
  5146  0E2F                     i1l91:	
  5147  0E2F  0876               	movf	??_isr+3,w
  5148  0E30  00FF               	movwf	127
  5149  0E31  0875               	movf	??_isr+2,w
  5150  0E32  008A               	movwf	10
  5151  0E33  0874               	movf	??_isr+1,w
  5152  0E34  0084               	movwf	4
  5153  0E35  0E73               	swapf	??_isr^(0+-128),w
  5154  0E36  0083               	movwf	3
  5155  0E37  0EFE               	swapf	126,f
  5156  0E38  0E7E               	swapf	126,w
  5157  0E39  0009               	retfie
  5158  0E3A                     __end_of_isr:	
  5159                           
  5160                           	psect	intentry
  5161  0004                     __pintentry:	
  5162                           ;incstack = 0
  5163                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  5164                           
  5165  0004                     interrupt_function:	
  5166  007E                     saved_w	set	btemp
  5167  0004  00FE               	movwf	btemp
  5168  0005  0E03               	swapf	3,w
  5169  0006  00F3               	movwf	??_isr
  5170  0007  0804               	movf	4,w
  5171  0008  00F4               	movwf	??_isr+1
  5172  0009  080A               	movf	10,w
  5173  000A  00F5               	movwf	??_isr+2
  5174  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5175  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5176  000D  087F               	movf	btemp+1,w
  5177  000E  00F6               	movwf	??_isr+3
  5178  000F  120A  158A  2E15   	ljmp	_isr
  5179                           
  5180                           	psect	text29
  5181  0CFE                     __ptext29:	
  5182 ;; *************** function _lcdRefresh *****************
  5183 ;; Defined at:
  5184 ;;		line 22 in file "timer0.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5198 ;;      Params:         0       0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0
  5200 ;;      Temps:          1       0       0       0       0
  5201 ;;      Totals:         1       0       0       0       0
  5202 ;;Total ram usage:        1 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_isr
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           
  5212                           ;psect for function _lcdRefresh
  5213  0CFE                     _lcdRefresh:	
  5214                           
  5215                           ;timer0.c: 23: irLcdCounter++;
  5216                           
  5217                           ;incstack = 0
  5218                           ; Regs used in _lcdRefresh: [wreg+status,2+status,0]
  5219  0CFE  3001               	movlw	1
  5220  0CFF  00F2               	movwf	??_lcdRefresh
  5221  0D00  0872               	movf	??_lcdRefresh,w
  5222  0D01  1683               	bsf	3,5	;RP0=1, select bank1
  5223  0D02  1303               	bcf	3,6	;RP1=0, select bank1
  5224  0D03  07D7               	addwf	_irLcdCounter^(0+128),f	;volatile
  5225                           
  5226                           ;timer0.c: 24: if(irLcdCounter==250){
  5227  0D04  30FA               	movlw	250
  5228  0D05  0657               	xorwf	_irLcdCounter^(0+128),w	;volatile
  5229  0D06  1D03               	btfss	3,2
  5230  0D07  0008               	return
  5231                           
  5232                           ;timer0.c: 25: updateLcdIRData = 1;
  5233  0D08  1571               	bsf	_updateLcdIRData/(0+8),_updateLcdIRData& (0+7)	;volatile
  5234                           
  5235                           ;timer0.c: 26: irLcdCounter = 0;
  5236  0D09  01D7               	clrf	_irLcdCounter^(0+128)	;volatile
  5237  0D0A  0008               	return
  5238  0D0B                     __end_of_lcdRefresh:	
  5239                           
  5240                           	psect	text30
  5241  0D84                     __ptext30:	
  5242 ;; *************** function _flashLed *****************
  5243 ;; Defined at:
  5244 ;;		line 30 in file "timer0.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5258 ;;      Params:         0       0       0       0       0
  5259 ;;      Locals:         0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0
  5261 ;;      Totals:         0       0       0       0       0
  5262 ;;Total ram usage:        0 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_isr
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _flashLed
  5273  0D84                     _flashLed:	
  5274                           
  5275                           ;timer0.c: 31: rtcCounter++;
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _flashLed: [wreg+status,2+status,0]
  5279  0D84  3001               	movlw	1
  5280  0D85  1683               	bsf	3,5	;RP0=1, select bank1
  5281  0D86  1303               	bcf	3,6	;RP1=0, select bank1
  5282  0D87  07D5               	addwf	_rtcCounter^(0+128),f	;volatile
  5283  0D88  1803               	skipnc
  5284  0D89  0AD6               	incf	(_rtcCounter+1)^(0+128),f	;volatile
  5285  0D8A  3000               	movlw	0
  5286  0D8B  07D6               	addwf	(_rtcCounter+1)^(0+128),f	;volatile
  5287                           
  5288                           ;timer0.c: 32: if(rtcCounter == 500){
  5289  0D8C  30F4               	movlw	244
  5290  0D8D  0655               	xorwf	_rtcCounter^(0+128),w	;volatile
  5291  0D8E  1D03               	skipz
  5292  0D8F  0008               	return
  5293  0D90  0356               	decf	(_rtcCounter+1)^(0+128),w	;volatile
  5294  0D91  1D03               	btfss	3,2
  5295  0D92  0008               	return
  5296                           
  5297                           ;timer0.c: 33: RB5 = !RB5;
  5298  0D93  3020               	movlw	32
  5299  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0D96  0686               	xorwf	6,f
  5302                           
  5303                           ;timer0.c: 34: rtcCounter = 0;
  5304  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  5305  0D98  1303               	bcf	3,6	;RP1=0, select bank1
  5306  0D99  01D5               	clrf	_rtcCounter^(0+128)	;volatile
  5307  0D9A  01D6               	clrf	(_rtcCounter+1)^(0+128)	;volatile
  5308  0D9B  0008               	return
  5309  0D9C                     __end_of_flashLed:	
  5310                           
  5311                           	psect	text31
  5312  0F52                     __ptext31:	
  5313 ;; *************** function _debounceButtons *****************
  5314 ;; Defined at:
  5315 ;;		line 38 in file "timer0.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0
  5331 ;;      Temps:          1       0       0       0       0
  5332 ;;      Totals:         1       0       0       0       0
  5333 ;;Total ram usage:        1 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_isr
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _debounceButtons
  5344  0F52                     _debounceButtons:	
  5345                           
  5346                           ;timer0.c: 40: if(!RB0) {
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _debounceButtons: [wreg+status,2+status,0]
  5350  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  5351  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0F54  1806               	btfsc	6,0	;volatile
  5353  0F55  2F62               	goto	i1l2124
  5354                           
  5355                           ;timer0.c: 41: pbCounter++;
  5356  0F56  3001               	movlw	1
  5357  0F57  00F2               	movwf	??_debounceButtons
  5358  0F58  0872               	movf	??_debounceButtons,w
  5359  0F59  07F8               	addwf	_pbCounter,f	;volatile
  5360                           
  5361                           ;timer0.c: 42: if(pbCounter >10 &&pb0Released){
  5362  0F5A  300B               	movlw	11
  5363  0F5B  0278               	subwf	_pbCounter,w	;volatile
  5364  0F5C  1803               	btfsc	3,0
  5365  0F5D  1DF0               	btfss	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5366  0F5E  2F64               	goto	i1l2128
  5367                           
  5368                           ;timer0.c: 43: pb0Pressed = 1;
  5369  0F5F  1570               	bsf	_pb0Pressed/(0+8),_pb0Pressed& (0+7)	;volatile
  5370                           
  5371                           ;timer0.c: 44: pb0Released = 0;
  5372  0F60  11F0               	bcf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5373                           
  5374                           ;timer0.c: 45: }
  5375                           ;timer0.c: 46: }
  5376  0F61  2F64               	goto	i1l2128
  5377  0F62                     i1l2124:	
  5378                           
  5379                           ;timer0.c: 47: else{
  5380                           ;timer0.c: 48: pbCounter = 0;
  5381  0F62  01F8               	clrf	_pbCounter	;volatile
  5382                           
  5383                           ;timer0.c: 49: pb0Released = 1;
  5384  0F63  15F0               	bsf	_pb0Released/(0+8),_pb0Released& (0+7)	;volatile
  5385  0F64                     i1l2128:	
  5386                           
  5387                           ;timer0.c: 50: }
  5388                           ;timer0.c: 52: if(!RB1) {
  5389  0F64  1886               	btfsc	6,1	;volatile
  5390  0F65  2F72               	goto	i1l2138
  5391                           
  5392                           ;timer0.c: 53: pbCounter2++;
  5393  0F66  3001               	movlw	1
  5394  0F67  00F2               	movwf	??_debounceButtons
  5395  0F68  0872               	movf	??_debounceButtons,w
  5396  0F69  07F9               	addwf	_pbCounter2,f	;volatile
  5397                           
  5398                           ;timer0.c: 54: if(pbCounter2 >10 &&pb1Released){
  5399  0F6A  300B               	movlw	11
  5400  0F6B  0279               	subwf	_pbCounter2,w	;volatile
  5401  0F6C  1803               	btfsc	3,0
  5402  0F6D  1EF0               	btfss	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5403  0F6E  2F74               	goto	i1l2142
  5404                           
  5405                           ;timer0.c: 55: pb1Pressed = 1;
  5406  0F6F  1670               	bsf	_pb1Pressed/(0+8),_pb1Pressed& (0+7)	;volatile
  5407                           
  5408                           ;timer0.c: 56: pb1Released = 0;
  5409  0F70  12F0               	bcf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5410                           
  5411                           ;timer0.c: 57: }
  5412                           ;timer0.c: 58: }
  5413  0F71  2F74               	goto	i1l2142
  5414  0F72                     i1l2138:	
  5415                           
  5416                           ;timer0.c: 59: else{
  5417                           ;timer0.c: 60: pbCounter2 = 0;
  5418  0F72  01F9               	clrf	_pbCounter2	;volatile
  5419                           
  5420                           ;timer0.c: 61: pb1Released = 1;
  5421  0F73  16F0               	bsf	_pb1Released/(0+8),_pb1Released& (0+7)	;volatile
  5422  0F74                     i1l2142:	
  5423                           
  5424                           ;timer0.c: 62: }
  5425                           ;timer0.c: 63: if(!RB2) {
  5426  0F74  1906               	btfsc	6,2	;volatile
  5427  0F75  2F84               	goto	i1l2152
  5428                           
  5429                           ;timer0.c: 64: pbCounter3++;
  5430  0F76  3001               	movlw	1
  5431  0F77  00F2               	movwf	??_debounceButtons
  5432  0F78  0872               	movf	??_debounceButtons,w
  5433  0F79  1683               	bsf	3,5	;RP0=1, select bank1
  5434  0F7A  1303               	bcf	3,6	;RP1=0, select bank1
  5435  0F7B  07D8               	addwf	_pbCounter3^(0+128),f	;volatile
  5436                           
  5437                           ;timer0.c: 65: if(pbCounter3 >10 &&pb2Released){
  5438  0F7C  300B               	movlw	11
  5439  0F7D  0258               	subwf	_pbCounter3^(0+128),w	;volatile
  5440  0F7E  1803               	btfsc	3,0
  5441  0F7F  1FF0               	btfss	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5442  0F80  2F88               	goto	i1l2156
  5443                           
  5444                           ;timer0.c: 66: pb2Pressed = 1;
  5445  0F81  1770               	bsf	_pb2Pressed/(0+8),_pb2Pressed& (0+7)	;volatile
  5446                           
  5447                           ;timer0.c: 67: pb2Released = 0;
  5448  0F82  13F0               	bcf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5449                           
  5450                           ;timer0.c: 68: }
  5451                           ;timer0.c: 69: }
  5452  0F83  2F88               	goto	i1l2156
  5453  0F84                     i1l2152:	
  5454                           
  5455                           ;timer0.c: 70: else{
  5456                           ;timer0.c: 71: pbCounter3 = 0;
  5457  0F84  1683               	bsf	3,5	;RP0=1, select bank1
  5458  0F85  1303               	bcf	3,6	;RP1=0, select bank1
  5459  0F86  01D8               	clrf	_pbCounter3^(0+128)	;volatile
  5460                           
  5461                           ;timer0.c: 72: pb2Released = 1;
  5462  0F87  17F0               	bsf	_pb2Released/(0+8),_pb2Released& (0+7)	;volatile
  5463  0F88                     i1l2156:	
  5464                           
  5465                           ;timer0.c: 73: }
  5466                           ;timer0.c: 74: if(!RB3) {
  5467  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  5468  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  5469  0F8A  1986               	btfsc	6,3	;volatile
  5470  0F8B  2F9B               	goto	i1l2166
  5471                           
  5472                           ;timer0.c: 75: pbCounter4++;
  5473  0F8C  3001               	movlw	1
  5474  0F8D  00F2               	movwf	??_debounceButtons
  5475  0F8E  0872               	movf	??_debounceButtons,w
  5476  0F8F  1683               	bsf	3,5	;RP0=1, select bank1
  5477  0F90  1303               	bcf	3,6	;RP1=0, select bank1
  5478  0F91  07D9               	addwf	_pbCounter4^(0+128),f	;volatile
  5479                           
  5480                           ;timer0.c: 76: if(pbCounter4 >10 &&pb3Released){
  5481  0F92  300B               	movlw	11
  5482  0F93  0259               	subwf	_pbCounter4^(0+128),w	;volatile
  5483  0F94  1C03               	skipc
  5484  0F95  0008               	return
  5485  0F96  1CF1               	btfss	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5486  0F97  0008               	return
  5487                           
  5488                           ;timer0.c: 77: pb3Pressed = 1;
  5489  0F98  1471               	bsf	_pb3Pressed/(0+8),_pb3Pressed& (0+7)	;volatile
  5490                           
  5491                           ;timer0.c: 78: pb3Released = 0;
  5492  0F99  10F1               	bcf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5493                           
  5494                           ;timer0.c: 79: }
  5495                           ;timer0.c: 80: }
  5496  0F9A  0008               	return
  5497  0F9B                     i1l2166:	
  5498                           
  5499                           ;timer0.c: 81: else{
  5500                           ;timer0.c: 82: pbCounter4 = 0;
  5501  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  5502  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  5503  0F9D  01D9               	clrf	_pbCounter4^(0+128)	;volatile
  5504                           
  5505                           ;timer0.c: 83: pb3Released = 1;
  5506  0F9E  14F1               	bsf	_pb3Released/(0+8),_pb3Released& (0+7)	;volatile
  5507  0F9F  0008               	return
  5508  0FA0                     __end_of_debounceButtons:	
  5509  007E                     btemp	set	126	;btemp
  5510  007E                     wtemp	set	126
  5511  007E                     wtemp0	set	126
  5512  0080                     wtemp1	set	128
  5513  0082                     wtemp2	set	130
  5514  0084                     wtemp3	set	132
  5515  0086                     wtemp4	set	134
  5516  0088                     wtemp5	set	136
  5517  007F                     wtemp6	set	127
  5518  007E                     ttemp	set	126
  5519  007E                     ttemp0	set	126
  5520  0081                     ttemp1	set	129
  5521  0084                     ttemp2	set	132
  5522  0087                     ttemp3	set	135
  5523  007F                     ttemp4	set	127
  5524  007E                     ltemp	set	126
  5525  007E                     ltemp0	set	126
  5526  0082                     ltemp1	set	130
  5527  0086                     ltemp2	set	134
  5528  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     25      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_debounceButtons
    _isr->_lcdRefresh

Critical Paths under _main in BANK0

    _main->_moveDeg
    _readADCMeter->_round
    ___ftmul->___ftpack
    ___awtoft->___ftpack
    _moveDeg->_round
    _round->___ftadd
    _trunc->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    ___ftneg->___altoft
    ___ftadd->_trunc
    _move->_lcdWriteToDigitBCD
    ___ftdiv->___ftneg
    _initialise->_initializeMotor
    _setupLCD->_lcdWriteControl
    _initializeMotor->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->___wmul
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readADCMeter

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   42191
                                             19 BANK1      6     6      0
                         _initialise
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                               _move
                            _moveDeg
                        _readADCData
                       _readADCMeter
                 _startADCConversion
 ---------------------------------------------------------------------------------
 (1) _startADCConversion                                   2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _readADCMeter                                        21    19      2   20671
                                             77 BANK0      2     0      2
                                              0 BANK1     19    19      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _readADCData
                              _round
 ---------------------------------------------------------------------------------
 (2) _readADCData                                          4     2      2      34
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2746
                                              8 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2326
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _moveDeg                                             14    11      3   14925
                                             77 BANK0      3     0      3
                                              0 BANK1     11    11      0
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                               _move
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    8092
                                             71 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                9     6      3    3663
                                             49 BANK0      9     6      3
                           ___altoft
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     428
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     464
                                             35 BANK0     14    10      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             8     4      4    2397
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     240
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3833
                                             58 BANK0     13     7      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (2) _move                                                 5     4      1    2476
                                             17 BANK0      5     4      1
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) ___ftge                                              12     6      6     322
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2938
                                             19 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2128
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0    2024
                      _initializeADC
                    _initializeMotor
                   _initializeTimer0
                           _setupLCD
 ---------------------------------------------------------------------------------
 (2) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _initializeTimer0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeMotor                                      1     1      0    1993
                                             17 BANK0      1     1      0
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (3) _lcdWriteToDigitBCD                                  11     7      4    1928
                                              6 BANK0     11     7      4
                             ___wmul
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (4) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     266
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (4) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _initializeADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              1 COMMON     4     4      0
                    _debounceButtons
                           _flashLed
                         _lcdRefresh
 ---------------------------------------------------------------------------------
 (7) _lcdRefresh                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _flashLed                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _debounceButtons                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise
     _initializeADC
     _initializeMotor
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _initializeTimer0
     _setupLCD
       _lcdWriteControl
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     ___wmul
     _lcdWriteData
   _move
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       ___wmul
       _lcdWriteData
   _moveDeg
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftneg
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _move
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         ___wmul
         _lcdWriteData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _readADCData
   _readADCMeter
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _readADCData
     _round
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _frexp (ARG)
   _startADCConversion

 _isr (ROOT)
   _debounceButtons
   _flashLed
   _lcdRefresh

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     19      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      94      12        0.0%
ABS                  0      0      94       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Apr 08 17:38:43 2016

                   ___altoft@exp 002E                                pc 0002                      __CFG_CP$OFF 0000  
                  ___altoft@sign 002F                               _GO 00FA                               l99 046C  
            ?_startADCConversion 0072                               fsr 0004              ___wmul@multiplicand 0022  
                   ___ftadd@exp1 0066                     ___ftadd@exp2 0065                     ___ftadd@sign 0064  
                            l105 04B1                              l136 063C                              l420 0DFE  
                            l332 060C                              l612 00DD                              l581 076B  
                            l672 0719                              l588 0780                              l589 0788  
                            _GIE 005F                              _RB0 0030                              _RB1 0031  
                            _RB2 0032                              _RB3 0033                              _RB4 0034  
                            _RB5 0035                              _RE0 0048                              _RE1 0049  
                            _RE2 004A                              _PS0 0408                              _PS1 0409  
                            _PS2 040A                     __CFG_CPD$OFF 0000                              _PSA 040B  
                            _isr 0E15                              fsr0 0004                              indf 0000  
                   __CFG_FOSC$HS 0000                     ?_readADCData 0020                   ??_lcdWriteData 0020  
                   __CFG_LVP$OFF 0000                     ___ftdiv@cntr 003D                     ___ftdiv@sign 0042  
                           l2040 07CA                             l2044 07F1                             l2310 0744  
                           l2320 0770                             l2312 0750                             l2322 077A  
                           l2314 0755                             l2306 073D                             l2420 05BC  
                           l2404 057D                             l2500 00EF                             l2430 05D7  
                           l2422 05C8                             l2414 0594                             l2352 0DF6  
                           l2440 05F2                             l2416 05A8                             l2504 0101  
                           l2418 05B4                             l2514 0124                             l2444 05FF  
                           l2436 05E5                             l1660 06BF                             l2454 005E  
                           l2374 0EDC                             l2534 0F24                             l2712 054F  
                           l2704 0530                             l2632 0651                             l2640 0663  
                           l2464 0074                             l2376 0EEE                             l1680 0701  
                           l2618 062B                             l2482 00A3                             l2458 0065  
                           l2386 0E98                             l2484 00AF                             l2476 008E  
                           l1692 072A                             l2732 0355                             l2638 0662  
                           l2494 00CD                             l2486 00B4                             l1686 070E  
                           l1678 06F1                             l2726 033F                             l2648 0676  
                           l2656 0618                             l2496 00D9                             l2488 00B8  
                           l1688 071C                             l2760 03CC                             l2744 0394  
                           l2840 0471                             l2690 04EB                             l2818 02CD  
                           l2674 0E46                             l2826 0404                             l2684 04D5  
                           l2756 03BC                             l2748 03A4                             l2860 049A  
                           l2854 048E                             l2848 0482                             l2866 04AA  
                           _ADIE 0466                             _ADIF 0066                             _ADFM 04FF  
                           ?_isr 0072             ??_startADCConversion 0020                             _T0IF 005A  
                           _T0CS 040D                             u2201 07BD                             u2202 07BE  
                           u2203 07C3                             _T0SE 040C                             u2204 07C4  
                           u2221 07E4                             u2222 07E5                             u2223 07EA  
                           u2224 07EB                             u3035 008F                             u3125 00CE  
                           u1525 06C6                             u3065 00A4                             u1555 06F2  
                           u3095 00B9                             u3345 04FD                             u1585 0710  
                           u3425 0361                             u3355 050F                             u3515 03CD  
                           u3435 0373                             u3365 0531                             u2805 0EE1  
                           u3525 03D5                             u2735 078F                             u2655 0749  
                           u3375 0542                             u3385 0550                             u3465 03A5  
                           u2675 0764                             u3475 03AD                             _PEIE 005E  
                           u2765 0DFF                             u3637 04B7                             u2775 0E06  
                           u2695 0773                             u3647 0D11                             u3657 0699  
                           u3667 0D56                             u3677 0D69                             i1l91 0E2F  
                           _TMR0 0001                     __CFG_WRT$OFF 0000                             _main 03FA  
                   ___ftpack@arg 0020                     ___ftpack@exp 0023                             _move 0614  
                           btemp 007E                             ltemp 007E                             start 0012  
                           ttemp 007E                             wtemp 007E                     ___ftmul@cntr 0036  
                   ___ftmul@sign 0037                    ?_readADCMeter 006D                     ___fttol@exp1 0050  
                   ___fttol@lval 004C                            ??_isr 0073                            _ADCS2 04FE  
                          ?_main 0072                  __end_of___ftadd 013E                            ?_move 0031  
                  __CFG_WDTE$OFF 0000                  __end_of___ftdiv 0575                  __end_of___ftneg 0CFE  
                __end_of___ftmul 03FA                  __end_of___fttol 0733                            _PCFG0 04F8  
                          _PCFG1 04F9                            _PCFG2 04FA                            _PCFG3 04FB  
                          _PORTC 0007                            _PORTD 0008                            _PORTE 0009  
                          _TRISA 0085                            _TRISB 0086                            _TRISC 0087  
                          _TRISD 0088                            _TRISE 0089                ??_initializeMotor 0031  
                  ___awtoft@sign 002D       __end_of_lcdWriteToDigitBCD 0614                            _cstep 0077  
                          _frexp 0E8A                            _errno 00D1                ??_debounceButtons 0072  
                  ___ftpack@sign 0024                            _round 0FA0                            _trunc 0F08  
                __end_of_moveDeg 0327                   __pbitbssCOMMON 0380                   __CFG_BOREN$OFF 0000  
                          pclath 000A                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            move@i 0035  
             main@resultInMeters 00B7                            ttemp0 007E                            ttemp1 0081  
                          ttemp2 0084                            ttemp3 0087                            ttemp4 007F  
                          status 0003                            wtemp0 007E                            wtemp1 0080  
                          wtemp2 0082                            wtemp3 0084                            wtemp4 0086  
                          wtemp5 0088                            wtemp6 007F                   ??_readADCMeter 006F  
                __initialization 0015                     __end_of_main 04BD                     __end_of_move 06A5  
       __size_of_lcdWriteControl 0014                           ??_main 00B3                    ___fttol@sign1 004B  
                         ??_move 0032             __end_of_lcdSetCursor 0CF4                           _ADCON0 001F  
                         ?_frexp 0020                 __end_of___altoft 0F08                           _ADRESH 001E  
                         _ADRESL 009E                 __end_of___awtoft 0E5F                 __end_of___ftpack 07A1  
                         ?_round 0067                   _conversionDone 0380                           ?_trunc 0051  
                         i1l2124 0F62                           i1l2142 0F74                           i1l2152 0F84  
                         i1l2128 0F64                           i1l2138 0F72                           i1l2242 0E29  
                         i1l2156 0F88                           i1l2166 0F9B                           _TMR0IE 005D  
              ?_initializeTimer0 0072               ??_initializeTimer0 0020                   __CFG_PWRTE$OFF 0000  
               __end_of_flashLed 0D9C                           ___ftge 07A1                           ___wmul 0DF2  
           __end_of_lcdWriteData 0D5B                        ??___ftadd 0060                        ??___ftdiv 0039  
                      ??___ftneg 0033                        ??___ftmul 002E                        ??___fttol 0047  
          ___ftmul@f3_as_product 0033                 __end_of_setupLCD 0E8A                        ??_moveDeg 00A0  
                         saved_w 007E           __size_of_initializeADC 0015                           round@f 006A  
                         round@x 0067                           trunc@i 0055                           trunc@x 0051  
           __size_of_readADCData 000F          __end_of__initialization 0031                       ___altoft@c 0028  
                     ___ftadd@f1 005A                       ___ftadd@f2 005D                       ___ftge@ff1 0020  
                     ___ftge@ff2 0023                       ___ftdiv@f1 0036                       ___ftdiv@f2 0033  
                     ___ftdiv@f3 003E                       ___ftneg@f1 0030                       ___awtoft@c 0028  
                     ___ftmul@f1 0028                       ___ftmul@f2 002B                       ___fttol@f1 0043  
                 __pcstackCOMMON 0072                     __pidataBANK1 0D9C                       _pb0Pressed 0382  
                     _pb1Pressed 0384                    __end_of_frexp 0EC6                       _pb2Pressed 0386  
                  __end_of_round 1000                       _pb3Pressed 0388                    __end_of_trunc 0F52  
              ??_lcdWriteControl 0020             __end_of_readADCMeter 0238                          ??_frexp 0024  
                        ??_round 006A                          ??_trunc 0054                       __pbssBANK1 00D1  
           readADCData@ADCResult 0022              lcdSetCursor@address 0023                    _initializeADC 0D6F  
                     __pmaintext 03FA                          ?___ftge 0020                          ?___wmul 0020  
                _initializeMotor 0DD0                       __pintentry 0004            __size_of_lcdSetCursor 0009  
                      ?___altoft 0028                       _lcdRefresh 0CFE                        ?___awtoft 0028  
                     _pbCounter2 0079                       _pbCounter3 00D8                       _pbCounter4 00D9  
                      ?___ftpack 0020                  _debounceButtons 0F52                        ?_flashLed 0072  
    __size_of_startADCConversion 000E                     _irLcdCounter 00D7            __size_of_lcdWriteData 0013  
                   _lcdSetCursor 0CEB                   ?_initializeADC 0072               _lcdWriteToDigitBCD 0575  
                  move@direction 0031                        ?_setupLCD 0072                  __size_of___ftge 005F  
                        ___ftadd 0035                          ___ftdiv 04BD                          ___ftneg 0CF4  
                __size_of___wmul 0023                          ___ftmul 0327                          ___fttol 06A5  
                     ??___altoft 002C              ?_lcdWriteToDigitBCD 0026                       ??___awtoft 002B  
                     ??___ftpack 0025                       _initialise 0DB4                          __ptext1 0D0B  
                        __ptext2 013E                          __ptext3 0D28                          __ptext4 0327  
                        __ptext5 0E3A                          __ptext6 0238                          __ptext7 0FA0  
                        __ptext8 0F08                          __ptext9 0E8A                    readADCMeter@k 00A3  
                  readADCMeter@m 00A6                     __size_of_isr 0025                          _moveDeg 0238  
        readADCMeter@rawInverted 00A0                       ??_flashLed 0072                     _lcdWriteData 0D48  
           end_of_initialization 0031             ??_lcdWriteToDigitBCD 002A               moveDeg@stepsToMove 00AA  
        __end_of_initializeMotor 0DF2                       _rtcCounter 00D5          __end_of_debounceButtons 0FA0  
                     ??_setupLCD 0023                      ?_lcdRefresh 0072        __size_of_initializeTimer0 000F  
          __size_of_readADCMeter 00FA                       _wholeSteps 00C9       lcdWriteToDigitBCD@showSign 0029  
                    ___ftdiv@exp 0041                  ??_initializeADC 0020                       main@result 00B5  
        readADCMeter@resultInInt 00B1                      ___ftmul@exp 0032                      _pb0Released 0383  
                   _readADCMeter 013E                      _pb1Released 0385                   __end_of___ftge 0800  
                    _pb2Released 0387                  _lcdWriteControl 0D5B                   __end_of___wmul 0E15  
                    _pb3Released 0389                      ?_initialise 0072              start_initialization 0015  
                  ??_readADCData 0022                      __end_of_isr 0E3A                       frexp@value 0020  
            __size_of_lcdRefresh 000D                 ?_initializeMotor 0072                 ?_debounceButtons 0072  
                       ??___ftge 0026                         ??___wmul 0024                       init_fetch0 0D37  
             readADCMeter@result 00A9                 _readADCMeter$681 00AC                      __pdataBANK1 00B9  
              __size_of___altoft 0042                __size_of___awtoft 0025                __size_of___ftpack 006E  
                    __pbssCOMMON 0077                        ___latbits 0002                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                __size_of_flashLed 0018              __end_of_readADCData 0D37  
            __size_of_initialise 001C  lcdWriteToDigitBCD@ThousandDigit 002D          __end_of_lcdWriteControl 0D6F  
                      _halfSteps 00B9                       moveDeg@deg 006D                         ?___ftadd 005A  
                       ?___ftdiv 0033                         ?___ftneg 0030                        _pbCounter 0078  
                       ?___ftmul 0028                         ?___fttol 0043                __size_of_setupLCD 002B  
               _initializeTimer0 0D19                         ?_moveDeg 006D                        _nrOfSteps 00D3  
                readADCMeter@raw 00AF       __end_of_startADCConversion 0D19                   __size_of_frexp 003C  
                 __size_of_round 0060                   __size_of_trunc 004A          lcdWriteControl@databyte 0022  
              interrupt_function 0004                   ___wmul@product 0024                     ??_lcdRefresh 0072  
              ___wmul@multiplier 0020   lcdWriteToDigitBCD@HundredDigit 002C                      _readADCData 0D28  
           lcdWriteData@databyte 0022      __size_of_lcdWriteToDigitBCD 009F               __end_of_lcdRefresh 0D0B  
                      frexp@eptr 0023                 ?_lcdWriteControl 0072                 __size_of___ftadd 0109  
               __size_of___ftdiv 00B8                 __size_of___ftneg 000A                         ___altoft 0EC6  
               __size_of___ftmul 00D3                 __size_of___fttol 008E                     ??_initialise 0032  
                       ___awtoft 0E3A                         ___ftpack 0733                 __size_of_moveDeg 00EF  
                       __ptext10 06A5                         __ptext11 0EC6                         __ptext20 0D19  
                       __ptext12 0CF4                         __ptext21 0DD0                         __ptext13 0035  
                       __ptext30 0D84                         __ptext22 0575                         __ptext14 0614  
                       __ptext31 0F52                         __ptext23 0D48                         __ptext15 07A1  
                       __ptext24 0DF2                         __ptext16 04BD                         __ptext25 0CEB  
                       __ptext17 0733                         __ptext26 0D5B                         __ptext18 0DB4  
                       __ptext27 0D6F                         __ptext19 0E5F                         __ptext28 0E15  
                       __ptext29 0CFE                         _flashLed 0D84                        move@steps 0034  
                     trunc@expon 0058                    __size_of_main 00C3                    __size_of_move 0091  
             __end_of_initialise 0DD0            __end_of_initializeADC 0D84                         _setupLCD 0E5F  
    lcdWriteToDigitBCD@OnesDigit 002F                      _moveDeg$680 00A7                      _moveDeg$678 00A1  
                    _moveDeg$679 00A4      lcdWriteToDigitBCD@TensDigit 002B                         init_ram0 0D3B  
                _updateLcdIRData 038A                         intlevel1 0000         __end_of_initializeTimer0 0D28  
                  ?_lcdSetCursor 0072         lcdWriteToDigitBCD@digits 0028         __size_of_initializeMotor 0022  
                    _motorToggle 0381         __size_of_debounceButtons 004E                    ?_lcdWriteData 0072  
         lcdWriteToDigitBCD@data 0026           lcdWriteToDigitBCD@sign 002E                   ??_lcdSetCursor 0023  
             _startADCConversion 0D0B  
